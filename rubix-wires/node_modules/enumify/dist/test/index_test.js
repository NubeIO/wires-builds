"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const assert_1 = require("assert");
const src_1 = require("../src");
test('Color: basic features', () => {
    class Color extends src_1.Enumify {
    }
    Color.red = new Color();
    Color.orange = new Color();
    Color.yellow = new Color();
    Color.green = new Color();
    Color.blue = new Color();
    Color.purple = new Color();
    Color._ = Color.closeEnum();
    // Instance properties
    assert_1.strict.equal(Color.red.enumKey, 'red');
    assert_1.strict.equal(Color.red.enumOrdinal, 0);
    // Prototype methods
    assert_1.strict.equal('Color: ' + Color.red, // .toString()
    'Color: Color.red');
    // Static `.enumKeys` and static `.enumValues`
    assert_1.strict.deepEqual(Color.enumKeys, ['red', 'orange', 'yellow', 'green', 'blue', 'purple']);
    assert_1.strict.deepEqual(Color.enumValues, [Color.red, Color.orange, Color.yellow,
        Color.green, Color.blue, Color.purple]);
    // Static `.enumValueOf()`
    assert_1.strict.equal(Color.enumValueOf('yellow'), Color.yellow);
    // Iterability
    const result = [];
    const iterated = [...Color];
    for (const c of Color) {
        result.push('Color: ' + c);
    }
    assert_1.strict.deepEqual(iterated, [
        Color.red,
        Color.orange,
        Color.yellow,
        Color.green,
        Color.blue,
        Color.purple,
    ]);
});
test('Instance properties', () => {
    class Weekday extends src_1.Enumify {
        constructor(isWorkDay) {
            super();
            this.isWorkDay = isWorkDay;
        }
    }
    Weekday.monday = new Weekday(true);
    Weekday.tuesday = new Weekday(true);
    Weekday.wednesday = new Weekday(true);
    Weekday.thursday = new Weekday(true);
    Weekday.friday = new Weekday(true);
    Weekday.saturday = new Weekday(false);
    Weekday.sunday = new Weekday(false);
    Weekday._ = Weekday.closeEnum();
    assert_1.strict.equal(Weekday.sunday.isWorkDay, false);
    assert_1.strict.equal(Weekday.wednesday.isWorkDay, true);
});
test('switch', () => {
    class Weekday extends src_1.Enumify {
    }
    Weekday.monday = new Weekday();
    Weekday.tuesday = new Weekday();
    Weekday.wednesday = new Weekday();
    Weekday.thursday = new Weekday();
    Weekday.friday = new Weekday();
    Weekday.saturday = new Weekday();
    Weekday.sunday = new Weekday();
    Weekday._ = Weekday.closeEnum();
    function nextDay(weekday) {
        switch (weekday) {
            case Weekday.monday:
                return Weekday.tuesday;
            case Weekday.tuesday:
                return Weekday.wednesday;
            case Weekday.wednesday:
                return Weekday.thursday;
            case Weekday.thursday:
                return Weekday.friday;
            case Weekday.friday:
                return Weekday.saturday;
            case Weekday.saturday:
                return Weekday.sunday;
            case Weekday.sunday:
                return Weekday.monday;
            default:
                throw new Error();
        }
    }
    assert_1.strict.equal(nextDay(Weekday.tuesday), Weekday.wednesday);
    assert_1.strict.equal(nextDay(Weekday.sunday), Weekday.monday);
});
test('Instance getters', () => {
    class Weekday extends src_1.Enumify {
        constructor(props) {
            super();
            Object.defineProperties(this, Object.getOwnPropertyDescriptors(props));
        }
    }
    Weekday.monday = new Weekday({
        get nextDay() { return Weekday.tuesday; }
    });
    Weekday.tuesday = new Weekday({
        get nextDay() { return Weekday.wednesday; }
    });
    Weekday.wednesday = new Weekday({
        get nextDay() { return Weekday.thursday; }
    });
    Weekday.thursday = new Weekday({
        get nextDay() { return Weekday.friday; }
    });
    Weekday.friday = new Weekday({
        get nextDay() { return Weekday.saturday; }
    });
    Weekday.saturday = new Weekday({
        get nextDay() { return Weekday.sunday; }
    });
    Weekday.sunday = new Weekday({
        get nextDay() { return Weekday.monday; }
    });
    Weekday._ = Weekday.closeEnum();
    assert_1.strict.equal(Weekday.friday.nextDay, Weekday.saturday);
    assert_1.strict.equal(Weekday.sunday.nextDay, Weekday.monday);
});
test('Arbitrary enum values', () => {
    class Mode extends src_1.Enumify {
        constructor(n) {
            super();
            this.n = n;
        }
    }
    Mode.user_r = new Mode(0b100000000);
    Mode.user_w = new Mode(0b010000000);
    Mode.user_x = new Mode(0b001000000);
    Mode.group_r = new Mode(0b000100000);
    Mode.group_w = new Mode(0b000010000);
    Mode.group_x = new Mode(0b000001000);
    Mode.all_r = new Mode(0b000000100);
    Mode.all_w = new Mode(0b000000010);
    Mode.all_x = new Mode(0b000000001);
    Mode._ = Mode.closeEnum();
    assert_1.strict.equal(Mode.user_r.n | Mode.user_w.n | Mode.user_x.n |
        Mode.group_r.n | Mode.group_x.n |
        Mode.all_r.n | Mode.all_x.n, 0o755);
    assert_1.strict.equal(Mode.user_r.n | Mode.user_w.n | Mode.user_x.n |
        Mode.group_r.n, 0o740);
});
//# sourceMappingURL=index_test.js.map
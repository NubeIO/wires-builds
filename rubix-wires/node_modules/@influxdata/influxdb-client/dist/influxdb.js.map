{"version":3,"file":"influxdb.js","sources":["../src/options.ts","../src/errors.ts","../src/util/escape.ts","../src/util/currentTime.ts","../src/query/FluxTableMetaData.ts","../src/query/FluxTableColumn.ts","../src/query/flux.ts","../src/observable/symbol.ts","../src/Point.ts","../src/impl/Logger.ts","../src/impl/retryStrategy.ts","../src/impl/RetryBuffer.ts","../src/impl/WriteApiImpl.ts","../src/impl/pureJsChunkCombiner.ts","../src/impl/completeCommunicationObserver.ts","../src/impl/version.ts","../src/impl/browser/FetchTransport.ts","../src/QueryApi.ts","../src/impl/ChunksToLines.ts","../src/util/LineSplitter.ts","../src/impl/linesToTables.ts","../src/impl/ObservableQuery.ts","../src/impl/QueryApiImpl.ts","../src/InfluxDB.ts"],"sourcesContent":["import {Transport} from './transport'\nimport WriteApi from './WriteApi'\n\n/**\n * Option for the communication with InfluxDB server.\n */\nexport interface ConnectionOptions {\n  /** base URL */\n  url: string\n  /** authentication token */\n  token?: string\n  /** socket timeout */\n  timeout?: number\n  /** extra options for the transport layer */\n  transportOptions?: {[key: string]: any}\n}\n\n/** default connection options */\nexport const DEFAULT_ConnectionOptions: Partial<ConnectionOptions> = {\n  timeout: 10000,\n}\n\n/**\n * Options that configure strategy for retrying failed requests.\n */\nexport interface RetryDelayStrategyOptions {\n  /** include random milliseconds when retrying HTTP calls */\n  retryJitter: number\n  /** minimum delay when retrying write (milliseconds) */\n  minRetryDelay: number\n  /** maximum delay when retrying write (milliseconds) */\n  maxRetryDelay: number\n  /** base for the exponential retry delay, the next delay is computed as `minRetryDelay * exponentialBase^(attempts-1) + random(retryJitter)` */\n  exponentialBase: number\n}\n\n/**\n * Options that configure strategy for retrying failed InfluxDB write operations.\n */\nexport interface WriteRetryOptions extends RetryDelayStrategyOptions {\n  /**\n   * writeFailed is called to inform about write error\n   * @param this - the instance of the API that failed\n   * @param error - write error\n   * @param lines - failed lines\n   * @param attempts - a number of failed attempts to write the lines\n   * @returns a Promise to force the API to use it as a result of the flush operation,\n   * void/undefined to continue with default retry mechanism\n   */\n  writeFailed(\n    this: WriteApi,\n    error: Error,\n    lines: Array<string>,\n    attempts: number\n  ): Promise<void> | void\n  /** max number of retries when write fails */\n  maxRetries: number\n  /** the maximum size of retry-buffer (in lines) */\n  maxBufferLines: number\n}\n\n/**\n * Options used by {@link WriteApi} .\n */\nexport interface WriteOptions extends WriteRetryOptions {\n  /** max number of records to send in a batch   */\n  batchSize: number\n  /** delay between data flushes in milliseconds, at most `batch size` records are sent during flush  */\n  flushInterval: number\n  /** default tags, unescaped */\n  defaultTags?: Record<string, string>\n}\n\n/** default RetryDelayStrategyOptions */\nexport const DEFAULT_RetryDelayStrategyOptions = Object.freeze({\n  retryJitter: 200,\n  minRetryDelay: 5000,\n  maxRetryDelay: 180000,\n  exponentialBase: 5,\n})\n\n/** default writeOptions */\nexport const DEFAULT_WriteOptions: WriteOptions = Object.freeze({\n  batchSize: 1000,\n  flushInterval: 60000,\n  writeFailed: function() {},\n  maxRetries: 3,\n  maxBufferLines: 32_000,\n  ...DEFAULT_RetryDelayStrategyOptions,\n})\n\n/**\n * Options used by {@link InfluxDB} .\n */\nexport interface ClientOptions extends ConnectionOptions {\n  /** supplies and overrides default writing options */\n  writeOptions?: Partial<WriteOptions>\n  /** specifies custom transport */\n  transport?: Transport\n}\n\n/**\n * Precission for write operations.\n * See {@link https://v2.docs.influxdata.com/v2.0/api/#operation/PostWrite }\n */\nexport const enum WritePrecision {\n  /** nanosecond */\n  ns = 'ns',\n  /* microsecond */\n  us = 'us',\n  /** millisecond */\n  ms = 'ms',\n  /* second */\n  s = 's',\n}\nexport type WritePrecisionType = keyof typeof WritePrecision | WritePrecision\n\n/**\n * Settings that control the way of how a {@link Point} is serialized\n * to a protocol line.\n */\nexport interface PointSettings {\n  defaultTags?: {[key: string]: string}\n  convertTime?: (\n    value: string | number | Date | undefined\n  ) => string | undefined\n}\n","/**\n * Strategy for calculating retry delays.\n */\nexport interface RetryDelayStrategy {\n  /**\n   * Returns delay for a next retry\n   * @param error - reason for retrying\n   * @param failedAttempts - a count of already failed attempts, 1 being the first\n   * @returns milliseconds to wait before retrying\n   */\n  nextDelay(error?: Error, failedAttempts?: number): number\n  /** Implementation should reset its state, this is mandatory to call upon success.  */\n  success(): void\n}\n\n/**\n * Interface for errors to inform that an associated operation can be retried.\n */\nexport interface RetriableDecision {\n  /**\n   * Informs whether this can be retried.\n   */\n  canRetry(): boolean\n  /**\n   * Get the delay in milliseconds to retry the action.\n   * @returns 0 to let the implementation decide, miliseconds delay otherwise\n   */\n  retryAfter(): number\n}\n\nconst retriableStatusCodes = [404, 408, 425, 429, 500, 502, 503, 504]\n/** isStatusCodeRetriable checks whether the supplied HTTP status code is retriable. */\nexport function isStatusCodeRetriable(statusCode: number): boolean {\n  return retriableStatusCodes.includes(statusCode)\n}\n\n/** IllegalArgumentError is thrown when illegal argument is supplied. */\nexport class IllegalArgumentError extends Error {\n  /* istanbul ignore next */\n  constructor(message: string) {\n    super(message)\n    Object.setPrototypeOf(this, IllegalArgumentError.prototype)\n  }\n}\n\n/**\n * A general HTTP error.\n */\nexport class HttpError extends Error implements RetriableDecision {\n  private _retryAfter: number\n\n  /* istanbul ignore next because of super() not being covered*/\n  constructor(\n    readonly statusCode: number,\n    readonly statusMessage: string | undefined,\n    readonly body?: string,\n    retryAfter?: string | undefined | null\n  ) {\n    super()\n    Object.setPrototypeOf(this, HttpError.prototype)\n    if (body) {\n      this.message = `${statusCode} ${statusMessage} : ${body}`\n    } else {\n      this.message = `${statusCode} ${statusMessage}`\n    }\n    this.setRetryAfter(retryAfter)\n  }\n\n  private setRetryAfter(retryAfter?: string | undefined | null): void {\n    if (typeof retryAfter === 'string') {\n      // try to parse the supplied number as milliseconds\n      if (/^[0-9]+$/.test(retryAfter)) {\n        this._retryAfter = parseInt(retryAfter)\n      } else {\n        this._retryAfter = 0\n      }\n    } else {\n      this._retryAfter = 0\n    }\n  }\n\n  canRetry(): boolean {\n    return isStatusCodeRetriable(this.statusCode)\n  }\n  retryAfter(): number {\n    return this._retryAfter\n  }\n}\n\n//see https://nodejs.org/api/errors.html\nconst RETRY_CODES = [\n  'ECONNRESET',\n  'ENOTFOUND',\n  'ESOCKETTIMEDOUT',\n  'ETIMEDOUT',\n  'ECONNREFUSED',\n  'EHOSTUNREACH',\n  'EPIPE',\n]\n\n/**\n * Tests the error in order to know if an HTTP call can be retried.\n * @param error - error to test\n * @returns true for a retriable error\n */\nexport function canRetryHttpCall(error: any): boolean {\n  if (!error) {\n    return false\n  } else if (typeof (error as any).canRetry === 'function') {\n    return !!((error as any).canRetry as () => boolean)()\n  } else if ((error as any).code && RETRY_CODES.includes((error as any).code)) {\n    return true\n  }\n  return false\n}\n\n/**\n * Gets retry delay from the supplied error, possibly using random number up to retryJitter.\n */\nexport function getRetryDelay(error?: Error, retryJitter?: number): number {\n  if (!error) {\n    return 0\n  } else {\n    let retVal\n    if (typeof (error as any).retryAfter === 'function') {\n      return ((error as any).retryAfter as () => number)()\n    } else {\n      retVal = 0\n    }\n    if (retryJitter && retryJitter > 0) {\n      return retVal + Math.round(Math.random() * retryJitter)\n    } else {\n      return retVal\n    }\n  }\n}\n\n/** RequestTimedOutError indicates request timeout in the communication with the server */\nexport class RequestTimedOutError extends Error implements RetriableDecision {\n  /* istanbul ignore next because of super() not being covered */\n  constructor() {\n    super()\n    Object.setPrototypeOf(this, RequestTimedOutError.prototype)\n    this.message = 'Request timed out'\n  }\n  canRetry(): boolean {\n    return true\n  }\n  retryAfter(): number {\n    return 0\n  }\n}\n\n/** AbortError indicates that the communication with the server was aborted */\nexport class AbortError extends Error implements RetriableDecision {\n  /* istanbul ignore next because of super() not being covered */\n  constructor() {\n    super()\n    this.name = 'AbortError'\n    Object.setPrototypeOf(this, AbortError.prototype)\n    this.message = 'Response aborted'\n  }\n  canRetry(): boolean {\n    return true\n  }\n  retryAfter(): number {\n    return 0\n  }\n}\n","const reEscape = /[-|\\\\{()[\\]^$+*?.]/g\nconst escapeChar = '\\\\'\n\n/**\n * The Escaper escapes the special characters in the provided list\n * with backslashes. Much of the code here is inspired by that in the\n * sqlstring packet found here: https://github.com/mysqljs/sqlstring\n *\n * Instances of the Escaper are derived from the documentation of escape\n * sequences found here: https://aka.ms/co1m4k\n *\n * sqlstring is made available under the following license:\n *\n *   Copyright (c) 2012 Felix Geisend√∂rfer (felix\\@debuggable.com) and contributors\n *\n *   Permission is hereby granted, free of charge, to any person obtaining a copy\n *   of this software and associated documentation files (the \"Software\"), to deal\n *   in the Software without restriction, including without limitation the rights\n *   to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n *   copies of the Software, and to permit persons to whom the Software is\n *   furnished to do so, subject to the following conditions:\n *\n *   The above copyright notice and this permission notice shall be included in\n *   all copies or substantial portions of the Software.\n *\n *   THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n *   IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n *   FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n *   AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n *   LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n *   OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n *   THE SOFTWARE.\n *\n */\nclass Escaper {\n  private _re: RegExp\n\n  constructor(\n    private config: {[p: string]: EscaperConfig},\n    private wrap: string = ''\n  ) {\n    const patterns = Object.keys(config)\n      .join('|')\n      .replace(reEscape, '\\\\$&')\n    this._re = new RegExp('[' + patterns + ']', 'g')\n  }\n\n  /**\n   * Escape replaces occurrences of special characters within the target\n   * string with the necessary escape codes.\n   */\n  public escape(val: string): string {\n    this._re.lastIndex = 0\n    let chunkIndex = this._re.lastIndex\n    let escapedVal = ''\n    let match = this._re.exec(val)\n\n    while (match) {\n      const matched = match[0]\n      const toEscape = this.config[matched].escapeChar\n      const toReplace = this.config[matched].replaceChar\n      escapedVal += val.slice(chunkIndex, match.index)\n      escapedVal += toReplace != undefined ? toReplace : toEscape + matched\n      chunkIndex = this._re.lastIndex\n      match = this._re.exec(val)\n    }\n\n    if (chunkIndex === 0) {\n      return this.wrap + val + this.wrap\n    }\n\n    if (chunkIndex < val.length) {\n      return this.wrap + escapedVal + val.slice(chunkIndex) + this.wrap\n    }\n\n    return this.wrap + escapedVal + this.wrap\n  }\n}\n\nclass EscaperConfig {\n  escapeChar?: string\n  replaceChar?: string\n\n  constructor(escapeChar?: string, replaceChar?: string) {\n    this.escapeChar = escapeChar\n    this.replaceChar = replaceChar\n  }\n}\n\nconst escaperConfig = new EscaperConfig(escapeChar)\n\nconst bindEsc = (e: Escaper): ((val: string) => string) => e.escape.bind(e)\n\n/**\n * Provides functions escape specific parts in InfluxDB line protocol.\n */\nexport const escape = {\n  /**\n   * Measurement escapes measurement names.\n   */\n  measurement: bindEsc(\n    new Escaper({\n      ',': escaperConfig,\n      ' ': escaperConfig,\n      '\\n': new EscaperConfig(undefined, '\\\\n'),\n      '\\r': new EscaperConfig(undefined, '\\\\r'),\n      '\\t': new EscaperConfig(undefined, '\\\\t'),\n    })\n  ),\n\n  /**\n   * Quoted escapes quoted values, such as database names.\n   */\n  quoted: bindEsc(\n    new Escaper(\n      {\n        '\"': escaperConfig,\n        '\\\\': escaperConfig,\n      },\n      '\"'\n    )\n  ),\n\n  /**\n   * TagEscaper escapes tag keys, tag values, and field keys.\n   */\n  tag: bindEsc(\n    new Escaper({\n      ',': escaperConfig,\n      '=': escaperConfig,\n      ' ': escaperConfig,\n      '\\n': new EscaperConfig(undefined, '\\\\n'),\n      '\\r': new EscaperConfig(undefined, '\\\\r'),\n      '\\t': new EscaperConfig(undefined, '\\\\t'),\n    })\n  ),\n}\n","declare let process: any\nconst zeroPadding = '000000000'\nlet useHrTime = false\n\nexport function useProcessHrtime(use: boolean): boolean {\n  /* istanbul ignore else */\n  if (!process.env.ROLLUP_BROWSER) {\n    return (useHrTime = use && process && typeof process.hrtime === 'function')\n  } else {\n    return false\n  }\n}\nuseProcessHrtime(true) // preffer node\n\nlet startHrMillis: number | undefined = undefined\nlet startHrTime: [number, number] | undefined = undefined\nlet lastMillis = Date.now()\nlet stepsInMillis = 0\nfunction nanos(): string {\n  if (!process.env.ROLLUP_BROWSER && useHrTime) {\n    const hrTime = process.hrtime() as [number, number]\n    let millis = Date.now()\n    if (!startHrTime) {\n      startHrTime = hrTime\n      startHrMillis = millis\n    } else {\n      hrTime[0] = hrTime[0] - startHrTime[0]\n      hrTime[1] = hrTime[1] - startHrTime[1]\n      // istanbul ignore next \"cannot mock system clock, manually reviewed\"\n      if (hrTime[1] < 0) {\n        hrTime[0] -= 1\n        hrTime[1] += 1000_000_000\n      }\n      millis =\n        (startHrMillis as number) +\n        hrTime[0] * 1000 +\n        Math.floor(hrTime[1] / 1000_000)\n    }\n    const nanos = String(hrTime[1] % 1000_000)\n    return String(millis) + zeroPadding.substr(0, 6 - nanos.length) + nanos\n  } else {\n    const millis = Date.now()\n    if (millis !== lastMillis) {\n      lastMillis = millis\n      stepsInMillis = 0\n    } else {\n      stepsInMillis++\n    }\n    const nanos = String(stepsInMillis)\n    return String(millis) + zeroPadding.substr(0, 6 - nanos.length) + nanos\n  }\n}\n\nfunction micros(): string {\n  if (!process.env.ROLLUP_BROWSER && useHrTime) {\n    const hrTime = process.hrtime() as [number, number]\n    const micros = String(Math.trunc(hrTime[1] / 1000) % 1000)\n    return (\n      String(Date.now()) + zeroPadding.substr(0, 3 - micros.length) + micros\n    )\n  } else {\n    return String(Date.now()) + zeroPadding.substr(0, 3)\n  }\n}\nfunction millis(): string {\n  return String(Date.now())\n}\nfunction seconds(): string {\n  return String(Math.floor(Date.now() / 1000))\n}\n\n/**\n * Exposes functions that creates strings that represent a timestamp that\n * can be used in the line protocol. Micro and nano timestamps are emulated\n * depending on the js platform in use.\n */\nexport const currentTime = Object.freeze({\n  s: seconds as () => string,\n  ms: millis as () => string,\n  us: micros as () => string,\n  ns: nanos as () => string,\n  seconds: seconds as () => string,\n  millis: millis as () => string,\n  micros: micros as () => string,\n  nanos: nanos as () => string,\n})\n\n/**\n * dateToProtocolTimestamp provides converters for JavaScript Date to InfluxDB Write Protocol Timestamp. Keys are supported precisions.\n */\nexport const dateToProtocolTimestamp = {\n  s: (d: Date): string => `${Math.floor(d.getTime() / 1000)}`,\n  ms: (d: Date): string => `${d.getTime()}`,\n  us: (d: Date): string => `${d.getTime()}000`,\n  ns: (d: Date): string => `${d.getTime()}000000`,\n}\n","import FluxTableColumn, {ColumnType} from './FluxTableColumn'\nimport {IllegalArgumentError} from '../errors'\n\nconst identity = (x: string): any => x\n/**\n * A dictionary of serializers of particular types returned by a flux query.\n * See {@link https://v2.docs.influxdata.com/v2.0/reference/syntax/annotated-csv/#valid-data-types }\n */\nexport const typeSerializers: Record<ColumnType, (val: string) => any> = {\n  boolean: (x: string): any => x === 'true',\n  unsignedLong: (x: string): any => (x === '' ? null : +x),\n  long: (x: string): any => (x === '' ? null : +x),\n  double: (x: string): any => (x === '' ? null : +x),\n  string: identity,\n  base64Binary: identity,\n  duration: (x: string): any => (x === '' ? null : x),\n  'dateTime:RFC3339': (x: string): any => (x === '' ? null : x),\n}\n\n/**\n * serializeDateTimeAsDate changes type serializers to return JavaScript Date instances\n * for 'dateTime:RFC3339' query result data type. Empty value is converted to null.\n * @remarks\n * Please note that the result has millisecond precision whereas InfluxDB returns dateTime\n * in nanosecond precision.\n */\nexport function serializeDateTimeAsDate(): void {\n  typeSerializers['dateTime:RFC3339'] = (x: string): any =>\n    x === '' ? null : new Date(Date.parse(x))\n}\n/**\n * serializeDateTimeAsNumber changes type serializers to return milliseconds since epoch\n * for 'dateTime:RFC3339' query result data type. Empty value is converted to null.\n * @remarks\n * Please note that the result has millisecond precision whereas InfluxDB returns dateTime\n * in nanosecond precision.\n */\nexport function serializeDateTimeAsNumber(): void {\n  typeSerializers['dateTime:RFC3339'] = (x: string): any =>\n    x === '' ? null : Date.parse(x)\n}\n/**\n * serializeDateTimeAsString changes type serializers to return string values\n * for `dateTime:RFC3339` query result data type.  Empty value is converted to null.\n */\nexport function serializeDateTimeAsString(): void {\n  typeSerializers['dateTime:RFC3339'] = (x: string): any =>\n    x === '' ? null : x\n}\n\n/**\n * Represents metadata of a {@link http://bit.ly/flux-spec#table | flux table}.\n */\nexport default interface FluxTableMetaData {\n  /**\n   * Table columns.\n   */\n  columns: Array<FluxTableColumn>\n\n  /**\n   * Gets columns by name\n   * @param label - column label\n   * @returns table column\n   * @throws IllegalArgumentError if column is not found\n   **/\n  column(label: string): FluxTableColumn\n\n  /**\n   * Creates an object out of the supplied values with the help of columns .\n   * @param values - a row with data for each column\n   */\n  toObject(values: string[]): {[key: string]: any}\n}\n\n/**\n * FluxTableMetaData Implementation.\n */\nclass FluxTableMetaDataImpl implements FluxTableMetaData {\n  columns: Array<FluxTableColumn>\n  constructor(columns: FluxTableColumn[]) {\n    columns.forEach((col, i) => (col.index = i))\n    this.columns = columns\n  }\n  column(label: string): FluxTableColumn {\n    for (let i = 0; i < this.columns.length; i++) {\n      const col = this.columns[i]\n      if (col.label === label) return col\n    }\n    throw new IllegalArgumentError(`Column ${label} not found!`)\n  }\n  toObject(values: string[]): {[key: string]: any} {\n    const acc: any = {}\n    for (let i = 0; i < this.columns.length && i < values.length; i++) {\n      let val = values[i]\n      const column = this.columns[i]\n      if (val === '' && column.defaultValue) {\n        val = column.defaultValue\n      }\n      acc[column.label] = (typeSerializers[column.dataType] ?? identity)(val)\n    }\n    return acc\n  }\n}\n\n/**\n * Created FluxTableMetaData from the columns supplied.\n * @param columns -  columns\n * @returns - instance\n */\nexport function createFluxTableMetaData(\n  columns: FluxTableColumn[]\n): FluxTableMetaData {\n  return new FluxTableMetaDataImpl(columns)\n}\n","/**\n * Type of query result column, see {@link https://v2.docs.influxdata.com/v2.0/reference/syntax/annotated-csv/#valid-data-types }\n */\nexport type ColumnType =\n  | 'boolean'\n  | 'unsignedLong'\n  | 'long'\n  | 'double'\n  | 'string'\n  | 'base64Binary'\n  | 'dateTime:RFC3339'\n  | 'duration'\n  | string\n\n/**\n * Column metadata class of a {@link http://bit.ly/flux-spec#table | flux table} column.\n */\nexport default interface FluxTableColumn {\n  /**\n   * Label (e.g., \"_start\", \"_stop\", \"_time\").\n   */\n  label: string\n\n  /**\n   * The data type of column (e.g., \"string\", \"long\", \"dateTime:RFC3339\").\n   */\n  dataType: ColumnType\n\n  /**\n   * Boolean flag indicating if the column is a part of the table's group key.\n   */\n  group: boolean\n\n  /**\n   * Default value to be used for rows whose string value is the empty string.\n   */\n  defaultValue: string\n\n  /**\n   * Index of this column in the row array\n   */\n  index: number\n}\n\n/**\n * FluxTableColumn implementation.\n */\nclass FluxTableColumnImpl implements FluxTableColumn {\n  label: string\n  dataType: ColumnType\n  group: boolean\n  defaultValue: string\n  index: number\n}\n\n/**\n * Creates a new flux table column.\n * @returns column instance\n */\nexport function newFluxTableColumn(): FluxTableColumn {\n  return new FluxTableColumnImpl()\n}\n\n/**\n * Creates a flux table column from a partial FluxTableColumn.\n * @param object - source object\n * @returns column instance\n */\nexport function createFluxTableColumn(\n  object: Partial<FluxTableColumn>\n): FluxTableColumn {\n  const retVal = new FluxTableColumnImpl()\n  retVal.label = String(object.label)\n  retVal.dataType = object.dataType as ColumnType\n  retVal.group = Boolean(object.group)\n  retVal.defaultValue = object.defaultValue ?? ''\n  retVal.index = object.index ?? 0\n  return retVal\n}\n","/** Property that offers a function that returns flux-sanitized value of an object.  */\nexport const FLUX_VALUE = Symbol('FLUX_VALUE')\n\n/**\n * A flux parameter can print its (sanitized) flux value.\n */\nexport interface FluxParameterLike {\n  [FLUX_VALUE](): string\n}\n\n/**\n * Represents a parameterized query.\n */\nexport interface ParameterizedQuery {\n  /**\n   * Returns flux query with sanitized parameters.\n   */\n  toString(): string\n}\n\nclass FluxParameter implements FluxParameterLike, ParameterizedQuery {\n  constructor(private fluxValue: string) {}\n  toString(): string {\n    return this.fluxValue\n  }\n  [FLUX_VALUE](): string {\n    return this.fluxValue\n  }\n}\n\n/**\n * Checks if the supplied object is FluxParameterLike\n * @param value - any value\n * @returns true if it is\n */\nfunction isFluxParameterLike(value: any): boolean {\n  return typeof value === 'object' && typeof value[FLUX_VALUE] === 'function'\n}\n\n/**\n * Escapes content of the supplied string so it can be wrapped into double qoutes\n * to become a [flux string literal](https://docs.influxdata.com/flux/v0.65/language/lexical-elements/#string-literals).\n * @param value - string value\n * @returns sanitized string\n */\nfunction sanitizeString(value: any): string {\n  if (value === null || value === undefined) return ''\n  value = value.toString()\n  let retVal: any = undefined\n  let i = 0\n  function prepareRetVal(): void {\n    if (retVal === undefined) {\n      retVal = value.substring(0, i)\n    }\n  }\n  for (; i < value.length; i++) {\n    const c = value.charAt(i)\n    switch (c) {\n      case '\\r':\n        prepareRetVal()\n        retVal += '\\\\r'\n        break\n      case '\\n':\n        prepareRetVal()\n        retVal += '\\\\n'\n        break\n      case '\\t':\n        prepareRetVal()\n        retVal += '\\\\t'\n        break\n      case '\"':\n      case '\\\\':\n        prepareRetVal()\n        retVal = retVal + '\\\\' + c\n        break\n      case '$':\n        // escape ${\n        if (i + 1 < value.length && value.charAt(i + 1) === '{') {\n          prepareRetVal()\n          i++\n          retVal += '\\\\${'\n          break\n        }\n        // append $\n        if (retVal != undefined) {\n          retVal += c\n        }\n        break\n      default:\n        if (retVal != undefined) {\n          retVal += c\n        }\n    }\n  }\n  if (retVal !== undefined) {\n    return retVal\n  }\n  return value\n}\n\n/**\n * Creates a flux string literal.\n */\nexport function fluxString(value: any): FluxParameterLike {\n  return new FluxParameter(`\"${sanitizeString(value)}\"`)\n}\n\n/**\n * Creates a flux integer literal.\n */\nexport function fluxInteger(value: any): FluxParameterLike {\n  const val = String(value)\n  for (const c of val) {\n    if (c < '0' || c > '9') throw new Error(`not a flux integer: ${val}`)\n  }\n  return new FluxParameter(val)\n}\n\n/**\n * Sanitizes float value to avoid injections.\n * @param value - InfluxDB float literal\n * @returns sanitized float value\n * @throws Error if the the value cannot be sanitized\n */\nexport function sanitizeFloat(value: any): string {\n  const val = String(value)\n  let dot = false\n  for (const c of val) {\n    if (c === '.') {\n      if (dot) throw new Error(`not a flux float: ${val}`)\n      dot = !dot\n    }\n    if (c !== '.' && (c < '0' || c > '9'))\n      throw new Error(`not a flux float: ${val}`)\n  }\n  return val\n}\n/**\n * Creates a flux float literal.\n */\nexport function fluxFloat(value: any): FluxParameterLike {\n  return new FluxParameter(sanitizeFloat(value))\n}\n\nfunction sanitizeDateTime(value: any): string {\n  return `time(v: \"${sanitizeString(value)}\")`\n}\n\n/**\n * Creates flux date-time literal.\n */\nexport function fluxDateTime(value: any): FluxParameterLike {\n  return new FluxParameter(sanitizeDateTime(value))\n}\n\n/**\n * Creates flux date-time literal.\n */\nexport function fluxDuration(value: any): FluxParameterLike {\n  return new FluxParameter(`duration(v: \"${sanitizeString(value)}\")`)\n}\n\nfunction sanitizeRegExp(value: any): string {\n  return `regexp.compile(v: \"${sanitizeString(value)}\")`\n}\n\n/**\n * Creates flux regexp literal.\n */\nexport function fluxRegExp(value: any): FluxParameterLike {\n  // let the server decide if it can be parsed\n  return new FluxParameter(sanitizeRegExp(value))\n}\n\n/**\n * Creates flux boolean literal.\n */\nexport function fluxBool(value: any): FluxParameterLike {\n  if (value === 'true' || value === 'false') {\n    return new FluxParameter(value)\n  }\n  return new FluxParameter((!!value).toString())\n}\n\n/**\n * Assumes that the supplied value is flux expression or literal that does not need sanitizing.\n *\n * @param value - any value\n * @returns the supplied value as-is\n */\nexport function fluxExpression(value: any): FluxParameterLike {\n  return new FluxParameter(String(value))\n}\n\n/**\n * Escapes content of the supplied parameter so that it can be safely embedded into flux query.\n * @param value - parameter value\n * @returns sanitized flux value or an empty string if it cannot be converted\n */\nexport function toFluxValue(value: any): string {\n  if (value === undefined) {\n    return ''\n  } else if (value === null) {\n    return 'null'\n  } else if (typeof value === 'boolean') {\n    return value.toString()\n  } else if (typeof value === 'string') {\n    return `\"${sanitizeString(value)}\"`\n  } else if (typeof value === 'number') {\n    return sanitizeFloat(value)\n  } else if (typeof value === 'object') {\n    if (typeof value[FLUX_VALUE] === 'function') {\n      return value[FLUX_VALUE]()\n    } else if (value instanceof Date) {\n      return value.toISOString()\n    } else if (value instanceof RegExp) {\n      return sanitizeRegExp(value)\n    } else if (Array.isArray(value)) {\n      return `[${value.map(toFluxValue).join(',')}]`\n    }\n  }\n  // use toString value for unrecognized object, bigint, symbol\n  return toFluxValue(value.toString())\n}\n\n/**\n * Flux is a tagged template that sanitizes supplied parameters\n * to avoid injection attacks in flux.\n */\nexport function flux(\n  strings: TemplateStringsArray,\n  ...values: any\n): ParameterizedQuery {\n  if (strings.length == 1 && (!values || values.length === 0)) {\n    return fluxExpression(strings[0]) // the simplest case\n  }\n  const parts = new Array<string>(strings.length + values.length)\n  let partIndex = 0\n  for (let i = 0; i < strings.length; i++) {\n    const text = strings[i]\n    parts[partIndex++] = text\n    if (i < values.length) {\n      const val = values[i]\n      let sanitized: string\n      if (\n        text.endsWith('\"') &&\n        i + 1 < strings.length &&\n        strings[i + 1].startsWith('\"')\n      ) {\n        // parameter is wrapped into flux double quotes\n        sanitized = sanitizeString(val)\n      } else {\n        sanitized = toFluxValue(val)\n        if (sanitized === '') {\n          // do not allow to insert empty strings, unless it is FluxParameterLike\n          if (!isFluxParameterLike(val)) {\n            throw new Error(\n              `Unsupported parameter literal '${val}' at index: ${i}, type: ${typeof val}`\n            )\n          }\n        }\n      }\n      parts[partIndex++] = sanitized\n    } else if (i < strings.length - 1) {\n      throw new Error('Too few parameters supplied!')\n    }\n  }\n  // return flux expression so that flux can be embedded into another flux as-is\n  return fluxExpression(parts.join(''))\n}\n","/* Observable interop typing. Taken from https://github.com/ReactiveX/rxjs */\n\n/* Note: This will add Symbol.observable globally for all TypeScript users */\ndeclare global {\n  interface SymbolConstructor {\n    readonly observable: symbol\n  }\n}\n\n/** Symbol.observable or a string \"\\@\\@observable\". Used for interop */\nexport const symbolObservable = (():\n  | typeof Symbol.observable\n  | '@@observable' =>\n  (typeof Symbol === 'function' && Symbol.observable) || '@@observable')()\n","import {escape} from './util/escape'\nimport {PointSettings} from './options'\n/**\n * Point defines values of a single measurement.\n */\nexport default class Point {\n  private name: string\n  private tags: {[key: string]: string} = {}\n  private fields: {[key: string]: string} = {}\n  private time: string | number | Date | undefined\n\n  /**\n   * Create a new Point with specified a measurement name.\n   *\n   * @param measurementName - the measurement name\n   */\n  constructor(measurementName?: string) {\n    if (measurementName) this.name = measurementName\n  }\n\n  /**\n   * Sets point's measurement.\n   *\n   * @param name - measurement name\n   * @returns this\n   */\n  public measurement(name: string): Point {\n    this.name = name\n    return this\n  }\n\n  /**\n   * Adds a tag.\n   *\n   * @param name - tag name\n   * @param value - tag value\n   * @returns this\n   */\n  public tag(name: string, value: string): Point {\n    this.tags[name] = value\n    return this\n  }\n\n  /**\n   * Adds a boolean field.\n   *\n   * @param field - field name\n   * @param value - field value\n   * @returns this\n   */\n  public booleanField(name: string, value: boolean | any): Point {\n    this.fields[name] = value ? 'T' : 'F'\n    return this\n  }\n\n  /**\n   * Adds an integer field.\n   *\n   * @param name - field name\n   * @param value - field value\n   * @returns this\n   */\n  public intField(name: string, value: number | any): Point {\n    if (typeof value !== 'number') {\n      let val: number\n      if (isNaN((val = parseInt(String(value))))) {\n        throw new Error(\n          `Expected integer value for field ${name}, but got '${value}'!`\n        )\n      }\n      value = val\n    }\n    this.fields[name] = `${Math.floor(value as number)}i`\n    return this\n  }\n\n  /**\n   * Adds a number field.\n   *\n   * @param name - field name\n   * @param value - field value\n   * @returns this\n   */\n  public floatField(name: string, value: number | any): Point {\n    if (typeof value !== 'number') {\n      let val: number\n      if (isNaN((val = parseFloat(value)))) {\n        throw new Error(\n          `Expected float value for field ${name}, but got '${value}'!`\n        )\n      }\n      value = val\n    }\n    this.fields[name] = String(value)\n    return this\n  }\n\n  /**\n   * Adds a string field.\n   *\n   * @param name - field name\n   * @param value - field value\n   * @returns this\n   */\n  public stringField(name: string, value: string | any): Point {\n    if (value !== null && value !== undefined) {\n      if (typeof value !== 'string') value = String(value)\n      this.fields[name] = escape.quoted(value)\n    }\n    return this\n  }\n\n  /**\n   * Sets point time. A string or number value can be used\n   * to carry an int64 value of a precision that depends\n   * on WriteApi, nanoseconds by default. An undefined value\n   * generates a local timestamp using the client's clock.\n   * An empty string can be used to let the server assign\n   * the timestamp.\n   *\n   * @param value - point time\n   * @returns this\n   */\n  public timestamp(value: Date | number | string | undefined): Point {\n    this.time = value\n    return this\n  }\n\n  /**\n   * Creates an InfluxDB protocol line out of this instance.\n   * @param settings - settings define the exact representation of point time and can also add default tags\n   * @returns an InfxluDB protocol line out of this instance\n   */\n  public toLineProtocol(settings?: PointSettings): string | undefined {\n    if (!this.name) return undefined\n    let fieldsLine = ''\n    Object.keys(this.fields)\n      .sort()\n      .forEach(x => {\n        if (x) {\n          const val = this.fields[x]\n          if (fieldsLine.length > 0) fieldsLine += ','\n          fieldsLine += `${escape.tag(x)}=${val}`\n        }\n      })\n    if (fieldsLine.length === 0) return undefined // no fields present\n    let tagsLine = ''\n    const tags =\n      settings && settings.defaultTags\n        ? {...settings.defaultTags, ...this.tags}\n        : this.tags\n    Object.keys(tags)\n      .sort()\n      .forEach(x => {\n        if (x) {\n          const val = tags[x]\n          if (val) {\n            tagsLine += ','\n            tagsLine += `${escape.tag(x)}=${escape.tag(val)}`\n          }\n        }\n      })\n    let time = this.time\n    if (settings && settings.convertTime) {\n      time = settings.convertTime(time)\n    }\n\n    return `${escape.measurement(this.name)}${tagsLine} ${fieldsLine}${\n      time !== undefined ? ' ' + time : ''\n    }`\n  }\n\n  toString(): string {\n    const line = this.toLineProtocol(undefined)\n    return line ? line : `invalid point: ${JSON.stringify(this, undefined)}`\n  }\n}\n","/**\n * Logging interface.\n */\nexport interface Logger {\n  error(message: string, err?: any): void\n  warn(message: string, err?: any): void\n}\n\n/**\n * Logger that logs to console.out\n */\nexport const consoleLogger: Logger = Object.freeze({\n  error(message, error) {\n    // eslint-disable-next-line no-console\n    console.error('ERROR: ' + message, error ? error : '')\n  },\n  warn(message, error) {\n    // eslint-disable-next-line no-console\n    console.warn('WARN: ' + message, error ? error : '')\n  },\n})\nlet provider: Logger = consoleLogger\n\nconst Logger: Logger = {\n  error(message, error) {\n    provider.error(message, error)\n  },\n  warn(message, error) {\n    provider.warn(message, error)\n  },\n}\n\n/**\n * Sets custom logger.\n * @param logger - logger to use\n * @returns previous logger\n */\nexport function setLogger(logger: Logger): Logger {\n  const previous = provider\n  provider = logger\n  return previous\n}\n\nexport default Logger\n","import {getRetryDelay, RetryDelayStrategy} from '../errors'\nimport {\n  RetryDelayStrategyOptions,\n  DEFAULT_RetryDelayStrategyOptions,\n} from '../options'\n\n/**\n * Applies a variant of exponential backoff with initial and max delay and a random\n * jitter delay. It also respects `retry delay` when specified together with an error.\n */\nexport class RetryStrategyImpl implements RetryDelayStrategy {\n  options: RetryDelayStrategyOptions\n  currentDelay: number | undefined\n\n  constructor(options?: Partial<RetryDelayStrategyOptions>) {\n    this.options = {...DEFAULT_RetryDelayStrategyOptions, ...options}\n    this.success()\n  }\n\n  nextDelay(error?: Error, failedAttempts?: number): number {\n    const delay = getRetryDelay(error)\n    if (delay && delay > 0) {\n      return delay + Math.round(Math.random() * this.options.retryJitter)\n    } else {\n      let delay = this.currentDelay\n      if (failedAttempts && failedAttempts > 0) {\n        // compute delay\n        delay = this.options.minRetryDelay\n        for (let i = 1; i < failedAttempts; i++) {\n          delay = delay * this.options.exponentialBase\n          if (delay >= this.options.maxRetryDelay) {\n            break\n          }\n        }\n        return (\n          Math.min(Math.max(delay, 1), this.options.maxRetryDelay) +\n          Math.round(Math.random() * this.options.retryJitter)\n        )\n      } else if (this.currentDelay) {\n        this.currentDelay = Math.min(\n          Math.max(this.currentDelay * this.options.exponentialBase, 1) +\n            Math.round(Math.random() * this.options.retryJitter),\n          this.options.maxRetryDelay\n        )\n      } else {\n        this.currentDelay =\n          this.options.minRetryDelay +\n          Math.round(Math.random() * this.options.retryJitter)\n      }\n      return this.currentDelay\n    }\n  }\n  success(): void {\n    this.currentDelay = undefined\n  }\n}\n\n/**\n * Creates a new instance of retry strategy.\n * @param options - retry options\n * @returns retry strategy implementation\n */\nexport function createRetryDelayStrategy(\n  options?: Partial<RetryDelayStrategyOptions>\n): RetryDelayStrategy {\n  return new RetryStrategyImpl(options)\n}\n","import Logger from './Logger'\n\n/* interval between successful retries */\nconst RETRY_INTERVAL = 1\n\ninterface RetryItem {\n  lines: string[]\n  retryCount: number\n  next?: RetryItem\n}\n\n/**\n * Retries lines up to a limit of max buffer size.\n */\nexport default class RetryBuffer {\n  first?: RetryItem\n  last?: RetryItem\n  size = 0\n  nextRetryTime = 0\n  closed = false\n  private _timeoutHandle: any = undefined\n\n  constructor(\n    private maxLines: number,\n    private retryLines: (\n      lines: string[],\n      retryCountdown: number\n    ) => Promise<void>\n  ) {}\n\n  addLines(lines: string[], retryCount: number, delay: number): void {\n    if (this.closed) return\n    if (!lines.length) return\n    const retryTime = Date.now() + delay\n    if (retryTime > this.nextRetryTime) this.nextRetryTime = retryTime\n    // ensure at most maxLines are in the Buffer\n    if (this.first && this.size + lines.length > this.maxLines) {\n      const origSize = this.size\n      const newSize = origSize * 0.7 // reduce to 70 %\n      do {\n        const newFirst = this.first.next as RetryItem\n        this.size -= this.first.lines.length\n        this.first = newFirst\n      } while (this.first && this.size + lines.length > newSize)\n      Logger.error(\n        `RetryBuffer: ${origSize -\n          this\n            .size} oldest lines removed to keep buffer size under the limit of ${\n          this.maxLines\n        } lines`\n      )\n    }\n    const toAdd = {\n      lines,\n      retryCount,\n    }\n    if (this.last) {\n      this.last.next = toAdd\n      this.last = toAdd\n    } else {\n      this.first = toAdd\n      this.last = toAdd\n      this.scheduleRetry(delay)\n    }\n    this.size += lines.length\n  }\n\n  removeLines(): RetryItem | undefined {\n    if (this.first) {\n      const toRetry = this.first\n      this.first = this.first.next\n      this.size -= toRetry.lines.length\n      if (!this.first) this.last = undefined\n      return toRetry\n    }\n    return undefined\n  }\n\n  scheduleRetry(delay: number): void {\n    this._timeoutHandle = setTimeout(() => {\n      const toRetry = this.removeLines()\n      if (toRetry) {\n        this.retryLines(toRetry.lines, toRetry.retryCount)\n          .then(() => {\n            // continue with successfull retry\n            this.scheduleRetry(RETRY_INTERVAL)\n          })\n          .catch(_e => {\n            // already logged\n            this.scheduleRetry(this.nextRetryTime - Date.now())\n          })\n      } else {\n        this._timeoutHandle = undefined\n      }\n    }, delay)\n  }\n\n  async flush(): Promise<void> {\n    let toRetry\n    while ((toRetry = this.removeLines())) {\n      await this.retryLines(toRetry.lines, toRetry.retryCount)\n    }\n  }\n\n  close(): number {\n    if (this._timeoutHandle) {\n      clearTimeout(this._timeoutHandle)\n      this._timeoutHandle = undefined\n    }\n    this.closed = true\n    return this.size\n  }\n}\n","import WriteApi from '../WriteApi'\nimport {\n  DEFAULT_WriteOptions,\n  PointSettings,\n  WriteOptions,\n  WritePrecisionType,\n} from '../options'\nimport {Transport, SendOptions} from '../transport'\nimport Logger from './Logger'\nimport {HttpError, RetryDelayStrategy} from '../errors'\nimport Point from '../Point'\nimport {escape} from '../util/escape'\nimport {currentTime, dateToProtocolTimestamp} from '../util/currentTime'\nimport {createRetryDelayStrategy} from './retryStrategy'\nimport RetryBuffer from './RetryBuffer'\n\nclass WriteBuffer {\n  length = 0\n  lines: string[]\n\n  constructor(\n    private maxChunkRecords: number,\n    private flushFn: (lines: string[]) => Promise<void>,\n    private scheduleSend: () => void\n  ) {\n    this.lines = new Array<string>(maxChunkRecords)\n  }\n\n  add(record: string): void {\n    if (this.length === 0) {\n      this.scheduleSend()\n    }\n    this.lines[this.length] = record\n    this.length++\n    if (this.length >= this.maxChunkRecords) {\n      this.flush().catch(_e => {\n        // an error is logged in case of failure, avoid UnhandledPromiseRejectionWarning\n      })\n    }\n  }\n  flush(): Promise<void> {\n    const lines = this.reset()\n    if (lines.length > 0) {\n      return this.flushFn(lines)\n    } else {\n      return Promise.resolve()\n    }\n  }\n  reset(): string[] {\n    const retVal = this.lines.slice(0, this.length)\n    this.length = 0\n    return retVal\n  }\n}\n\nexport default class WriteApiImpl implements WriteApi, PointSettings {\n  private writeBuffer: WriteBuffer\n  private closed = false\n  private httpPath: string\n  private writeOptions: WriteOptions\n  private sendOptions: SendOptions = {\n    method: 'POST',\n    headers: {\n      'content-type': 'text/plain; charset=utf-8',\n    },\n  }\n  private _timeoutHandle: any = undefined\n  private currentTime: () => string\n  private dateToProtocolTimestamp: (d: Date) => string\n\n  retryBuffer: RetryBuffer\n  retryStrategy: RetryDelayStrategy\n\n  constructor(\n    private transport: Transport,\n    org: string,\n    bucket: string,\n    precision: WritePrecisionType,\n    writeOptions?: Partial<WriteOptions>\n  ) {\n    this.httpPath = `/api/v2/write?org=${encodeURIComponent(\n      org\n    )}&bucket=${encodeURIComponent(bucket)}&precision=${precision}`\n    this.writeOptions = {\n      ...DEFAULT_WriteOptions,\n      ...writeOptions,\n    }\n    this.currentTime = currentTime[precision]\n    this.dateToProtocolTimestamp = dateToProtocolTimestamp[precision]\n    if (this.writeOptions.defaultTags) {\n      this.useDefaultTags(this.writeOptions.defaultTags)\n    }\n\n    const scheduleNextSend = (): void => {\n      if (this.writeOptions.flushInterval > 0) {\n        this._clearFlushTimeout()\n        /* istanbul ignore else manually reviewed, hard to reproduce */\n        if (!this.closed) {\n          this._timeoutHandle = setTimeout(\n            () =>\n              this.sendBatch(\n                this.writeBuffer.reset(),\n                this.writeOptions.maxRetries + 1\n              ).catch(_e => {\n                // an error is logged in case of failure, avoid UnhandledPromiseRejectionWarning\n              }),\n            this.writeOptions.flushInterval\n          )\n        }\n      }\n    }\n    // write buffer\n    this.writeBuffer = new WriteBuffer(\n      this.writeOptions.batchSize,\n      lines => {\n        this._clearFlushTimeout()\n        return this.sendBatch(lines, this.writeOptions.maxRetries + 1)\n      },\n      scheduleNextSend\n    )\n    this.sendBatch = this.sendBatch.bind(this)\n    // retry buffer\n    this.retryStrategy = createRetryDelayStrategy(this.writeOptions)\n    this.retryBuffer = new RetryBuffer(\n      this.writeOptions.maxBufferLines,\n      this.sendBatch\n    )\n  }\n\n  sendBatch(lines: string[], attempts: number): Promise<void> {\n    // eslint-disable-next-line @typescript-eslint/no-this-alias\n    const self: WriteApiImpl = this\n    if (!this.closed && lines.length > 0) {\n      return new Promise<void>((resolve, reject) => {\n        this.transport.send(this.httpPath, lines.join('\\n'), this.sendOptions, {\n          error(error: Error): void {\n            const failedAttempts = self.writeOptions.maxRetries + 2 - attempts\n            // call the writeFailed listener and check if we can retry\n            const onRetry = self.writeOptions.writeFailed.call(\n              self,\n              error,\n              lines,\n              failedAttempts\n            )\n            if (onRetry) {\n              onRetry.then(resolve, reject)\n              return\n            }\n            if (\n              !self.closed &&\n              attempts > 1 &&\n              (!(error instanceof HttpError) ||\n                (error as HttpError).statusCode >= 429)\n            ) {\n              Logger.warn(\n                `Write to InfluxDB failed (remaining attempts: ${attempts -\n                  1}).`,\n                error\n              )\n              self.retryBuffer.addLines(\n                lines,\n                attempts - 1,\n                self.retryStrategy.nextDelay(error, failedAttempts)\n              )\n              reject(error)\n              return\n            }\n            Logger.error(`Write to InfluxDB failed.`, error)\n            reject(error)\n          },\n          complete(): void {\n            self.retryStrategy.success()\n            resolve()\n          },\n        })\n      })\n    } else {\n      return Promise.resolve()\n    }\n  }\n\n  private _clearFlushTimeout(): void {\n    if (this._timeoutHandle !== undefined) {\n      clearTimeout(this._timeoutHandle)\n      this._timeoutHandle = undefined\n    }\n  }\n\n  writeRecord(record: string): void {\n    if (this.closed) {\n      throw new Error('writeApi: already closed!')\n    }\n    this.writeBuffer.add(record)\n  }\n  writeRecords(records: ArrayLike<string>): void {\n    if (this.closed) {\n      throw new Error('writeApi: already closed!')\n    }\n    for (let i = 0; i < records.length; i++) {\n      this.writeBuffer.add(records[i])\n    }\n  }\n  writePoint(point: Point): void {\n    if (this.closed) {\n      throw new Error('writeApi: already closed!')\n    }\n    const line = point.toLineProtocol(this)\n    if (line) this.writeBuffer.add(line)\n  }\n  writePoints(points: ArrayLike<Point>): void {\n    if (this.closed) {\n      throw new Error('writeApi: already closed!')\n    }\n    for (let i = 0; i < points.length; i++) {\n      this.writePoint(points[i])\n    }\n  }\n  async flush(withRetryBuffer?: boolean): Promise<void> {\n    await this.writeBuffer.flush()\n    if (withRetryBuffer) {\n      return await this.retryBuffer.flush()\n    }\n  }\n  close(): Promise<void> {\n    const retVal = this.writeBuffer.flush().finally(() => {\n      const remaining = this.retryBuffer.close()\n      if (remaining) {\n        Logger.error(\n          `Retry buffer closed with ${remaining} items that were not written to InfluxDB!`,\n          null\n        )\n      }\n      this.closed = true\n    })\n    return retVal\n  }\n  dispose(): number {\n    this._clearFlushTimeout()\n    this.closed = true\n    return this.retryBuffer.close() + this.writeBuffer.length\n  }\n\n  // PointSettings\n  defaultTags: {[key: string]: string} | undefined\n  useDefaultTags(tags: {[key: string]: string}): WriteApi {\n    this.defaultTags = undefined\n    Object.keys(tags).forEach((key: string) => {\n      ;(this.defaultTags || (this.defaultTags = {}))[key] = escape.tag(\n        tags[key]\n      )\n    })\n    return this\n  }\n  convertTime(value: string | number | Date | undefined): string | undefined {\n    if (value === undefined) {\n      return this.currentTime()\n    } else if (typeof value === 'string') {\n      return value.length > 0 ? value : undefined\n    } else if (value instanceof Date) {\n      return this.dateToProtocolTimestamp(value)\n    } else if (typeof value === 'number') {\n      return String(Math.floor(value))\n    } else {\n      // Logger.warn(`unsupported timestamp value: ${value}`)\n      return String(value)\n    }\n  }\n}\n","import {ChunkCombiner} from '../transport'\n\nconst pureJsChunkCombiner: ChunkCombiner = {\n  concat(first: Uint8Array, second: Uint8Array): Uint8Array {\n    const retVal = new Uint8Array(first.length + second.length)\n    retVal.set(first)\n    retVal.set(second, first.length)\n    return retVal\n  },\n  toUtf8String(chunk: Uint8Array, start: number, end: number): string {\n    // see https://en.wikipedia.org/wiki/UTF-8 for details\n    let c1, c2, c3, c4\n    let out = ''\n    let i = start\n    while (i < end) {\n      c1 = chunk[i++]\n      switch (c1 >> 4) {\n        case 0:\n        case 1:\n        case 2:\n        case 3:\n        case 4:\n        case 5:\n        case 6:\n        case 7:\n          // 0xxxxxxx\n          out += String.fromCharCode(c1)\n          break\n        case 12:\n        case 13:\n          // 110x xxxx   10xx xxxx\n          c2 = chunk[i++]\n          out += String.fromCharCode(((c1 & 0x1f) << 6) | (c2 & 0x3f))\n          break\n        case 14:\n          // 1110 xxxx  10xx xxxx  10xx xxxx\n          c2 = chunk[i++]\n          c3 = chunk[i++]\n          out += String.fromCharCode(\n            ((c1 & 0x0f) << 12) | ((c2 & 0x3f) << 6) | (c3 & 0x3f)\n          )\n          break\n        case 15:\n          // 1111 0xxx  10xx xxxx  10xx xxxx 10xx xxxx\n          c2 = chunk[i++]\n          c3 = chunk[i++]\n          c4 = chunk[i++]\n          out += String.fromCodePoint(\n            ((c1 & 0x07) << 18) |\n              ((c2 & 0x3f) << 12) |\n              ((c3 & 0x3f) << 6) |\n              (c4 & 0x3f)\n          )\n          break\n      }\n    }\n    return out\n  },\n\n  copy(chunk: Uint8Array, start: number, end: number): Uint8Array {\n    const retVal = new Uint8Array(end - start)\n    retVal.set(chunk.slice(start, end))\n    return retVal\n  },\n}\n\nexport default pureJsChunkCombiner\n","import {CommunicationObserver, Headers} from '../transport'\n\nexport default function completeCommunicationObserver(\n  callbacks: Partial<CommunicationObserver<any>> = {}\n): Omit<Required<CommunicationObserver<any>>, 'useCancellable'> {\n  let state = 0\n  const retVal = {\n    next: (data: any): void => {\n      if (\n        state === 0 &&\n        callbacks.next &&\n        data !== null &&\n        data !== undefined\n      ) {\n        callbacks.next(data)\n      }\n    },\n    error: (error: Error): void => {\n      /* istanbul ignore else propagate error at most once */\n      if (state === 0) {\n        state = 1\n        /* istanbul ignore else safety check */\n        if (callbacks.error) callbacks.error(error)\n      }\n    },\n    complete: (): void => {\n      if (state === 0) {\n        state = 2\n        /* istanbul ignore else safety check */\n        if (callbacks.complete) callbacks.complete()\n      }\n    },\n    responseStarted: (headers: Headers): void => {\n      if (callbacks.responseStarted) callbacks.responseStarted(headers)\n    },\n  }\n  return retVal\n}\n","export const CLIENT_LIB_VERSION = '1.7.1'\n","/* eslint-disable @typescript-eslint/no-unused-vars */\nimport {\n  Transport,\n  SendOptions,\n  CommunicationObserver,\n  Headers,\n} from '../../transport'\nimport pureJsChunkCombiner from '../pureJsChunkCombiner'\nimport {ConnectionOptions} from '../../options'\nimport {HttpError} from '../../errors'\nimport completeCommunicationObserver from '../completeCommunicationObserver'\nimport Logger from '../Logger'\nimport {CLIENT_LIB_VERSION} from '../version'\n\n/**\n * Transport layer that use browser fetch.\n */\nexport default class FetchTransport implements Transport {\n  chunkCombiner = pureJsChunkCombiner\n  private defaultHeaders: {[key: string]: string}\n  constructor(private connectionOptions: ConnectionOptions) {\n    this.defaultHeaders = {\n      'content-type': 'application/json; charset=utf-8',\n      'User-Agent': `influxdb-client-js/${CLIENT_LIB_VERSION}`,\n    }\n    if (this.connectionOptions.token) {\n      this.defaultHeaders['Authorization'] =\n        'Token ' + this.connectionOptions.token\n    }\n  }\n  send(\n    path: string,\n    body: string,\n    options: SendOptions,\n    callbacks?: Partial<CommunicationObserver<Uint8Array>> | undefined\n  ): void {\n    const observer = completeCommunicationObserver(callbacks)\n    let cancelled = false\n    let signal = (options as any).signal\n    if (callbacks && callbacks.useCancellable) {\n      const controller = new AbortController()\n      if (!signal) {\n        signal = controller.signal\n        options = {...(options as object), ...signal} as SendOptions\n      }\n      callbacks.useCancellable({\n        cancel() {\n          cancelled = true\n          controller.abort()\n        },\n        isCancelled() {\n          return cancelled || signal.aborted\n        },\n      })\n    }\n    this.fetch(path, body, options)\n      .then(async response => {\n        if (callbacks?.responseStarted) {\n          const headers: Headers = {}\n          response.headers.forEach((value: string, key: string) => {\n            const previous = headers[key]\n            if (previous === undefined) {\n              headers[key] = value\n            } else if (Array.isArray(previous)) {\n              previous.push(value)\n            } else {\n              headers[key] = [previous, value]\n            }\n          })\n          observer.responseStarted(headers)\n        }\n        if (response.status >= 300) {\n          return response\n            .text()\n            .then((text: string) => {\n              if (!text) {\n                const headerError = response.headers.get('x-influxdb-error')\n                if (headerError) {\n                  text = headerError\n                }\n              }\n              observer.error(\n                new HttpError(\n                  response.status,\n                  response.statusText,\n                  text,\n                  response.headers.get('retry-after')\n                )\n              )\n            })\n            .catch((e: Error) => {\n              Logger.warn('Unable to receive error body', e)\n              observer.error(\n                new HttpError(\n                  response.status,\n                  response.statusText,\n                  undefined,\n                  response.headers.get('retry-after')\n                )\n              )\n            })\n        } else {\n          if (response.body) {\n            const reader = response.body.getReader()\n            let chunk: ReadableStreamReadResult<Uint8Array>\n            do {\n              chunk = await reader.read()\n              observer.next(chunk.value)\n            } while (!chunk.done)\n          } else if (response.arrayBuffer) {\n            const buffer = await response.arrayBuffer()\n            observer.next(new Uint8Array(buffer))\n          } else {\n            const text = await response.text()\n            observer.next(new TextEncoder().encode(text))\n          }\n        }\n      })\n      .catch(e => {\n        if (!cancelled) {\n          observer.error(e)\n        }\n      })\n      .finally(() => observer.complete())\n  }\n  async request(path: string, body: any, options: SendOptions): Promise<any> {\n    const response = await this.fetch(path, body, options)\n    const {status, headers} = response\n    const responseContentType = headers.get('content-type') || ''\n\n    if (status >= 300) {\n      let data = await response.text()\n      if (!data) {\n        const headerError = headers.get('x-influxdb-error')\n        if (headerError) {\n          data = headerError\n        }\n      }\n      throw new HttpError(\n        status,\n        response.statusText,\n        data,\n        response.headers.get('retry-after')\n      )\n    }\n    const responseType = options.headers?.accept ?? responseContentType\n    if (responseType.includes('json')) {\n      return await response.json()\n    } else if (\n      responseType.includes('text') ||\n      responseType.startsWith('application/csv')\n    ) {\n      return await response.text()\n    }\n  }\n\n  private fetch(\n    path: string,\n    body: any,\n    options: SendOptions\n  ): Promise<Response> {\n    const {method, headers, ...other} = options\n    return fetch(`${this.connectionOptions.url}${path}`, {\n      method: method,\n      body:\n        method === 'GET' || method === 'HEAD'\n          ? undefined\n          : typeof body === 'string'\n          ? body\n          : JSON.stringify(body),\n      headers: {\n        ...this.defaultHeaders,\n        ...headers,\n      },\n      credentials: 'omit' as 'omit',\n      // allow to specify custom options, such as signal, in SendOptions\n      ...other,\n    })\n  }\n}\n","import {Observable} from './observable'\nimport {\n  FluxResultObserver,\n  FluxTableMetaData,\n  ParameterizedQuery,\n} from './query'\nimport {CommunicationObserver} from './transport'\n\nexport function defaultRowMapping(\n  values: string[],\n  tableMeta: FluxTableMetaData\n): Record<string, any> {\n  return tableMeta.toObject(values)\n}\n\n/** QueryOptions contains QueryApi configuration options. */\nexport interface QueryOptions {\n  /**\n   * Specifies the name of the organization executing the query. Takes either the ID or Name interchangeably.\n   */\n  org: string\n  /**\n   * Type of the query, default is \"flux\"\n   */\n  type?: 'flux'\n  /**\n   * Requests gzip encoded response.\n   */\n  gzip?: boolean\n  /**\n   * Specifies the time that should be reported as \"now\" in the query. RFC3339 value must be returned,\n   * for example `new Date().toISOString()`.\n   */\n  now?: () => string\n}\n\n/** Wraps values and associated metadata of a query result row */\nexport interface Row {\n  values: string[]\n  tableMeta: FluxTableMetaData\n}\n\n/**\n * Query InfluxDB 2.0. Provides methods that notify abouts result lines of the executed query.\n * See {@link https://v2.docs.influxdata.com/v2.0/api/#operation/PostQuery }\n */\nexport default interface QueryApi {\n  /**\n   * Adds extra options for this query API.\n   * @param options - query options to use\n   * @returns this\n   */\n  with(options: Partial<QueryOptions>): QueryApi\n\n  /**\n   * Creates a cold observable of the lines returned by the given query.\n   *\n   * @param query - query\n   * @returns observable of CSV result lines\n   */\n  lines(query: string | ParameterizedQuery): Observable<string>\n\n  /**\n   * Creates a cold observable of the rows returned by the given query.\n   *\n   * @param query - query\n   * @returns observable of result rows\n   */\n  rows(query: string | ParameterizedQuery): Observable<Row>\n\n  /**\n   * Executes the query and receives result lines (including empty and annotation lines)\n   * through the supplied consumer. See [annotated-csv](https://v2.docs.influxdata.com/v2.0/reference/syntax/annotated-csv/).\n   *\n   * @param query - query\n   * @param consumer - csv result lines and error consumer\n   */\n  queryLines(\n    query: string | ParameterizedQuery,\n    consumer: CommunicationObserver<string>\n  ): void\n\n  /**\n   * Executes the query and receives table metadata and rows through the supplied consumer.\n   *\n   * @param query - query\n   * @param consumer - result rows and error consumer\n   */\n  queryRows(\n    query: string | ParameterizedQuery,\n    consumer: FluxResultObserver<string[]>\n  ): void\n\n  /**\n   * QueryRaw executes a query and returns the full response as a string.\n   * Use with caution, a possibly huge stream is copied to memory.\n   *\n   * @param query - query\n   * @returns Promise of response text\n   */\n  queryRaw(query: string | ParameterizedQuery): Promise<string>\n\n  /**\n   * CollectRows executes the query and collects all the results in the returned Promise.\n   * This method is suitable to collect simple results. Use with caution,\n   * a possibly huge stream of results is copied to memory.\n   *\n   * @param query - query\n   * @param rowMapper - maps the supplied row to an item that is then collected,\n   *  undefined return values are not collected. If no rowMapper is supplied,\n   *  `row => row.tableMeta.toObject(row.values)` is used.\n   * @returns Promise of mapped results\n   */\n  collectRows<T>(\n    query: string | ParameterizedQuery,\n    rowMapper?: (\n      values: string[],\n      tableMeta: FluxTableMetaData\n    ) => T | undefined\n  ): Promise<Array<T>>\n\n  /**\n   * CollectLines executes the query and collects all result lines in the returned Promise.\n   * This method is suitable to collect simple results. Use with caution,\n   * a possibly huge stream of lines is copied to memory.\n   *\n   * @param query - query\n   * @returns Promise of returned csv lines\n   */\n  collectLines(query: string | ParameterizedQuery): Promise<Array<string>>\n}\n","import {CommunicationObserver, ChunkCombiner} from '../transport'\nimport Cancellable from '../util/Cancellable'\n\n/**\n * Converts lines to table calls\n */\nexport default class ChunksToLines\n  implements CommunicationObserver<Uint8Array> {\n  previous?: Uint8Array\n  finished = false\n  quoted = false\n\n  constructor(\n    private target: CommunicationObserver<string>,\n    private chunks: ChunkCombiner\n  ) {}\n\n  next(chunk: Uint8Array): void {\n    if (this.finished) return\n    try {\n      this.bufferReceived(chunk)\n    } catch (e) {\n      this.error(e)\n    }\n  }\n  error(error: Error): void {\n    if (!this.finished) {\n      this.finished = true\n      this.target.error(error)\n    }\n  }\n  complete(): void {\n    if (!this.finished) {\n      if (this.previous) {\n        this.target.next(\n          this.chunks.toUtf8String(this.previous, 0, this.previous.length)\n        )\n      }\n      this.finished = true\n      this.target.complete()\n    }\n  }\n  useCancellable(cancellable: Cancellable): void {\n    if (this.target.useCancellable) {\n      // eslint-disable-next-line @typescript-eslint/no-this-alias\n      const self = this\n      this.target.useCancellable({\n        cancel(): void {\n          cancellable.cancel()\n          self.previous = undefined // do not emit more lines\n          self.complete()\n        },\n        isCancelled(): boolean {\n          return cancellable.isCancelled()\n        },\n      })\n    }\n  }\n\n  private bufferReceived(chunk: Uint8Array): void {\n    let index: number\n    let start = 0\n    if (this.previous) {\n      chunk = this.chunks.concat(this.previous, chunk)\n      index = (this.previous as Buffer).length\n    } else {\n      index = 0\n    }\n    while (index < chunk.length) {\n      const c = chunk[index]\n      if (c === 10) {\n        if (!this.quoted) {\n          /* do not emit CR+LR or LF line ending */\n          const end = index > 0 && chunk[index - 1] === 13 ? index - 1 : index\n          // do not emmit more lines if the processing is already finished\n          if (this.finished) {\n            return\n          }\n          this.target.next(this.chunks.toUtf8String(chunk, start, end))\n          start = index + 1\n        }\n      } else if (c === 34 /* \" */) {\n        this.quoted = !this.quoted\n      }\n      index++\n    }\n    if (start < index) {\n      this.previous = this.chunks.copy(chunk, start, index)\n    } else {\n      this.previous = undefined\n    }\n  }\n}\n","const SEPARATOR = ','\nconst WRAPPER = '\"'\n\n/**\n * Optimized tokenizer of a single CSV line.\n */\nexport default class LineSplitter {\n  /** returned value when reused  */\n  reusedValues: string[]\n  /** last length of elements in */\n  lastSplitLength: number\n  private _reuse = false\n\n  /**\n   * Reuse returned array between consecutive calls.\n   */\n  get reuse(): boolean {\n    return this._reuse\n  }\n  set reuse(val: boolean) {\n    if (val && !this.reusedValues) {\n      this.reusedValues = new Array(10)\n    }\n    this._reuse = val\n  }\n\n  /**\n   * Sets the reuse flag and returns this.\n   */\n  withReuse(): LineSplitter {\n    this.reuse = true\n    return this\n  }\n\n  /**\n   * Splits the supplied line to elements that are separated by\n   * comma with values possibly escaped within double quotes (\"value\")\n   * @param line - line\n   * @returns array of splitted parts\n   */\n  splitLine(line: string | undefined | null): string[] {\n    if (line === null || line === undefined) {\n      this.lastSplitLength = 0\n      return []\n    }\n    let quoteCount = 0\n    let startIndex = 0\n    const values = this._reuse ? this.reusedValues : []\n    let count = 0\n    for (let i = 0; i < line.length; i++) {\n      const c = line[i]\n      if (c === SEPARATOR) {\n        if (quoteCount % 2 === 0) {\n          const val = this.getValue(line, startIndex, i, quoteCount)\n          if (this._reuse) {\n            values[count++] = val\n          } else {\n            values.push(val)\n          }\n          startIndex = i + 1\n          quoteCount = 0\n        }\n      } else if (c === WRAPPER) {\n        quoteCount++\n      }\n    }\n    const val = this.getValue(line, startIndex, line.length, quoteCount)\n    if (this._reuse) {\n      values[count] = val\n      this.lastSplitLength = count + 1\n    } else {\n      values.push(val)\n      this.lastSplitLength = values.length\n    }\n\n    return values\n  }\n\n  private getValue(\n    line: string,\n    start: number,\n    end: number,\n    quoteCount: number\n  ): string {\n    if (start === line.length) {\n      return ''\n    } else if (quoteCount === 0) {\n      return line.substring(start, end)\n    } else if (quoteCount === 2) {\n      return line.substring(start + 1, end - 1)\n    } else {\n      // quoteCount >= 4\n      return line.substring(start + 1, end - 1).replace(/\"\"/gi, '\"')\n    }\n  }\n}\n","import {CommunicationObserver} from '../transport'\nimport Cancellable from '../util/Cancellable'\nimport FluxResultObserver from '../query/FluxResultObserver'\nimport LineSplitter from '../util/LineSplitter'\nimport FluxTableColumn, {\n  ColumnType,\n  newFluxTableColumn,\n} from '../query/FluxTableColumn'\nimport FluxTableMetaData, {\n  createFluxTableMetaData,\n} from '../query/FluxTableMetaData'\n\nexport function toLineObserver(\n  consumer: FluxResultObserver<string[]>\n): CommunicationObserver<string> {\n  const splitter = new LineSplitter().withReuse()\n  let columns: FluxTableColumn[] | undefined\n  let expectMeta = true\n  let firstColumnIndex = 0\n  let lastMeta: FluxTableMetaData\n  return {\n    error(error: Error): void {\n      consumer.error(error)\n    },\n    next(line: string): void {\n      if (line === '') {\n        expectMeta = true\n        columns = undefined\n      } else {\n        const values = splitter.splitLine(line)\n        const size = splitter.lastSplitLength\n        if (expectMeta) {\n          // create columns\n          if (!columns) {\n            columns = new Array(size)\n            for (let i = 0; i < size; i++) {\n              columns[i] = newFluxTableColumn()\n            }\n          }\n          if (!values[0].startsWith('#')) {\n            // fill in column names\n            if (values[0] === '') {\n              firstColumnIndex = 1\n              columns = columns.slice(1)\n            } else {\n              firstColumnIndex = 0\n            }\n            for (let i = firstColumnIndex; i < size; i++) {\n              columns[i - firstColumnIndex].label = values[i]\n            }\n            lastMeta = createFluxTableMetaData(columns)\n            expectMeta = false\n          } else if (values[0] === '#datatype') {\n            for (let i = 1; i < size; i++) {\n              columns[i].dataType = values[i] as ColumnType\n            }\n          } else if (values[0] === '#default') {\n            for (let i = 1; i < size; i++) {\n              columns[i].defaultValue = values[i]\n            }\n          } else if (values[0] === '#group') {\n            for (let i = 1; i < size; i++) {\n              columns[i].group = values[i][0] === 't'\n            }\n          }\n        } else {\n          consumer.next(values.slice(firstColumnIndex, size), lastMeta)\n        }\n      }\n    },\n    complete(): void {\n      consumer.complete()\n    },\n    useCancellable(cancellable: Cancellable): void {\n      if (consumer.useCancellable) consumer.useCancellable(cancellable)\n    },\n  }\n}\n","import {\n  Observable,\n  Observer,\n  ObserverComplete,\n  ObserverError,\n  ObserverNext,\n  Subscription,\n  symbolObservable,\n} from '../observable'\nimport {CommunicationObserver} from '../transport'\nimport Cancellable from '../util/Cancellable'\n\nexport type QueryExecutor = (consumer: CommunicationObserver<string>) => void\n\ntype Decorator<T> = (observer: Observer<T>) => Observer<string>\n\nclass QuerySubscription implements Subscription {\n  private cancellable?: Cancellable\n  private isClosed = false\n\n  public constructor(observer: Observer<string>, executor: QueryExecutor) {\n    try {\n      executor({\n        next: value => {\n          observer.next(value)\n        },\n        error: e => {\n          this.isClosed = true\n          observer.error(e)\n        },\n        complete: () => {\n          this.isClosed = true\n          observer.complete()\n        },\n        useCancellable: c => {\n          this.cancellable = c\n        },\n      })\n    } catch (e) {\n      this.isClosed = true\n      observer.error(e)\n    }\n  }\n\n  public get closed(): boolean {\n    return this.isClosed\n  }\n\n  public unsubscribe(): void {\n    this.cancellable?.cancel()\n    this.isClosed = true\n  }\n}\n\nfunction noop(): void {}\n\nfunction completeObserver<T>(observer: Partial<Observer<T>>): Observer<T> {\n  const {next, error, complete} = observer\n\n  return {\n    next: next ? next.bind(observer) : noop,\n    error: error ? error.bind(observer) : noop,\n    complete: complete ? complete.bind(observer) : noop,\n  }\n}\n\nexport default class ObservableQuery<T> implements Observable<T> {\n  public constructor(\n    private readonly executor: QueryExecutor,\n    private readonly decorator: Decorator<T>\n  ) {}\n\n  public subscribe(\n    observerOrNext?: Partial<Observer<T>> | ObserverNext<T>,\n    error?: ObserverError,\n    complete?: ObserverComplete\n  ): Subscription {\n    const observer = completeObserver(\n      typeof observerOrNext !== 'object' || observerOrNext === null\n        ? {next: observerOrNext, error, complete}\n        : observerOrNext\n    )\n\n    return new QuerySubscription(this.decorator(observer), this.executor)\n  }\n\n  public [symbolObservable](): this {\n    return this\n  }\n}\n","import {Observable} from '../observable'\nimport FluxResultObserver from '../query/FluxResultObserver'\nimport QueryApi, {QueryOptions, Row, defaultRowMapping} from '../QueryApi'\nimport {CommunicationObserver, Transport} from '../transport'\nimport ChunksToLines from './ChunksToLines'\nimport {toLineObserver} from './linesToTables'\nimport ObservableQuery, {QueryExecutor} from './ObservableQuery'\nimport {ParameterizedQuery} from '../query/flux'\nimport {FluxTableMetaData} from '../query'\n\nconst DEFAULT_dialect: any = {\n  header: true,\n  delimiter: ',',\n  quoteChar: '\"',\n  commentPrefix: '#',\n  annotations: ['datatype', 'group', 'default'],\n}\nconst identity = <T>(value: T): T => value\n\nexport class QueryApiImpl implements QueryApi {\n  private options: QueryOptions\n  constructor(private transport: Transport, org: string) {\n    this.options = {org}\n  }\n\n  with(options: Partial<QueryOptions>): QueryApi {\n    this.options = {...this.options, ...options}\n    return this\n  }\n\n  lines(query: string | ParameterizedQuery): Observable<string> {\n    return new ObservableQuery(this.createExecutor(query), identity)\n  }\n\n  rows(query: string | ParameterizedQuery): Observable<Row> {\n    return new ObservableQuery(this.createExecutor(query), observer => {\n      return toLineObserver({\n        next(values, tableMeta) {\n          observer.next({values, tableMeta})\n        },\n        error(e) {\n          observer.error(e)\n        },\n        complete() {\n          observer.complete()\n        },\n      })\n    })\n  }\n\n  queryLines(\n    query: string | ParameterizedQuery,\n    consumer: CommunicationObserver<string>\n  ): void {\n    this.createExecutor(query)(consumer)\n  }\n\n  queryRows(\n    query: string | ParameterizedQuery,\n    consumer: FluxResultObserver<string[]>\n  ): void {\n    this.createExecutor(query)(toLineObserver(consumer))\n  }\n\n  collectRows<T>(\n    query: string | ParameterizedQuery,\n    rowMapper: (\n      values: string[],\n      tableMeta: FluxTableMetaData\n    ) => T | undefined = defaultRowMapping as (\n      values: string[],\n      tableMeta: FluxTableMetaData\n    ) => T | undefined\n  ): Promise<Array<T>> {\n    const retVal: Array<T> = []\n    return new Promise((resolve, reject) => {\n      this.queryRows(query, {\n        next(values: string[], tableMeta: FluxTableMetaData): void {\n          const toAdd = rowMapper.call(this, values, tableMeta)\n          if (toAdd !== undefined) {\n            retVal.push(toAdd)\n          }\n        },\n        error(error: Error): void {\n          reject(error)\n        },\n        complete(): void {\n          resolve(retVal)\n        },\n      })\n    })\n  }\n\n  collectLines(query: string | ParameterizedQuery): Promise<Array<string>> {\n    const retVal: Array<string> = []\n    return new Promise((resolve, reject) => {\n      this.queryLines(query, {\n        next(line: string): void {\n          retVal.push(line)\n        },\n        error(error: Error): void {\n          reject(error)\n        },\n        complete(): void {\n          resolve(retVal)\n        },\n      })\n    })\n  }\n\n  queryRaw(query: string | ParameterizedQuery): Promise<string> {\n    const {org, type, gzip} = this.options\n    return this.transport.request(\n      `/api/v2/query?org=${encodeURIComponent(org)}`,\n      JSON.stringify(\n        this.decorateRequest({\n          query: query.toString(),\n          dialect: DEFAULT_dialect,\n          type,\n        })\n      ),\n      {\n        method: 'POST',\n        headers: {\n          accept: 'text/csv',\n          'accept-encoding': gzip ? 'gzip' : 'identity',\n          'content-type': 'application/json; encoding=utf-8',\n        },\n      }\n    )\n  }\n\n  private createExecutor(query: string | ParameterizedQuery): QueryExecutor {\n    const {org, type, gzip} = this.options\n\n    return (consumer): void => {\n      this.transport.send(\n        `/api/v2/query?org=${encodeURIComponent(org)}`,\n        JSON.stringify(\n          this.decorateRequest({\n            query: query.toString(),\n            dialect: DEFAULT_dialect,\n            type,\n          })\n        ),\n        {\n          method: 'POST',\n          headers: {\n            'content-type': 'application/json; encoding=utf-8',\n            'accept-encoding': gzip ? 'gzip' : 'identity',\n          },\n        },\n        new ChunksToLines(consumer, this.transport.chunkCombiner)\n      )\n    }\n  }\n  private decorateRequest(request: any): any {\n    if (typeof this.options.now === 'function') {\n      request.now = this.options.now()\n    }\n    // https://v2.docs.influxdata.com/v2.0/api/#operation/PostQuery requires type\n    request.type = this.options.type ?? 'flux'\n    return request\n  }\n}\n\nexport default QueryApiImpl\n","import WriteApi from './WriteApi'\nimport {\n  ClientOptions,\n  WritePrecision,\n  WriteOptions,\n  WritePrecisionType,\n} from './options'\nimport WriteApiImpl from './impl/WriteApiImpl'\nimport {IllegalArgumentError} from './errors'\nimport {Transport} from './transport'\n// replaced by ./impl/browser/FetchTransport in browser builds\nimport TransportImpl from './impl/node/NodeHttpTransport'\nimport QueryApi from './QueryApi'\nimport QueryApiImpl from './impl/QueryApiImpl'\n\n/**\n * InfluxDB 2.0 entry point that configures communication with InfluxDB server\n * and provide APIs to write and query data.\n */\nexport default class InfluxDB {\n  private _options: ClientOptions\n  readonly transport: Transport\n\n  /**\n   * Creates influxdb client options from an options object or url.\n   * @param options - client options\n   */\n  constructor(options: ClientOptions | string) {\n    if (typeof options === 'string') {\n      this._options = {url: options}\n    } else if (options !== null && typeof options === 'object') {\n      this._options = options\n    } else {\n      throw new IllegalArgumentError('No url or configuration specified!')\n    }\n    const url = this._options.url\n    if (typeof url !== 'string')\n      throw new IllegalArgumentError('No url specified!')\n    if (url.endsWith('/')) this._options.url = url.substring(0, url.length - 1)\n    this.transport = this._options.transport ?? new TransportImpl(this._options)\n  }\n\n  /**\n   * Creates WriteApi for the supplied organization and bucket. BEWARE that returned instances must be closed\n   * in order to flush the remaining data and close already scheduled retry executions.\n   *\n   * @remarks\n   * Inspect the {@link WriteOptions} to control also advanced options, such retries of failure, retry strategy options, data chunking\n   * and flushing windows. See {@link DEFAULT_WriteOptions} to see the defaults.\n   *\n   * See also {@link https://github.com/influxdata/influxdb-client-js/blob/master/examples/write.js | write.js example},\n   * {@link https://github.com/influxdata/influxdb-client-js/blob/master/examples/writeAdvanced.js | writeAdvanced.js example},\n   * and {@link https://github.com/influxdata/influxdb-client-js/blob/master/examples/index.html | browser example}.\n   *\n   * @param org - Specifies the destination organization for writes. Takes either the ID or Name interchangeably.\n   * @param bucket - The destination bucket for writes.\n   * @param precision - Timestamp precision for line items.\n   * @param writeOptions - Custom write options.\n   * @returns WriteApi instance\n   */\n  getWriteApi(\n    org: string,\n    bucket: string,\n    precision: WritePrecisionType = WritePrecision.ns,\n    writeOptions?: Partial<WriteOptions>\n  ): WriteApi {\n    return new WriteApiImpl(\n      this.transport,\n      org,\n      bucket,\n      precision,\n      writeOptions ?? this._options.writeOptions\n    )\n  }\n\n  /**\n   * Creates QueryApi for the supplied organization .\n   *\n   * @remarks\n   * See also {@link https://github.com/influxdata/influxdb-client-js/blob/master/examples/query.ts | query.ts example},\n   * {@link https://github.com/influxdata/influxdb-client-js/blob/master/examples/queryWithParams.ts | queryWithParams.ts example},\n   * {@link https://github.com/influxdata/influxdb-client-js/blob/master/examples/rxjs-query.ts | rxjs-query.ts example},\n   * and {@link https://github.com/influxdata/influxdb-client-js/blob/master/examples/index.html | browser example},\n   *\n   * @param org - organization\n   * @returns QueryApi instance\n   */\n  getQueryApi(org: string): QueryApi {\n    return new QueryApiImpl(this.transport, org)\n  }\n}\n"],"names":["identity","TransportImpl"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAiBA;QACa,yBAAyB,GAA+B;QACnE,OAAO,EAAE,KAAK;MACf;IAqDD;QACa,iCAAiC,GAAG,MAAM,CAAC,MAAM,CAAC;QAC7D,WAAW,EAAE,GAAG;QAChB,aAAa,EAAE,IAAI;QACnB,aAAa,EAAE,MAAM;QACrB,eAAe,EAAE,CAAC;KACnB,EAAC;IAEF;QACa,oBAAoB,GAAiB,MAAM,CAAC,MAAM,YAC7D,SAAS,EAAE,IAAI,EACf,aAAa,EAAE,KAAK,EACpB,WAAW,EAAE,eAAa,EAC1B,UAAU,EAAE,CAAC,EACb,cAAc,EAAE,KAAM,IACnB,iCAAiC;;IC1DtC,IAAM,oBAAoB,GAAG,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,CAAA;IACrE;aACgB,qBAAqB,CAAC,UAAkB;QACtD,OAAO,oBAAoB,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAA;IAClD,CAAC;IAED;;QAC0C,wCAAK;;QAE7C,8BAAY,OAAe;YAA3B,YACE,kBAAM,OAAO,CAAC,SAEf;YADC,MAAM,CAAC,cAAc,CAAC,KAAI,EAAE,oBAAoB,CAAC,SAAS,CAAC,CAAA;;SAC5D;QACH,2BAAC;IAAD,CANA,CAA0C,KAAK,GAM9C;IAED;;;;QAG+B,6BAAK;;QAIlC,mBACW,UAAkB,EAClB,aAAiC,EACjC,IAAa,EACtB,UAAsC;YAJxC,YAME,iBAAO,SAQR;YAbU,gBAAU,GAAV,UAAU,CAAQ;YAClB,mBAAa,GAAb,aAAa,CAAoB;YACjC,UAAI,GAAJ,IAAI,CAAS;YAItB,MAAM,CAAC,cAAc,CAAC,KAAI,EAAE,SAAS,CAAC,SAAS,CAAC,CAAA;YAChD,IAAI,IAAI,EAAE;gBACR,KAAI,CAAC,OAAO,GAAM,UAAU,SAAI,aAAa,WAAM,IAAM,CAAA;aAC1D;iBAAM;gBACL,KAAI,CAAC,OAAO,GAAM,UAAU,SAAI,aAAe,CAAA;aAChD;YACD,KAAI,CAAC,aAAa,CAAC,UAAU,CAAC,CAAA;;SAC/B;QAEO,iCAAa,GAArB,UAAsB,UAAsC;YAC1D,IAAI,OAAO,UAAU,KAAK,QAAQ,EAAE;;gBAElC,IAAI,UAAU,CAAC,IAAI,CAAC,UAAU,CAAC,EAAE;oBAC/B,IAAI,CAAC,WAAW,GAAG,QAAQ,CAAC,UAAU,CAAC,CAAA;iBACxC;qBAAM;oBACL,IAAI,CAAC,WAAW,GAAG,CAAC,CAAA;iBACrB;aACF;iBAAM;gBACL,IAAI,CAAC,WAAW,GAAG,CAAC,CAAA;aACrB;SACF;QAED,4BAAQ,GAAR;YACE,OAAO,qBAAqB,CAAC,IAAI,CAAC,UAAU,CAAC,CAAA;SAC9C;QACD,8BAAU,GAAV;YACE,OAAO,IAAI,CAAC,WAAW,CAAA;SACxB;QACH,gBAAC;IAAD,CAvCA,CAA+B,KAAK,GAuCnC;IAED;IACA,IAAM,WAAW,GAAG;QAClB,YAAY;QACZ,WAAW;QACX,iBAAiB;QACjB,WAAW;QACX,cAAc;QACd,cAAc;QACd,OAAO;KACR,CAAA;IAED;;;;;aAKgB,gBAAgB,CAAC,KAAU;QACzC,IAAI,CAAC,KAAK,EAAE;YACV,OAAO,KAAK,CAAA;SACb;aAAM,IAAI,OAAQ,KAAa,CAAC,QAAQ,KAAK,UAAU,EAAE;YACxD,OAAO,CAAC,CAAG,KAAa,CAAC,QAA0B,EAAE,CAAA;SACtD;aAAM,IAAK,KAAa,CAAC,IAAI,IAAI,WAAW,CAAC,QAAQ,CAAE,KAAa,CAAC,IAAI,CAAC,EAAE;YAC3E,OAAO,IAAI,CAAA;SACZ;QACD,OAAO,KAAK,CAAA;IACd,CAAC;IAED;;;aAGgB,aAAa,CAAC,KAAa,EAAE,WAAoB;QAC/D,IAAI,CAAC,KAAK,EAAE;YACV,OAAO,CAAC,CAAA;SACT;aAAM;YACL,IAAI,MAAM,SAAA,CAAA;YACV,IAAI,OAAQ,KAAa,CAAC,UAAU,KAAK,UAAU,EAAE;gBACnD,OAAS,KAAa,CAAC,UAA2B,EAAE,CAAA;aACrD;iBAAM;gBACL,MAAM,GAAG,CAAC,CAAA;aACX;YACD,IAAI,WAAW,IAAI,WAAW,GAAG,CAAC,EAAE;gBAClC,OAAO,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,WAAW,CAAC,CAAA;aACxD;iBAAM;gBACL,OAAO,MAAM,CAAA;aACd;SACF;IACH,CAAC;IAED;;QAC0C,wCAAK;;QAE7C;YAAA,YACE,iBAAO,SAGR;YAFC,MAAM,CAAC,cAAc,CAAC,KAAI,EAAE,oBAAoB,CAAC,SAAS,CAAC,CAAA;YAC3D,KAAI,CAAC,OAAO,GAAG,mBAAmB,CAAA;;SACnC;QACD,uCAAQ,GAAR;YACE,OAAO,IAAI,CAAA;SACZ;QACD,yCAAU,GAAV;YACE,OAAO,CAAC,CAAA;SACT;QACH,2BAAC;IAAD,CAbA,CAA0C,KAAK,GAa9C;IAED;;QACgC,8BAAK;;QAEnC;YAAA,YACE,iBAAO,SAIR;YAHC,KAAI,CAAC,IAAI,GAAG,YAAY,CAAA;YACxB,MAAM,CAAC,cAAc,CAAC,KAAI,EAAE,UAAU,CAAC,SAAS,CAAC,CAAA;YACjD,KAAI,CAAC,OAAO,GAAG,kBAAkB,CAAA;;SAClC;QACD,6BAAQ,GAAR;YACE,OAAO,IAAI,CAAA;SACZ;QACD,+BAAU,GAAV;YACE,OAAO,CAAC,CAAA;SACT;QACH,iBAAC;IAAD,CAdA,CAAgC,KAAK;;IC1JrC,IAAM,QAAQ,GAAG,qBAAqB,CAAA;IACtC,IAAM,UAAU,GAAG,IAAI,CAAA;IAEvB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IA+BA;QAGE,iBACU,MAAoC,EACpC,IAAiB;YAAjB,qBAAA,EAAA,SAAiB;YADjB,WAAM,GAAN,MAAM,CAA8B;YACpC,SAAI,GAAJ,IAAI,CAAa;YAEzB,IAAM,QAAQ,GAAG,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC;iBACjC,IAAI,CAAC,GAAG,CAAC;iBACT,OAAO,CAAC,QAAQ,EAAE,MAAM,CAAC,CAAA;YAC5B,IAAI,CAAC,GAAG,GAAG,IAAI,MAAM,CAAC,GAAG,GAAG,QAAQ,GAAG,GAAG,EAAE,GAAG,CAAC,CAAA;SACjD;;;;;QAMM,wBAAM,GAAb,UAAc,GAAW;YACvB,IAAI,CAAC,GAAG,CAAC,SAAS,GAAG,CAAC,CAAA;YACtB,IAAI,UAAU,GAAG,IAAI,CAAC,GAAG,CAAC,SAAS,CAAA;YACnC,IAAI,UAAU,GAAG,EAAE,CAAA;YACnB,IAAI,KAAK,GAAG,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,CAAA;YAE9B,OAAO,KAAK,EAAE;gBACZ,IAAM,OAAO,GAAG,KAAK,CAAC,CAAC,CAAC,CAAA;gBACxB,IAAM,QAAQ,GAAG,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,UAAU,CAAA;gBAChD,IAAM,SAAS,GAAG,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,WAAW,CAAA;gBAClD,UAAU,IAAI,GAAG,CAAC,KAAK,CAAC,UAAU,EAAE,KAAK,CAAC,KAAK,CAAC,CAAA;gBAChD,UAAU,IAAI,SAAS,IAAI,SAAS,GAAG,SAAS,GAAG,QAAQ,GAAG,OAAO,CAAA;gBACrE,UAAU,GAAG,IAAI,CAAC,GAAG,CAAC,SAAS,CAAA;gBAC/B,KAAK,GAAG,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,CAAA;aAC3B;YAED,IAAI,UAAU,KAAK,CAAC,EAAE;gBACpB,OAAO,IAAI,CAAC,IAAI,GAAG,GAAG,GAAG,IAAI,CAAC,IAAI,CAAA;aACnC;YAED,IAAI,UAAU,GAAG,GAAG,CAAC,MAAM,EAAE;gBAC3B,OAAO,IAAI,CAAC,IAAI,GAAG,UAAU,GAAG,GAAG,CAAC,KAAK,CAAC,UAAU,CAAC,GAAG,IAAI,CAAC,IAAI,CAAA;aAClE;YAED,OAAO,IAAI,CAAC,IAAI,GAAG,UAAU,GAAG,IAAI,CAAC,IAAI,CAAA;SAC1C;QACH,cAAC;IAAD,CAAC,IAAA;IAED;QAIE,uBAAY,UAAmB,EAAE,WAAoB;YACnD,IAAI,CAAC,UAAU,GAAG,UAAU,CAAA;YAC5B,IAAI,CAAC,WAAW,GAAG,WAAW,CAAA;SAC/B;QACH,oBAAC;IAAD,CAAC,IAAA;IAED,IAAM,aAAa,GAAG,IAAI,aAAa,CAAC,UAAU,CAAC,CAAA;IAEnD,IAAM,OAAO,GAAG,UAAC,CAAU,IAAgC,OAAA,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,GAAA,CAAA;IAE3E;;;QAGa,MAAM,GAAG;;;;QAIpB,WAAW,EAAE,OAAO,CAClB,IAAI,OAAO,CAAC;YACV,GAAG,EAAE,aAAa;YAClB,GAAG,EAAE,aAAa;YAClB,IAAI,EAAE,IAAI,aAAa,CAAC,SAAS,EAAE,KAAK,CAAC;YACzC,IAAI,EAAE,IAAI,aAAa,CAAC,SAAS,EAAE,KAAK,CAAC;YACzC,IAAI,EAAE,IAAI,aAAa,CAAC,SAAS,EAAE,KAAK,CAAC;SAC1C,CAAC,CACH;;;;QAKD,MAAM,EAAE,OAAO,CACb,IAAI,OAAO,CACT;YACE,GAAG,EAAE,aAAa;YAClB,IAAI,EAAE,aAAa;SACpB,EACD,GAAG,CACJ,CACF;;;;QAKD,GAAG,EAAE,OAAO,CACV,IAAI,OAAO,CAAC;YACV,GAAG,EAAE,aAAa;YAClB,GAAG,EAAE,aAAa;YAClB,GAAG,EAAE,aAAa;YAClB,IAAI,EAAE,IAAI,aAAa,CAAC,SAAS,EAAE,KAAK,CAAC;YACzC,IAAI,EAAE,IAAI,aAAa,CAAC,SAAS,EAAE,KAAK,CAAC;YACzC,IAAI,EAAE,IAAI,aAAa,CAAC,SAAS,EAAE,KAAK,CAAC;SAC1C,CAAC,CACH;;;ICtIH,IAAM,WAAW,GAAG,WAAW,CAAA;aAGf,gBAAgB,CAAC,GAAY;;QAIpC;YACL,OAAO,KAAK,CAAA;SACb;IACH,CAAC;IAKD,IAAI,UAAU,GAAG,IAAI,CAAC,GAAG,EAAE,CAAA;IAC3B,IAAI,aAAa,GAAG,CAAC,CAAA;IACrB,SAAS,KAAK;QAsBL;YACL,IAAM,QAAM,GAAG,IAAI,CAAC,GAAG,EAAE,CAAA;YACzB,IAAI,QAAM,KAAK,UAAU,EAAE;gBACzB,UAAU,GAAG,QAAM,CAAA;gBACnB,aAAa,GAAG,CAAC,CAAA;aAClB;iBAAM;gBACL,aAAa,EAAE,CAAA;aAChB;YACD,IAAM,OAAK,GAAG,MAAM,CAAC,aAAa,CAAC,CAAA;YACnC,OAAO,MAAM,CAAC,QAAM,CAAC,GAAG,WAAW,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,GAAG,OAAK,CAAC,MAAM,CAAC,GAAG,OAAK,CAAA;SACxE;IACH,CAAC;IAED,SAAS,MAAM;QAON;YACL,OAAO,MAAM,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC,GAAG,WAAW,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,CAAA;SACrD;IACH,CAAC;IACD,SAAS,MAAM;QACb,OAAO,MAAM,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC,CAAA;IAC3B,CAAC;IACD,SAAS,OAAO;QACd,OAAO,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,EAAE,GAAG,IAAI,CAAC,CAAC,CAAA;IAC9C,CAAC;IAED;;;;;QAKa,WAAW,GAAG,MAAM,CAAC,MAAM,CAAC;QACvC,CAAC,EAAE,OAAuB;QAC1B,EAAE,EAAE,MAAsB;QAC1B,EAAE,EAAE,MAAsB;QAC1B,EAAE,EAAE,KAAqB;QACzB,OAAO,EAAE,OAAuB;QAChC,MAAM,EAAE,MAAsB;QAC9B,MAAM,EAAE,MAAsB;QAC9B,KAAK,EAAE,KAAqB;KAC7B,EAAC;IAEF;;;QAGa,uBAAuB,GAAG;QACrC,CAAC,EAAE,UAAC,CAAO,IAAa,OAAA,KAAG,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,OAAO,EAAE,GAAG,IAAI,CAAG,GAAA;QAC3D,EAAE,EAAE,UAAC,CAAO,IAAa,OAAA,KAAG,CAAC,CAAC,OAAO,EAAI,GAAA;QACzC,EAAE,EAAE,UAAC,CAAO,IAAa,OAAG,CAAC,CAAC,OAAO,EAAE,QAAK,GAAA;QAC5C,EAAE,EAAE,UAAC,CAAO,IAAa,OAAG,CAAC,CAAC,OAAO,EAAE,WAAQ,GAAA;;;IC3FjD,IAAM,QAAQ,GAAG,UAAC,CAAS,IAAU,OAAA,CAAC,GAAA,CAAA;IACtC;;;;QAIa,eAAe,GAA6C;QACvE,OAAO,EAAE,UAAC,CAAS,IAAU,OAAA,CAAC,KAAK,MAAM,GAAA;QACzC,YAAY,EAAE,UAAC,CAAS,IAAU,QAAC,CAAC,KAAK,EAAE,GAAG,IAAI,GAAG,CAAC,CAAC,IAAC;QACxD,IAAI,EAAE,UAAC,CAAS,IAAU,QAAC,CAAC,KAAK,EAAE,GAAG,IAAI,GAAG,CAAC,CAAC,IAAC;QAChD,MAAM,EAAE,UAAC,CAAS,IAAU,QAAC,CAAC,KAAK,EAAE,GAAG,IAAI,GAAG,CAAC,CAAC,IAAC;QAClD,MAAM,EAAE,QAAQ;QAChB,YAAY,EAAE,QAAQ;QACtB,QAAQ,EAAE,UAAC,CAAS,IAAU,QAAC,CAAC,KAAK,EAAE,GAAG,IAAI,GAAG,CAAC,IAAC;QACnD,kBAAkB,EAAE,UAAC,CAAS,IAAU,QAAC,CAAC,KAAK,EAAE,GAAG,IAAI,GAAG,CAAC,IAAC;MAC9D;IAED;;;;;;;aAOgB,uBAAuB;QACrC,eAAe,CAAC,kBAAkB,CAAC,GAAG,UAAC,CAAS;YAC9C,OAAA,CAAC,KAAK,EAAE,GAAG,IAAI,GAAG,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;SAAA,CAAA;IAC7C,CAAC;IACD;;;;;;;aAOgB,yBAAyB;QACvC,eAAe,CAAC,kBAAkB,CAAC,GAAG,UAAC,CAAS;YAC9C,OAAA,CAAC,KAAK,EAAE,GAAG,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;SAAA,CAAA;IACnC,CAAC;IACD;;;;aAIgB,yBAAyB;QACvC,eAAe,CAAC,kBAAkB,CAAC,GAAG,UAAC,CAAS;YAC9C,OAAA,CAAC,KAAK,EAAE,GAAG,IAAI,GAAG,CAAC;SAAA,CAAA;IACvB,CAAC;IA0BD;;;IAGA;QAEE,+BAAY,OAA0B;YACpC,OAAO,CAAC,OAAO,CAAC,UAAC,GAAG,EAAE,CAAC,IAAK,QAAC,GAAG,CAAC,KAAK,GAAG,CAAC,IAAC,CAAC,CAAA;YAC5C,IAAI,CAAC,OAAO,GAAG,OAAO,CAAA;SACvB;QACD,sCAAM,GAAN,UAAO,KAAa;YAClB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,OAAO,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;gBAC5C,IAAM,GAAG,GAAG,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,CAAA;gBAC3B,IAAI,GAAG,CAAC,KAAK,KAAK,KAAK;oBAAE,OAAO,GAAG,CAAA;aACpC;YACD,MAAM,IAAI,oBAAoB,CAAC,YAAU,KAAK,gBAAa,CAAC,CAAA;SAC7D;QACD,wCAAQ,GAAR,UAAS,MAAgB;;YACvB,IAAM,GAAG,GAAQ,EAAE,CAAA;YACnB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,OAAO,CAAC,MAAM,IAAI,CAAC,GAAG,MAAM,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;gBACjE,IAAI,GAAG,GAAG,MAAM,CAAC,CAAC,CAAC,CAAA;gBACnB,IAAM,MAAM,GAAG,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,CAAA;gBAC9B,IAAI,GAAG,KAAK,EAAE,IAAI,MAAM,CAAC,YAAY,EAAE;oBACrC,GAAG,GAAG,MAAM,CAAC,YAAY,CAAA;iBAC1B;gBACD,GAAG,CAAC,MAAM,CAAC,KAAK,CAAC,GAAG,OAAC,eAAe,CAAC,MAAM,CAAC,QAAQ,CAAC,mCAAI,QAAQ,EAAE,GAAG,CAAC,CAAA;aACxE;YACD,OAAO,GAAG,CAAA;SACX;QACH,4BAAC;IAAD,CAAC,IAAA;IAED;;;;;aAKgB,uBAAuB,CACrC,OAA0B;QAE1B,OAAO,IAAI,qBAAqB,CAAC,OAAO,CAAC,CAAA;IAC3C;;ICrEA;;;IAGA;QAAA;SAMC;QAAD,0BAAC;IAAD,CAAC,IAAA;IAED;;;;aAIgB,kBAAkB;QAChC,OAAO,IAAI,mBAAmB,EAAE,CAAA;IAClC,CAAC;IAED;;;;;aAKgB,qBAAqB,CACnC,MAAgC;;QAEhC,IAAM,MAAM,GAAG,IAAI,mBAAmB,EAAE,CAAA;QACxC,MAAM,CAAC,KAAK,GAAG,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,CAAA;QACnC,MAAM,CAAC,QAAQ,GAAG,MAAM,CAAC,QAAsB,CAAA;QAC/C,MAAM,CAAC,KAAK,GAAG,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,CAAA;QACpC,MAAM,CAAC,YAAY,SAAG,MAAM,CAAC,YAAY,mCAAI,EAAE,CAAA;QAC/C,MAAM,CAAC,KAAK,SAAG,MAAM,CAAC,KAAK,mCAAI,CAAC,CAAA;QAChC,OAAO,MAAM,CAAA;IACf;;IC9EA;QACa,UAAU,GAAG,MAAM,CAAC,YAAY,EAAC;IAmB9C;QACE,uBAAoB,SAAiB;YAAjB,cAAS,GAAT,SAAS,CAAQ;SAAI;QACzC,gCAAQ,GAAR;YACE,OAAO,IAAI,CAAC,SAAS,CAAA;SACtB;QACD,wBAAC,UAAU,CAAC,GAAZ;YACE,OAAO,IAAI,CAAC,SAAS,CAAA;SACtB;QACH,oBAAC;IAAD,CAAC,IAAA;IAED;;;;;IAKA,SAAS,mBAAmB,CAAC,KAAU;QACrC,OAAO,OAAO,KAAK,KAAK,QAAQ,IAAI,OAAO,KAAK,CAAC,UAAU,CAAC,KAAK,UAAU,CAAA;IAC7E,CAAC;IAED;;;;;;IAMA,SAAS,cAAc,CAAC,KAAU;QAChC,IAAI,KAAK,KAAK,IAAI,IAAI,KAAK,KAAK,SAAS;YAAE,OAAO,EAAE,CAAA;QACpD,KAAK,GAAG,KAAK,CAAC,QAAQ,EAAE,CAAA;QACxB,IAAI,MAAM,GAAQ,SAAS,CAAA;QAC3B,IAAI,CAAC,GAAG,CAAC,CAAA;QACT,SAAS,aAAa;YACpB,IAAI,MAAM,KAAK,SAAS,EAAE;gBACxB,MAAM,GAAG,KAAK,CAAC,SAAS,CAAC,CAAC,EAAE,CAAC,CAAC,CAAA;aAC/B;SACF;QACD,OAAO,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;YAC5B,IAAM,CAAC,GAAG,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,CAAA;YACzB,QAAQ,CAAC;gBACP,KAAK,IAAI;oBACP,aAAa,EAAE,CAAA;oBACf,MAAM,IAAI,KAAK,CAAA;oBACf,MAAK;gBACP,KAAK,IAAI;oBACP,aAAa,EAAE,CAAA;oBACf,MAAM,IAAI,KAAK,CAAA;oBACf,MAAK;gBACP,KAAK,IAAI;oBACP,aAAa,EAAE,CAAA;oBACf,MAAM,IAAI,KAAK,CAAA;oBACf,MAAK;gBACP,KAAK,GAAG,CAAC;gBACT,KAAK,IAAI;oBACP,aAAa,EAAE,CAAA;oBACf,MAAM,GAAG,MAAM,GAAG,IAAI,GAAG,CAAC,CAAA;oBAC1B,MAAK;gBACP,KAAK,GAAG;;oBAEN,IAAI,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC,MAAM,IAAI,KAAK,CAAC,MAAM,CAAC,CAAC,GAAG,CAAC,CAAC,KAAK,GAAG,EAAE;wBACvD,aAAa,EAAE,CAAA;wBACf,CAAC,EAAE,CAAA;wBACH,MAAM,IAAI,MAAM,CAAA;wBAChB,MAAK;qBACN;;oBAED,IAAI,MAAM,IAAI,SAAS,EAAE;wBACvB,MAAM,IAAI,CAAC,CAAA;qBACZ;oBACD,MAAK;gBACP;oBACE,IAAI,MAAM,IAAI,SAAS,EAAE;wBACvB,MAAM,IAAI,CAAC,CAAA;qBACZ;aACJ;SACF;QACD,IAAI,MAAM,KAAK,SAAS,EAAE;YACxB,OAAO,MAAM,CAAA;SACd;QACD,OAAO,KAAK,CAAA;IACd,CAAC;IAED;;;aAGgB,UAAU,CAAC,KAAU;QACnC,OAAO,IAAI,aAAa,CAAC,OAAI,cAAc,CAAC,KAAK,CAAC,OAAG,CAAC,CAAA;IACxD,CAAC;IAED;;;aAGgB,WAAW,CAAC,KAAU;QACpC,IAAM,GAAG,GAAG,MAAM,CAAC,KAAK,CAAC,CAAA;QACzB,KAAgB,UAAG,EAAH,WAAG,EAAH,iBAAG,EAAH,IAAG,EAAE;YAAhB,IAAM,CAAC,YAAA;YACV,IAAI,CAAC,GAAG,GAAG,IAAI,CAAC,GAAG,GAAG;gBAAE,MAAM,IAAI,KAAK,CAAC,yBAAuB,GAAK,CAAC,CAAA;SACtE;QACD,OAAO,IAAI,aAAa,CAAC,GAAG,CAAC,CAAA;IAC/B,CAAC;IAED;;;;;;aAMgB,aAAa,CAAC,KAAU;QACtC,IAAM,GAAG,GAAG,MAAM,CAAC,KAAK,CAAC,CAAA;QACzB,IAAI,GAAG,GAAG,KAAK,CAAA;QACf,KAAgB,UAAG,EAAH,WAAG,EAAH,iBAAG,EAAH,IAAG,EAAE;YAAhB,IAAM,CAAC,YAAA;YACV,IAAI,CAAC,KAAK,GAAG,EAAE;gBACb,IAAI,GAAG;oBAAE,MAAM,IAAI,KAAK,CAAC,uBAAqB,GAAK,CAAC,CAAA;gBACpD,GAAG,GAAG,CAAC,GAAG,CAAA;aACX;YACD,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC,GAAG,GAAG,IAAI,CAAC,GAAG,GAAG,CAAC;gBACnC,MAAM,IAAI,KAAK,CAAC,uBAAqB,GAAK,CAAC,CAAA;SAC9C;QACD,OAAO,GAAG,CAAA;IACZ,CAAC;IACD;;;aAGgB,SAAS,CAAC,KAAU;QAClC,OAAO,IAAI,aAAa,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC,CAAA;IAChD,CAAC;IAED,SAAS,gBAAgB,CAAC,KAAU;QAClC,OAAO,eAAY,cAAc,CAAC,KAAK,CAAC,QAAI,CAAA;IAC9C,CAAC;IAED;;;aAGgB,YAAY,CAAC,KAAU;QACrC,OAAO,IAAI,aAAa,CAAC,gBAAgB,CAAC,KAAK,CAAC,CAAC,CAAA;IACnD,CAAC;IAED;;;aAGgB,YAAY,CAAC,KAAU;QACrC,OAAO,IAAI,aAAa,CAAC,mBAAgB,cAAc,CAAC,KAAK,CAAC,QAAI,CAAC,CAAA;IACrE,CAAC;IAED,SAAS,cAAc,CAAC,KAAU;QAChC,OAAO,yBAAsB,cAAc,CAAC,KAAK,CAAC,QAAI,CAAA;IACxD,CAAC;IAED;;;aAGgB,UAAU,CAAC,KAAU;;QAEnC,OAAO,IAAI,aAAa,CAAC,cAAc,CAAC,KAAK,CAAC,CAAC,CAAA;IACjD,CAAC;IAED;;;aAGgB,QAAQ,CAAC,KAAU;QACjC,IAAI,KAAK,KAAK,MAAM,IAAI,KAAK,KAAK,OAAO,EAAE;YACzC,OAAO,IAAI,aAAa,CAAC,KAAK,CAAC,CAAA;SAChC;QACD,OAAO,IAAI,aAAa,CAAC,CAAC,CAAC,CAAC,KAAK,EAAE,QAAQ,EAAE,CAAC,CAAA;IAChD,CAAC;IAED;;;;;;aAMgB,cAAc,CAAC,KAAU;QACvC,OAAO,IAAI,aAAa,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAA;IACzC,CAAC;IAED;;;;;aAKgB,WAAW,CAAC,KAAU;QACpC,IAAI,KAAK,KAAK,SAAS,EAAE;YACvB,OAAO,EAAE,CAAA;SACV;aAAM,IAAI,KAAK,KAAK,IAAI,EAAE;YACzB,OAAO,MAAM,CAAA;SACd;aAAM,IAAI,OAAO,KAAK,KAAK,SAAS,EAAE;YACrC,OAAO,KAAK,CAAC,QAAQ,EAAE,CAAA;SACxB;aAAM,IAAI,OAAO,KAAK,KAAK,QAAQ,EAAE;YACpC,OAAO,OAAI,cAAc,CAAC,KAAK,CAAC,OAAG,CAAA;SACpC;aAAM,IAAI,OAAO,KAAK,KAAK,QAAQ,EAAE;YACpC,OAAO,aAAa,CAAC,KAAK,CAAC,CAAA;SAC5B;aAAM,IAAI,OAAO,KAAK,KAAK,QAAQ,EAAE;YACpC,IAAI,OAAO,KAAK,CAAC,UAAU,CAAC,KAAK,UAAU,EAAE;gBAC3C,OAAO,KAAK,CAAC,UAAU,CAAC,EAAE,CAAA;aAC3B;iBAAM,IAAI,KAAK,YAAY,IAAI,EAAE;gBAChC,OAAO,KAAK,CAAC,WAAW,EAAE,CAAA;aAC3B;iBAAM,IAAI,KAAK,YAAY,MAAM,EAAE;gBAClC,OAAO,cAAc,CAAC,KAAK,CAAC,CAAA;aAC7B;iBAAM,IAAI,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE;gBAC/B,OAAO,MAAI,KAAK,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,MAAG,CAAA;aAC/C;SACF;;QAED,OAAO,WAAW,CAAC,KAAK,CAAC,QAAQ,EAAE,CAAC,CAAA;IACtC,CAAC;IAED;;;;aAIgB,IAAI,CAClB,OAA6B;QAC7B,gBAAc;aAAd,UAAc,EAAd,qBAAc,EAAd,IAAc;YAAd,+BAAc;;QAEd,IAAI,OAAO,CAAC,MAAM,IAAI,CAAC,KAAK,CAAC,MAAM,IAAI,MAAM,CAAC,MAAM,KAAK,CAAC,CAAC,EAAE;YAC3D,OAAO,cAAc,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAA;SAClC;QACD,IAAM,KAAK,GAAG,IAAI,KAAK,CAAS,OAAO,CAAC,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC,CAAA;QAC/D,IAAI,SAAS,GAAG,CAAC,CAAA;QACjB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,OAAO,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;YACvC,IAAM,IAAI,GAAG,OAAO,CAAC,CAAC,CAAC,CAAA;YACvB,KAAK,CAAC,SAAS,EAAE,CAAC,GAAG,IAAI,CAAA;YACzB,IAAI,CAAC,GAAG,MAAM,CAAC,MAAM,EAAE;gBACrB,IAAM,GAAG,GAAG,MAAM,CAAC,CAAC,CAAC,CAAA;gBACrB,IAAI,SAAS,SAAQ,CAAA;gBACrB,IACE,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC;oBAClB,CAAC,GAAG,CAAC,GAAG,OAAO,CAAC,MAAM;oBACtB,OAAO,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,UAAU,CAAC,GAAG,CAAC,EAC9B;;oBAEA,SAAS,GAAG,cAAc,CAAC,GAAG,CAAC,CAAA;iBAChC;qBAAM;oBACL,SAAS,GAAG,WAAW,CAAC,GAAG,CAAC,CAAA;oBAC5B,IAAI,SAAS,KAAK,EAAE,EAAE;;wBAEpB,IAAI,CAAC,mBAAmB,CAAC,GAAG,CAAC,EAAE;4BAC7B,MAAM,IAAI,KAAK,CACb,oCAAkC,GAAG,oBAAe,CAAC,gBAAW,OAAO,GAAK,CAC7E,CAAA;yBACF;qBACF;iBACF;gBACD,KAAK,CAAC,SAAS,EAAE,CAAC,GAAG,SAAS,CAAA;aAC/B;iBAAM,IAAI,CAAC,GAAG,OAAO,CAAC,MAAM,GAAG,CAAC,EAAE;gBACjC,MAAM,IAAI,KAAK,CAAC,8BAA8B,CAAC,CAAA;aAChD;SACF;;QAED,OAAO,cAAc,CAAC,KAAK,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,CAAA;IACvC;;IC7QA;IASA;QACa,gBAAgB,GAAG,CAAC;QAG/B,OAAA,CAAC,OAAO,MAAM,KAAK,UAAU,IAAI,MAAM,CAAC,UAAU,KAAK,cAAc;IAArE,CAAqE;;ICXvE;;;;;;;;;QAcE,eAAY,eAAwB;YAT5B,SAAI,GAA4B,EAAE,CAAA;YAClC,WAAM,GAA4B,EAAE,CAAA;YAS1C,IAAI,eAAe;gBAAE,IAAI,CAAC,IAAI,GAAG,eAAe,CAAA;SACjD;;;;;;;QAQM,2BAAW,GAAlB,UAAmB,IAAY;YAC7B,IAAI,CAAC,IAAI,GAAG,IAAI,CAAA;YAChB,OAAO,IAAI,CAAA;SACZ;;;;;;;;QASM,mBAAG,GAAV,UAAW,IAAY,EAAE,KAAa;YACpC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,KAAK,CAAA;YACvB,OAAO,IAAI,CAAA;SACZ;;;;;;;;QASM,4BAAY,GAAnB,UAAoB,IAAY,EAAE,KAAoB;YACpD,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,KAAK,GAAG,GAAG,GAAG,GAAG,CAAA;YACrC,OAAO,IAAI,CAAA;SACZ;;;;;;;;QASM,wBAAQ,GAAf,UAAgB,IAAY,EAAE,KAAmB;YAC/C,IAAI,OAAO,KAAK,KAAK,QAAQ,EAAE;gBAC7B,IAAI,GAAG,SAAQ,CAAA;gBACf,IAAI,KAAK,EAAE,GAAG,GAAG,QAAQ,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,EAAE,EAAE;oBAC1C,MAAM,IAAI,KAAK,CACb,sCAAoC,IAAI,mBAAc,KAAK,OAAI,CAChE,CAAA;iBACF;gBACD,KAAK,GAAG,GAAG,CAAA;aACZ;YACD,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,GAAM,IAAI,CAAC,KAAK,CAAC,KAAe,CAAC,MAAG,CAAA;YACrD,OAAO,IAAI,CAAA;SACZ;;;;;;;;QASM,0BAAU,GAAjB,UAAkB,IAAY,EAAE,KAAmB;YACjD,IAAI,OAAO,KAAK,KAAK,QAAQ,EAAE;gBAC7B,IAAI,GAAG,SAAQ,CAAA;gBACf,IAAI,KAAK,EAAE,GAAG,GAAG,UAAU,CAAC,KAAK,CAAC,EAAE,EAAE;oBACpC,MAAM,IAAI,KAAK,CACb,oCAAkC,IAAI,mBAAc,KAAK,OAAI,CAC9D,CAAA;iBACF;gBACD,KAAK,GAAG,GAAG,CAAA;aACZ;YACD,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,MAAM,CAAC,KAAK,CAAC,CAAA;YACjC,OAAO,IAAI,CAAA;SACZ;;;;;;;;QASM,2BAAW,GAAlB,UAAmB,IAAY,EAAE,KAAmB;YAClD,IAAI,KAAK,KAAK,IAAI,IAAI,KAAK,KAAK,SAAS,EAAE;gBACzC,IAAI,OAAO,KAAK,KAAK,QAAQ;oBAAE,KAAK,GAAG,MAAM,CAAC,KAAK,CAAC,CAAA;gBACpD,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,CAAA;aACzC;YACD,OAAO,IAAI,CAAA;SACZ;;;;;;;;;;;;QAaM,yBAAS,GAAhB,UAAiB,KAAyC;YACxD,IAAI,CAAC,IAAI,GAAG,KAAK,CAAA;YACjB,OAAO,IAAI,CAAA;SACZ;;;;;;QAOM,8BAAc,GAArB,UAAsB,QAAwB;YAA9C,iBAqCC;YApCC,IAAI,CAAC,IAAI,CAAC,IAAI;gBAAE,OAAO,SAAS,CAAA;YAChC,IAAI,UAAU,GAAG,EAAE,CAAA;YACnB,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC;iBACrB,IAAI,EAAE;iBACN,OAAO,CAAC,UAAA,CAAC;gBACR,IAAI,CAAC,EAAE;oBACL,IAAM,GAAG,GAAG,KAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAA;oBAC1B,IAAI,UAAU,CAAC,MAAM,GAAG,CAAC;wBAAE,UAAU,IAAI,GAAG,CAAA;oBAC5C,UAAU,IAAO,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC,SAAI,GAAK,CAAA;iBACxC;aACF,CAAC,CAAA;YACJ,IAAI,UAAU,CAAC,MAAM,KAAK,CAAC;gBAAE,OAAO,SAAS,CAAA;YAC7C,IAAI,QAAQ,GAAG,EAAE,CAAA;YACjB,IAAM,IAAI,GACR,QAAQ,IAAI,QAAQ,CAAC,WAAW;wCACxB,QAAQ,CAAC,WAAW,GAAK,IAAI,CAAC,IAAI,IACtC,IAAI,CAAC,IAAI,CAAA;YACf,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC;iBACd,IAAI,EAAE;iBACN,OAAO,CAAC,UAAA,CAAC;gBACR,IAAI,CAAC,EAAE;oBACL,IAAM,GAAG,GAAG,IAAI,CAAC,CAAC,CAAC,CAAA;oBACnB,IAAI,GAAG,EAAE;wBACP,QAAQ,IAAI,GAAG,CAAA;wBACf,QAAQ,IAAO,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC,SAAI,MAAM,CAAC,GAAG,CAAC,GAAG,CAAG,CAAA;qBAClD;iBACF;aACF,CAAC,CAAA;YACJ,IAAI,IAAI,GAAG,IAAI,CAAC,IAAI,CAAA;YACpB,IAAI,QAAQ,IAAI,QAAQ,CAAC,WAAW,EAAE;gBACpC,IAAI,GAAG,QAAQ,CAAC,WAAW,CAAC,IAAI,CAAC,CAAA;aAClC;YAED,OAAO,KAAG,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,QAAQ,SAAI,UAAU,IAC9D,IAAI,KAAK,SAAS,GAAG,GAAG,GAAG,IAAI,GAAG,EAAE,CACpC,CAAA;SACH;QAED,wBAAQ,GAAR;YACE,IAAM,IAAI,GAAG,IAAI,CAAC,cAAc,CAAC,SAAS,CAAC,CAAA;YAC3C,OAAO,IAAI,GAAG,IAAI,GAAG,oBAAkB,IAAI,CAAC,SAAS,CAAC,IAAI,EAAE,SAAS,CAAG,CAAA;SACzE;QACH,YAAC;IAAD,CAAC;;ICxKD;;;IAGO,IAAM,aAAa,GAAW,MAAM,CAAC,MAAM,CAAC;QACjD,KAAK,YAAC,OAAO,EAAE,KAAK;;YAElB,OAAO,CAAC,KAAK,CAAC,SAAS,GAAG,OAAO,EAAE,KAAK,GAAG,KAAK,GAAG,EAAE,CAAC,CAAA;SACvD;QACD,IAAI,YAAC,OAAO,EAAE,KAAK;;YAEjB,OAAO,CAAC,IAAI,CAAC,QAAQ,GAAG,OAAO,EAAE,KAAK,GAAG,KAAK,GAAG,EAAE,CAAC,CAAA;SACrD;KACF,CAAC,CAAA;IACF,IAAI,QAAQ,GAAW,aAAa,CAAA;IAEpC,IAAM,MAAM,GAAW;QACrB,KAAK,YAAC,OAAO,EAAE,KAAK;YAClB,QAAQ,CAAC,KAAK,CAAC,OAAO,EAAE,KAAK,CAAC,CAAA;SAC/B;QACD,IAAI,YAAC,OAAO,EAAE,KAAK;YACjB,QAAQ,CAAC,IAAI,CAAC,OAAO,EAAE,KAAK,CAAC,CAAA;SAC9B;KACF;;ICxBD;;;;IAIA;QAIE,2BAAY,OAA4C;YACtD,IAAI,CAAC,OAAO,yBAAO,iCAAiC,GAAK,OAAO,CAAC,CAAA;YACjE,IAAI,CAAC,OAAO,EAAE,CAAA;SACf;QAED,qCAAS,GAAT,UAAU,KAAa,EAAE,cAAuB;YAC9C,IAAM,KAAK,GAAG,aAAa,CAAC,KAAK,CAAC,CAAA;YAClC,IAAI,KAAK,IAAI,KAAK,GAAG,CAAC,EAAE;gBACtB,OAAO,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,IAAI,CAAC,OAAO,CAAC,WAAW,CAAC,CAAA;aACpE;iBAAM;gBACL,IAAI,OAAK,GAAG,IAAI,CAAC,YAAY,CAAA;gBAC7B,IAAI,cAAc,IAAI,cAAc,GAAG,CAAC,EAAE;;oBAExC,OAAK,GAAG,IAAI,CAAC,OAAO,CAAC,aAAa,CAAA;oBAClC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,cAAc,EAAE,CAAC,EAAE,EAAE;wBACvC,OAAK,GAAG,OAAK,GAAG,IAAI,CAAC,OAAO,CAAC,eAAe,CAAA;wBAC5C,IAAI,OAAK,IAAI,IAAI,CAAC,OAAO,CAAC,aAAa,EAAE;4BACvC,MAAK;yBACN;qBACF;oBACD,QACE,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,OAAK,EAAE,CAAC,CAAC,EAAE,IAAI,CAAC,OAAO,CAAC,aAAa,CAAC;wBACxD,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,IAAI,CAAC,OAAO,CAAC,WAAW,CAAC,EACrD;iBACF;qBAAM,IAAI,IAAI,CAAC,YAAY,EAAE;oBAC5B,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,GAAG,CAC1B,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,OAAO,CAAC,eAAe,EAAE,CAAC,CAAC;wBAC3D,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,IAAI,CAAC,OAAO,CAAC,WAAW,CAAC,EACtD,IAAI,CAAC,OAAO,CAAC,aAAa,CAC3B,CAAA;iBACF;qBAAM;oBACL,IAAI,CAAC,YAAY;wBACf,IAAI,CAAC,OAAO,CAAC,aAAa;4BAC1B,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,IAAI,CAAC,OAAO,CAAC,WAAW,CAAC,CAAA;iBACvD;gBACD,OAAO,IAAI,CAAC,YAAY,CAAA;aACzB;SACF;QACD,mCAAO,GAAP;YACE,IAAI,CAAC,YAAY,GAAG,SAAS,CAAA;SAC9B;QACH,wBAAC;IAAD,CAAC,IAAA;IAED;;;;;aAKgB,wBAAwB,CACtC,OAA4C;QAE5C,OAAO,IAAI,iBAAiB,CAAC,OAAO,CAAC,CAAA;IACvC;;IChEA;IACA,IAAM,cAAc,GAAG,CAAC,CAAA;IAQxB;;;IAGA;QAQE,qBACU,QAAgB,EAChB,UAGU;YAJV,aAAQ,GAAR,QAAQ,CAAQ;YAChB,eAAU,GAAV,UAAU,CAGA;YAVpB,SAAI,GAAG,CAAC,CAAA;YACR,kBAAa,GAAG,CAAC,CAAA;YACjB,WAAM,GAAG,KAAK,CAAA;YACN,mBAAc,GAAQ,SAAS,CAAA;SAQnC;QAEJ,8BAAQ,GAAR,UAAS,KAAe,EAAE,UAAkB,EAAE,KAAa;YACzD,IAAI,IAAI,CAAC,MAAM;gBAAE,OAAM;YACvB,IAAI,CAAC,KAAK,CAAC,MAAM;gBAAE,OAAM;YACzB,IAAM,SAAS,GAAG,IAAI,CAAC,GAAG,EAAE,GAAG,KAAK,CAAA;YACpC,IAAI,SAAS,GAAG,IAAI,CAAC,aAAa;gBAAE,IAAI,CAAC,aAAa,GAAG,SAAS,CAAA;;YAElE,IAAI,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,IAAI,GAAG,KAAK,CAAC,MAAM,GAAG,IAAI,CAAC,QAAQ,EAAE;gBAC1D,IAAM,QAAQ,GAAG,IAAI,CAAC,IAAI,CAAA;gBAC1B,IAAM,OAAO,GAAG,QAAQ,GAAG,GAAG,CAAA;gBAC9B,GAAG;oBACD,IAAM,QAAQ,GAAG,IAAI,CAAC,KAAK,CAAC,IAAiB,CAAA;oBAC7C,IAAI,CAAC,IAAI,IAAI,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,MAAM,CAAA;oBACpC,IAAI,CAAC,KAAK,GAAG,QAAQ,CAAA;iBACtB,QAAQ,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,IAAI,GAAG,KAAK,CAAC,MAAM,GAAG,OAAO,EAAC;gBAC1D,MAAM,CAAC,KAAK,CACV,mBAAgB,QAAQ;oBACtB,IAAI;yBACD,IAAI,sEACP,IAAI,CAAC,QAAQ,WACP,CACT,CAAA;aACF;YACD,IAAM,KAAK,GAAG;gBACZ,KAAK,OAAA;gBACL,UAAU,YAAA;aACX,CAAA;YACD,IAAI,IAAI,CAAC,IAAI,EAAE;gBACb,IAAI,CAAC,IAAI,CAAC,IAAI,GAAG,KAAK,CAAA;gBACtB,IAAI,CAAC,IAAI,GAAG,KAAK,CAAA;aAClB;iBAAM;gBACL,IAAI,CAAC,KAAK,GAAG,KAAK,CAAA;gBAClB,IAAI,CAAC,IAAI,GAAG,KAAK,CAAA;gBACjB,IAAI,CAAC,aAAa,CAAC,KAAK,CAAC,CAAA;aAC1B;YACD,IAAI,CAAC,IAAI,IAAI,KAAK,CAAC,MAAM,CAAA;SAC1B;QAED,iCAAW,GAAX;YACE,IAAI,IAAI,CAAC,KAAK,EAAE;gBACd,IAAM,OAAO,GAAG,IAAI,CAAC,KAAK,CAAA;gBAC1B,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAA;gBAC5B,IAAI,CAAC,IAAI,IAAI,OAAO,CAAC,KAAK,CAAC,MAAM,CAAA;gBACjC,IAAI,CAAC,IAAI,CAAC,KAAK;oBAAE,IAAI,CAAC,IAAI,GAAG,SAAS,CAAA;gBACtC,OAAO,OAAO,CAAA;aACf;YACD,OAAO,SAAS,CAAA;SACjB;QAED,mCAAa,GAAb,UAAc,KAAa;YAA3B,iBAiBC;YAhBC,IAAI,CAAC,cAAc,GAAG,UAAU,CAAC;gBAC/B,IAAM,OAAO,GAAG,KAAI,CAAC,WAAW,EAAE,CAAA;gBAClC,IAAI,OAAO,EAAE;oBACX,KAAI,CAAC,UAAU,CAAC,OAAO,CAAC,KAAK,EAAE,OAAO,CAAC,UAAU,CAAC;yBAC/C,IAAI,CAAC;;wBAEJ,KAAI,CAAC,aAAa,CAAC,cAAc,CAAC,CAAA;qBACnC,CAAC;yBACD,KAAK,CAAC,UAAA,EAAE;;wBAEP,KAAI,CAAC,aAAa,CAAC,KAAI,CAAC,aAAa,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC,CAAA;qBACpD,CAAC,CAAA;iBACL;qBAAM;oBACL,KAAI,CAAC,cAAc,GAAG,SAAS,CAAA;iBAChC;aACF,EAAE,KAAK,CAAC,CAAA;SACV;QAEK,2BAAK,GAAX;;;;;;kCAEU,OAAO,GAAG,IAAI,CAAC,WAAW,EAAE,CAAC;4BACnC,qBAAM,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,KAAK,EAAE,OAAO,CAAC,UAAU,CAAC,EAAA;;4BAAxD,SAAwD,CAAA;;;;;;SAE3D;QAED,2BAAK,GAAL;YACE,IAAI,IAAI,CAAC,cAAc,EAAE;gBACvB,YAAY,CAAC,IAAI,CAAC,cAAc,CAAC,CAAA;gBACjC,IAAI,CAAC,cAAc,GAAG,SAAS,CAAA;aAChC;YACD,IAAI,CAAC,MAAM,GAAG,IAAI,CAAA;YAClB,OAAO,IAAI,CAAC,IAAI,CAAA;SACjB;QACH,kBAAC;IAAD,CAAC;;IChGD;QAIE,qBACU,eAAuB,EACvB,OAA2C,EAC3C,YAAwB;YAFxB,oBAAe,GAAf,eAAe,CAAQ;YACvB,YAAO,GAAP,OAAO,CAAoC;YAC3C,iBAAY,GAAZ,YAAY,CAAY;YANlC,WAAM,GAAG,CAAC,CAAA;YAQR,IAAI,CAAC,KAAK,GAAG,IAAI,KAAK,CAAS,eAAe,CAAC,CAAA;SAChD;QAED,yBAAG,GAAH,UAAI,MAAc;YAChB,IAAI,IAAI,CAAC,MAAM,KAAK,CAAC,EAAE;gBACrB,IAAI,CAAC,YAAY,EAAE,CAAA;aACpB;YACD,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,MAAM,CAAA;YAChC,IAAI,CAAC,MAAM,EAAE,CAAA;YACb,IAAI,IAAI,CAAC,MAAM,IAAI,IAAI,CAAC,eAAe,EAAE;gBACvC,IAAI,CAAC,KAAK,EAAE,CAAC,KAAK,CAAC,UAAA,EAAE;;iBAEpB,CAAC,CAAA;aACH;SACF;QACD,2BAAK,GAAL;YACE,IAAM,KAAK,GAAG,IAAI,CAAC,KAAK,EAAE,CAAA;YAC1B,IAAI,KAAK,CAAC,MAAM,GAAG,CAAC,EAAE;gBACpB,OAAO,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,CAAA;aAC3B;iBAAM;gBACL,OAAO,OAAO,CAAC,OAAO,EAAE,CAAA;aACzB;SACF;QACD,2BAAK,GAAL;YACE,IAAM,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,EAAE,IAAI,CAAC,MAAM,CAAC,CAAA;YAC/C,IAAI,CAAC,MAAM,GAAG,CAAC,CAAA;YACf,OAAO,MAAM,CAAA;SACd;QACH,kBAAC;IAAD,CAAC,IAAA;IAED;QAkBE,sBACU,SAAoB,EAC5B,GAAW,EACX,MAAc,EACd,SAA6B,EAC7B,YAAoC;YALtC,iBAsDC;YArDS,cAAS,GAAT,SAAS,CAAW;YAjBtB,WAAM,GAAG,KAAK,CAAA;YAGd,gBAAW,GAAgB;gBACjC,MAAM,EAAE,MAAM;gBACd,OAAO,EAAE;oBACP,cAAc,EAAE,2BAA2B;iBAC5C;aACF,CAAA;YACO,mBAAc,GAAQ,SAAS,CAAA;YAcrC,IAAI,CAAC,QAAQ,GAAG,uBAAqB,kBAAkB,CACrD,GAAG,CACJ,gBAAW,kBAAkB,CAAC,MAAM,CAAC,mBAAc,SAAW,CAAA;YAC/D,IAAI,CAAC,YAAY,yBACZ,oBAAoB,GACpB,YAAY,CAChB,CAAA;YACD,IAAI,CAAC,WAAW,GAAG,WAAW,CAAC,SAAS,CAAC,CAAA;YACzC,IAAI,CAAC,uBAAuB,GAAG,uBAAuB,CAAC,SAAS,CAAC,CAAA;YACjE,IAAI,IAAI,CAAC,YAAY,CAAC,WAAW,EAAE;gBACjC,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,YAAY,CAAC,WAAW,CAAC,CAAA;aACnD;YAED,IAAM,gBAAgB,GAAG;gBACvB,IAAI,KAAI,CAAC,YAAY,CAAC,aAAa,GAAG,CAAC,EAAE;oBACvC,KAAI,CAAC,kBAAkB,EAAE,CAAA;;oBAEzB,IAAI,CAAC,KAAI,CAAC,MAAM,EAAE;wBAChB,KAAI,CAAC,cAAc,GAAG,UAAU,CAC9B;4BACE,OAAA,KAAI,CAAC,SAAS,CACZ,KAAI,CAAC,WAAW,CAAC,KAAK,EAAE,EACxB,KAAI,CAAC,YAAY,CAAC,UAAU,GAAG,CAAC,CACjC,CAAC,KAAK,CAAC,UAAA,EAAE;;6BAET,CAAC;yBAAA,EACJ,KAAI,CAAC,YAAY,CAAC,aAAa,CAChC,CAAA;qBACF;iBACF;aACF,CAAA;;YAED,IAAI,CAAC,WAAW,GAAG,IAAI,WAAW,CAChC,IAAI,CAAC,YAAY,CAAC,SAAS,EAC3B,UAAA,KAAK;gBACH,KAAI,CAAC,kBAAkB,EAAE,CAAA;gBACzB,OAAO,KAAI,CAAC,SAAS,CAAC,KAAK,EAAE,KAAI,CAAC,YAAY,CAAC,UAAU,GAAG,CAAC,CAAC,CAAA;aAC/D,EACD,gBAAgB,CACjB,CAAA;YACD,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;;YAE1C,IAAI,CAAC,aAAa,GAAG,wBAAwB,CAAC,IAAI,CAAC,YAAY,CAAC,CAAA;YAChE,IAAI,CAAC,WAAW,GAAG,IAAI,WAAW,CAChC,IAAI,CAAC,YAAY,CAAC,cAAc,EAChC,IAAI,CAAC,SAAS,CACf,CAAA;SACF;QAED,gCAAS,GAAT,UAAU,KAAe,EAAE,QAAgB;YAA3C,iBAkDC;;YAhDC,IAAM,IAAI,GAAiB,IAAI,CAAA;YAC/B,IAAI,CAAC,IAAI,CAAC,MAAM,IAAI,KAAK,CAAC,MAAM,GAAG,CAAC,EAAE;gBACpC,OAAO,IAAI,OAAO,CAAO,UAAC,OAAO,EAAE,MAAM;oBACvC,KAAI,CAAC,SAAS,CAAC,IAAI,CAAC,KAAI,CAAC,QAAQ,EAAE,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,KAAI,CAAC,WAAW,EAAE;wBACrE,KAAK,EAAL,UAAM,KAAY;4BAChB,IAAM,cAAc,GAAG,IAAI,CAAC,YAAY,CAAC,UAAU,GAAG,CAAC,GAAG,QAAQ,CAAA;;4BAElE,IAAM,OAAO,GAAG,IAAI,CAAC,YAAY,CAAC,WAAW,CAAC,IAAI,CAChD,IAAI,EACJ,KAAK,EACL,KAAK,EACL,cAAc,CACf,CAAA;4BACD,IAAI,OAAO,EAAE;gCACX,OAAO,CAAC,IAAI,CAAC,OAAO,EAAE,MAAM,CAAC,CAAA;gCAC7B,OAAM;6BACP;4BACD,IACE,CAAC,IAAI,CAAC,MAAM;gCACZ,QAAQ,GAAG,CAAC;iCACX,EAAE,KAAK,YAAY,SAAS,CAAC;oCAC3B,KAAmB,CAAC,UAAU,IAAI,GAAG,CAAC,EACzC;gCACA,MAAM,CAAC,IAAI,CACT,oDAAiD,QAAQ;oCACvD,CAAC,QAAI,EACP,KAAK,CACN,CAAA;gCACD,IAAI,CAAC,WAAW,CAAC,QAAQ,CACvB,KAAK,EACL,QAAQ,GAAG,CAAC,EACZ,IAAI,CAAC,aAAa,CAAC,SAAS,CAAC,KAAK,EAAE,cAAc,CAAC,CACpD,CAAA;gCACD,MAAM,CAAC,KAAK,CAAC,CAAA;gCACb,OAAM;6BACP;4BACD,MAAM,CAAC,KAAK,CAAC,2BAA2B,EAAE,KAAK,CAAC,CAAA;4BAChD,MAAM,CAAC,KAAK,CAAC,CAAA;yBACd;wBACD,QAAQ,EAAR;4BACE,IAAI,CAAC,aAAa,CAAC,OAAO,EAAE,CAAA;4BAC5B,OAAO,EAAE,CAAA;yBACV;qBACF,CAAC,CAAA;iBACH,CAAC,CAAA;aACH;iBAAM;gBACL,OAAO,OAAO,CAAC,OAAO,EAAE,CAAA;aACzB;SACF;QAEO,yCAAkB,GAA1B;YACE,IAAI,IAAI,CAAC,cAAc,KAAK,SAAS,EAAE;gBACrC,YAAY,CAAC,IAAI,CAAC,cAAc,CAAC,CAAA;gBACjC,IAAI,CAAC,cAAc,GAAG,SAAS,CAAA;aAChC;SACF;QAED,kCAAW,GAAX,UAAY,MAAc;YACxB,IAAI,IAAI,CAAC,MAAM,EAAE;gBACf,MAAM,IAAI,KAAK,CAAC,2BAA2B,CAAC,CAAA;aAC7C;YACD,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,MAAM,CAAC,CAAA;SAC7B;QACD,mCAAY,GAAZ,UAAa,OAA0B;YACrC,IAAI,IAAI,CAAC,MAAM,EAAE;gBACf,MAAM,IAAI,KAAK,CAAC,2BAA2B,CAAC,CAAA;aAC7C;YACD,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,OAAO,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;gBACvC,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAA;aACjC;SACF;QACD,iCAAU,GAAV,UAAW,KAAY;YACrB,IAAI,IAAI,CAAC,MAAM,EAAE;gBACf,MAAM,IAAI,KAAK,CAAC,2BAA2B,CAAC,CAAA;aAC7C;YACD,IAAM,IAAI,GAAG,KAAK,CAAC,cAAc,CAAC,IAAI,CAAC,CAAA;YACvC,IAAI,IAAI;gBAAE,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,IAAI,CAAC,CAAA;SACrC;QACD,kCAAW,GAAX,UAAY,MAAwB;YAClC,IAAI,IAAI,CAAC,MAAM,EAAE;gBACf,MAAM,IAAI,KAAK,CAAC,2BAA2B,CAAC,CAAA;aAC7C;YACD,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;gBACtC,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAA;aAC3B;SACF;QACK,4BAAK,GAAX,UAAY,eAAyB;;;;gCACnC,qBAAM,IAAI,CAAC,WAAW,CAAC,KAAK,EAAE,EAAA;;4BAA9B,SAA8B,CAAA;iCAC1B,eAAe,EAAf,wBAAe;4BACV,qBAAM,IAAI,CAAC,WAAW,CAAC,KAAK,EAAE,EAAA;gCAArC,sBAAO,SAA8B,EAAA;;;;;SAExC;QACD,4BAAK,GAAL;YAAA,iBAYC;YAXC,IAAM,MAAM,GAAG,IAAI,CAAC,WAAW,CAAC,KAAK,EAAE,CAAC,OAAO,CAAC;gBAC9C,IAAM,SAAS,GAAG,KAAI,CAAC,WAAW,CAAC,KAAK,EAAE,CAAA;gBAC1C,IAAI,SAAS,EAAE;oBACb,MAAM,CAAC,KAAK,CACV,8BAA4B,SAAS,8CAA2C,EAChF,IAAI,CACL,CAAA;iBACF;gBACD,KAAI,CAAC,MAAM,GAAG,IAAI,CAAA;aACnB,CAAC,CAAA;YACF,OAAO,MAAM,CAAA;SACd;QACD,8BAAO,GAAP;YACE,IAAI,CAAC,kBAAkB,EAAE,CAAA;YACzB,IAAI,CAAC,MAAM,GAAG,IAAI,CAAA;YAClB,OAAO,IAAI,CAAC,WAAW,CAAC,KAAK,EAAE,GAAG,IAAI,CAAC,WAAW,CAAC,MAAM,CAAA;SAC1D;QAID,qCAAc,GAAd,UAAe,IAA6B;YAA5C,iBAQC;YAPC,IAAI,CAAC,WAAW,GAAG,SAAS,CAAA;YAC5B,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,UAAC,GAAW;gBACnC,CAAC,KAAI,CAAC,WAAW,KAAK,KAAI,CAAC,WAAW,GAAG,EAAE,CAAC,EAAE,GAAG,CAAC,GAAG,MAAM,CAAC,GAAG,CAC9D,IAAI,CAAC,GAAG,CAAC,CACV,CAAA;aACF,CAAC,CAAA;YACF,OAAO,IAAI,CAAA;SACZ;QACD,kCAAW,GAAX,UAAY,KAAyC;YACnD,IAAI,KAAK,KAAK,SAAS,EAAE;gBACvB,OAAO,IAAI,CAAC,WAAW,EAAE,CAAA;aAC1B;iBAAM,IAAI,OAAO,KAAK,KAAK,QAAQ,EAAE;gBACpC,OAAO,KAAK,CAAC,MAAM,GAAG,CAAC,GAAG,KAAK,GAAG,SAAS,CAAA;aAC5C;iBAAM,IAAI,KAAK,YAAY,IAAI,EAAE;gBAChC,OAAO,IAAI,CAAC,uBAAuB,CAAC,KAAK,CAAC,CAAA;aAC3C;iBAAM,IAAI,OAAO,KAAK,KAAK,QAAQ,EAAE;gBACpC,OAAO,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAA;aACjC;iBAAM;;gBAEL,OAAO,MAAM,CAAC,KAAK,CAAC,CAAA;aACrB;SACF;QACH,mBAAC;IAAD,CAAC;;ICzQD,IAAM,mBAAmB,GAAkB;QACzC,MAAM,EAAN,UAAO,KAAiB,EAAE,MAAkB;YAC1C,IAAM,MAAM,GAAG,IAAI,UAAU,CAAC,KAAK,CAAC,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC,CAAA;YAC3D,MAAM,CAAC,GAAG,CAAC,KAAK,CAAC,CAAA;YACjB,MAAM,CAAC,GAAG,CAAC,MAAM,EAAE,KAAK,CAAC,MAAM,CAAC,CAAA;YAChC,OAAO,MAAM,CAAA;SACd;QACD,YAAY,EAAZ,UAAa,KAAiB,EAAE,KAAa,EAAE,GAAW;;YAExD,IAAI,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAA;YAClB,IAAI,GAAG,GAAG,EAAE,CAAA;YACZ,IAAI,CAAC,GAAG,KAAK,CAAA;YACb,OAAO,CAAC,GAAG,GAAG,EAAE;gBACd,EAAE,GAAG,KAAK,CAAC,CAAC,EAAE,CAAC,CAAA;gBACf,QAAQ,EAAE,IAAI,CAAC;oBACb,KAAK,CAAC,CAAC;oBACP,KAAK,CAAC,CAAC;oBACP,KAAK,CAAC,CAAC;oBACP,KAAK,CAAC,CAAC;oBACP,KAAK,CAAC,CAAC;oBACP,KAAK,CAAC,CAAC;oBACP,KAAK,CAAC,CAAC;oBACP,KAAK,CAAC;;wBAEJ,GAAG,IAAI,MAAM,CAAC,YAAY,CAAC,EAAE,CAAC,CAAA;wBAC9B,MAAK;oBACP,KAAK,EAAE,CAAC;oBACR,KAAK,EAAE;;wBAEL,EAAE,GAAG,KAAK,CAAC,CAAC,EAAE,CAAC,CAAA;wBACf,GAAG,IAAI,MAAM,CAAC,YAAY,CAAC,CAAC,CAAC,EAAE,GAAG,IAAI,KAAK,CAAC,KAAK,EAAE,GAAG,IAAI,CAAC,CAAC,CAAA;wBAC5D,MAAK;oBACP,KAAK,EAAE;;wBAEL,EAAE,GAAG,KAAK,CAAC,CAAC,EAAE,CAAC,CAAA;wBACf,EAAE,GAAG,KAAK,CAAC,CAAC,EAAE,CAAC,CAAA;wBACf,GAAG,IAAI,MAAM,CAAC,YAAY,CACxB,CAAC,CAAC,EAAE,GAAG,IAAI,KAAK,EAAE,KAAK,CAAC,EAAE,GAAG,IAAI,KAAK,CAAC,CAAC,IAAI,EAAE,GAAG,IAAI,CAAC,CACvD,CAAA;wBACD,MAAK;oBACP,KAAK,EAAE;;wBAEL,EAAE,GAAG,KAAK,CAAC,CAAC,EAAE,CAAC,CAAA;wBACf,EAAE,GAAG,KAAK,CAAC,CAAC,EAAE,CAAC,CAAA;wBACf,EAAE,GAAG,KAAK,CAAC,CAAC,EAAE,CAAC,CAAA;wBACf,GAAG,IAAI,MAAM,CAAC,aAAa,CACzB,CAAC,CAAC,EAAE,GAAG,IAAI,KAAK,EAAE;6BACf,CAAC,EAAE,GAAG,IAAI,KAAK,EAAE,CAAC;6BAClB,CAAC,EAAE,GAAG,IAAI,KAAK,CAAC,CAAC;6BACjB,EAAE,GAAG,IAAI,CAAC,CACd,CAAA;wBACD,MAAK;iBACR;aACF;YACD,OAAO,GAAG,CAAA;SACX;QAED,IAAI,EAAJ,UAAK,KAAiB,EAAE,KAAa,EAAE,GAAW;YAChD,IAAM,MAAM,GAAG,IAAI,UAAU,CAAC,GAAG,GAAG,KAAK,CAAC,CAAA;YAC1C,MAAM,CAAC,GAAG,CAAC,KAAK,CAAC,KAAK,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC,CAAA;YACnC,OAAO,MAAM,CAAA;SACd;KACF;;aC9DuB,6BAA6B,CACnD,SAAmD;QAAnD,0BAAA,EAAA,cAAmD;QAEnD,IAAI,KAAK,GAAG,CAAC,CAAA;QACb,IAAM,MAAM,GAAG;YACb,IAAI,EAAE,UAAC,IAAS;gBACd,IACE,KAAK,KAAK,CAAC;oBACX,SAAS,CAAC,IAAI;oBACd,IAAI,KAAK,IAAI;oBACb,IAAI,KAAK,SAAS,EAClB;oBACA,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;iBACrB;aACF;YACD,KAAK,EAAE,UAAC,KAAY;;gBAElB,IAAI,KAAK,KAAK,CAAC,EAAE;oBACf,KAAK,GAAG,CAAC,CAAA;;oBAET,IAAI,SAAS,CAAC,KAAK;wBAAE,SAAS,CAAC,KAAK,CAAC,KAAK,CAAC,CAAA;iBAC5C;aACF;YACD,QAAQ,EAAE;gBACR,IAAI,KAAK,KAAK,CAAC,EAAE;oBACf,KAAK,GAAG,CAAC,CAAA;;oBAET,IAAI,SAAS,CAAC,QAAQ;wBAAE,SAAS,CAAC,QAAQ,EAAE,CAAA;iBAC7C;aACF;YACD,eAAe,EAAE,UAAC,OAAgB;gBAChC,IAAI,SAAS,CAAC,eAAe;oBAAE,SAAS,CAAC,eAAe,CAAC,OAAO,CAAC,CAAA;aAClE;SACF,CAAA;QACD,OAAO,MAAM,CAAA;IACf;;ICrCO,IAAM,kBAAkB,GAAG,OAAO;;ICczC;;;IAGA;QAGE,wBAAoB,iBAAoC;YAApC,sBAAiB,GAAjB,iBAAiB,CAAmB;YAFxD,kBAAa,GAAG,mBAAmB,CAAA;YAGjC,IAAI,CAAC,cAAc,GAAG;gBACpB,cAAc,EAAE,iCAAiC;gBACjD,YAAY,EAAE,wBAAsB,kBAAoB;aACzD,CAAA;YACD,IAAI,IAAI,CAAC,iBAAiB,CAAC,KAAK,EAAE;gBAChC,IAAI,CAAC,cAAc,CAAC,eAAe,CAAC;oBAClC,QAAQ,GAAG,IAAI,CAAC,iBAAiB,CAAC,KAAK,CAAA;aAC1C;SACF;QACD,6BAAI,GAAJ,UACE,IAAY,EACZ,IAAY,EACZ,OAAoB,EACpB,SAAkE;YAJpE,iBA8FC;YAxFC,IAAM,QAAQ,GAAG,6BAA6B,CAAC,SAAS,CAAC,CAAA;YACzD,IAAI,SAAS,GAAG,KAAK,CAAA;YACrB,IAAI,MAAM,GAAI,OAAe,CAAC,MAAM,CAAA;YACpC,IAAI,SAAS,IAAI,SAAS,CAAC,cAAc,EAAE;gBACzC,IAAM,YAAU,GAAG,IAAI,eAAe,EAAE,CAAA;gBACxC,IAAI,CAAC,MAAM,EAAE;oBACX,MAAM,GAAG,YAAU,CAAC,MAAM,CAAA;oBAC1B,OAAO,GAAG,sBAAK,OAAkB,GAAK,MAAM,CAAgB,CAAA;iBAC7D;gBACD,SAAS,CAAC,cAAc,CAAC;oBACvB,MAAM;wBACJ,SAAS,GAAG,IAAI,CAAA;wBAChB,YAAU,CAAC,KAAK,EAAE,CAAA;qBACnB;oBACD,WAAW;wBACT,OAAO,SAAS,IAAI,MAAM,CAAC,OAAO,CAAA;qBACnC;iBACF,CAAC,CAAA;aACH;YACD,IAAI,CAAC,KAAK,CAAC,IAAI,EAAE,IAAI,EAAE,OAAO,CAAC;iBAC5B,IAAI,CAAC,UAAM,QAAQ;;;;;4BAClB,IAAI,SAAS,aAAT,SAAS,uBAAT,SAAS,CAAE,eAAe,EAAE;gCACxB,YAAmB,EAAE,CAAA;gCAC3B,QAAQ,CAAC,OAAO,CAAC,OAAO,CAAC,UAAC,KAAa,EAAE,GAAW;oCAClD,IAAM,QAAQ,GAAG,SAAO,CAAC,GAAG,CAAC,CAAA;oCAC7B,IAAI,QAAQ,KAAK,SAAS,EAAE;wCAC1B,SAAO,CAAC,GAAG,CAAC,GAAG,KAAK,CAAA;qCACrB;yCAAM,IAAI,KAAK,CAAC,OAAO,CAAC,QAAQ,CAAC,EAAE;wCAClC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,CAAA;qCACrB;yCAAM;wCACL,SAAO,CAAC,GAAG,CAAC,GAAG,CAAC,QAAQ,EAAE,KAAK,CAAC,CAAA;qCACjC;iCACF,CAAC,CAAA;gCACF,QAAQ,CAAC,eAAe,CAAC,SAAO,CAAC,CAAA;6BAClC;kCACG,QAAQ,CAAC,MAAM,IAAI,GAAG,CAAA,EAAtB,wBAAsB;4BACxB,sBAAO,QAAQ;qCACZ,IAAI,EAAE;qCACN,IAAI,CAAC,UAAC,IAAY;oCACjB,IAAI,CAAC,IAAI,EAAE;wCACT,IAAM,WAAW,GAAG,QAAQ,CAAC,OAAO,CAAC,GAAG,CAAC,kBAAkB,CAAC,CAAA;wCAC5D,IAAI,WAAW,EAAE;4CACf,IAAI,GAAG,WAAW,CAAA;yCACnB;qCACF;oCACD,QAAQ,CAAC,KAAK,CACZ,IAAI,SAAS,CACX,QAAQ,CAAC,MAAM,EACf,QAAQ,CAAC,UAAU,EACnB,IAAI,EACJ,QAAQ,CAAC,OAAO,CAAC,GAAG,CAAC,aAAa,CAAC,CACpC,CACF,CAAA;iCACF,CAAC;qCACD,KAAK,CAAC,UAAC,CAAQ;oCACd,MAAM,CAAC,IAAI,CAAC,8BAA8B,EAAE,CAAC,CAAC,CAAA;oCAC9C,QAAQ,CAAC,KAAK,CACZ,IAAI,SAAS,CACX,QAAQ,CAAC,MAAM,EACf,QAAQ,CAAC,UAAU,EACnB,SAAS,EACT,QAAQ,CAAC,OAAO,CAAC,GAAG,CAAC,aAAa,CAAC,CACpC,CACF,CAAA;iCACF,CAAC,EAAA;;iCAEA,QAAQ,CAAC,IAAI,EAAb,wBAAa;4BACT,MAAM,GAAG,QAAQ,CAAC,IAAI,CAAC,SAAS,EAAE,CAAA;4BACpC,KAAK,SAAsC,CAAA;;gCAErC,qBAAM,MAAM,CAAC,IAAI,EAAE,EAAA;;4BAA3B,KAAK,GAAG,SAAmB,CAAA;4BAC3B,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAA;;;gCACnB,CAAC,KAAK,CAAC,IAAI;;;;iCACX,QAAQ,CAAC,WAAW,EAApB,wBAAoB;4BACd,qBAAM,QAAQ,CAAC,WAAW,EAAE,EAAA;;4BAArC,MAAM,GAAG,SAA4B;4BAC3C,QAAQ,CAAC,IAAI,CAAC,IAAI,UAAU,CAAC,MAAM,CAAC,CAAC,CAAA;;gCAExB,qBAAM,QAAQ,CAAC,IAAI,EAAE,EAAA;;4BAA5B,IAAI,GAAG,SAAqB;4BAClC,QAAQ,CAAC,IAAI,CAAC,IAAI,WAAW,EAAE,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAA;;;;;iBAGlD,CAAC;iBACD,KAAK,CAAC,UAAA,CAAC;gBACN,IAAI,CAAC,SAAS,EAAE;oBACd,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,CAAA;iBAClB;aACF,CAAC;iBACD,OAAO,CAAC,cAAM,OAAA,QAAQ,CAAC,QAAQ,EAAE,GAAA,CAAC,CAAA;SACtC;QACK,gCAAO,GAAb,UAAc,IAAY,EAAE,IAAS,EAAE,OAAoB;;;;;;gCACxC,qBAAM,IAAI,CAAC,KAAK,CAAC,IAAI,EAAE,IAAI,EAAE,OAAO,CAAC,EAAA;;4BAAhD,QAAQ,GAAG,SAAqC;4BAC/C,MAAM,GAAa,QAAQ,OAArB,EAAE,OAAO,GAAI,QAAQ,QAAZ,CAAY;4BAC5B,mBAAmB,GAAG,OAAO,CAAC,GAAG,CAAC,cAAc,CAAC,IAAI,EAAE,CAAA;kCAEzD,MAAM,IAAI,GAAG,CAAA,EAAb,wBAAa;4BACJ,qBAAM,QAAQ,CAAC,IAAI,EAAE,EAAA;;4BAA5B,IAAI,GAAG,SAAqB;4BAChC,IAAI,CAAC,IAAI,EAAE;gCACH,WAAW,GAAG,OAAO,CAAC,GAAG,CAAC,kBAAkB,CAAC,CAAA;gCACnD,IAAI,WAAW,EAAE;oCACf,IAAI,GAAG,WAAW,CAAA;iCACnB;6BACF;4BACD,MAAM,IAAI,SAAS,CACjB,MAAM,EACN,QAAQ,CAAC,UAAU,EACnB,IAAI,EACJ,QAAQ,CAAC,OAAO,CAAC,GAAG,CAAC,aAAa,CAAC,CACpC,CAAA;;4BAEG,YAAY,eAAG,OAAO,CAAC,OAAO,0CAAE,MAAM,mCAAI,mBAAmB,CAAA;iCAC/D,YAAY,CAAC,QAAQ,CAAC,MAAM,CAAC,EAA7B,wBAA6B;4BACxB,qBAAM,QAAQ,CAAC,IAAI,EAAE,EAAA;gCAA5B,sBAAO,SAAqB,EAAA;;kCAE5B,YAAY,CAAC,QAAQ,CAAC,MAAM,CAAC;gCAC7B,YAAY,CAAC,UAAU,CAAC,iBAAiB,CAAC,CAAA,EAD1C,wBAC0C;4BAEnC,qBAAM,QAAQ,CAAC,IAAI,EAAE,EAAA;gCAA5B,sBAAO,SAAqB,EAAA;;;;;SAE/B;QAEO,8BAAK,GAAb,UACE,IAAY,EACZ,IAAS,EACT,OAAoB;YAEb,IAAA,MAAM,GAAuB,OAAO,OAA9B,EAAE,OAAO,GAAc,OAAO,QAArB,EAAK,KAAK,UAAI,OAAO,EAArC,qBAA2B,CAAD,CAAW;YAC3C,OAAO,KAAK,CAAC,KAAG,IAAI,CAAC,iBAAiB,CAAC,GAAG,GAAG,IAAM,aACjD,MAAM,EAAE,MAAM,EACd,IAAI,EACF,MAAM,KAAK,KAAK,IAAI,MAAM,KAAK,MAAM;sBACjC,SAAS;sBACT,OAAO,IAAI,KAAK,QAAQ;0BACxB,IAAI;0BACJ,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,EAC1B,OAAO,wBACF,IAAI,CAAC,cAAc,GACnB,OAAO,GAEZ,WAAW,EAAE,MAAgB,IAE1B,KAAK,EACR,CAAA;SACH;QACH,qBAAC;IAAD,CAAC;;aC3Ke,iBAAiB,CAC/B,MAAgB,EAChB,SAA4B;QAE5B,OAAO,SAAS,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAA;IACnC;;ICVA;;;IAGA;QAME,uBACU,MAAqC,EACrC,MAAqB;YADrB,WAAM,GAAN,MAAM,CAA+B;YACrC,WAAM,GAAN,MAAM,CAAe;YAL/B,aAAQ,GAAG,KAAK,CAAA;YAChB,WAAM,GAAG,KAAK,CAAA;SAKV;QAEJ,4BAAI,GAAJ,UAAK,KAAiB;YACpB,IAAI,IAAI,CAAC,QAAQ;gBAAE,OAAM;YACzB,IAAI;gBACF,IAAI,CAAC,cAAc,CAAC,KAAK,CAAC,CAAA;aAC3B;YAAC,OAAO,CAAC,EAAE;gBACV,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAA;aACd;SACF;QACD,6BAAK,GAAL,UAAM,KAAY;YAChB,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE;gBAClB,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAA;gBACpB,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,CAAA;aACzB;SACF;QACD,gCAAQ,GAAR;YACE,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE;gBAClB,IAAI,IAAI,CAAC,QAAQ,EAAE;oBACjB,IAAI,CAAC,MAAM,CAAC,IAAI,CACd,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC,EAAE,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,CACjE,CAAA;iBACF;gBACD,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAA;gBACpB,IAAI,CAAC,MAAM,CAAC,QAAQ,EAAE,CAAA;aACvB;SACF;QACD,sCAAc,GAAd,UAAe,WAAwB;YACrC,IAAI,IAAI,CAAC,MAAM,CAAC,cAAc,EAAE;;gBAE9B,IAAM,MAAI,GAAG,IAAI,CAAA;gBACjB,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC;oBACzB,MAAM,EAAN;wBACE,WAAW,CAAC,MAAM,EAAE,CAAA;wBACpB,MAAI,CAAC,QAAQ,GAAG,SAAS,CAAA;wBACzB,MAAI,CAAC,QAAQ,EAAE,CAAA;qBAChB;oBACD,WAAW,EAAX;wBACE,OAAO,WAAW,CAAC,WAAW,EAAE,CAAA;qBACjC;iBACF,CAAC,CAAA;aACH;SACF;QAEO,sCAAc,GAAtB,UAAuB,KAAiB;YACtC,IAAI,KAAa,CAAA;YACjB,IAAI,KAAK,GAAG,CAAC,CAAA;YACb,IAAI,IAAI,CAAC,QAAQ,EAAE;gBACjB,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,QAAQ,EAAE,KAAK,CAAC,CAAA;gBAChD,KAAK,GAAI,IAAI,CAAC,QAAmB,CAAC,MAAM,CAAA;aACzC;iBAAM;gBACL,KAAK,GAAG,CAAC,CAAA;aACV;YACD,OAAO,KAAK,GAAG,KAAK,CAAC,MAAM,EAAE;gBAC3B,IAAM,CAAC,GAAG,KAAK,CAAC,KAAK,CAAC,CAAA;gBACtB,IAAI,CAAC,KAAK,EAAE,EAAE;oBACZ,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE;;wBAEhB,IAAM,GAAG,GAAG,KAAK,GAAG,CAAC,IAAI,KAAK,CAAC,KAAK,GAAG,CAAC,CAAC,KAAK,EAAE,GAAG,KAAK,GAAG,CAAC,GAAG,KAAK,CAAA;;wBAEpE,IAAI,IAAI,CAAC,QAAQ,EAAE;4BACjB,OAAM;yBACP;wBACD,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC,KAAK,EAAE,KAAK,EAAE,GAAG,CAAC,CAAC,CAAA;wBAC7D,KAAK,GAAG,KAAK,GAAG,CAAC,CAAA;qBAClB;iBACF;qBAAM,IAAI,CAAC,KAAK,EAAE,UAAU;oBAC3B,IAAI,CAAC,MAAM,GAAG,CAAC,IAAI,CAAC,MAAM,CAAA;iBAC3B;gBACD,KAAK,EAAE,CAAA;aACR;YACD,IAAI,KAAK,GAAG,KAAK,EAAE;gBACjB,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,EAAE,KAAK,EAAE,KAAK,CAAC,CAAA;aACtD;iBAAM;gBACL,IAAI,CAAC,QAAQ,GAAG,SAAS,CAAA;aAC1B;SACF;QACH,oBAAC;IAAD,CAAC;;IC5FD,IAAM,SAAS,GAAG,GAAG,CAAA;IACrB,IAAM,OAAO,GAAG,GAAG,CAAA;IAEnB;;;IAGA;QAAA;YAKU,WAAM,GAAG,KAAK,CAAA;SAoFvB;QA/EC,sBAAI,+BAAK;;;;iBAAT;gBACE,OAAO,IAAI,CAAC,MAAM,CAAA;aACnB;iBACD,UAAU,GAAY;gBACpB,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC,YAAY,EAAE;oBAC7B,IAAI,CAAC,YAAY,GAAG,IAAI,KAAK,CAAC,EAAE,CAAC,CAAA;iBAClC;gBACD,IAAI,CAAC,MAAM,GAAG,GAAG,CAAA;aAClB;;;WANA;;;;QAWD,gCAAS,GAAT;YACE,IAAI,CAAC,KAAK,GAAG,IAAI,CAAA;YACjB,OAAO,IAAI,CAAA;SACZ;;;;;;;QAQD,gCAAS,GAAT,UAAU,IAA+B;YACvC,IAAI,IAAI,KAAK,IAAI,IAAI,IAAI,KAAK,SAAS,EAAE;gBACvC,IAAI,CAAC,eAAe,GAAG,CAAC,CAAA;gBACxB,OAAO,EAAE,CAAA;aACV;YACD,IAAI,UAAU,GAAG,CAAC,CAAA;YAClB,IAAI,UAAU,GAAG,CAAC,CAAA;YAClB,IAAM,MAAM,GAAG,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,YAAY,GAAG,EAAE,CAAA;YACnD,IAAI,KAAK,GAAG,CAAC,CAAA;YACb,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;gBACpC,IAAM,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC,CAAA;gBACjB,IAAI,CAAC,KAAK,SAAS,EAAE;oBACnB,IAAI,UAAU,GAAG,CAAC,KAAK,CAAC,EAAE;wBACxB,IAAM,KAAG,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,UAAU,EAAE,CAAC,EAAE,UAAU,CAAC,CAAA;wBAC1D,IAAI,IAAI,CAAC,MAAM,EAAE;4BACf,MAAM,CAAC,KAAK,EAAE,CAAC,GAAG,KAAG,CAAA;yBACtB;6BAAM;4BACL,MAAM,CAAC,IAAI,CAAC,KAAG,CAAC,CAAA;yBACjB;wBACD,UAAU,GAAG,CAAC,GAAG,CAAC,CAAA;wBAClB,UAAU,GAAG,CAAC,CAAA;qBACf;iBACF;qBAAM,IAAI,CAAC,KAAK,OAAO,EAAE;oBACxB,UAAU,EAAE,CAAA;iBACb;aACF;YACD,IAAM,GAAG,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,UAAU,EAAE,IAAI,CAAC,MAAM,EAAE,UAAU,CAAC,CAAA;YACpE,IAAI,IAAI,CAAC,MAAM,EAAE;gBACf,MAAM,CAAC,KAAK,CAAC,GAAG,GAAG,CAAA;gBACnB,IAAI,CAAC,eAAe,GAAG,KAAK,GAAG,CAAC,CAAA;aACjC;iBAAM;gBACL,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAA;gBAChB,IAAI,CAAC,eAAe,GAAG,MAAM,CAAC,MAAM,CAAA;aACrC;YAED,OAAO,MAAM,CAAA;SACd;QAEO,+BAAQ,GAAhB,UACE,IAAY,EACZ,KAAa,EACb,GAAW,EACX,UAAkB;YAElB,IAAI,KAAK,KAAK,IAAI,CAAC,MAAM,EAAE;gBACzB,OAAO,EAAE,CAAA;aACV;iBAAM,IAAI,UAAU,KAAK,CAAC,EAAE;gBAC3B,OAAO,IAAI,CAAC,SAAS,CAAC,KAAK,EAAE,GAAG,CAAC,CAAA;aAClC;iBAAM,IAAI,UAAU,KAAK,CAAC,EAAE;gBAC3B,OAAO,IAAI,CAAC,SAAS,CAAC,KAAK,GAAG,CAAC,EAAE,GAAG,GAAG,CAAC,CAAC,CAAA;aAC1C;iBAAM;;gBAEL,OAAO,IAAI,CAAC,SAAS,CAAC,KAAK,GAAG,CAAC,EAAE,GAAG,GAAG,CAAC,CAAC,CAAC,OAAO,CAAC,MAAM,EAAE,GAAG,CAAC,CAAA;aAC/D;SACF;QACH,mBAAC;IAAD,CAAC;;aCnFe,cAAc,CAC5B,QAAsC;QAEtC,IAAM,QAAQ,GAAG,IAAI,YAAY,EAAE,CAAC,SAAS,EAAE,CAAA;QAC/C,IAAI,OAAsC,CAAA;QAC1C,IAAI,UAAU,GAAG,IAAI,CAAA;QACrB,IAAI,gBAAgB,GAAG,CAAC,CAAA;QACxB,IAAI,QAA2B,CAAA;QAC/B,OAAO;YACL,KAAK,EAAL,UAAM,KAAY;gBAChB,QAAQ,CAAC,KAAK,CAAC,KAAK,CAAC,CAAA;aACtB;YACD,IAAI,EAAJ,UAAK,IAAY;gBACf,IAAI,IAAI,KAAK,EAAE,EAAE;oBACf,UAAU,GAAG,IAAI,CAAA;oBACjB,OAAO,GAAG,SAAS,CAAA;iBACpB;qBAAM;oBACL,IAAM,MAAM,GAAG,QAAQ,CAAC,SAAS,CAAC,IAAI,CAAC,CAAA;oBACvC,IAAM,IAAI,GAAG,QAAQ,CAAC,eAAe,CAAA;oBACrC,IAAI,UAAU,EAAE;;wBAEd,IAAI,CAAC,OAAO,EAAE;4BACZ,OAAO,GAAG,IAAI,KAAK,CAAC,IAAI,CAAC,CAAA;4BACzB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,EAAE,CAAC,EAAE,EAAE;gCAC7B,OAAO,CAAC,CAAC,CAAC,GAAG,kBAAkB,EAAE,CAAA;6BAClC;yBACF;wBACD,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,UAAU,CAAC,GAAG,CAAC,EAAE;;4BAE9B,IAAI,MAAM,CAAC,CAAC,CAAC,KAAK,EAAE,EAAE;gCACpB,gBAAgB,GAAG,CAAC,CAAA;gCACpB,OAAO,GAAG,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,CAAA;6BAC3B;iCAAM;gCACL,gBAAgB,GAAG,CAAC,CAAA;6BACrB;4BACD,KAAK,IAAI,CAAC,GAAG,gBAAgB,EAAE,CAAC,GAAG,IAAI,EAAE,CAAC,EAAE,EAAE;gCAC5C,OAAO,CAAC,CAAC,GAAG,gBAAgB,CAAC,CAAC,KAAK,GAAG,MAAM,CAAC,CAAC,CAAC,CAAA;6BAChD;4BACD,QAAQ,GAAG,uBAAuB,CAAC,OAAO,CAAC,CAAA;4BAC3C,UAAU,GAAG,KAAK,CAAA;yBACnB;6BAAM,IAAI,MAAM,CAAC,CAAC,CAAC,KAAK,WAAW,EAAE;4BACpC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,EAAE,CAAC,EAAE,EAAE;gCAC7B,OAAO,CAAC,CAAC,CAAC,CAAC,QAAQ,GAAG,MAAM,CAAC,CAAC,CAAe,CAAA;6BAC9C;yBACF;6BAAM,IAAI,MAAM,CAAC,CAAC,CAAC,KAAK,UAAU,EAAE;4BACnC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,EAAE,CAAC,EAAE,EAAE;gCAC7B,OAAO,CAAC,CAAC,CAAC,CAAC,YAAY,GAAG,MAAM,CAAC,CAAC,CAAC,CAAA;6BACpC;yBACF;6BAAM,IAAI,MAAM,CAAC,CAAC,CAAC,KAAK,QAAQ,EAAE;4BACjC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,EAAE,CAAC,EAAE,EAAE;gCAC7B,OAAO,CAAC,CAAC,CAAC,CAAC,KAAK,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,GAAG,CAAA;6BACxC;yBACF;qBACF;yBAAM;wBACL,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,gBAAgB,EAAE,IAAI,CAAC,EAAE,QAAQ,CAAC,CAAA;qBAC9D;iBACF;aACF;YACD,QAAQ,EAAR;gBACE,QAAQ,CAAC,QAAQ,EAAE,CAAA;aACpB;YACD,cAAc,EAAd,UAAe,WAAwB;gBACrC,IAAI,QAAQ,CAAC,cAAc;oBAAE,QAAQ,CAAC,cAAc,CAAC,WAAW,CAAC,CAAA;aAClE;SACF,CAAA;IACH;;IC7DA;QAIE,2BAAmB,QAA0B,EAAE,QAAuB;YAAtE,iBAsBC;YAxBO,aAAQ,GAAG,KAAK,CAAA;YAGtB,IAAI;gBACF,QAAQ,CAAC;oBACP,IAAI,EAAE,UAAA,KAAK;wBACT,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,CAAA;qBACrB;oBACD,KAAK,EAAE,UAAA,CAAC;wBACN,KAAI,CAAC,QAAQ,GAAG,IAAI,CAAA;wBACpB,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,CAAA;qBAClB;oBACD,QAAQ,EAAE;wBACR,KAAI,CAAC,QAAQ,GAAG,IAAI,CAAA;wBACpB,QAAQ,CAAC,QAAQ,EAAE,CAAA;qBACpB;oBACD,cAAc,EAAE,UAAA,CAAC;wBACf,KAAI,CAAC,WAAW,GAAG,CAAC,CAAA;qBACrB;iBACF,CAAC,CAAA;aACH;YAAC,OAAO,CAAC,EAAE;gBACV,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAA;gBACpB,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,CAAA;aAClB;SACF;QAED,sBAAW,qCAAM;iBAAjB;gBACE,OAAO,IAAI,CAAC,QAAQ,CAAA;aACrB;;;WAAA;QAEM,uCAAW,GAAlB;;YACE,MAAA,IAAI,CAAC,WAAW,0CAAE,MAAM,GAAE;YAC1B,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAA;SACrB;QACH,wBAAC;IAAD,CAAC,IAAA;IAED,SAAS,IAAI,MAAW;IAExB,SAAS,gBAAgB,CAAI,QAA8B;QAClD,IAAA,IAAI,GAAqB,QAAQ,KAA7B,EAAE,KAAK,GAAc,QAAQ,MAAtB,EAAE,QAAQ,GAAI,QAAQ,SAAZ,CAAY;QAExC,OAAO;YACL,IAAI,EAAE,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,GAAG,IAAI;YACvC,KAAK,EAAE,KAAK,GAAG,KAAK,CAAC,IAAI,CAAC,QAAQ,CAAC,GAAG,IAAI;YAC1C,QAAQ,EAAE,QAAQ,GAAG,QAAQ,CAAC,IAAI,CAAC,QAAQ,CAAC,GAAG,IAAI;SACpD,CAAA;IACH,CAAC;IAED;QACE,yBACmB,QAAuB,EACvB,SAAuB;YADvB,aAAQ,GAAR,QAAQ,CAAe;YACvB,cAAS,GAAT,SAAS,CAAc;SACtC;QAEG,mCAAS,GAAhB,UACE,cAAuD,EACvD,KAAqB,EACrB,QAA2B;YAE3B,IAAM,QAAQ,GAAG,gBAAgB,CAC/B,OAAO,cAAc,KAAK,QAAQ,IAAI,cAAc,KAAK,IAAI;kBACzD,EAAC,IAAI,EAAE,cAAc,EAAE,KAAK,OAAA,EAAE,QAAQ,UAAA,EAAC;kBACvC,cAAc,CACnB,CAAA;YAED,OAAO,IAAI,iBAAiB,CAAC,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAA;SACtE;QAEM,0BAAC,gBAAgB,CAAC,GAAzB;YACE,OAAO,IAAI,CAAA;SACZ;QACH,sBAAC;IAAD,CAAC;;IC/ED,IAAM,eAAe,GAAQ;QAC3B,MAAM,EAAE,IAAI;QACZ,SAAS,EAAE,GAAG;QACd,SAAS,EAAE,GAAG;QACd,aAAa,EAAE,GAAG;QAClB,WAAW,EAAE,CAAC,UAAU,EAAE,OAAO,EAAE,SAAS,CAAC;KAC9C,CAAA;IACD,IAAMA,UAAQ,GAAG,UAAI,KAAQ,IAAQ,OAAA,KAAK,GAAA,CAAA;IAE1C;QAEE,sBAAoB,SAAoB,EAAE,GAAW;YAAjC,cAAS,GAAT,SAAS,CAAW;YACtC,IAAI,CAAC,OAAO,GAAG,EAAC,GAAG,KAAA,EAAC,CAAA;SACrB;QAED,2BAAI,GAAJ,UAAK,OAA8B;YACjC,IAAI,CAAC,OAAO,yBAAO,IAAI,CAAC,OAAO,GAAK,OAAO,CAAC,CAAA;YAC5C,OAAO,IAAI,CAAA;SACZ;QAED,4BAAK,GAAL,UAAM,KAAkC;YACtC,OAAO,IAAI,eAAe,CAAC,IAAI,CAAC,cAAc,CAAC,KAAK,CAAC,EAAEA,UAAQ,CAAC,CAAA;SACjE;QAED,2BAAI,GAAJ,UAAK,KAAkC;YACrC,OAAO,IAAI,eAAe,CAAC,IAAI,CAAC,cAAc,CAAC,KAAK,CAAC,EAAE,UAAA,QAAQ;gBAC7D,OAAO,cAAc,CAAC;oBACpB,IAAI,YAAC,MAAM,EAAE,SAAS;wBACpB,QAAQ,CAAC,IAAI,CAAC,EAAC,MAAM,QAAA,EAAE,SAAS,WAAA,EAAC,CAAC,CAAA;qBACnC;oBACD,KAAK,YAAC,CAAC;wBACL,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,CAAA;qBAClB;oBACD,QAAQ;wBACN,QAAQ,CAAC,QAAQ,EAAE,CAAA;qBACpB;iBACF,CAAC,CAAA;aACH,CAAC,CAAA;SACH;QAED,iCAAU,GAAV,UACE,KAAkC,EAClC,QAAuC;YAEvC,IAAI,CAAC,cAAc,CAAC,KAAK,CAAC,CAAC,QAAQ,CAAC,CAAA;SACrC;QAED,gCAAS,GAAT,UACE,KAAkC,EAClC,QAAsC;YAEtC,IAAI,CAAC,cAAc,CAAC,KAAK,CAAC,CAAC,cAAc,CAAC,QAAQ,CAAC,CAAC,CAAA;SACrD;QAED,kCAAW,GAAX,UACE,KAAkC,EAClC,SAMkB;YARpB,iBA2BC;YAzBC,0BAAA,EAAA,YAGqB,iBAGH;YAElB,IAAM,MAAM,GAAa,EAAE,CAAA;YAC3B,OAAO,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;gBACjC,KAAI,CAAC,SAAS,CAAC,KAAK,EAAE;oBACpB,IAAI,EAAJ,UAAK,MAAgB,EAAE,SAA4B;wBACjD,IAAM,KAAK,GAAG,SAAS,CAAC,IAAI,CAAC,IAAI,EAAE,MAAM,EAAE,SAAS,CAAC,CAAA;wBACrD,IAAI,KAAK,KAAK,SAAS,EAAE;4BACvB,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAA;yBACnB;qBACF;oBACD,KAAK,EAAL,UAAM,KAAY;wBAChB,MAAM,CAAC,KAAK,CAAC,CAAA;qBACd;oBACD,QAAQ,EAAR;wBACE,OAAO,CAAC,MAAM,CAAC,CAAA;qBAChB;iBACF,CAAC,CAAA;aACH,CAAC,CAAA;SACH;QAED,mCAAY,GAAZ,UAAa,KAAkC;YAA/C,iBAeC;YAdC,IAAM,MAAM,GAAkB,EAAE,CAAA;YAChC,OAAO,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;gBACjC,KAAI,CAAC,UAAU,CAAC,KAAK,EAAE;oBACrB,IAAI,EAAJ,UAAK,IAAY;wBACf,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;qBAClB;oBACD,KAAK,EAAL,UAAM,KAAY;wBAChB,MAAM,CAAC,KAAK,CAAC,CAAA;qBACd;oBACD,QAAQ,EAAR;wBACE,OAAO,CAAC,MAAM,CAAC,CAAA;qBAChB;iBACF,CAAC,CAAA;aACH,CAAC,CAAA;SACH;QAED,+BAAQ,GAAR,UAAS,KAAkC;YACnC,IAAA,KAAoB,IAAI,CAAC,OAAO,EAA/B,GAAG,SAAA,EAAE,IAAI,UAAA,EAAE,IAAI,UAAgB,CAAA;YACtC,OAAO,IAAI,CAAC,SAAS,CAAC,OAAO,CAC3B,uBAAqB,kBAAkB,CAAC,GAAG,CAAG,EAC9C,IAAI,CAAC,SAAS,CACZ,IAAI,CAAC,eAAe,CAAC;gBACnB,KAAK,EAAE,KAAK,CAAC,QAAQ,EAAE;gBACvB,OAAO,EAAE,eAAe;gBACxB,IAAI,MAAA;aACL,CAAC,CACH,EACD;gBACE,MAAM,EAAE,MAAM;gBACd,OAAO,EAAE;oBACP,MAAM,EAAE,UAAU;oBAClB,iBAAiB,EAAE,IAAI,GAAG,MAAM,GAAG,UAAU;oBAC7C,cAAc,EAAE,kCAAkC;iBACnD;aACF,CACF,CAAA;SACF;QAEO,qCAAc,GAAtB,UAAuB,KAAkC;YAAzD,iBAuBC;YAtBO,IAAA,KAAoB,IAAI,CAAC,OAAO,EAA/B,GAAG,SAAA,EAAE,IAAI,UAAA,EAAE,IAAI,UAAgB,CAAA;YAEtC,OAAO,UAAC,QAAQ;gBACd,KAAI,CAAC,SAAS,CAAC,IAAI,CACjB,uBAAqB,kBAAkB,CAAC,GAAG,CAAG,EAC9C,IAAI,CAAC,SAAS,CACZ,KAAI,CAAC,eAAe,CAAC;oBACnB,KAAK,EAAE,KAAK,CAAC,QAAQ,EAAE;oBACvB,OAAO,EAAE,eAAe;oBACxB,IAAI,MAAA;iBACL,CAAC,CACH,EACD;oBACE,MAAM,EAAE,MAAM;oBACd,OAAO,EAAE;wBACP,cAAc,EAAE,kCAAkC;wBAClD,iBAAiB,EAAE,IAAI,GAAG,MAAM,GAAG,UAAU;qBAC9C;iBACF,EACD,IAAI,aAAa,CAAC,QAAQ,EAAE,KAAI,CAAC,SAAS,CAAC,aAAa,CAAC,CAC1D,CAAA;aACF,CAAA;SACF;QACO,sCAAe,GAAvB,UAAwB,OAAY;;YAClC,IAAI,OAAO,IAAI,CAAC,OAAO,CAAC,GAAG,KAAK,UAAU,EAAE;gBAC1C,OAAO,CAAC,GAAG,GAAG,IAAI,CAAC,OAAO,CAAC,GAAG,EAAE,CAAA;aACjC;;YAED,OAAO,CAAC,IAAI,SAAG,IAAI,CAAC,OAAO,CAAC,IAAI,mCAAI,MAAM,CAAA;YAC1C,OAAO,OAAO,CAAA;SACf;QACH,mBAAC;IAAD,CAAC;;ICrJD;;;;;;;;;QAYE,kBAAY,OAA+B;;YACzC,IAAI,OAAO,OAAO,KAAK,QAAQ,EAAE;gBAC/B,IAAI,CAAC,QAAQ,GAAG,EAAC,GAAG,EAAE,OAAO,EAAC,CAAA;aAC/B;iBAAM,IAAI,OAAO,KAAK,IAAI,IAAI,OAAO,OAAO,KAAK,QAAQ,EAAE;gBAC1D,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAA;aACxB;iBAAM;gBACL,MAAM,IAAI,oBAAoB,CAAC,oCAAoC,CAAC,CAAA;aACrE;YACD,IAAM,GAAG,GAAG,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAA;YAC7B,IAAI,OAAO,GAAG,KAAK,QAAQ;gBACzB,MAAM,IAAI,oBAAoB,CAAC,mBAAmB,CAAC,CAAA;YACrD,IAAI,GAAG,CAAC,QAAQ,CAAC,GAAG,CAAC;gBAAE,IAAI,CAAC,QAAQ,CAAC,GAAG,GAAG,GAAG,CAAC,SAAS,CAAC,CAAC,EAAE,GAAG,CAAC,MAAM,GAAG,CAAC,CAAC,CAAA;YAC3E,IAAI,CAAC,SAAS,SAAG,IAAI,CAAC,QAAQ,CAAC,SAAS,mCAAI,IAAIC,cAAa,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAA;SAC7E;;;;;;;;;;;;;;;;;;;QAoBD,8BAAW,GAAX,UACE,GAAW,EACX,MAAc,EACd,SAAiD,EACjD,YAAoC;YADpC,0BAAA,EAAA;YAGA,OAAO,IAAI,YAAY,CACrB,IAAI,CAAC,SAAS,EACd,GAAG,EACH,MAAM,EACN,SAAS,EACT,YAAY,aAAZ,YAAY,cAAZ,YAAY,GAAI,IAAI,CAAC,QAAQ,CAAC,YAAY,CAC3C,CAAA;SACF;;;;;;;;;;;;;QAcD,8BAAW,GAAX,UAAY,GAAW;YACrB,OAAO,IAAI,YAAY,CAAC,IAAI,CAAC,SAAS,EAAE,GAAG,CAAC,CAAA;SAC7C;QACH,eAAC;IAAD,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}
import { Observable } from '../observable';
import FluxResultObserver from '../query/FluxResultObserver';
import QueryApi, { QueryOptions, Row } from '../QueryApi';
import { CommunicationObserver, Transport } from '../transport';
import { ParameterizedQuery } from '../query/flux';
import { FluxTableMetaData } from '../query';
export declare class QueryApiImpl implements QueryApi {
    private transport;
    private options;
    constructor(transport: Transport, org: string);
    with(options: Partial<QueryOptions>): QueryApi;
    lines(query: string | ParameterizedQuery): Observable<string>;
    rows(query: string | ParameterizedQuery): Observable<Row>;
    queryLines(query: string | ParameterizedQuery, consumer: CommunicationObserver<string>): void;
    queryRows(query: string | ParameterizedQuery, consumer: FluxResultObserver<string[]>): void;
    collectRows<T>(query: string | ParameterizedQuery, rowMapper?: (values: string[], tableMeta: FluxTableMetaData) => T | undefined): Promise<Array<T>>;
    collectLines(query: string | ParameterizedQuery): Promise<Array<string>>;
    queryRaw(query: string | ParameterizedQuery): Promise<string>;
    private createExecutor;
    private decorateRequest;
}
export default QueryApiImpl;
//# sourceMappingURL=QueryApiImpl.d.ts.map
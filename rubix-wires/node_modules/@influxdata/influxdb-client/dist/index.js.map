{"version":3,"file":"index.js","sources":["../src/options.ts","../src/errors.ts","../src/util/escape.ts","../src/util/currentTime.ts","../src/query/FluxTableMetaData.ts","../src/query/FluxTableColumn.ts","../src/query/flux.ts","../src/observable/symbol.ts","../src/impl/Logger.ts","../src/impl/retryStrategy.ts","../src/impl/RetryBuffer.ts","../src/impl/WriteApiImpl.ts","../src/impl/node/nodeChunkCombiner.ts","../src/impl/version.ts","../src/impl/node/NodeHttpTransport.ts","../src/impl/completeCommunicationObserver.ts","../src/QueryApi.ts","../src/impl/ChunksToLines.ts","../src/util/LineSplitter.ts","../src/impl/linesToTables.ts","../src/impl/ObservableQuery.ts","../src/impl/QueryApiImpl.ts","../src/InfluxDB.ts","../src/Point.ts"],"sourcesContent":["import {Transport} from './transport'\nimport WriteApi from './WriteApi'\n\n/**\n * Option for the communication with InfluxDB server.\n */\nexport interface ConnectionOptions {\n  /** base URL */\n  url: string\n  /** authentication token */\n  token?: string\n  /** socket timeout */\n  timeout?: number\n  /** extra options for the transport layer */\n  transportOptions?: {[key: string]: any}\n}\n\n/** default connection options */\nexport const DEFAULT_ConnectionOptions: Partial<ConnectionOptions> = {\n  timeout: 10000,\n}\n\n/**\n * Options that configure strategy for retrying failed requests.\n */\nexport interface RetryDelayStrategyOptions {\n  /** include random milliseconds when retrying HTTP calls */\n  retryJitter: number\n  /** minimum delay when retrying write (milliseconds) */\n  minRetryDelay: number\n  /** maximum delay when retrying write (milliseconds) */\n  maxRetryDelay: number\n  /** base for the exponential retry delay, the next delay is computed as `minRetryDelay * exponentialBase^(attempts-1) + random(retryJitter)` */\n  exponentialBase: number\n}\n\n/**\n * Options that configure strategy for retrying failed InfluxDB write operations.\n */\nexport interface WriteRetryOptions extends RetryDelayStrategyOptions {\n  /**\n   * writeFailed is called to inform about write error\n   * @param this - the instance of the API that failed\n   * @param error - write error\n   * @param lines - failed lines\n   * @param attempts - a number of failed attempts to write the lines\n   * @returns a Promise to force the API to use it as a result of the flush operation,\n   * void/undefined to continue with default retry mechanism\n   */\n  writeFailed(\n    this: WriteApi,\n    error: Error,\n    lines: Array<string>,\n    attempts: number\n  ): Promise<void> | void\n  /** max number of retries when write fails */\n  maxRetries: number\n  /** the maximum size of retry-buffer (in lines) */\n  maxBufferLines: number\n}\n\n/**\n * Options used by {@link WriteApi} .\n */\nexport interface WriteOptions extends WriteRetryOptions {\n  /** max number of records to send in a batch   */\n  batchSize: number\n  /** delay between data flushes in milliseconds, at most `batch size` records are sent during flush  */\n  flushInterval: number\n  /** default tags, unescaped */\n  defaultTags?: Record<string, string>\n}\n\n/** default RetryDelayStrategyOptions */\nexport const DEFAULT_RetryDelayStrategyOptions = Object.freeze({\n  retryJitter: 200,\n  minRetryDelay: 5000,\n  maxRetryDelay: 180000,\n  exponentialBase: 5,\n})\n\n/** default writeOptions */\nexport const DEFAULT_WriteOptions: WriteOptions = Object.freeze({\n  batchSize: 1000,\n  flushInterval: 60000,\n  writeFailed: function() {},\n  maxRetries: 3,\n  maxBufferLines: 32_000,\n  ...DEFAULT_RetryDelayStrategyOptions,\n})\n\n/**\n * Options used by {@link InfluxDB} .\n */\nexport interface ClientOptions extends ConnectionOptions {\n  /** supplies and overrides default writing options */\n  writeOptions?: Partial<WriteOptions>\n  /** specifies custom transport */\n  transport?: Transport\n}\n\n/**\n * Precission for write operations.\n * See {@link https://v2.docs.influxdata.com/v2.0/api/#operation/PostWrite }\n */\nexport const enum WritePrecision {\n  /** nanosecond */\n  ns = 'ns',\n  /* microsecond */\n  us = 'us',\n  /** millisecond */\n  ms = 'ms',\n  /* second */\n  s = 's',\n}\nexport type WritePrecisionType = keyof typeof WritePrecision | WritePrecision\n\n/**\n * Settings that control the way of how a {@link Point} is serialized\n * to a protocol line.\n */\nexport interface PointSettings {\n  defaultTags?: {[key: string]: string}\n  convertTime?: (\n    value: string | number | Date | undefined\n  ) => string | undefined\n}\n","/**\n * Strategy for calculating retry delays.\n */\nexport interface RetryDelayStrategy {\n  /**\n   * Returns delay for a next retry\n   * @param error - reason for retrying\n   * @param failedAttempts - a count of already failed attempts, 1 being the first\n   * @returns milliseconds to wait before retrying\n   */\n  nextDelay(error?: Error, failedAttempts?: number): number\n  /** Implementation should reset its state, this is mandatory to call upon success.  */\n  success(): void\n}\n\n/**\n * Interface for errors to inform that an associated operation can be retried.\n */\nexport interface RetriableDecision {\n  /**\n   * Informs whether this can be retried.\n   */\n  canRetry(): boolean\n  /**\n   * Get the delay in milliseconds to retry the action.\n   * @returns 0 to let the implementation decide, miliseconds delay otherwise\n   */\n  retryAfter(): number\n}\n\nconst retriableStatusCodes = [404, 408, 425, 429, 500, 502, 503, 504]\n/** isStatusCodeRetriable checks whether the supplied HTTP status code is retriable. */\nexport function isStatusCodeRetriable(statusCode: number): boolean {\n  return retriableStatusCodes.includes(statusCode)\n}\n\n/** IllegalArgumentError is thrown when illegal argument is supplied. */\nexport class IllegalArgumentError extends Error {\n  /* istanbul ignore next */\n  constructor(message: string) {\n    super(message)\n    Object.setPrototypeOf(this, IllegalArgumentError.prototype)\n  }\n}\n\n/**\n * A general HTTP error.\n */\nexport class HttpError extends Error implements RetriableDecision {\n  private _retryAfter: number\n\n  /* istanbul ignore next because of super() not being covered*/\n  constructor(\n    readonly statusCode: number,\n    readonly statusMessage: string | undefined,\n    readonly body?: string,\n    retryAfter?: string | undefined | null\n  ) {\n    super()\n    Object.setPrototypeOf(this, HttpError.prototype)\n    if (body) {\n      this.message = `${statusCode} ${statusMessage} : ${body}`\n    } else {\n      this.message = `${statusCode} ${statusMessage}`\n    }\n    this.setRetryAfter(retryAfter)\n  }\n\n  private setRetryAfter(retryAfter?: string | undefined | null): void {\n    if (typeof retryAfter === 'string') {\n      // try to parse the supplied number as milliseconds\n      if (/^[0-9]+$/.test(retryAfter)) {\n        this._retryAfter = parseInt(retryAfter)\n      } else {\n        this._retryAfter = 0\n      }\n    } else {\n      this._retryAfter = 0\n    }\n  }\n\n  canRetry(): boolean {\n    return isStatusCodeRetriable(this.statusCode)\n  }\n  retryAfter(): number {\n    return this._retryAfter\n  }\n}\n\n//see https://nodejs.org/api/errors.html\nconst RETRY_CODES = [\n  'ECONNRESET',\n  'ENOTFOUND',\n  'ESOCKETTIMEDOUT',\n  'ETIMEDOUT',\n  'ECONNREFUSED',\n  'EHOSTUNREACH',\n  'EPIPE',\n]\n\n/**\n * Tests the error in order to know if an HTTP call can be retried.\n * @param error - error to test\n * @returns true for a retriable error\n */\nexport function canRetryHttpCall(error: any): boolean {\n  if (!error) {\n    return false\n  } else if (typeof (error as any).canRetry === 'function') {\n    return !!((error as any).canRetry as () => boolean)()\n  } else if ((error as any).code && RETRY_CODES.includes((error as any).code)) {\n    return true\n  }\n  return false\n}\n\n/**\n * Gets retry delay from the supplied error, possibly using random number up to retryJitter.\n */\nexport function getRetryDelay(error?: Error, retryJitter?: number): number {\n  if (!error) {\n    return 0\n  } else {\n    let retVal\n    if (typeof (error as any).retryAfter === 'function') {\n      return ((error as any).retryAfter as () => number)()\n    } else {\n      retVal = 0\n    }\n    if (retryJitter && retryJitter > 0) {\n      return retVal + Math.round(Math.random() * retryJitter)\n    } else {\n      return retVal\n    }\n  }\n}\n\n/** RequestTimedOutError indicates request timeout in the communication with the server */\nexport class RequestTimedOutError extends Error implements RetriableDecision {\n  /* istanbul ignore next because of super() not being covered */\n  constructor() {\n    super()\n    Object.setPrototypeOf(this, RequestTimedOutError.prototype)\n    this.message = 'Request timed out'\n  }\n  canRetry(): boolean {\n    return true\n  }\n  retryAfter(): number {\n    return 0\n  }\n}\n\n/** AbortError indicates that the communication with the server was aborted */\nexport class AbortError extends Error implements RetriableDecision {\n  /* istanbul ignore next because of super() not being covered */\n  constructor() {\n    super()\n    this.name = 'AbortError'\n    Object.setPrototypeOf(this, AbortError.prototype)\n    this.message = 'Response aborted'\n  }\n  canRetry(): boolean {\n    return true\n  }\n  retryAfter(): number {\n    return 0\n  }\n}\n","const reEscape = /[-|\\\\{()[\\]^$+*?.]/g\nconst escapeChar = '\\\\'\n\n/**\n * The Escaper escapes the special characters in the provided list\n * with backslashes. Much of the code here is inspired by that in the\n * sqlstring packet found here: https://github.com/mysqljs/sqlstring\n *\n * Instances of the Escaper are derived from the documentation of escape\n * sequences found here: https://aka.ms/co1m4k\n *\n * sqlstring is made available under the following license:\n *\n *   Copyright (c) 2012 Felix Geisend√∂rfer (felix\\@debuggable.com) and contributors\n *\n *   Permission is hereby granted, free of charge, to any person obtaining a copy\n *   of this software and associated documentation files (the \"Software\"), to deal\n *   in the Software without restriction, including without limitation the rights\n *   to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n *   copies of the Software, and to permit persons to whom the Software is\n *   furnished to do so, subject to the following conditions:\n *\n *   The above copyright notice and this permission notice shall be included in\n *   all copies or substantial portions of the Software.\n *\n *   THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n *   IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n *   FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n *   AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n *   LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n *   OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n *   THE SOFTWARE.\n *\n */\nclass Escaper {\n  private _re: RegExp\n\n  constructor(\n    private config: {[p: string]: EscaperConfig},\n    private wrap: string = ''\n  ) {\n    const patterns = Object.keys(config)\n      .join('|')\n      .replace(reEscape, '\\\\$&')\n    this._re = new RegExp('[' + patterns + ']', 'g')\n  }\n\n  /**\n   * Escape replaces occurrences of special characters within the target\n   * string with the necessary escape codes.\n   */\n  public escape(val: string): string {\n    this._re.lastIndex = 0\n    let chunkIndex = this._re.lastIndex\n    let escapedVal = ''\n    let match = this._re.exec(val)\n\n    while (match) {\n      const matched = match[0]\n      const toEscape = this.config[matched].escapeChar\n      const toReplace = this.config[matched].replaceChar\n      escapedVal += val.slice(chunkIndex, match.index)\n      escapedVal += toReplace != undefined ? toReplace : toEscape + matched\n      chunkIndex = this._re.lastIndex\n      match = this._re.exec(val)\n    }\n\n    if (chunkIndex === 0) {\n      return this.wrap + val + this.wrap\n    }\n\n    if (chunkIndex < val.length) {\n      return this.wrap + escapedVal + val.slice(chunkIndex) + this.wrap\n    }\n\n    return this.wrap + escapedVal + this.wrap\n  }\n}\n\nclass EscaperConfig {\n  escapeChar?: string\n  replaceChar?: string\n\n  constructor(escapeChar?: string, replaceChar?: string) {\n    this.escapeChar = escapeChar\n    this.replaceChar = replaceChar\n  }\n}\n\nconst escaperConfig = new EscaperConfig(escapeChar)\n\nconst bindEsc = (e: Escaper): ((val: string) => string) => e.escape.bind(e)\n\n/**\n * Provides functions escape specific parts in InfluxDB line protocol.\n */\nexport const escape = {\n  /**\n   * Measurement escapes measurement names.\n   */\n  measurement: bindEsc(\n    new Escaper({\n      ',': escaperConfig,\n      ' ': escaperConfig,\n      '\\n': new EscaperConfig(undefined, '\\\\n'),\n      '\\r': new EscaperConfig(undefined, '\\\\r'),\n      '\\t': new EscaperConfig(undefined, '\\\\t'),\n    })\n  ),\n\n  /**\n   * Quoted escapes quoted values, such as database names.\n   */\n  quoted: bindEsc(\n    new Escaper(\n      {\n        '\"': escaperConfig,\n        '\\\\': escaperConfig,\n      },\n      '\"'\n    )\n  ),\n\n  /**\n   * TagEscaper escapes tag keys, tag values, and field keys.\n   */\n  tag: bindEsc(\n    new Escaper({\n      ',': escaperConfig,\n      '=': escaperConfig,\n      ' ': escaperConfig,\n      '\\n': new EscaperConfig(undefined, '\\\\n'),\n      '\\r': new EscaperConfig(undefined, '\\\\r'),\n      '\\t': new EscaperConfig(undefined, '\\\\t'),\n    })\n  ),\n}\n","declare let process: any\nconst zeroPadding = '000000000'\nlet useHrTime = false\n\nexport function useProcessHrtime(use: boolean): boolean {\n  /* istanbul ignore else */\n  if (!process.env.ROLLUP_BROWSER) {\n    return (useHrTime = use && process && typeof process.hrtime === 'function')\n  } else {\n    return false\n  }\n}\nuseProcessHrtime(true) // preffer node\n\nlet startHrMillis: number | undefined = undefined\nlet startHrTime: [number, number] | undefined = undefined\nlet lastMillis = Date.now()\nlet stepsInMillis = 0\nfunction nanos(): string {\n  if (!process.env.ROLLUP_BROWSER && useHrTime) {\n    const hrTime = process.hrtime() as [number, number]\n    let millis = Date.now()\n    if (!startHrTime) {\n      startHrTime = hrTime\n      startHrMillis = millis\n    } else {\n      hrTime[0] = hrTime[0] - startHrTime[0]\n      hrTime[1] = hrTime[1] - startHrTime[1]\n      // istanbul ignore next \"cannot mock system clock, manually reviewed\"\n      if (hrTime[1] < 0) {\n        hrTime[0] -= 1\n        hrTime[1] += 1000_000_000\n      }\n      millis =\n        (startHrMillis as number) +\n        hrTime[0] * 1000 +\n        Math.floor(hrTime[1] / 1000_000)\n    }\n    const nanos = String(hrTime[1] % 1000_000)\n    return String(millis) + zeroPadding.substr(0, 6 - nanos.length) + nanos\n  } else {\n    const millis = Date.now()\n    if (millis !== lastMillis) {\n      lastMillis = millis\n      stepsInMillis = 0\n    } else {\n      stepsInMillis++\n    }\n    const nanos = String(stepsInMillis)\n    return String(millis) + zeroPadding.substr(0, 6 - nanos.length) + nanos\n  }\n}\n\nfunction micros(): string {\n  if (!process.env.ROLLUP_BROWSER && useHrTime) {\n    const hrTime = process.hrtime() as [number, number]\n    const micros = String(Math.trunc(hrTime[1] / 1000) % 1000)\n    return (\n      String(Date.now()) + zeroPadding.substr(0, 3 - micros.length) + micros\n    )\n  } else {\n    return String(Date.now()) + zeroPadding.substr(0, 3)\n  }\n}\nfunction millis(): string {\n  return String(Date.now())\n}\nfunction seconds(): string {\n  return String(Math.floor(Date.now() / 1000))\n}\n\n/**\n * Exposes functions that creates strings that represent a timestamp that\n * can be used in the line protocol. Micro and nano timestamps are emulated\n * depending on the js platform in use.\n */\nexport const currentTime = Object.freeze({\n  s: seconds as () => string,\n  ms: millis as () => string,\n  us: micros as () => string,\n  ns: nanos as () => string,\n  seconds: seconds as () => string,\n  millis: millis as () => string,\n  micros: micros as () => string,\n  nanos: nanos as () => string,\n})\n\n/**\n * dateToProtocolTimestamp provides converters for JavaScript Date to InfluxDB Write Protocol Timestamp. Keys are supported precisions.\n */\nexport const dateToProtocolTimestamp = {\n  s: (d: Date): string => `${Math.floor(d.getTime() / 1000)}`,\n  ms: (d: Date): string => `${d.getTime()}`,\n  us: (d: Date): string => `${d.getTime()}000`,\n  ns: (d: Date): string => `${d.getTime()}000000`,\n}\n","import FluxTableColumn, {ColumnType} from './FluxTableColumn'\nimport {IllegalArgumentError} from '../errors'\n\nconst identity = (x: string): any => x\n/**\n * A dictionary of serializers of particular types returned by a flux query.\n * See {@link https://v2.docs.influxdata.com/v2.0/reference/syntax/annotated-csv/#valid-data-types }\n */\nexport const typeSerializers: Record<ColumnType, (val: string) => any> = {\n  boolean: (x: string): any => x === 'true',\n  unsignedLong: (x: string): any => (x === '' ? null : +x),\n  long: (x: string): any => (x === '' ? null : +x),\n  double: (x: string): any => (x === '' ? null : +x),\n  string: identity,\n  base64Binary: identity,\n  duration: (x: string): any => (x === '' ? null : x),\n  'dateTime:RFC3339': (x: string): any => (x === '' ? null : x),\n}\n\n/**\n * serializeDateTimeAsDate changes type serializers to return JavaScript Date instances\n * for 'dateTime:RFC3339' query result data type. Empty value is converted to null.\n * @remarks\n * Please note that the result has millisecond precision whereas InfluxDB returns dateTime\n * in nanosecond precision.\n */\nexport function serializeDateTimeAsDate(): void {\n  typeSerializers['dateTime:RFC3339'] = (x: string): any =>\n    x === '' ? null : new Date(Date.parse(x))\n}\n/**\n * serializeDateTimeAsNumber changes type serializers to return milliseconds since epoch\n * for 'dateTime:RFC3339' query result data type. Empty value is converted to null.\n * @remarks\n * Please note that the result has millisecond precision whereas InfluxDB returns dateTime\n * in nanosecond precision.\n */\nexport function serializeDateTimeAsNumber(): void {\n  typeSerializers['dateTime:RFC3339'] = (x: string): any =>\n    x === '' ? null : Date.parse(x)\n}\n/**\n * serializeDateTimeAsString changes type serializers to return string values\n * for `dateTime:RFC3339` query result data type.  Empty value is converted to null.\n */\nexport function serializeDateTimeAsString(): void {\n  typeSerializers['dateTime:RFC3339'] = (x: string): any =>\n    x === '' ? null : x\n}\n\n/**\n * Represents metadata of a {@link http://bit.ly/flux-spec#table | flux table}.\n */\nexport default interface FluxTableMetaData {\n  /**\n   * Table columns.\n   */\n  columns: Array<FluxTableColumn>\n\n  /**\n   * Gets columns by name\n   * @param label - column label\n   * @returns table column\n   * @throws IllegalArgumentError if column is not found\n   **/\n  column(label: string): FluxTableColumn\n\n  /**\n   * Creates an object out of the supplied values with the help of columns .\n   * @param values - a row with data for each column\n   */\n  toObject(values: string[]): {[key: string]: any}\n}\n\n/**\n * FluxTableMetaData Implementation.\n */\nclass FluxTableMetaDataImpl implements FluxTableMetaData {\n  columns: Array<FluxTableColumn>\n  constructor(columns: FluxTableColumn[]) {\n    columns.forEach((col, i) => (col.index = i))\n    this.columns = columns\n  }\n  column(label: string): FluxTableColumn {\n    for (let i = 0; i < this.columns.length; i++) {\n      const col = this.columns[i]\n      if (col.label === label) return col\n    }\n    throw new IllegalArgumentError(`Column ${label} not found!`)\n  }\n  toObject(values: string[]): {[key: string]: any} {\n    const acc: any = {}\n    for (let i = 0; i < this.columns.length && i < values.length; i++) {\n      let val = values[i]\n      const column = this.columns[i]\n      if (val === '' && column.defaultValue) {\n        val = column.defaultValue\n      }\n      acc[column.label] = (typeSerializers[column.dataType] ?? identity)(val)\n    }\n    return acc\n  }\n}\n\n/**\n * Created FluxTableMetaData from the columns supplied.\n * @param columns -  columns\n * @returns - instance\n */\nexport function createFluxTableMetaData(\n  columns: FluxTableColumn[]\n): FluxTableMetaData {\n  return new FluxTableMetaDataImpl(columns)\n}\n","/**\n * Type of query result column, see {@link https://v2.docs.influxdata.com/v2.0/reference/syntax/annotated-csv/#valid-data-types }\n */\nexport type ColumnType =\n  | 'boolean'\n  | 'unsignedLong'\n  | 'long'\n  | 'double'\n  | 'string'\n  | 'base64Binary'\n  | 'dateTime:RFC3339'\n  | 'duration'\n  | string\n\n/**\n * Column metadata class of a {@link http://bit.ly/flux-spec#table | flux table} column.\n */\nexport default interface FluxTableColumn {\n  /**\n   * Label (e.g., \"_start\", \"_stop\", \"_time\").\n   */\n  label: string\n\n  /**\n   * The data type of column (e.g., \"string\", \"long\", \"dateTime:RFC3339\").\n   */\n  dataType: ColumnType\n\n  /**\n   * Boolean flag indicating if the column is a part of the table's group key.\n   */\n  group: boolean\n\n  /**\n   * Default value to be used for rows whose string value is the empty string.\n   */\n  defaultValue: string\n\n  /**\n   * Index of this column in the row array\n   */\n  index: number\n}\n\n/**\n * FluxTableColumn implementation.\n */\nclass FluxTableColumnImpl implements FluxTableColumn {\n  label: string\n  dataType: ColumnType\n  group: boolean\n  defaultValue: string\n  index: number\n}\n\n/**\n * Creates a new flux table column.\n * @returns column instance\n */\nexport function newFluxTableColumn(): FluxTableColumn {\n  return new FluxTableColumnImpl()\n}\n\n/**\n * Creates a flux table column from a partial FluxTableColumn.\n * @param object - source object\n * @returns column instance\n */\nexport function createFluxTableColumn(\n  object: Partial<FluxTableColumn>\n): FluxTableColumn {\n  const retVal = new FluxTableColumnImpl()\n  retVal.label = String(object.label)\n  retVal.dataType = object.dataType as ColumnType\n  retVal.group = Boolean(object.group)\n  retVal.defaultValue = object.defaultValue ?? ''\n  retVal.index = object.index ?? 0\n  return retVal\n}\n","/** Property that offers a function that returns flux-sanitized value of an object.  */\nexport const FLUX_VALUE = Symbol('FLUX_VALUE')\n\n/**\n * A flux parameter can print its (sanitized) flux value.\n */\nexport interface FluxParameterLike {\n  [FLUX_VALUE](): string\n}\n\n/**\n * Represents a parameterized query.\n */\nexport interface ParameterizedQuery {\n  /**\n   * Returns flux query with sanitized parameters.\n   */\n  toString(): string\n}\n\nclass FluxParameter implements FluxParameterLike, ParameterizedQuery {\n  constructor(private fluxValue: string) {}\n  toString(): string {\n    return this.fluxValue\n  }\n  [FLUX_VALUE](): string {\n    return this.fluxValue\n  }\n}\n\n/**\n * Checks if the supplied object is FluxParameterLike\n * @param value - any value\n * @returns true if it is\n */\nfunction isFluxParameterLike(value: any): boolean {\n  return typeof value === 'object' && typeof value[FLUX_VALUE] === 'function'\n}\n\n/**\n * Escapes content of the supplied string so it can be wrapped into double qoutes\n * to become a [flux string literal](https://docs.influxdata.com/flux/v0.65/language/lexical-elements/#string-literals).\n * @param value - string value\n * @returns sanitized string\n */\nfunction sanitizeString(value: any): string {\n  if (value === null || value === undefined) return ''\n  value = value.toString()\n  let retVal: any = undefined\n  let i = 0\n  function prepareRetVal(): void {\n    if (retVal === undefined) {\n      retVal = value.substring(0, i)\n    }\n  }\n  for (; i < value.length; i++) {\n    const c = value.charAt(i)\n    switch (c) {\n      case '\\r':\n        prepareRetVal()\n        retVal += '\\\\r'\n        break\n      case '\\n':\n        prepareRetVal()\n        retVal += '\\\\n'\n        break\n      case '\\t':\n        prepareRetVal()\n        retVal += '\\\\t'\n        break\n      case '\"':\n      case '\\\\':\n        prepareRetVal()\n        retVal = retVal + '\\\\' + c\n        break\n      case '$':\n        // escape ${\n        if (i + 1 < value.length && value.charAt(i + 1) === '{') {\n          prepareRetVal()\n          i++\n          retVal += '\\\\${'\n          break\n        }\n        // append $\n        if (retVal != undefined) {\n          retVal += c\n        }\n        break\n      default:\n        if (retVal != undefined) {\n          retVal += c\n        }\n    }\n  }\n  if (retVal !== undefined) {\n    return retVal\n  }\n  return value\n}\n\n/**\n * Creates a flux string literal.\n */\nexport function fluxString(value: any): FluxParameterLike {\n  return new FluxParameter(`\"${sanitizeString(value)}\"`)\n}\n\n/**\n * Creates a flux integer literal.\n */\nexport function fluxInteger(value: any): FluxParameterLike {\n  const val = String(value)\n  for (const c of val) {\n    if (c < '0' || c > '9') throw new Error(`not a flux integer: ${val}`)\n  }\n  return new FluxParameter(val)\n}\n\n/**\n * Sanitizes float value to avoid injections.\n * @param value - InfluxDB float literal\n * @returns sanitized float value\n * @throws Error if the the value cannot be sanitized\n */\nexport function sanitizeFloat(value: any): string {\n  const val = String(value)\n  let dot = false\n  for (const c of val) {\n    if (c === '.') {\n      if (dot) throw new Error(`not a flux float: ${val}`)\n      dot = !dot\n    }\n    if (c !== '.' && (c < '0' || c > '9'))\n      throw new Error(`not a flux float: ${val}`)\n  }\n  return val\n}\n/**\n * Creates a flux float literal.\n */\nexport function fluxFloat(value: any): FluxParameterLike {\n  return new FluxParameter(sanitizeFloat(value))\n}\n\nfunction sanitizeDateTime(value: any): string {\n  return `time(v: \"${sanitizeString(value)}\")`\n}\n\n/**\n * Creates flux date-time literal.\n */\nexport function fluxDateTime(value: any): FluxParameterLike {\n  return new FluxParameter(sanitizeDateTime(value))\n}\n\n/**\n * Creates flux date-time literal.\n */\nexport function fluxDuration(value: any): FluxParameterLike {\n  return new FluxParameter(`duration(v: \"${sanitizeString(value)}\")`)\n}\n\nfunction sanitizeRegExp(value: any): string {\n  return `regexp.compile(v: \"${sanitizeString(value)}\")`\n}\n\n/**\n * Creates flux regexp literal.\n */\nexport function fluxRegExp(value: any): FluxParameterLike {\n  // let the server decide if it can be parsed\n  return new FluxParameter(sanitizeRegExp(value))\n}\n\n/**\n * Creates flux boolean literal.\n */\nexport function fluxBool(value: any): FluxParameterLike {\n  if (value === 'true' || value === 'false') {\n    return new FluxParameter(value)\n  }\n  return new FluxParameter((!!value).toString())\n}\n\n/**\n * Assumes that the supplied value is flux expression or literal that does not need sanitizing.\n *\n * @param value - any value\n * @returns the supplied value as-is\n */\nexport function fluxExpression(value: any): FluxParameterLike {\n  return new FluxParameter(String(value))\n}\n\n/**\n * Escapes content of the supplied parameter so that it can be safely embedded into flux query.\n * @param value - parameter value\n * @returns sanitized flux value or an empty string if it cannot be converted\n */\nexport function toFluxValue(value: any): string {\n  if (value === undefined) {\n    return ''\n  } else if (value === null) {\n    return 'null'\n  } else if (typeof value === 'boolean') {\n    return value.toString()\n  } else if (typeof value === 'string') {\n    return `\"${sanitizeString(value)}\"`\n  } else if (typeof value === 'number') {\n    return sanitizeFloat(value)\n  } else if (typeof value === 'object') {\n    if (typeof value[FLUX_VALUE] === 'function') {\n      return value[FLUX_VALUE]()\n    } else if (value instanceof Date) {\n      return value.toISOString()\n    } else if (value instanceof RegExp) {\n      return sanitizeRegExp(value)\n    } else if (Array.isArray(value)) {\n      return `[${value.map(toFluxValue).join(',')}]`\n    }\n  }\n  // use toString value for unrecognized object, bigint, symbol\n  return toFluxValue(value.toString())\n}\n\n/**\n * Flux is a tagged template that sanitizes supplied parameters\n * to avoid injection attacks in flux.\n */\nexport function flux(\n  strings: TemplateStringsArray,\n  ...values: any\n): ParameterizedQuery {\n  if (strings.length == 1 && (!values || values.length === 0)) {\n    return fluxExpression(strings[0]) // the simplest case\n  }\n  const parts = new Array<string>(strings.length + values.length)\n  let partIndex = 0\n  for (let i = 0; i < strings.length; i++) {\n    const text = strings[i]\n    parts[partIndex++] = text\n    if (i < values.length) {\n      const val = values[i]\n      let sanitized: string\n      if (\n        text.endsWith('\"') &&\n        i + 1 < strings.length &&\n        strings[i + 1].startsWith('\"')\n      ) {\n        // parameter is wrapped into flux double quotes\n        sanitized = sanitizeString(val)\n      } else {\n        sanitized = toFluxValue(val)\n        if (sanitized === '') {\n          // do not allow to insert empty strings, unless it is FluxParameterLike\n          if (!isFluxParameterLike(val)) {\n            throw new Error(\n              `Unsupported parameter literal '${val}' at index: ${i}, type: ${typeof val}`\n            )\n          }\n        }\n      }\n      parts[partIndex++] = sanitized\n    } else if (i < strings.length - 1) {\n      throw new Error('Too few parameters supplied!')\n    }\n  }\n  // return flux expression so that flux can be embedded into another flux as-is\n  return fluxExpression(parts.join(''))\n}\n","/* Observable interop typing. Taken from https://github.com/ReactiveX/rxjs */\n\n/* Note: This will add Symbol.observable globally for all TypeScript users */\ndeclare global {\n  interface SymbolConstructor {\n    readonly observable: symbol\n  }\n}\n\n/** Symbol.observable or a string \"\\@\\@observable\". Used for interop */\nexport const symbolObservable = (():\n  | typeof Symbol.observable\n  | '@@observable' =>\n  (typeof Symbol === 'function' && Symbol.observable) || '@@observable')()\n","/**\n * Logging interface.\n */\nexport interface Logger {\n  error(message: string, err?: any): void\n  warn(message: string, err?: any): void\n}\n\n/**\n * Logger that logs to console.out\n */\nexport const consoleLogger: Logger = Object.freeze({\n  error(message, error) {\n    // eslint-disable-next-line no-console\n    console.error('ERROR: ' + message, error ? error : '')\n  },\n  warn(message, error) {\n    // eslint-disable-next-line no-console\n    console.warn('WARN: ' + message, error ? error : '')\n  },\n})\nlet provider: Logger = consoleLogger\n\nconst Logger: Logger = {\n  error(message, error) {\n    provider.error(message, error)\n  },\n  warn(message, error) {\n    provider.warn(message, error)\n  },\n}\n\n/**\n * Sets custom logger.\n * @param logger - logger to use\n * @returns previous logger\n */\nexport function setLogger(logger: Logger): Logger {\n  const previous = provider\n  provider = logger\n  return previous\n}\n\nexport default Logger\n","import {getRetryDelay, RetryDelayStrategy} from '../errors'\nimport {\n  RetryDelayStrategyOptions,\n  DEFAULT_RetryDelayStrategyOptions,\n} from '../options'\n\n/**\n * Applies a variant of exponential backoff with initial and max delay and a random\n * jitter delay. It also respects `retry delay` when specified together with an error.\n */\nexport class RetryStrategyImpl implements RetryDelayStrategy {\n  options: RetryDelayStrategyOptions\n  currentDelay: number | undefined\n\n  constructor(options?: Partial<RetryDelayStrategyOptions>) {\n    this.options = {...DEFAULT_RetryDelayStrategyOptions, ...options}\n    this.success()\n  }\n\n  nextDelay(error?: Error, failedAttempts?: number): number {\n    const delay = getRetryDelay(error)\n    if (delay && delay > 0) {\n      return delay + Math.round(Math.random() * this.options.retryJitter)\n    } else {\n      let delay = this.currentDelay\n      if (failedAttempts && failedAttempts > 0) {\n        // compute delay\n        delay = this.options.minRetryDelay\n        for (let i = 1; i < failedAttempts; i++) {\n          delay = delay * this.options.exponentialBase\n          if (delay >= this.options.maxRetryDelay) {\n            break\n          }\n        }\n        return (\n          Math.min(Math.max(delay, 1), this.options.maxRetryDelay) +\n          Math.round(Math.random() * this.options.retryJitter)\n        )\n      } else if (this.currentDelay) {\n        this.currentDelay = Math.min(\n          Math.max(this.currentDelay * this.options.exponentialBase, 1) +\n            Math.round(Math.random() * this.options.retryJitter),\n          this.options.maxRetryDelay\n        )\n      } else {\n        this.currentDelay =\n          this.options.minRetryDelay +\n          Math.round(Math.random() * this.options.retryJitter)\n      }\n      return this.currentDelay\n    }\n  }\n  success(): void {\n    this.currentDelay = undefined\n  }\n}\n\n/**\n * Creates a new instance of retry strategy.\n * @param options - retry options\n * @returns retry strategy implementation\n */\nexport function createRetryDelayStrategy(\n  options?: Partial<RetryDelayStrategyOptions>\n): RetryDelayStrategy {\n  return new RetryStrategyImpl(options)\n}\n","import Logger from './Logger'\n\n/* interval between successful retries */\nconst RETRY_INTERVAL = 1\n\ninterface RetryItem {\n  lines: string[]\n  retryCount: number\n  next?: RetryItem\n}\n\n/**\n * Retries lines up to a limit of max buffer size.\n */\nexport default class RetryBuffer {\n  first?: RetryItem\n  last?: RetryItem\n  size = 0\n  nextRetryTime = 0\n  closed = false\n  private _timeoutHandle: any = undefined\n\n  constructor(\n    private maxLines: number,\n    private retryLines: (\n      lines: string[],\n      retryCountdown: number\n    ) => Promise<void>\n  ) {}\n\n  addLines(lines: string[], retryCount: number, delay: number): void {\n    if (this.closed) return\n    if (!lines.length) return\n    const retryTime = Date.now() + delay\n    if (retryTime > this.nextRetryTime) this.nextRetryTime = retryTime\n    // ensure at most maxLines are in the Buffer\n    if (this.first && this.size + lines.length > this.maxLines) {\n      const origSize = this.size\n      const newSize = origSize * 0.7 // reduce to 70 %\n      do {\n        const newFirst = this.first.next as RetryItem\n        this.size -= this.first.lines.length\n        this.first = newFirst\n      } while (this.first && this.size + lines.length > newSize)\n      Logger.error(\n        `RetryBuffer: ${origSize -\n          this\n            .size} oldest lines removed to keep buffer size under the limit of ${\n          this.maxLines\n        } lines`\n      )\n    }\n    const toAdd = {\n      lines,\n      retryCount,\n    }\n    if (this.last) {\n      this.last.next = toAdd\n      this.last = toAdd\n    } else {\n      this.first = toAdd\n      this.last = toAdd\n      this.scheduleRetry(delay)\n    }\n    this.size += lines.length\n  }\n\n  removeLines(): RetryItem | undefined {\n    if (this.first) {\n      const toRetry = this.first\n      this.first = this.first.next\n      this.size -= toRetry.lines.length\n      if (!this.first) this.last = undefined\n      return toRetry\n    }\n    return undefined\n  }\n\n  scheduleRetry(delay: number): void {\n    this._timeoutHandle = setTimeout(() => {\n      const toRetry = this.removeLines()\n      if (toRetry) {\n        this.retryLines(toRetry.lines, toRetry.retryCount)\n          .then(() => {\n            // continue with successfull retry\n            this.scheduleRetry(RETRY_INTERVAL)\n          })\n          .catch(_e => {\n            // already logged\n            this.scheduleRetry(this.nextRetryTime - Date.now())\n          })\n      } else {\n        this._timeoutHandle = undefined\n      }\n    }, delay)\n  }\n\n  async flush(): Promise<void> {\n    let toRetry\n    while ((toRetry = this.removeLines())) {\n      await this.retryLines(toRetry.lines, toRetry.retryCount)\n    }\n  }\n\n  close(): number {\n    if (this._timeoutHandle) {\n      clearTimeout(this._timeoutHandle)\n      this._timeoutHandle = undefined\n    }\n    this.closed = true\n    return this.size\n  }\n}\n","import WriteApi from '../WriteApi'\nimport {\n  DEFAULT_WriteOptions,\n  PointSettings,\n  WriteOptions,\n  WritePrecisionType,\n} from '../options'\nimport {Transport, SendOptions} from '../transport'\nimport Logger from './Logger'\nimport {HttpError, RetryDelayStrategy} from '../errors'\nimport Point from '../Point'\nimport {escape} from '../util/escape'\nimport {currentTime, dateToProtocolTimestamp} from '../util/currentTime'\nimport {createRetryDelayStrategy} from './retryStrategy'\nimport RetryBuffer from './RetryBuffer'\n\nclass WriteBuffer {\n  length = 0\n  lines: string[]\n\n  constructor(\n    private maxChunkRecords: number,\n    private flushFn: (lines: string[]) => Promise<void>,\n    private scheduleSend: () => void\n  ) {\n    this.lines = new Array<string>(maxChunkRecords)\n  }\n\n  add(record: string): void {\n    if (this.length === 0) {\n      this.scheduleSend()\n    }\n    this.lines[this.length] = record\n    this.length++\n    if (this.length >= this.maxChunkRecords) {\n      this.flush().catch(_e => {\n        // an error is logged in case of failure, avoid UnhandledPromiseRejectionWarning\n      })\n    }\n  }\n  flush(): Promise<void> {\n    const lines = this.reset()\n    if (lines.length > 0) {\n      return this.flushFn(lines)\n    } else {\n      return Promise.resolve()\n    }\n  }\n  reset(): string[] {\n    const retVal = this.lines.slice(0, this.length)\n    this.length = 0\n    return retVal\n  }\n}\n\nexport default class WriteApiImpl implements WriteApi, PointSettings {\n  private writeBuffer: WriteBuffer\n  private closed = false\n  private httpPath: string\n  private writeOptions: WriteOptions\n  private sendOptions: SendOptions = {\n    method: 'POST',\n    headers: {\n      'content-type': 'text/plain; charset=utf-8',\n    },\n  }\n  private _timeoutHandle: any = undefined\n  private currentTime: () => string\n  private dateToProtocolTimestamp: (d: Date) => string\n\n  retryBuffer: RetryBuffer\n  retryStrategy: RetryDelayStrategy\n\n  constructor(\n    private transport: Transport,\n    org: string,\n    bucket: string,\n    precision: WritePrecisionType,\n    writeOptions?: Partial<WriteOptions>\n  ) {\n    this.httpPath = `/api/v2/write?org=${encodeURIComponent(\n      org\n    )}&bucket=${encodeURIComponent(bucket)}&precision=${precision}`\n    this.writeOptions = {\n      ...DEFAULT_WriteOptions,\n      ...writeOptions,\n    }\n    this.currentTime = currentTime[precision]\n    this.dateToProtocolTimestamp = dateToProtocolTimestamp[precision]\n    if (this.writeOptions.defaultTags) {\n      this.useDefaultTags(this.writeOptions.defaultTags)\n    }\n\n    const scheduleNextSend = (): void => {\n      if (this.writeOptions.flushInterval > 0) {\n        this._clearFlushTimeout()\n        /* istanbul ignore else manually reviewed, hard to reproduce */\n        if (!this.closed) {\n          this._timeoutHandle = setTimeout(\n            () =>\n              this.sendBatch(\n                this.writeBuffer.reset(),\n                this.writeOptions.maxRetries + 1\n              ).catch(_e => {\n                // an error is logged in case of failure, avoid UnhandledPromiseRejectionWarning\n              }),\n            this.writeOptions.flushInterval\n          )\n        }\n      }\n    }\n    // write buffer\n    this.writeBuffer = new WriteBuffer(\n      this.writeOptions.batchSize,\n      lines => {\n        this._clearFlushTimeout()\n        return this.sendBatch(lines, this.writeOptions.maxRetries + 1)\n      },\n      scheduleNextSend\n    )\n    this.sendBatch = this.sendBatch.bind(this)\n    // retry buffer\n    this.retryStrategy = createRetryDelayStrategy(this.writeOptions)\n    this.retryBuffer = new RetryBuffer(\n      this.writeOptions.maxBufferLines,\n      this.sendBatch\n    )\n  }\n\n  sendBatch(lines: string[], attempts: number): Promise<void> {\n    // eslint-disable-next-line @typescript-eslint/no-this-alias\n    const self: WriteApiImpl = this\n    if (!this.closed && lines.length > 0) {\n      return new Promise<void>((resolve, reject) => {\n        this.transport.send(this.httpPath, lines.join('\\n'), this.sendOptions, {\n          error(error: Error): void {\n            const failedAttempts = self.writeOptions.maxRetries + 2 - attempts\n            // call the writeFailed listener and check if we can retry\n            const onRetry = self.writeOptions.writeFailed.call(\n              self,\n              error,\n              lines,\n              failedAttempts\n            )\n            if (onRetry) {\n              onRetry.then(resolve, reject)\n              return\n            }\n            if (\n              !self.closed &&\n              attempts > 1 &&\n              (!(error instanceof HttpError) ||\n                (error as HttpError).statusCode >= 429)\n            ) {\n              Logger.warn(\n                `Write to InfluxDB failed (remaining attempts: ${attempts -\n                  1}).`,\n                error\n              )\n              self.retryBuffer.addLines(\n                lines,\n                attempts - 1,\n                self.retryStrategy.nextDelay(error, failedAttempts)\n              )\n              reject(error)\n              return\n            }\n            Logger.error(`Write to InfluxDB failed.`, error)\n            reject(error)\n          },\n          complete(): void {\n            self.retryStrategy.success()\n            resolve()\n          },\n        })\n      })\n    } else {\n      return Promise.resolve()\n    }\n  }\n\n  private _clearFlushTimeout(): void {\n    if (this._timeoutHandle !== undefined) {\n      clearTimeout(this._timeoutHandle)\n      this._timeoutHandle = undefined\n    }\n  }\n\n  writeRecord(record: string): void {\n    if (this.closed) {\n      throw new Error('writeApi: already closed!')\n    }\n    this.writeBuffer.add(record)\n  }\n  writeRecords(records: ArrayLike<string>): void {\n    if (this.closed) {\n      throw new Error('writeApi: already closed!')\n    }\n    for (let i = 0; i < records.length; i++) {\n      this.writeBuffer.add(records[i])\n    }\n  }\n  writePoint(point: Point): void {\n    if (this.closed) {\n      throw new Error('writeApi: already closed!')\n    }\n    const line = point.toLineProtocol(this)\n    if (line) this.writeBuffer.add(line)\n  }\n  writePoints(points: ArrayLike<Point>): void {\n    if (this.closed) {\n      throw new Error('writeApi: already closed!')\n    }\n    for (let i = 0; i < points.length; i++) {\n      this.writePoint(points[i])\n    }\n  }\n  async flush(withRetryBuffer?: boolean): Promise<void> {\n    await this.writeBuffer.flush()\n    if (withRetryBuffer) {\n      return await this.retryBuffer.flush()\n    }\n  }\n  close(): Promise<void> {\n    const retVal = this.writeBuffer.flush().finally(() => {\n      const remaining = this.retryBuffer.close()\n      if (remaining) {\n        Logger.error(\n          `Retry buffer closed with ${remaining} items that were not written to InfluxDB!`,\n          null\n        )\n      }\n      this.closed = true\n    })\n    return retVal\n  }\n  dispose(): number {\n    this._clearFlushTimeout()\n    this.closed = true\n    return this.retryBuffer.close() + this.writeBuffer.length\n  }\n\n  // PointSettings\n  defaultTags: {[key: string]: string} | undefined\n  useDefaultTags(tags: {[key: string]: string}): WriteApi {\n    this.defaultTags = undefined\n    Object.keys(tags).forEach((key: string) => {\n      ;(this.defaultTags || (this.defaultTags = {}))[key] = escape.tag(\n        tags[key]\n      )\n    })\n    return this\n  }\n  convertTime(value: string | number | Date | undefined): string | undefined {\n    if (value === undefined) {\n      return this.currentTime()\n    } else if (typeof value === 'string') {\n      return value.length > 0 ? value : undefined\n    } else if (value instanceof Date) {\n      return this.dateToProtocolTimestamp(value)\n    } else if (typeof value === 'number') {\n      return String(Math.floor(value))\n    } else {\n      // Logger.warn(`unsupported timestamp value: ${value}`)\n      return String(value)\n    }\n  }\n}\n","import {ChunkCombiner} from '../../transport'\nimport {Buffer} from 'buffer'\n\nconst nodeChunkCombiner: ChunkCombiner = {\n  concat(first: Uint8Array, second: Uint8Array): Uint8Array {\n    return Buffer.concat([first, second])\n  },\n  toUtf8String(chunk: Uint8Array, start: number, end: number): string {\n    return (chunk as Buffer).toString('utf-8', start, end)\n  },\n  copy(chunk: Uint8Array, start: number, end: number): Uint8Array {\n    const retVal = Buffer.allocUnsafe(end - start)\n    ;(chunk as Buffer).copy(retVal, 0, start, end)\n    return retVal\n  },\n}\n\nexport default nodeChunkCombiner\n","export const CLIENT_LIB_VERSION = '1.7.1'\n","import {ConnectionOptions, DEFAULT_ConnectionOptions} from '../../options'\nimport {parse} from 'url'\nimport * as http from 'http'\nimport * as https from 'https'\nimport {Buffer} from 'buffer'\nimport {RequestTimedOutError, AbortError, HttpError} from '../../errors'\nimport {\n  CommunicationObserver,\n  Transport,\n  SendOptions,\n  Headers,\n  ChunkCombiner,\n} from '../../transport'\nimport Cancellable from '../../util/Cancellable'\nimport nodeChunkCombiner from './nodeChunkCombiner'\nimport zlib from 'zlib'\nimport completeCommunicationObserver from '../completeCommunicationObserver'\nimport {CLIENT_LIB_VERSION} from '../version'\n\nconst zlibOptions = {\n  flush: zlib.Z_SYNC_FLUSH,\n  finishFlush: zlib.Z_SYNC_FLUSH,\n}\nconst emptyBuffer = Buffer.allocUnsafe(0)\n\nclass CancellableImpl implements Cancellable {\n  private cancelled = false\n  cancel(): void {\n    this.cancelled = true\n  }\n  isCancelled(): boolean {\n    return this.cancelled\n  }\n}\n\n/**\n * Transport layer on top of node http or https library.\n */\nexport class NodeHttpTransport implements Transport {\n  /* required transport member */\n  readonly chunkCombiner: ChunkCombiner = nodeChunkCombiner\n\n  private defaultOptions: {[key: string]: any}\n  private requestApi: (\n    options: http.RequestOptions,\n    callback: (res: http.IncomingMessage) => void\n  ) => http.ClientRequest\n  private contextPath: string\n  /**\n   * Creates a node transport using for the client options supplied.\n   * @param connectionOptions - connection options\n   */\n  constructor(private connectionOptions: ConnectionOptions) {\n    const url = parse(connectionOptions.url)\n    this.defaultOptions = {\n      ...DEFAULT_ConnectionOptions,\n      ...connectionOptions,\n      ...connectionOptions.transportOptions,\n      port: url.port,\n      protocol: url.protocol,\n      hostname: url.hostname,\n    }\n    this.contextPath = url.path ?? ''\n    if (this.contextPath.endsWith('/')) {\n      this.contextPath = this.contextPath.substring(\n        0,\n        this.contextPath.length - 1\n      )\n    }\n    if (url.protocol === 'http:') {\n      this.requestApi = http.request\n    } else if (url.protocol === 'https:') {\n      this.requestApi = https.request\n    } else {\n      throw new Error(\n        `Unsupported protocol \"${url.protocol} in URL: \"${connectionOptions.url}\"`\n      )\n    }\n  }\n\n  /**\n   * Sends data to server and receives communication events via communication callbacks.\n   *\n   * @param path - HTTP request  path\n   * @param body - message body\n   * @param headers - HTTP headers\n   * @param method - HTTP method\n   * @param callbacks - communication callbacks\n   */\n  send(\n    path: string,\n    body: string,\n    options: SendOptions,\n    callbacks?: Partial<CommunicationObserver<any>>\n  ): void {\n    const message = this.createRequestMessage(path, body, options)\n    const cancellable = new CancellableImpl()\n    if (callbacks && callbacks.useCancellable)\n      callbacks.useCancellable(cancellable)\n    this._request(message, cancellable, callbacks)\n  }\n\n  /**\n   * Sends data to the server and receives decoded result. The type of the result depends on\n   * response's content-type (deserialized json, text).\n  \n   * @param path - HTTP path\n   * @param requestBody - request body\n   * @param options - send options\n   * @returns Promise of response body\n   */\n  request(path: string, body: any, options: SendOptions): Promise<any> {\n    if (!body) {\n      body = ''\n    } else if (typeof body !== 'string') {\n      body = JSON.stringify(body)\n    }\n    let buffer = emptyBuffer\n    let contentType: string\n    return new Promise((resolve, reject) => {\n      this.send(path, body as string, options, {\n        responseStarted(headers: Headers) {\n          contentType = String(headers['content-type'])\n        },\n        next: (data: Uint8Array): void => {\n          buffer = Buffer.concat([buffer, data])\n        },\n        complete: (): void => {\n          const responseType = options.headers?.accept ?? contentType\n          try {\n            if (responseType.includes('json')) {\n              resolve(JSON.parse(buffer.toString('utf8')))\n            } else if (\n              responseType.includes('text') ||\n              responseType.startsWith('application/csv')\n            ) {\n              resolve(buffer.toString('utf8'))\n            } else {\n              resolve(buffer)\n            }\n          } catch (e) {\n            reject(e)\n          }\n        },\n        error: (e: Error): void => {\n          reject(e)\n        },\n      })\n    })\n  }\n\n  /**\n   * Creates configuration for a specific request.\n   *\n   * @param path - API path starting with '/' and containing also query parameters\n   * @param headers - HTTP headers to use\n   * @param method - HTTP method\n   * @param body - request body, will be utf-8 encoded\n   * @returns a configuration object that is suitable for making the request\n   */\n  private createRequestMessage(\n    path: string,\n    body: string,\n    sendOptions: SendOptions\n  ): {[key: string]: any} {\n    const bodyBuffer = Buffer.from(body, 'utf-8')\n    const headers: {[key: string]: any} = {\n      'content-type': 'application/json; charset=utf-8',\n      'User-Agent': `influxdb-client-js/${CLIENT_LIB_VERSION}`,\n    }\n    if (this.connectionOptions.token) {\n      headers.authorization = 'Token ' + this.connectionOptions.token\n    }\n    const options: {[key: string]: any} = {\n      ...this.defaultOptions,\n      path: this.contextPath + path,\n      method: sendOptions.method,\n      headers: {\n        ...headers,\n        ...sendOptions.headers,\n      },\n      body: bodyBuffer,\n    }\n    options.headers['content-length'] = bodyBuffer.length\n\n    return options\n  }\n\n  private _request(\n    requestMessage: {[key: string]: any},\n    cancellable: CancellableImpl,\n    callbacks?: Partial<CommunicationObserver<any>>\n  ): void {\n    const listeners = completeCommunicationObserver(callbacks)\n    if (cancellable.isCancelled()) {\n      listeners.complete()\n      return\n    }\n    const req = this.requestApi(requestMessage, (res: http.IncomingMessage) => {\n      if (cancellable.isCancelled()) {\n        res.resume()\n        listeners.complete()\n        return\n      }\n      res.on('aborted', () => {\n        listeners.error(new AbortError())\n      })\n      listeners.responseStarted(res.headers)\n      /* istanbul ignore next statusCode is optional in http.IncomingMessage */\n      const statusCode = res.statusCode ?? 600\n      const contentEncoding = res.headers['content-encoding']\n      let responseData\n      if (contentEncoding === 'gzip') {\n        responseData = zlib.createGunzip(zlibOptions)\n        res.pipe(responseData)\n      } else {\n        responseData = res\n      }\n      responseData.on('error', listeners.error)\n      if (statusCode >= 300) {\n        let body = ''\n        responseData.on('data', s => {\n          body += s.toString()\n          if (body.length > 1000) {\n            body = body.slice(0, 1000)\n            res.resume()\n          }\n        })\n        responseData.on('end', () => {\n          if (body === '' && !!res.headers['x-influxdb-error']) {\n            body = res.headers['x-influxdb-error'].toString()\n          }\n          listeners.error(\n            new HttpError(\n              statusCode,\n              res.statusMessage,\n              body,\n              res.headers['retry-after']\n            )\n          )\n        })\n      } else {\n        responseData.on('data', data => {\n          if (cancellable.isCancelled()) {\n            res.resume()\n          } else {\n            listeners.next(data)\n          }\n        })\n        responseData.on('end', listeners.complete)\n      }\n    })\n    // Support older Nodes which don't allow .timeout() in the\n    // request options\n    /* istanbul ignore else support older node versions */\n    if (typeof req.setTimeout === 'function') {\n      req.setTimeout(requestMessage.timeout)\n    }\n\n    req.on('timeout', () => {\n      listeners.error(new RequestTimedOutError())\n    })\n    req.on('error', error => {\n      listeners.error(error)\n    })\n    req.on('close', listeners.complete)\n\n    /* istanbul ignore else support older node versions */\n    if (requestMessage.body) {\n      req.write(requestMessage.body)\n    }\n    req.end()\n  }\n}\nexport default NodeHttpTransport\n","import {CommunicationObserver, Headers} from '../transport'\n\nexport default function completeCommunicationObserver(\n  callbacks: Partial<CommunicationObserver<any>> = {}\n): Omit<Required<CommunicationObserver<any>>, 'useCancellable'> {\n  let state = 0\n  const retVal = {\n    next: (data: any): void => {\n      if (\n        state === 0 &&\n        callbacks.next &&\n        data !== null &&\n        data !== undefined\n      ) {\n        callbacks.next(data)\n      }\n    },\n    error: (error: Error): void => {\n      /* istanbul ignore else propagate error at most once */\n      if (state === 0) {\n        state = 1\n        /* istanbul ignore else safety check */\n        if (callbacks.error) callbacks.error(error)\n      }\n    },\n    complete: (): void => {\n      if (state === 0) {\n        state = 2\n        /* istanbul ignore else safety check */\n        if (callbacks.complete) callbacks.complete()\n      }\n    },\n    responseStarted: (headers: Headers): void => {\n      if (callbacks.responseStarted) callbacks.responseStarted(headers)\n    },\n  }\n  return retVal\n}\n","import {Observable} from './observable'\nimport {\n  FluxResultObserver,\n  FluxTableMetaData,\n  ParameterizedQuery,\n} from './query'\nimport {CommunicationObserver} from './transport'\n\nexport function defaultRowMapping(\n  values: string[],\n  tableMeta: FluxTableMetaData\n): Record<string, any> {\n  return tableMeta.toObject(values)\n}\n\n/** QueryOptions contains QueryApi configuration options. */\nexport interface QueryOptions {\n  /**\n   * Specifies the name of the organization executing the query. Takes either the ID or Name interchangeably.\n   */\n  org: string\n  /**\n   * Type of the query, default is \"flux\"\n   */\n  type?: 'flux'\n  /**\n   * Requests gzip encoded response.\n   */\n  gzip?: boolean\n  /**\n   * Specifies the time that should be reported as \"now\" in the query. RFC3339 value must be returned,\n   * for example `new Date().toISOString()`.\n   */\n  now?: () => string\n}\n\n/** Wraps values and associated metadata of a query result row */\nexport interface Row {\n  values: string[]\n  tableMeta: FluxTableMetaData\n}\n\n/**\n * Query InfluxDB 2.0. Provides methods that notify abouts result lines of the executed query.\n * See {@link https://v2.docs.influxdata.com/v2.0/api/#operation/PostQuery }\n */\nexport default interface QueryApi {\n  /**\n   * Adds extra options for this query API.\n   * @param options - query options to use\n   * @returns this\n   */\n  with(options: Partial<QueryOptions>): QueryApi\n\n  /**\n   * Creates a cold observable of the lines returned by the given query.\n   *\n   * @param query - query\n   * @returns observable of CSV result lines\n   */\n  lines(query: string | ParameterizedQuery): Observable<string>\n\n  /**\n   * Creates a cold observable of the rows returned by the given query.\n   *\n   * @param query - query\n   * @returns observable of result rows\n   */\n  rows(query: string | ParameterizedQuery): Observable<Row>\n\n  /**\n   * Executes the query and receives result lines (including empty and annotation lines)\n   * through the supplied consumer. See [annotated-csv](https://v2.docs.influxdata.com/v2.0/reference/syntax/annotated-csv/).\n   *\n   * @param query - query\n   * @param consumer - csv result lines and error consumer\n   */\n  queryLines(\n    query: string | ParameterizedQuery,\n    consumer: CommunicationObserver<string>\n  ): void\n\n  /**\n   * Executes the query and receives table metadata and rows through the supplied consumer.\n   *\n   * @param query - query\n   * @param consumer - result rows and error consumer\n   */\n  queryRows(\n    query: string | ParameterizedQuery,\n    consumer: FluxResultObserver<string[]>\n  ): void\n\n  /**\n   * QueryRaw executes a query and returns the full response as a string.\n   * Use with caution, a possibly huge stream is copied to memory.\n   *\n   * @param query - query\n   * @returns Promise of response text\n   */\n  queryRaw(query: string | ParameterizedQuery): Promise<string>\n\n  /**\n   * CollectRows executes the query and collects all the results in the returned Promise.\n   * This method is suitable to collect simple results. Use with caution,\n   * a possibly huge stream of results is copied to memory.\n   *\n   * @param query - query\n   * @param rowMapper - maps the supplied row to an item that is then collected,\n   *  undefined return values are not collected. If no rowMapper is supplied,\n   *  `row => row.tableMeta.toObject(row.values)` is used.\n   * @returns Promise of mapped results\n   */\n  collectRows<T>(\n    query: string | ParameterizedQuery,\n    rowMapper?: (\n      values: string[],\n      tableMeta: FluxTableMetaData\n    ) => T | undefined\n  ): Promise<Array<T>>\n\n  /**\n   * CollectLines executes the query and collects all result lines in the returned Promise.\n   * This method is suitable to collect simple results. Use with caution,\n   * a possibly huge stream of lines is copied to memory.\n   *\n   * @param query - query\n   * @returns Promise of returned csv lines\n   */\n  collectLines(query: string | ParameterizedQuery): Promise<Array<string>>\n}\n","import {CommunicationObserver, ChunkCombiner} from '../transport'\nimport Cancellable from '../util/Cancellable'\n\n/**\n * Converts lines to table calls\n */\nexport default class ChunksToLines\n  implements CommunicationObserver<Uint8Array> {\n  previous?: Uint8Array\n  finished = false\n  quoted = false\n\n  constructor(\n    private target: CommunicationObserver<string>,\n    private chunks: ChunkCombiner\n  ) {}\n\n  next(chunk: Uint8Array): void {\n    if (this.finished) return\n    try {\n      this.bufferReceived(chunk)\n    } catch (e) {\n      this.error(e)\n    }\n  }\n  error(error: Error): void {\n    if (!this.finished) {\n      this.finished = true\n      this.target.error(error)\n    }\n  }\n  complete(): void {\n    if (!this.finished) {\n      if (this.previous) {\n        this.target.next(\n          this.chunks.toUtf8String(this.previous, 0, this.previous.length)\n        )\n      }\n      this.finished = true\n      this.target.complete()\n    }\n  }\n  useCancellable(cancellable: Cancellable): void {\n    if (this.target.useCancellable) {\n      // eslint-disable-next-line @typescript-eslint/no-this-alias\n      const self = this\n      this.target.useCancellable({\n        cancel(): void {\n          cancellable.cancel()\n          self.previous = undefined // do not emit more lines\n          self.complete()\n        },\n        isCancelled(): boolean {\n          return cancellable.isCancelled()\n        },\n      })\n    }\n  }\n\n  private bufferReceived(chunk: Uint8Array): void {\n    let index: number\n    let start = 0\n    if (this.previous) {\n      chunk = this.chunks.concat(this.previous, chunk)\n      index = (this.previous as Buffer).length\n    } else {\n      index = 0\n    }\n    while (index < chunk.length) {\n      const c = chunk[index]\n      if (c === 10) {\n        if (!this.quoted) {\n          /* do not emit CR+LR or LF line ending */\n          const end = index > 0 && chunk[index - 1] === 13 ? index - 1 : index\n          // do not emmit more lines if the processing is already finished\n          if (this.finished) {\n            return\n          }\n          this.target.next(this.chunks.toUtf8String(chunk, start, end))\n          start = index + 1\n        }\n      } else if (c === 34 /* \" */) {\n        this.quoted = !this.quoted\n      }\n      index++\n    }\n    if (start < index) {\n      this.previous = this.chunks.copy(chunk, start, index)\n    } else {\n      this.previous = undefined\n    }\n  }\n}\n","const SEPARATOR = ','\nconst WRAPPER = '\"'\n\n/**\n * Optimized tokenizer of a single CSV line.\n */\nexport default class LineSplitter {\n  /** returned value when reused  */\n  reusedValues: string[]\n  /** last length of elements in */\n  lastSplitLength: number\n  private _reuse = false\n\n  /**\n   * Reuse returned array between consecutive calls.\n   */\n  get reuse(): boolean {\n    return this._reuse\n  }\n  set reuse(val: boolean) {\n    if (val && !this.reusedValues) {\n      this.reusedValues = new Array(10)\n    }\n    this._reuse = val\n  }\n\n  /**\n   * Sets the reuse flag and returns this.\n   */\n  withReuse(): LineSplitter {\n    this.reuse = true\n    return this\n  }\n\n  /**\n   * Splits the supplied line to elements that are separated by\n   * comma with values possibly escaped within double quotes (\"value\")\n   * @param line - line\n   * @returns array of splitted parts\n   */\n  splitLine(line: string | undefined | null): string[] {\n    if (line === null || line === undefined) {\n      this.lastSplitLength = 0\n      return []\n    }\n    let quoteCount = 0\n    let startIndex = 0\n    const values = this._reuse ? this.reusedValues : []\n    let count = 0\n    for (let i = 0; i < line.length; i++) {\n      const c = line[i]\n      if (c === SEPARATOR) {\n        if (quoteCount % 2 === 0) {\n          const val = this.getValue(line, startIndex, i, quoteCount)\n          if (this._reuse) {\n            values[count++] = val\n          } else {\n            values.push(val)\n          }\n          startIndex = i + 1\n          quoteCount = 0\n        }\n      } else if (c === WRAPPER) {\n        quoteCount++\n      }\n    }\n    const val = this.getValue(line, startIndex, line.length, quoteCount)\n    if (this._reuse) {\n      values[count] = val\n      this.lastSplitLength = count + 1\n    } else {\n      values.push(val)\n      this.lastSplitLength = values.length\n    }\n\n    return values\n  }\n\n  private getValue(\n    line: string,\n    start: number,\n    end: number,\n    quoteCount: number\n  ): string {\n    if (start === line.length) {\n      return ''\n    } else if (quoteCount === 0) {\n      return line.substring(start, end)\n    } else if (quoteCount === 2) {\n      return line.substring(start + 1, end - 1)\n    } else {\n      // quoteCount >= 4\n      return line.substring(start + 1, end - 1).replace(/\"\"/gi, '\"')\n    }\n  }\n}\n","import {CommunicationObserver} from '../transport'\nimport Cancellable from '../util/Cancellable'\nimport FluxResultObserver from '../query/FluxResultObserver'\nimport LineSplitter from '../util/LineSplitter'\nimport FluxTableColumn, {\n  ColumnType,\n  newFluxTableColumn,\n} from '../query/FluxTableColumn'\nimport FluxTableMetaData, {\n  createFluxTableMetaData,\n} from '../query/FluxTableMetaData'\n\nexport function toLineObserver(\n  consumer: FluxResultObserver<string[]>\n): CommunicationObserver<string> {\n  const splitter = new LineSplitter().withReuse()\n  let columns: FluxTableColumn[] | undefined\n  let expectMeta = true\n  let firstColumnIndex = 0\n  let lastMeta: FluxTableMetaData\n  return {\n    error(error: Error): void {\n      consumer.error(error)\n    },\n    next(line: string): void {\n      if (line === '') {\n        expectMeta = true\n        columns = undefined\n      } else {\n        const values = splitter.splitLine(line)\n        const size = splitter.lastSplitLength\n        if (expectMeta) {\n          // create columns\n          if (!columns) {\n            columns = new Array(size)\n            for (let i = 0; i < size; i++) {\n              columns[i] = newFluxTableColumn()\n            }\n          }\n          if (!values[0].startsWith('#')) {\n            // fill in column names\n            if (values[0] === '') {\n              firstColumnIndex = 1\n              columns = columns.slice(1)\n            } else {\n              firstColumnIndex = 0\n            }\n            for (let i = firstColumnIndex; i < size; i++) {\n              columns[i - firstColumnIndex].label = values[i]\n            }\n            lastMeta = createFluxTableMetaData(columns)\n            expectMeta = false\n          } else if (values[0] === '#datatype') {\n            for (let i = 1; i < size; i++) {\n              columns[i].dataType = values[i] as ColumnType\n            }\n          } else if (values[0] === '#default') {\n            for (let i = 1; i < size; i++) {\n              columns[i].defaultValue = values[i]\n            }\n          } else if (values[0] === '#group') {\n            for (let i = 1; i < size; i++) {\n              columns[i].group = values[i][0] === 't'\n            }\n          }\n        } else {\n          consumer.next(values.slice(firstColumnIndex, size), lastMeta)\n        }\n      }\n    },\n    complete(): void {\n      consumer.complete()\n    },\n    useCancellable(cancellable: Cancellable): void {\n      if (consumer.useCancellable) consumer.useCancellable(cancellable)\n    },\n  }\n}\n","import {\n  Observable,\n  Observer,\n  ObserverComplete,\n  ObserverError,\n  ObserverNext,\n  Subscription,\n  symbolObservable,\n} from '../observable'\nimport {CommunicationObserver} from '../transport'\nimport Cancellable from '../util/Cancellable'\n\nexport type QueryExecutor = (consumer: CommunicationObserver<string>) => void\n\ntype Decorator<T> = (observer: Observer<T>) => Observer<string>\n\nclass QuerySubscription implements Subscription {\n  private cancellable?: Cancellable\n  private isClosed = false\n\n  public constructor(observer: Observer<string>, executor: QueryExecutor) {\n    try {\n      executor({\n        next: value => {\n          observer.next(value)\n        },\n        error: e => {\n          this.isClosed = true\n          observer.error(e)\n        },\n        complete: () => {\n          this.isClosed = true\n          observer.complete()\n        },\n        useCancellable: c => {\n          this.cancellable = c\n        },\n      })\n    } catch (e) {\n      this.isClosed = true\n      observer.error(e)\n    }\n  }\n\n  public get closed(): boolean {\n    return this.isClosed\n  }\n\n  public unsubscribe(): void {\n    this.cancellable?.cancel()\n    this.isClosed = true\n  }\n}\n\nfunction noop(): void {}\n\nfunction completeObserver<T>(observer: Partial<Observer<T>>): Observer<T> {\n  const {next, error, complete} = observer\n\n  return {\n    next: next ? next.bind(observer) : noop,\n    error: error ? error.bind(observer) : noop,\n    complete: complete ? complete.bind(observer) : noop,\n  }\n}\n\nexport default class ObservableQuery<T> implements Observable<T> {\n  public constructor(\n    private readonly executor: QueryExecutor,\n    private readonly decorator: Decorator<T>\n  ) {}\n\n  public subscribe(\n    observerOrNext?: Partial<Observer<T>> | ObserverNext<T>,\n    error?: ObserverError,\n    complete?: ObserverComplete\n  ): Subscription {\n    const observer = completeObserver(\n      typeof observerOrNext !== 'object' || observerOrNext === null\n        ? {next: observerOrNext, error, complete}\n        : observerOrNext\n    )\n\n    return new QuerySubscription(this.decorator(observer), this.executor)\n  }\n\n  public [symbolObservable](): this {\n    return this\n  }\n}\n","import {Observable} from '../observable'\nimport FluxResultObserver from '../query/FluxResultObserver'\nimport QueryApi, {QueryOptions, Row, defaultRowMapping} from '../QueryApi'\nimport {CommunicationObserver, Transport} from '../transport'\nimport ChunksToLines from './ChunksToLines'\nimport {toLineObserver} from './linesToTables'\nimport ObservableQuery, {QueryExecutor} from './ObservableQuery'\nimport {ParameterizedQuery} from '../query/flux'\nimport {FluxTableMetaData} from '../query'\n\nconst DEFAULT_dialect: any = {\n  header: true,\n  delimiter: ',',\n  quoteChar: '\"',\n  commentPrefix: '#',\n  annotations: ['datatype', 'group', 'default'],\n}\nconst identity = <T>(value: T): T => value\n\nexport class QueryApiImpl implements QueryApi {\n  private options: QueryOptions\n  constructor(private transport: Transport, org: string) {\n    this.options = {org}\n  }\n\n  with(options: Partial<QueryOptions>): QueryApi {\n    this.options = {...this.options, ...options}\n    return this\n  }\n\n  lines(query: string | ParameterizedQuery): Observable<string> {\n    return new ObservableQuery(this.createExecutor(query), identity)\n  }\n\n  rows(query: string | ParameterizedQuery): Observable<Row> {\n    return new ObservableQuery(this.createExecutor(query), observer => {\n      return toLineObserver({\n        next(values, tableMeta) {\n          observer.next({values, tableMeta})\n        },\n        error(e) {\n          observer.error(e)\n        },\n        complete() {\n          observer.complete()\n        },\n      })\n    })\n  }\n\n  queryLines(\n    query: string | ParameterizedQuery,\n    consumer: CommunicationObserver<string>\n  ): void {\n    this.createExecutor(query)(consumer)\n  }\n\n  queryRows(\n    query: string | ParameterizedQuery,\n    consumer: FluxResultObserver<string[]>\n  ): void {\n    this.createExecutor(query)(toLineObserver(consumer))\n  }\n\n  collectRows<T>(\n    query: string | ParameterizedQuery,\n    rowMapper: (\n      values: string[],\n      tableMeta: FluxTableMetaData\n    ) => T | undefined = defaultRowMapping as (\n      values: string[],\n      tableMeta: FluxTableMetaData\n    ) => T | undefined\n  ): Promise<Array<T>> {\n    const retVal: Array<T> = []\n    return new Promise((resolve, reject) => {\n      this.queryRows(query, {\n        next(values: string[], tableMeta: FluxTableMetaData): void {\n          const toAdd = rowMapper.call(this, values, tableMeta)\n          if (toAdd !== undefined) {\n            retVal.push(toAdd)\n          }\n        },\n        error(error: Error): void {\n          reject(error)\n        },\n        complete(): void {\n          resolve(retVal)\n        },\n      })\n    })\n  }\n\n  collectLines(query: string | ParameterizedQuery): Promise<Array<string>> {\n    const retVal: Array<string> = []\n    return new Promise((resolve, reject) => {\n      this.queryLines(query, {\n        next(line: string): void {\n          retVal.push(line)\n        },\n        error(error: Error): void {\n          reject(error)\n        },\n        complete(): void {\n          resolve(retVal)\n        },\n      })\n    })\n  }\n\n  queryRaw(query: string | ParameterizedQuery): Promise<string> {\n    const {org, type, gzip} = this.options\n    return this.transport.request(\n      `/api/v2/query?org=${encodeURIComponent(org)}`,\n      JSON.stringify(\n        this.decorateRequest({\n          query: query.toString(),\n          dialect: DEFAULT_dialect,\n          type,\n        })\n      ),\n      {\n        method: 'POST',\n        headers: {\n          accept: 'text/csv',\n          'accept-encoding': gzip ? 'gzip' : 'identity',\n          'content-type': 'application/json; encoding=utf-8',\n        },\n      }\n    )\n  }\n\n  private createExecutor(query: string | ParameterizedQuery): QueryExecutor {\n    const {org, type, gzip} = this.options\n\n    return (consumer): void => {\n      this.transport.send(\n        `/api/v2/query?org=${encodeURIComponent(org)}`,\n        JSON.stringify(\n          this.decorateRequest({\n            query: query.toString(),\n            dialect: DEFAULT_dialect,\n            type,\n          })\n        ),\n        {\n          method: 'POST',\n          headers: {\n            'content-type': 'application/json; encoding=utf-8',\n            'accept-encoding': gzip ? 'gzip' : 'identity',\n          },\n        },\n        new ChunksToLines(consumer, this.transport.chunkCombiner)\n      )\n    }\n  }\n  private decorateRequest(request: any): any {\n    if (typeof this.options.now === 'function') {\n      request.now = this.options.now()\n    }\n    // https://v2.docs.influxdata.com/v2.0/api/#operation/PostQuery requires type\n    request.type = this.options.type ?? 'flux'\n    return request\n  }\n}\n\nexport default QueryApiImpl\n","import WriteApi from './WriteApi'\nimport {\n  ClientOptions,\n  WritePrecision,\n  WriteOptions,\n  WritePrecisionType,\n} from './options'\nimport WriteApiImpl from './impl/WriteApiImpl'\nimport {IllegalArgumentError} from './errors'\nimport {Transport} from './transport'\n// replaced by ./impl/browser/FetchTransport in browser builds\nimport TransportImpl from './impl/node/NodeHttpTransport'\nimport QueryApi from './QueryApi'\nimport QueryApiImpl from './impl/QueryApiImpl'\n\n/**\n * InfluxDB 2.0 entry point that configures communication with InfluxDB server\n * and provide APIs to write and query data.\n */\nexport default class InfluxDB {\n  private _options: ClientOptions\n  readonly transport: Transport\n\n  /**\n   * Creates influxdb client options from an options object or url.\n   * @param options - client options\n   */\n  constructor(options: ClientOptions | string) {\n    if (typeof options === 'string') {\n      this._options = {url: options}\n    } else if (options !== null && typeof options === 'object') {\n      this._options = options\n    } else {\n      throw new IllegalArgumentError('No url or configuration specified!')\n    }\n    const url = this._options.url\n    if (typeof url !== 'string')\n      throw new IllegalArgumentError('No url specified!')\n    if (url.endsWith('/')) this._options.url = url.substring(0, url.length - 1)\n    this.transport = this._options.transport ?? new TransportImpl(this._options)\n  }\n\n  /**\n   * Creates WriteApi for the supplied organization and bucket. BEWARE that returned instances must be closed\n   * in order to flush the remaining data and close already scheduled retry executions.\n   *\n   * @remarks\n   * Inspect the {@link WriteOptions} to control also advanced options, such retries of failure, retry strategy options, data chunking\n   * and flushing windows. See {@link DEFAULT_WriteOptions} to see the defaults.\n   *\n   * See also {@link https://github.com/influxdata/influxdb-client-js/blob/master/examples/write.js | write.js example},\n   * {@link https://github.com/influxdata/influxdb-client-js/blob/master/examples/writeAdvanced.js | writeAdvanced.js example},\n   * and {@link https://github.com/influxdata/influxdb-client-js/blob/master/examples/index.html | browser example}.\n   *\n   * @param org - Specifies the destination organization for writes. Takes either the ID or Name interchangeably.\n   * @param bucket - The destination bucket for writes.\n   * @param precision - Timestamp precision for line items.\n   * @param writeOptions - Custom write options.\n   * @returns WriteApi instance\n   */\n  getWriteApi(\n    org: string,\n    bucket: string,\n    precision: WritePrecisionType = WritePrecision.ns,\n    writeOptions?: Partial<WriteOptions>\n  ): WriteApi {\n    return new WriteApiImpl(\n      this.transport,\n      org,\n      bucket,\n      precision,\n      writeOptions ?? this._options.writeOptions\n    )\n  }\n\n  /**\n   * Creates QueryApi for the supplied organization .\n   *\n   * @remarks\n   * See also {@link https://github.com/influxdata/influxdb-client-js/blob/master/examples/query.ts | query.ts example},\n   * {@link https://github.com/influxdata/influxdb-client-js/blob/master/examples/queryWithParams.ts | queryWithParams.ts example},\n   * {@link https://github.com/influxdata/influxdb-client-js/blob/master/examples/rxjs-query.ts | rxjs-query.ts example},\n   * and {@link https://github.com/influxdata/influxdb-client-js/blob/master/examples/index.html | browser example},\n   *\n   * @param org - organization\n   * @returns QueryApi instance\n   */\n  getQueryApi(org: string): QueryApi {\n    return new QueryApiImpl(this.transport, org)\n  }\n}\n","import {escape} from './util/escape'\nimport {PointSettings} from './options'\n/**\n * Point defines values of a single measurement.\n */\nexport default class Point {\n  private name: string\n  private tags: {[key: string]: string} = {}\n  private fields: {[key: string]: string} = {}\n  private time: string | number | Date | undefined\n\n  /**\n   * Create a new Point with specified a measurement name.\n   *\n   * @param measurementName - the measurement name\n   */\n  constructor(measurementName?: string) {\n    if (measurementName) this.name = measurementName\n  }\n\n  /**\n   * Sets point's measurement.\n   *\n   * @param name - measurement name\n   * @returns this\n   */\n  public measurement(name: string): Point {\n    this.name = name\n    return this\n  }\n\n  /**\n   * Adds a tag.\n   *\n   * @param name - tag name\n   * @param value - tag value\n   * @returns this\n   */\n  public tag(name: string, value: string): Point {\n    this.tags[name] = value\n    return this\n  }\n\n  /**\n   * Adds a boolean field.\n   *\n   * @param field - field name\n   * @param value - field value\n   * @returns this\n   */\n  public booleanField(name: string, value: boolean | any): Point {\n    this.fields[name] = value ? 'T' : 'F'\n    return this\n  }\n\n  /**\n   * Adds an integer field.\n   *\n   * @param name - field name\n   * @param value - field value\n   * @returns this\n   */\n  public intField(name: string, value: number | any): Point {\n    if (typeof value !== 'number') {\n      let val: number\n      if (isNaN((val = parseInt(String(value))))) {\n        throw new Error(\n          `Expected integer value for field ${name}, but got '${value}'!`\n        )\n      }\n      value = val\n    }\n    this.fields[name] = `${Math.floor(value as number)}i`\n    return this\n  }\n\n  /**\n   * Adds a number field.\n   *\n   * @param name - field name\n   * @param value - field value\n   * @returns this\n   */\n  public floatField(name: string, value: number | any): Point {\n    if (typeof value !== 'number') {\n      let val: number\n      if (isNaN((val = parseFloat(value)))) {\n        throw new Error(\n          `Expected float value for field ${name}, but got '${value}'!`\n        )\n      }\n      value = val\n    }\n    this.fields[name] = String(value)\n    return this\n  }\n\n  /**\n   * Adds a string field.\n   *\n   * @param name - field name\n   * @param value - field value\n   * @returns this\n   */\n  public stringField(name: string, value: string | any): Point {\n    if (value !== null && value !== undefined) {\n      if (typeof value !== 'string') value = String(value)\n      this.fields[name] = escape.quoted(value)\n    }\n    return this\n  }\n\n  /**\n   * Sets point time. A string or number value can be used\n   * to carry an int64 value of a precision that depends\n   * on WriteApi, nanoseconds by default. An undefined value\n   * generates a local timestamp using the client's clock.\n   * An empty string can be used to let the server assign\n   * the timestamp.\n   *\n   * @param value - point time\n   * @returns this\n   */\n  public timestamp(value: Date | number | string | undefined): Point {\n    this.time = value\n    return this\n  }\n\n  /**\n   * Creates an InfluxDB protocol line out of this instance.\n   * @param settings - settings define the exact representation of point time and can also add default tags\n   * @returns an InfxluDB protocol line out of this instance\n   */\n  public toLineProtocol(settings?: PointSettings): string | undefined {\n    if (!this.name) return undefined\n    let fieldsLine = ''\n    Object.keys(this.fields)\n      .sort()\n      .forEach(x => {\n        if (x) {\n          const val = this.fields[x]\n          if (fieldsLine.length > 0) fieldsLine += ','\n          fieldsLine += `${escape.tag(x)}=${val}`\n        }\n      })\n    if (fieldsLine.length === 0) return undefined // no fields present\n    let tagsLine = ''\n    const tags =\n      settings && settings.defaultTags\n        ? {...settings.defaultTags, ...this.tags}\n        : this.tags\n    Object.keys(tags)\n      .sort()\n      .forEach(x => {\n        if (x) {\n          const val = tags[x]\n          if (val) {\n            tagsLine += ','\n            tagsLine += `${escape.tag(x)}=${escape.tag(val)}`\n          }\n        }\n      })\n    let time = this.time\n    if (settings && settings.convertTime) {\n      time = settings.convertTime(time)\n    }\n\n    return `${escape.measurement(this.name)}${tagsLine} ${fieldsLine}${\n      time !== undefined ? ' ' + time : ''\n    }`\n  }\n\n  toString(): string {\n    const line = this.toLineProtocol(undefined)\n    return line ? line : `invalid point: ${JSON.stringify(this, undefined)}`\n  }\n}\n"],"names":["DEFAULT_ConnectionOptions","timeout","DEFAULT_RetryDelayStrategyOptions","Object","freeze","retryJitter","minRetryDelay","maxRetryDelay","exponentialBase","DEFAULT_WriteOptions","batchSize","flushInterval","writeFailed","maxRetries","maxBufferLines","retriableStatusCodes","isStatusCodeRetriable","statusCode","includes","IllegalArgumentError","Error","[object Object]","message","super","setPrototypeOf","this","prototype","HttpError","statusMessage","body","retryAfter","setRetryAfter","test","_retryAfter","parseInt","RETRY_CODES","getRetryDelay","error","retVal","Math","round","random","RequestTimedOutError","AbortError","name","reEscape","Escaper","config","wrap","patterns","keys","join","replace","_re","RegExp","val","lastIndex","chunkIndex","escapedVal","match","exec","matched","toEscape","escapeChar","toReplace","replaceChar","slice","index","undefined","length","EscaperConfig","escaperConfig","bindEsc","e","escape","bind","measurement",","," ","\n","\r","\t","quoted","\"","\\","tag","=","useHrTime","useProcessHrtime","use","process","hrtime","startHrMillis","startHrTime","lastMillis","Date","now","stepsInMillis","nanos","hrTime","millis","floor","String","substr","micros","trunc","seconds","currentTime","s","ms","us","ns","dateToProtocolTimestamp","d","getTime","identity","x","typeSerializers","boolean","unsignedLong","long","double","string","base64Binary","duration","dateTime:RFC3339","FluxTableMetaDataImpl","columns","forEach","col","i","label","values","acc","column","defaultValue","dataType","createFluxTableMetaData","FluxTableColumnImpl","FLUX_VALUE","Symbol","FluxParameter","fluxValue","sanitizeString","value","toString","prepareRetVal","substring","c","charAt","sanitizeFloat","dot","sanitizeRegExp","fluxExpression","toFluxValue","toISOString","Array","isArray","map","symbolObservable","observable","provider","console","warn","Logger","RetryStrategyImpl","options","success","failedAttempts","delay","currentDelay","min","max","RetryBuffer","maxLines","retryLines","lines","retryCount","closed","retryTime","nextRetryTime","first","size","origSize","newSize","newFirst","next","toAdd","last","scheduleRetry","toRetry","_timeoutHandle","setTimeout","removeLines","then","catch","_e","clearTimeout","WriteBuffer","maxChunkRecords","flushFn","scheduleSend","record","flush","reset","Promise","resolve","WriteApiImpl","transport","org","bucket","precision","writeOptions","method","headers","content-type","httpPath","encodeURIComponent","defaultTags","useDefaultTags","writeBuffer","_clearFlushTimeout","sendBatch","retryStrategy","retryBuffer","attempts","self","reject","send","sendOptions","onRetry","call","addLines","nextDelay","add","records","point","line","toLineProtocol","points","writePoint","withRetryBuffer","finally","remaining","close","tags","key","nodeChunkCombiner","concat","second","Buffer","toUtf8String","chunk","start","end","allocUnsafe","copy","zlibOptions","zlib","Z_SYNC_FLUSH","finishFlush","emptyBuffer","CancellableImpl","cancelled","NodeHttpTransport","connectionOptions","url","parse","defaultOptions","transportOptions","port","protocol","hostname","contextPath","path","endsWith","requestApi","http.request","https.request","callbacks","createRequestMessage","cancellable","useCancellable","_request","JSON","stringify","contentType","buffer","data","complete","responseType","accept","startsWith","bodyBuffer","from","User-Agent","token","authorization","requestMessage","listeners","state","responseStarted","completeCommunicationObserver","isCancelled","req","res","resume","on","responseData","createGunzip","pipe","write","defaultRowMapping","tableMeta","toObject","ChunksToLines","target","chunks","finished","bufferReceived","previous","cancel","LineSplitter","reuse","_reuse","reusedValues","lastSplitLength","quoteCount","startIndex","count","getValue","push","toLineObserver","consumer","splitter","withReuse","lastMeta","expectMeta","firstColumnIndex","splitLine","group","QuerySubscription","observer","executor","isClosed","noop","ObservableQuery","decorator","observerOrNext","completeObserver","DEFAULT_dialect","header","delimiter","quoteChar","commentPrefix","annotations","QueryApiImpl","query","createExecutor","rowMapper","queryRows","queryLines","type","gzip","request","decorateRequest","dialect","accept-encoding","chunkCombiner","_options","TransportImpl","measurementName","fields","isNaN","parseFloat","time","settings","fieldsLine","sort","tagsLine","convertTime","canRetry","code","object","Boolean","strings","parts","partIndex","text","sanitized","sanitizeDateTime"],"mappings":"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"}
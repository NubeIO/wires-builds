import { InfluxDB } from '@influxdata/influxdb-client';
import { RequestOptions } from '../APIBase';
import { PasswordResetBody, User, Users } from './types';
export interface GetUsersRequest {
}
export interface PostUsersRequest {
    /** User to create */
    body: User;
}
export interface GetUsersIDRequest {
    /** The user ID. */
    userID: string;
}
export interface PatchUsersIDRequest {
    /** The ID of the user to update. */
    userID: string;
    /** User update to apply */
    body: User;
}
export interface DeleteUsersIDRequest {
    /** The ID of the user to delete. */
    userID: string;
}
export interface PostUsersIDPasswordRequest {
    /** The user ID. */
    userID: string;
    auth: {
        user: string;
        password: string;
    };
    /** New password */
    body: PasswordResetBody;
}
/**
 * Users API
 */
export declare class UsersAPI {
    private base;
    /**
     * Creates UsersAPI
     * @param influxDB - an instance that knows how to communicate with InfluxDB server
     */
    constructor(influxDB: InfluxDB);
    /**
     * List all users.
     * See {@link https://v2.docs.influxdata.com/v2.0/api/#operation/GetUsers }
     * @param request - request parameters and body (if supported)
     * @param requestOptions - optional transport options
     * @returns promise of response
     */
    getUsers(request?: GetUsersRequest, requestOptions?: RequestOptions): Promise<Users>;
    /**
     * Create a user.
     * See {@link https://v2.docs.influxdata.com/v2.0/api/#operation/PostUsers }
     * @param request - request parameters and body (if supported)
     * @param requestOptions - optional transport options
     * @returns promise of response
     */
    postUsers(request: PostUsersRequest, requestOptions?: RequestOptions): Promise<User>;
    /**
     * Retrieve a user.
     * See {@link https://v2.docs.influxdata.com/v2.0/api/#operation/GetUsersID }
     * @param request - request parameters and body (if supported)
     * @param requestOptions - optional transport options
     * @returns promise of response
     */
    getUsersID(request: GetUsersIDRequest, requestOptions?: RequestOptions): Promise<User>;
    /**
     * Update a user.
     * See {@link https://v2.docs.influxdata.com/v2.0/api/#operation/PatchUsersID }
     * @param request - request parameters and body (if supported)
     * @param requestOptions - optional transport options
     * @returns promise of response
     */
    patchUsersID(request: PatchUsersIDRequest, requestOptions?: RequestOptions): Promise<User>;
    /**
     * Delete a user.
     * See {@link https://v2.docs.influxdata.com/v2.0/api/#operation/DeleteUsersID }
     * @param request - request parameters and body (if supported)
     * @param requestOptions - optional transport options
     * @returns promise of response
     */
    deleteUsersID(request: DeleteUsersIDRequest, requestOptions?: RequestOptions): Promise<void>;
    /**
     * Update a password.
     * See {@link https://v2.docs.influxdata.com/v2.0/api/#operation/PostUsersIDPassword }
     * @param request - request parameters and body (if supported)
     * @param requestOptions - optional transport options
     * @returns promise of response
     */
    postUsersIDPassword(request: PostUsersIDPasswordRequest, requestOptions?: RequestOptions): Promise<void>;
}
//# sourceMappingURL=UsersAPI.d.ts.map
import { InfluxDB } from '@influxdata/influxdb-client';
import { RequestOptions } from '../APIBase';
import { Authorization, AuthorizationUpdateRequest, Authorizations } from './types';
export interface GetAuthorizationsRequest {
    /** Only show authorizations that belong to a user ID. */
    userID?: string;
    /** Only show authorizations that belong to a user name. */
    user?: string;
    /** Only show authorizations that belong to an organization ID. */
    orgID?: string;
    /** Only show authorizations that belong to a organization name. */
    org?: string;
}
export interface PostAuthorizationsRequest {
    /** Authorization to create */
    body: Authorization;
}
export interface GetAuthorizationsIDRequest {
    /** The ID of the authorization to get. */
    authID: string;
}
export interface PatchAuthorizationsIDRequest {
    /** The ID of the authorization to update. */
    authID: string;
    /** Authorization to update */
    body: AuthorizationUpdateRequest;
}
export interface DeleteAuthorizationsIDRequest {
    /** The ID of the authorization to delete. */
    authID: string;
}
/**
 * Authorizations API
 */
export declare class AuthorizationsAPI {
    private base;
    /**
     * Creates AuthorizationsAPI
     * @param influxDB - an instance that knows how to communicate with InfluxDB server
     */
    constructor(influxDB: InfluxDB);
    /**
     * List all authorizations.
     * See {@link https://v2.docs.influxdata.com/v2.0/api/#operation/GetAuthorizations }
     * @param request - request parameters and body (if supported)
     * @param requestOptions - optional transport options
     * @returns promise of response
     */
    getAuthorizations(request?: GetAuthorizationsRequest, requestOptions?: RequestOptions): Promise<Authorizations>;
    /**
     * Create an authorization.
     * See {@link https://v2.docs.influxdata.com/v2.0/api/#operation/PostAuthorizations }
     * @param request - request parameters and body (if supported)
     * @param requestOptions - optional transport options
     * @returns promise of response
     */
    postAuthorizations(request: PostAuthorizationsRequest, requestOptions?: RequestOptions): Promise<Authorization>;
    /**
     * Retrieve an authorization.
     * See {@link https://v2.docs.influxdata.com/v2.0/api/#operation/GetAuthorizationsID }
     * @param request - request parameters and body (if supported)
     * @param requestOptions - optional transport options
     * @returns promise of response
     */
    getAuthorizationsID(request: GetAuthorizationsIDRequest, requestOptions?: RequestOptions): Promise<Authorization>;
    /**
     * Update an authorization to be active or inactive.
     * See {@link https://v2.docs.influxdata.com/v2.0/api/#operation/PatchAuthorizationsID }
     * @param request - request parameters and body (if supported)
     * @param requestOptions - optional transport options
     * @returns promise of response
     */
    patchAuthorizationsID(request: PatchAuthorizationsIDRequest, requestOptions?: RequestOptions): Promise<Authorization>;
    /**
     * Delete a authorization.
     * See {@link https://v2.docs.influxdata.com/v2.0/api/#operation/DeleteAuthorizationsID }
     * @param request - request parameters and body (if supported)
     * @param requestOptions - optional transport options
     * @returns promise of response
     */
    deleteAuthorizationsID(request: DeleteAuthorizationsIDRequest, requestOptions?: RequestOptions): Promise<void>;
}
//# sourceMappingURL=AuthorizationsAPI.d.ts.map
import { InfluxDB } from '@influxdata/influxdb-client';
import { RequestOptions } from '../APIBase';
import { Document, DocumentCreate, DocumentUpdate, Documents, LabelMapping, LabelResponse, LabelsResponse } from './types';
export interface GetDocumentsTemplatesRequest {
    /** Specifies the name of the organization of the template. */
    org?: string;
    /** Specifies the organization ID of the template. */
    orgID?: string;
}
export interface PostDocumentsTemplatesRequest {
    /** Template that will be created */
    body: DocumentCreate;
}
export interface GetDocumentsTemplatesIDRequest {
    /** The template ID. */
    templateID: string;
}
export interface PutDocumentsTemplatesIDRequest {
    /** The template ID. */
    templateID: string;
    /** Template that will be updated */
    body: DocumentUpdate;
}
export interface DeleteDocumentsTemplatesIDRequest {
    /** The template ID. */
    templateID: string;
}
export interface GetDocumentsTemplatesIDLabelsRequest {
    /** The template ID. */
    templateID: string;
}
export interface PostDocumentsTemplatesIDLabelsRequest {
    /** The template ID. */
    templateID: string;
    /** Label to add */
    body: LabelMapping;
}
export interface DeleteDocumentsTemplatesIDLabelsIDRequest {
    /** The template ID. */
    templateID: string;
    /** The label ID. */
    labelID: string;
}
/**
 * Documents API
 */
export declare class DocumentsAPI {
    private base;
    /**
     * Creates DocumentsAPI
     * @param influxDB - an instance that knows how to communicate with InfluxDB server
     */
    constructor(influxDB: InfluxDB);
    /**
     * See {@link https://v2.docs.influxdata.com/v2.0/api/#operation/GetDocumentsTemplates }
     * @param request - request parameters and body (if supported)
     * @param requestOptions - optional transport options
     * @returns promise of response
     */
    getDocumentsTemplates(request?: GetDocumentsTemplatesRequest, requestOptions?: RequestOptions): Promise<Documents>;
    /**
     * Create a template.
     * See {@link https://v2.docs.influxdata.com/v2.0/api/#operation/PostDocumentsTemplates }
     * @param request - request parameters and body (if supported)
     * @param requestOptions - optional transport options
     * @returns promise of response
     */
    postDocumentsTemplates(request: PostDocumentsTemplatesRequest, requestOptions?: RequestOptions): Promise<Document>;
    /**
     * See {@link https://v2.docs.influxdata.com/v2.0/api/#operation/GetDocumentsTemplatesID }
     * @param request - request parameters and body (if supported)
     * @param requestOptions - optional transport options
     * @returns promise of response
     */
    getDocumentsTemplatesID(request: GetDocumentsTemplatesIDRequest, requestOptions?: RequestOptions): Promise<Document>;
    /**
     * See {@link https://v2.docs.influxdata.com/v2.0/api/#operation/PutDocumentsTemplatesID }
     * @param request - request parameters and body (if supported)
     * @param requestOptions - optional transport options
     * @returns promise of response
     */
    putDocumentsTemplatesID(request: PutDocumentsTemplatesIDRequest, requestOptions?: RequestOptions): Promise<Document>;
    /**
     * Delete a template.
     * See {@link https://v2.docs.influxdata.com/v2.0/api/#operation/DeleteDocumentsTemplatesID }
     * @param request - request parameters and body (if supported)
     * @param requestOptions - optional transport options
     * @returns promise of response
     */
    deleteDocumentsTemplatesID(request: DeleteDocumentsTemplatesIDRequest, requestOptions?: RequestOptions): Promise<void>;
    /**
     * List all labels for a template.
     * See {@link https://v2.docs.influxdata.com/v2.0/api/#operation/GetDocumentsTemplatesIDLabels }
     * @param request - request parameters and body (if supported)
     * @param requestOptions - optional transport options
     * @returns promise of response
     */
    getDocumentsTemplatesIDLabels(request: GetDocumentsTemplatesIDLabelsRequest, requestOptions?: RequestOptions): Promise<LabelsResponse>;
    /**
     * Add a label to a template.
     * See {@link https://v2.docs.influxdata.com/v2.0/api/#operation/PostDocumentsTemplatesIDLabels }
     * @param request - request parameters and body (if supported)
     * @param requestOptions - optional transport options
     * @returns promise of response
     */
    postDocumentsTemplatesIDLabels(request: PostDocumentsTemplatesIDLabelsRequest, requestOptions?: RequestOptions): Promise<LabelResponse>;
    /**
     * Delete a label from a template.
     * See {@link https://v2.docs.influxdata.com/v2.0/api/#operation/DeleteDocumentsTemplatesIDLabelsID }
     * @param request - request parameters and body (if supported)
     * @param requestOptions - optional transport options
     * @returns promise of response
     */
    deleteDocumentsTemplatesIDLabelsID(request: DeleteDocumentsTemplatesIDLabelsIDRequest, requestOptions?: RequestOptions): Promise<void>;
}
//# sourceMappingURL=DocumentsAPI.d.ts.map
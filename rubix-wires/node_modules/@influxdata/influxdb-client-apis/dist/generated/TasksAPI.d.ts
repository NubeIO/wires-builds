import { InfluxDB } from '@influxdata/influxdb-client';
import { RequestOptions } from '../APIBase';
import { AddResourceMemberRequestBody, LabelMapping, LabelResponse, LabelsResponse, Logs, ResourceMember, ResourceMembers, ResourceOwner, ResourceOwners, Run, RunManually, Runs, Task, TaskCreateRequest, TaskUpdateRequest, Tasks } from './types';
export interface GetTasksRequest {
    /** Returns task with a specific name. */
    name?: string;
    /** Return tasks after a specified ID. */
    after?: string;
    /** Filter tasks to a specific user ID. */
    user?: string;
    /** Filter tasks to a specific organization name. */
    org?: string;
    /** Filter tasks to a specific organization ID. */
    orgID?: string;
    /** Filter tasks by a status--"inactive" or "active". */
    status?: string;
    /** The number of tasks to return */
    limit?: number;
}
export interface PostTasksRequest {
    /** Task to create */
    body: TaskCreateRequest;
}
export interface GetTasksIDRequest {
    /** The task ID. */
    taskID: string;
}
export interface PatchTasksIDRequest {
    /** The task ID. */
    taskID: string;
    /** Task update to apply */
    body: TaskUpdateRequest;
}
export interface DeleteTasksIDRequest {
    /** The ID of the task to delete. */
    taskID: string;
}
export interface GetTasksIDRunsRequest {
    /** The ID of the task to get runs for. */
    taskID: string;
    /** Returns runs after a specific ID. */
    after?: string;
    /** The number of runs to return */
    limit?: number;
    /** Filter runs to those scheduled after this time, RFC3339 */
    afterTime?: string;
    /** Filter runs to those scheduled before this time, RFC3339 */
    beforeTime?: string;
}
export interface PostTasksIDRunsRequest {
    taskID: string;
    /** entity body */
    body: RunManually;
}
export interface GetTasksIDRunsIDRequest {
    /** The task ID. */
    taskID: string;
    /** The run ID. */
    runID: string;
}
export interface DeleteTasksIDRunsIDRequest {
    /** The task ID. */
    taskID: string;
    /** The run ID. */
    runID: string;
}
export interface PostTasksIDRunsIDRetryRequest {
    /** The task ID. */
    taskID: string;
    /** The run ID. */
    runID: string;
}
export interface GetTasksIDLogsRequest {
    /** The task ID. */
    taskID: string;
}
export interface GetTasksIDRunsIDLogsRequest {
    /** ID of task to get logs for. */
    taskID: string;
    /** ID of run to get logs for. */
    runID: string;
}
export interface GetTasksIDLabelsRequest {
    /** The task ID. */
    taskID: string;
}
export interface PostTasksIDLabelsRequest {
    /** The task ID. */
    taskID: string;
    /** Label to add */
    body: LabelMapping;
}
export interface DeleteTasksIDLabelsIDRequest {
    /** The task ID. */
    taskID: string;
    /** The label ID. */
    labelID: string;
}
export interface GetTasksIDMembersRequest {
    /** The task ID. */
    taskID: string;
}
export interface PostTasksIDMembersRequest {
    /** The task ID. */
    taskID: string;
    /** User to add as member */
    body: AddResourceMemberRequestBody;
}
export interface DeleteTasksIDMembersIDRequest {
    /** The ID of the member to remove. */
    userID: string;
    /** The task ID. */
    taskID: string;
}
export interface GetTasksIDOwnersRequest {
    /** The task ID. */
    taskID: string;
}
export interface PostTasksIDOwnersRequest {
    /** The task ID. */
    taskID: string;
    /** User to add as owner */
    body: AddResourceMemberRequestBody;
}
export interface DeleteTasksIDOwnersIDRequest {
    /** The ID of the owner to remove. */
    userID: string;
    /** The task ID. */
    taskID: string;
}
/**
 * Tasks API
 */
export declare class TasksAPI {
    private base;
    /**
     * Creates TasksAPI
     * @param influxDB - an instance that knows how to communicate with InfluxDB server
     */
    constructor(influxDB: InfluxDB);
    /**
     * List all tasks.
     * See {@link https://v2.docs.influxdata.com/v2.0/api/#operation/GetTasks }
     * @param request - request parameters and body (if supported)
     * @param requestOptions - optional transport options
     * @returns promise of response
     */
    getTasks(request?: GetTasksRequest, requestOptions?: RequestOptions): Promise<Tasks>;
    /**
     * Create a new task.
     * See {@link https://v2.docs.influxdata.com/v2.0/api/#operation/PostTasks }
     * @param request - request parameters and body (if supported)
     * @param requestOptions - optional transport options
     * @returns promise of response
     */
    postTasks(request: PostTasksRequest, requestOptions?: RequestOptions): Promise<Task>;
    /**
     * Retrieve a task.
     * See {@link https://v2.docs.influxdata.com/v2.0/api/#operation/GetTasksID }
     * @param request - request parameters and body (if supported)
     * @param requestOptions - optional transport options
     * @returns promise of response
     */
    getTasksID(request: GetTasksIDRequest, requestOptions?: RequestOptions): Promise<Task>;
    /**
     * Update a task.
     * See {@link https://v2.docs.influxdata.com/v2.0/api/#operation/PatchTasksID }
     * @param request - request parameters and body (if supported)
     * @param requestOptions - optional transport options
     * @returns promise of response
     */
    patchTasksID(request: PatchTasksIDRequest, requestOptions?: RequestOptions): Promise<Task>;
    /**
     * Delete a task.
     * See {@link https://v2.docs.influxdata.com/v2.0/api/#operation/DeleteTasksID }
     * @param request - request parameters and body (if supported)
     * @param requestOptions - optional transport options
     * @returns promise of response
     */
    deleteTasksID(request: DeleteTasksIDRequest, requestOptions?: RequestOptions): Promise<void>;
    /**
     * List runs for a task.
     * See {@link https://v2.docs.influxdata.com/v2.0/api/#operation/GetTasksIDRuns }
     * @param request - request parameters and body (if supported)
     * @param requestOptions - optional transport options
     * @returns promise of response
     */
    getTasksIDRuns(request: GetTasksIDRunsRequest, requestOptions?: RequestOptions): Promise<Runs>;
    /**
     * Manually start a task run, overriding the current schedule.
     * See {@link https://v2.docs.influxdata.com/v2.0/api/#operation/PostTasksIDRuns }
     * @param request - request parameters and body (if supported)
     * @param requestOptions - optional transport options
     * @returns promise of response
     */
    postTasksIDRuns(request: PostTasksIDRunsRequest, requestOptions?: RequestOptions): Promise<Run>;
    /**
     * Retrieve a single run for a task.
     * See {@link https://v2.docs.influxdata.com/v2.0/api/#operation/GetTasksIDRunsID }
     * @param request - request parameters and body (if supported)
     * @param requestOptions - optional transport options
     * @returns promise of response
     */
    getTasksIDRunsID(request: GetTasksIDRunsIDRequest, requestOptions?: RequestOptions): Promise<Run>;
    /**
     * Cancel a running task.
     * See {@link https://v2.docs.influxdata.com/v2.0/api/#operation/DeleteTasksIDRunsID }
     * @param request - request parameters and body (if supported)
     * @param requestOptions - optional transport options
     * @returns promise of response
     */
    deleteTasksIDRunsID(request: DeleteTasksIDRunsIDRequest, requestOptions?: RequestOptions): Promise<void>;
    /**
     * Retry a task run.
     * See {@link https://v2.docs.influxdata.com/v2.0/api/#operation/PostTasksIDRunsIDRetry }
     * @param request - request parameters and body (if supported)
     * @param requestOptions - optional transport options
     * @returns promise of response
     */
    postTasksIDRunsIDRetry(request: PostTasksIDRunsIDRetryRequest, requestOptions?: RequestOptions): Promise<Run>;
    /**
     * Retrieve all logs for a task.
     * See {@link https://v2.docs.influxdata.com/v2.0/api/#operation/GetTasksIDLogs }
     * @param request - request parameters and body (if supported)
     * @param requestOptions - optional transport options
     * @returns promise of response
     */
    getTasksIDLogs(request: GetTasksIDLogsRequest, requestOptions?: RequestOptions): Promise<Logs>;
    /**
     * Retrieve all logs for a run.
     * See {@link https://v2.docs.influxdata.com/v2.0/api/#operation/GetTasksIDRunsIDLogs }
     * @param request - request parameters and body (if supported)
     * @param requestOptions - optional transport options
     * @returns promise of response
     */
    getTasksIDRunsIDLogs(request: GetTasksIDRunsIDLogsRequest, requestOptions?: RequestOptions): Promise<Logs>;
    /**
     * List all labels for a task.
     * See {@link https://v2.docs.influxdata.com/v2.0/api/#operation/GetTasksIDLabels }
     * @param request - request parameters and body (if supported)
     * @param requestOptions - optional transport options
     * @returns promise of response
     */
    getTasksIDLabels(request: GetTasksIDLabelsRequest, requestOptions?: RequestOptions): Promise<LabelsResponse>;
    /**
     * Add a label to a task.
     * See {@link https://v2.docs.influxdata.com/v2.0/api/#operation/PostTasksIDLabels }
     * @param request - request parameters and body (if supported)
     * @param requestOptions - optional transport options
     * @returns promise of response
     */
    postTasksIDLabels(request: PostTasksIDLabelsRequest, requestOptions?: RequestOptions): Promise<LabelResponse>;
    /**
     * Delete a label from a task.
     * See {@link https://v2.docs.influxdata.com/v2.0/api/#operation/DeleteTasksIDLabelsID }
     * @param request - request parameters and body (if supported)
     * @param requestOptions - optional transport options
     * @returns promise of response
     */
    deleteTasksIDLabelsID(request: DeleteTasksIDLabelsIDRequest, requestOptions?: RequestOptions): Promise<void>;
    /**
     * List all task members.
     * See {@link https://v2.docs.influxdata.com/v2.0/api/#operation/GetTasksIDMembers }
     * @param request - request parameters and body (if supported)
     * @param requestOptions - optional transport options
     * @returns promise of response
     */
    getTasksIDMembers(request: GetTasksIDMembersRequest, requestOptions?: RequestOptions): Promise<ResourceMembers>;
    /**
     * Add a member to a task.
     * See {@link https://v2.docs.influxdata.com/v2.0/api/#operation/PostTasksIDMembers }
     * @param request - request parameters and body (if supported)
     * @param requestOptions - optional transport options
     * @returns promise of response
     */
    postTasksIDMembers(request: PostTasksIDMembersRequest, requestOptions?: RequestOptions): Promise<ResourceMember>;
    /**
     * Remove a member from a task.
     * See {@link https://v2.docs.influxdata.com/v2.0/api/#operation/DeleteTasksIDMembersID }
     * @param request - request parameters and body (if supported)
     * @param requestOptions - optional transport options
     * @returns promise of response
     */
    deleteTasksIDMembersID(request: DeleteTasksIDMembersIDRequest, requestOptions?: RequestOptions): Promise<void>;
    /**
     * List all owners of a task.
     * See {@link https://v2.docs.influxdata.com/v2.0/api/#operation/GetTasksIDOwners }
     * @param request - request parameters and body (if supported)
     * @param requestOptions - optional transport options
     * @returns promise of response
     */
    getTasksIDOwners(request: GetTasksIDOwnersRequest, requestOptions?: RequestOptions): Promise<ResourceOwners>;
    /**
     * Add an owner to a task.
     * See {@link https://v2.docs.influxdata.com/v2.0/api/#operation/PostTasksIDOwners }
     * @param request - request parameters and body (if supported)
     * @param requestOptions - optional transport options
     * @returns promise of response
     */
    postTasksIDOwners(request: PostTasksIDOwnersRequest, requestOptions?: RequestOptions): Promise<ResourceOwner>;
    /**
     * Remove an owner from a task.
     * See {@link https://v2.docs.influxdata.com/v2.0/api/#operation/DeleteTasksIDOwnersID }
     * @param request - request parameters and body (if supported)
     * @param requestOptions - optional transport options
     * @returns promise of response
     */
    deleteTasksIDOwnersID(request: DeleteTasksIDOwnersIDRequest, requestOptions?: RequestOptions): Promise<void>;
}
//# sourceMappingURL=TasksAPI.d.ts.map
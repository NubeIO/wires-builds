import { InfluxDB } from '@influxdata/influxdb-client';
import { RequestOptions } from '../APIBase';
import { LabelCreateRequest, LabelResponse, LabelUpdate, LabelsResponse } from './types';
export interface GetLabelsRequest {
    /** The organization ID. */
    orgID?: string;
}
export interface PostLabelsRequest {
    /** Label to create */
    body: LabelCreateRequest;
}
export interface GetLabelsIDRequest {
    /** The ID of the label to update. */
    labelID: string;
}
export interface PatchLabelsIDRequest {
    /** The ID of the label to update. */
    labelID: string;
    /** Label update */
    body: LabelUpdate;
}
export interface DeleteLabelsIDRequest {
    /** The ID of the label to delete. */
    labelID: string;
}
/**
 * Labels API
 */
export declare class LabelsAPI {
    private base;
    /**
     * Creates LabelsAPI
     * @param influxDB - an instance that knows how to communicate with InfluxDB server
     */
    constructor(influxDB: InfluxDB);
    /**
     * Get all labels.
     * See {@link https://v2.docs.influxdata.com/v2.0/api/#operation/GetLabels }
     * @param request - request parameters and body (if supported)
     * @param requestOptions - optional transport options
     * @returns promise of response
     */
    getLabels(request?: GetLabelsRequest, requestOptions?: RequestOptions): Promise<LabelsResponse>;
    /**
     * Create a label.
     * See {@link https://v2.docs.influxdata.com/v2.0/api/#operation/PostLabels }
     * @param request - request parameters and body (if supported)
     * @param requestOptions - optional transport options
     * @returns promise of response
     */
    postLabels(request: PostLabelsRequest, requestOptions?: RequestOptions): Promise<LabelResponse>;
    /**
     * Get a label.
     * See {@link https://v2.docs.influxdata.com/v2.0/api/#operation/GetLabelsID }
     * @param request - request parameters and body (if supported)
     * @param requestOptions - optional transport options
     * @returns promise of response
     */
    getLabelsID(request: GetLabelsIDRequest, requestOptions?: RequestOptions): Promise<LabelResponse>;
    /**
     * Update a label.
     * See {@link https://v2.docs.influxdata.com/v2.0/api/#operation/PatchLabelsID }
     * @param request - request parameters and body (if supported)
     * @param requestOptions - optional transport options
     * @returns promise of response
     */
    patchLabelsID(request: PatchLabelsIDRequest, requestOptions?: RequestOptions): Promise<LabelResponse>;
    /**
     * Delete a label.
     * See {@link https://v2.docs.influxdata.com/v2.0/api/#operation/DeleteLabelsID }
     * @param request - request parameters and body (if supported)
     * @param requestOptions - optional transport options
     * @returns promise of response
     */
    deleteLabelsID(request: DeleteLabelsIDRequest, requestOptions?: RequestOptions): Promise<void>;
}
//# sourceMappingURL=LabelsAPI.d.ts.map
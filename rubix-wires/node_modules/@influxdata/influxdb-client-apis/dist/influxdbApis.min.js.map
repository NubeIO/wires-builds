{"version":3,"file":"influxdbApis.min.js","sources":["../src/APIBase.ts","../src/generated/RootAPI.ts","../src/generated/AuthorizationsAPI.ts","../src/generated/BucketsAPI.ts","../src/generated/ChecksAPI.ts","../src/generated/DashboardsAPI.ts","../src/generated/DbrpsAPI.ts","../src/generated/DeleteAPI.ts","../src/generated/DocumentsAPI.ts","../src/generated/FlagsAPI.ts","../src/generated/HealthAPI.ts","../src/generated/LabelsAPI.ts","../src/generated/MeAPI.ts","../src/generated/NotificationEndpointsAPI.ts","../src/generated/NotificationRulesAPI.ts","../src/generated/OrgsAPI.ts","../src/generated/QueryAPI.ts","../src/generated/ReadyAPI.ts","../src/generated/ScrapersAPI.ts","../src/generated/SetupAPI.ts","../src/generated/SigninAPI.ts","../src/generated/SignoutAPI.ts","../src/generated/SourcesAPI.ts","../src/generated/StacksAPI.ts","../src/generated/TasksAPI.ts","../src/generated/TelegrafAPI.ts","../src/generated/TelegrafsAPI.ts","../src/generated/TemplatesAPI.ts","../src/generated/UsersAPI.ts","../src/generated/VariablesAPI.ts","../src/generated/WriteAPI.ts"],"sourcesContent":["// this is effectively a clone of\nimport {InfluxDB, Transport, SendOptions} from '@influxdata/influxdb-client'\n\n// used only in browser builds\ndeclare function btoa(plain: string): string\n\nexport interface RequestOptions {\n  headers?: {[key: string]: string}\n}\n/**\n * Base class for all apis.\n */\nexport class APIBase {\n  transport: Transport\n  /**\n   * Initializes transport to communicate with InfluxDB.\n   * @param influxDB - the main InfluxDB client object\n   */\n  constructor(influxDB: InfluxDB) {\n    if (!influxDB) throw new Error('No influxDB supplied!')\n    if (!influxDB.transport) throw new Error('No transport supplied!')\n    this.transport = influxDB.transport\n  }\n\n  queryString(request: any, params: string[]): string {\n    if (request && params) {\n      return params.reduce((acc, key) => {\n        const val = request[key]\n        if (val !== undefined && val !== null) {\n          acc += acc ? '&' : '?'\n          acc += encodeURIComponent(key) + '=' + encodeURIComponent(String(val))\n        }\n        return acc\n      }, '')\n    } else {\n      return ''\n    }\n  }\n\n  request(\n    method: string,\n    path: string,\n    request: any = {},\n    requestOptions?: RequestOptions,\n    mediaType?: string\n  ): Promise<any> {\n    const sendOptions: SendOptions = {\n      ...requestOptions,\n      method,\n    }\n    if (mediaType) {\n      ;(sendOptions.headers || (sendOptions.headers = {}))[\n        'content-type'\n      ] = mediaType\n    }\n    if (request.auth) {\n      const value = `${request.auth.user}:${request.auth.password}`\n      ;(sendOptions.headers || (sendOptions.headers = {}))[\n        'authorization'\n      ] = process.env.ROLLUP_BROWSER\n        ? btoa(value)\n        : Buffer.from(value, 'binary').toString('base64')\n    }\n    return this.transport.request(\n      path,\n      request.body ? request.body : '',\n      sendOptions\n    )\n  }\n}\n","import {InfluxDB} from '@influxdata/influxdb-client'\nimport {APIBase, RequestOptions} from '../APIBase'\nimport {Routes} from './types'\n\nexport interface GetRoutesRequest {}\n/**\n * Root API\n */\nexport class RootAPI {\n  // internal\n  private base: APIBase\n\n  /**\n   * Creates RootAPI\n   * @param influxDB - an instance that knows how to communicate with InfluxDB server\n   */\n  constructor(influxDB: InfluxDB) {\n    this.base = new APIBase(influxDB)\n  }\n  /**\n   * Map of all top level routes available.\n   * See {@link https://v2.docs.influxdata.com/v2.0/api/#operation/GetRoutes }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  getRoutes(\n    request?: GetRoutesRequest,\n    requestOptions?: RequestOptions\n  ): Promise<Routes> {\n    return this.base.request('GET', `/api/v2/`, request, requestOptions)\n  }\n}\n","import {InfluxDB} from '@influxdata/influxdb-client'\nimport {APIBase, RequestOptions} from '../APIBase'\nimport {\n  Authorization,\n  AuthorizationUpdateRequest,\n  Authorizations,\n} from './types'\n\nexport interface GetAuthorizationsRequest {\n  /** Only show authorizations that belong to a user ID. */\n  userID?: string\n  /** Only show authorizations that belong to a user name. */\n  user?: string\n  /** Only show authorizations that belong to an organization ID. */\n  orgID?: string\n  /** Only show authorizations that belong to a organization name. */\n  org?: string\n}\nexport interface PostAuthorizationsRequest {\n  /** Authorization to create */\n  body: Authorization\n}\nexport interface GetAuthorizationsIDRequest {\n  /** The ID of the authorization to get. */\n  authID: string\n}\nexport interface PatchAuthorizationsIDRequest {\n  /** The ID of the authorization to update. */\n  authID: string\n  /** Authorization to update */\n  body: AuthorizationUpdateRequest\n}\nexport interface DeleteAuthorizationsIDRequest {\n  /** The ID of the authorization to delete. */\n  authID: string\n}\n/**\n * Authorizations API\n */\nexport class AuthorizationsAPI {\n  // internal\n  private base: APIBase\n\n  /**\n   * Creates AuthorizationsAPI\n   * @param influxDB - an instance that knows how to communicate with InfluxDB server\n   */\n  constructor(influxDB: InfluxDB) {\n    this.base = new APIBase(influxDB)\n  }\n  /**\n   * List all authorizations.\n   * See {@link https://v2.docs.influxdata.com/v2.0/api/#operation/GetAuthorizations }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  getAuthorizations(\n    request?: GetAuthorizationsRequest,\n    requestOptions?: RequestOptions\n  ): Promise<Authorizations> {\n    return this.base.request(\n      'GET',\n      `/api/v2/authorizations${this.base.queryString(request, [\n        'userID',\n        'user',\n        'orgID',\n        'org',\n      ])}`,\n      request,\n      requestOptions\n    )\n  }\n  /**\n   * Create an authorization.\n   * See {@link https://v2.docs.influxdata.com/v2.0/api/#operation/PostAuthorizations }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  postAuthorizations(\n    request: PostAuthorizationsRequest,\n    requestOptions?: RequestOptions\n  ): Promise<Authorization> {\n    return this.base.request(\n      'POST',\n      `/api/v2/authorizations`,\n      request,\n      requestOptions,\n      'application/json'\n    )\n  }\n  /**\n   * Retrieve an authorization.\n   * See {@link https://v2.docs.influxdata.com/v2.0/api/#operation/GetAuthorizationsID }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  getAuthorizationsID(\n    request: GetAuthorizationsIDRequest,\n    requestOptions?: RequestOptions\n  ): Promise<Authorization> {\n    return this.base.request(\n      'GET',\n      `/api/v2/authorizations/${request.authID}`,\n      request,\n      requestOptions\n    )\n  }\n  /**\n   * Update an authorization to be active or inactive.\n   * See {@link https://v2.docs.influxdata.com/v2.0/api/#operation/PatchAuthorizationsID }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  patchAuthorizationsID(\n    request: PatchAuthorizationsIDRequest,\n    requestOptions?: RequestOptions\n  ): Promise<Authorization> {\n    return this.base.request(\n      'PATCH',\n      `/api/v2/authorizations/${request.authID}`,\n      request,\n      requestOptions,\n      'application/json'\n    )\n  }\n  /**\n   * Delete a authorization.\n   * See {@link https://v2.docs.influxdata.com/v2.0/api/#operation/DeleteAuthorizationsID }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  deleteAuthorizationsID(\n    request: DeleteAuthorizationsIDRequest,\n    requestOptions?: RequestOptions\n  ): Promise<void> {\n    return this.base.request(\n      'DELETE',\n      `/api/v2/authorizations/${request.authID}`,\n      request,\n      requestOptions\n    )\n  }\n}\n","import {InfluxDB} from '@influxdata/influxdb-client'\nimport {APIBase, RequestOptions} from '../APIBase'\nimport {\n  AddResourceMemberRequestBody,\n  Bucket,\n  Buckets,\n  LabelMapping,\n  LabelResponse,\n  LabelsResponse,\n  PostBucketRequest,\n  ResourceMember,\n  ResourceMembers,\n  ResourceOwner,\n  ResourceOwners,\n} from './types'\n\nexport interface GetBucketsRequest {\n  offset?: number\n  limit?: number\n  /** The last resource ID from which to seek from (but not including). This is to be used instead of `offset`.\n   */\n  after?: string\n  /** The organization name. */\n  org?: string\n  /** The organization ID. */\n  orgID?: string\n  /** Only returns buckets with a specific name. */\n  name?: string\n}\nexport interface PostBucketsRequest {\n  /** Bucket to create */\n  body: PostBucketRequest\n}\nexport interface GetBucketsIDRequest {\n  /** The bucket ID. */\n  bucketID: string\n}\nexport interface PatchBucketsIDRequest {\n  /** The bucket ID. */\n  bucketID: string\n  /** Bucket update to apply */\n  body: Bucket\n}\nexport interface DeleteBucketsIDRequest {\n  /** The ID of the bucket to delete. */\n  bucketID: string\n}\nexport interface GetBucketsIDLabelsRequest {\n  /** The bucket ID. */\n  bucketID: string\n}\nexport interface PostBucketsIDLabelsRequest {\n  /** The bucket ID. */\n  bucketID: string\n  /** Label to add */\n  body: LabelMapping\n}\nexport interface DeleteBucketsIDLabelsIDRequest {\n  /** The bucket ID. */\n  bucketID: string\n  /** The ID of the label to delete. */\n  labelID: string\n}\nexport interface GetBucketsIDMembersRequest {\n  /** The bucket ID. */\n  bucketID: string\n}\nexport interface PostBucketsIDMembersRequest {\n  /** The bucket ID. */\n  bucketID: string\n  /** User to add as member */\n  body: AddResourceMemberRequestBody\n}\nexport interface DeleteBucketsIDMembersIDRequest {\n  /** The ID of the member to remove. */\n  userID: string\n  /** The bucket ID. */\n  bucketID: string\n}\nexport interface GetBucketsIDOwnersRequest {\n  /** The bucket ID. */\n  bucketID: string\n}\nexport interface PostBucketsIDOwnersRequest {\n  /** The bucket ID. */\n  bucketID: string\n  /** User to add as owner */\n  body: AddResourceMemberRequestBody\n}\nexport interface DeleteBucketsIDOwnersIDRequest {\n  /** The ID of the owner to remove. */\n  userID: string\n  /** The bucket ID. */\n  bucketID: string\n}\n/**\n * Buckets API\n */\nexport class BucketsAPI {\n  // internal\n  private base: APIBase\n\n  /**\n   * Creates BucketsAPI\n   * @param influxDB - an instance that knows how to communicate with InfluxDB server\n   */\n  constructor(influxDB: InfluxDB) {\n    this.base = new APIBase(influxDB)\n  }\n  /**\n   * List all buckets.\n   * See {@link https://v2.docs.influxdata.com/v2.0/api/#operation/GetBuckets }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  getBuckets(\n    request?: GetBucketsRequest,\n    requestOptions?: RequestOptions\n  ): Promise<Buckets> {\n    return this.base.request(\n      'GET',\n      `/api/v2/buckets${this.base.queryString(request, [\n        'offset',\n        'limit',\n        'after',\n        'org',\n        'orgID',\n        'name',\n      ])}`,\n      request,\n      requestOptions\n    )\n  }\n  /**\n   * Create a bucket.\n   * See {@link https://v2.docs.influxdata.com/v2.0/api/#operation/PostBuckets }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  postBuckets(\n    request: PostBucketsRequest,\n    requestOptions?: RequestOptions\n  ): Promise<Bucket> {\n    return this.base.request(\n      'POST',\n      `/api/v2/buckets`,\n      request,\n      requestOptions,\n      'application/json'\n    )\n  }\n  /**\n   * Retrieve a bucket.\n   * See {@link https://v2.docs.influxdata.com/v2.0/api/#operation/GetBucketsID }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  getBucketsID(\n    request: GetBucketsIDRequest,\n    requestOptions?: RequestOptions\n  ): Promise<Bucket> {\n    return this.base.request(\n      'GET',\n      `/api/v2/buckets/${request.bucketID}`,\n      request,\n      requestOptions\n    )\n  }\n  /**\n   * Update a bucket.\n   * See {@link https://v2.docs.influxdata.com/v2.0/api/#operation/PatchBucketsID }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  patchBucketsID(\n    request: PatchBucketsIDRequest,\n    requestOptions?: RequestOptions\n  ): Promise<Bucket> {\n    return this.base.request(\n      'PATCH',\n      `/api/v2/buckets/${request.bucketID}`,\n      request,\n      requestOptions,\n      'application/json'\n    )\n  }\n  /**\n   * Delete a bucket.\n   * See {@link https://v2.docs.influxdata.com/v2.0/api/#operation/DeleteBucketsID }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  deleteBucketsID(\n    request: DeleteBucketsIDRequest,\n    requestOptions?: RequestOptions\n  ): Promise<void> {\n    return this.base.request(\n      'DELETE',\n      `/api/v2/buckets/${request.bucketID}`,\n      request,\n      requestOptions\n    )\n  }\n  /**\n   * List all labels for a bucket.\n   * See {@link https://v2.docs.influxdata.com/v2.0/api/#operation/GetBucketsIDLabels }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  getBucketsIDLabels(\n    request: GetBucketsIDLabelsRequest,\n    requestOptions?: RequestOptions\n  ): Promise<LabelsResponse> {\n    return this.base.request(\n      'GET',\n      `/api/v2/buckets/${request.bucketID}/labels`,\n      request,\n      requestOptions\n    )\n  }\n  /**\n   * Add a label to a bucket.\n   * See {@link https://v2.docs.influxdata.com/v2.0/api/#operation/PostBucketsIDLabels }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  postBucketsIDLabels(\n    request: PostBucketsIDLabelsRequest,\n    requestOptions?: RequestOptions\n  ): Promise<LabelResponse> {\n    return this.base.request(\n      'POST',\n      `/api/v2/buckets/${request.bucketID}/labels`,\n      request,\n      requestOptions,\n      'application/json'\n    )\n  }\n  /**\n   * delete a label from a bucket.\n   * See {@link https://v2.docs.influxdata.com/v2.0/api/#operation/DeleteBucketsIDLabelsID }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  deleteBucketsIDLabelsID(\n    request: DeleteBucketsIDLabelsIDRequest,\n    requestOptions?: RequestOptions\n  ): Promise<void> {\n    return this.base.request(\n      'DELETE',\n      `/api/v2/buckets/${request.bucketID}/labels/${request.labelID}`,\n      request,\n      requestOptions\n    )\n  }\n  /**\n   * List all users with member privileges for a bucket.\n   * See {@link https://v2.docs.influxdata.com/v2.0/api/#operation/GetBucketsIDMembers }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  getBucketsIDMembers(\n    request: GetBucketsIDMembersRequest,\n    requestOptions?: RequestOptions\n  ): Promise<ResourceMembers> {\n    return this.base.request(\n      'GET',\n      `/api/v2/buckets/${request.bucketID}/members`,\n      request,\n      requestOptions\n    )\n  }\n  /**\n   * Add a member to a bucket.\n   * See {@link https://v2.docs.influxdata.com/v2.0/api/#operation/PostBucketsIDMembers }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  postBucketsIDMembers(\n    request: PostBucketsIDMembersRequest,\n    requestOptions?: RequestOptions\n  ): Promise<ResourceMember> {\n    return this.base.request(\n      'POST',\n      `/api/v2/buckets/${request.bucketID}/members`,\n      request,\n      requestOptions,\n      'application/json'\n    )\n  }\n  /**\n   * Remove a member from a bucket.\n   * See {@link https://v2.docs.influxdata.com/v2.0/api/#operation/DeleteBucketsIDMembersID }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  deleteBucketsIDMembersID(\n    request: DeleteBucketsIDMembersIDRequest,\n    requestOptions?: RequestOptions\n  ): Promise<void> {\n    return this.base.request(\n      'DELETE',\n      `/api/v2/buckets/${request.bucketID}/members/${request.userID}`,\n      request,\n      requestOptions\n    )\n  }\n  /**\n   * List all owners of a bucket.\n   * See {@link https://v2.docs.influxdata.com/v2.0/api/#operation/GetBucketsIDOwners }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  getBucketsIDOwners(\n    request: GetBucketsIDOwnersRequest,\n    requestOptions?: RequestOptions\n  ): Promise<ResourceOwners> {\n    return this.base.request(\n      'GET',\n      `/api/v2/buckets/${request.bucketID}/owners`,\n      request,\n      requestOptions\n    )\n  }\n  /**\n   * Add an owner to a bucket.\n   * See {@link https://v2.docs.influxdata.com/v2.0/api/#operation/PostBucketsIDOwners }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  postBucketsIDOwners(\n    request: PostBucketsIDOwnersRequest,\n    requestOptions?: RequestOptions\n  ): Promise<ResourceOwner> {\n    return this.base.request(\n      'POST',\n      `/api/v2/buckets/${request.bucketID}/owners`,\n      request,\n      requestOptions,\n      'application/json'\n    )\n  }\n  /**\n   * Remove an owner from a bucket.\n   * See {@link https://v2.docs.influxdata.com/v2.0/api/#operation/DeleteBucketsIDOwnersID }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  deleteBucketsIDOwnersID(\n    request: DeleteBucketsIDOwnersIDRequest,\n    requestOptions?: RequestOptions\n  ): Promise<void> {\n    return this.base.request(\n      'DELETE',\n      `/api/v2/buckets/${request.bucketID}/owners/${request.userID}`,\n      request,\n      requestOptions\n    )\n  }\n}\n","import {InfluxDB} from '@influxdata/influxdb-client'\nimport {APIBase, RequestOptions} from '../APIBase'\nimport {\n  Check,\n  CheckPatch,\n  Checks,\n  FluxResponse,\n  LabelMapping,\n  LabelResponse,\n  LabelsResponse,\n  PostCheck,\n} from './types'\n\nexport interface GetChecksRequest {\n  offset?: number\n  limit?: number\n  /** Only show checks that belong to a specific organization ID. */\n  orgID: string\n}\nexport interface CreateCheckRequest {\n  /** Check to create */\n  body: PostCheck\n}\nexport interface GetChecksIDRequest {\n  /** The check ID. */\n  checkID: string\n}\nexport interface PutChecksIDRequest {\n  /** The check ID. */\n  checkID: string\n  /** Check update to apply */\n  body: Check\n}\nexport interface PatchChecksIDRequest {\n  /** The check ID. */\n  checkID: string\n  /** Check update to apply */\n  body: CheckPatch\n}\nexport interface DeleteChecksIDRequest {\n  /** The check ID. */\n  checkID: string\n}\nexport interface GetChecksIDLabelsRequest {\n  /** The check ID. */\n  checkID: string\n}\nexport interface PostChecksIDLabelsRequest {\n  /** The check ID. */\n  checkID: string\n  /** Label to add */\n  body: LabelMapping\n}\nexport interface DeleteChecksIDLabelsIDRequest {\n  /** The check ID. */\n  checkID: string\n  /** The ID of the label to delete. */\n  labelID: string\n}\nexport interface GetChecksIDQueryRequest {\n  /** The check ID. */\n  checkID: string\n}\n/**\n * Checks API\n */\nexport class ChecksAPI {\n  // internal\n  private base: APIBase\n\n  /**\n   * Creates ChecksAPI\n   * @param influxDB - an instance that knows how to communicate with InfluxDB server\n   */\n  constructor(influxDB: InfluxDB) {\n    this.base = new APIBase(influxDB)\n  }\n  /**\n   * Get all checks.\n   * See {@link https://v2.docs.influxdata.com/v2.0/api/#operation/GetChecks }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  getChecks(\n    request: GetChecksRequest,\n    requestOptions?: RequestOptions\n  ): Promise<Checks> {\n    return this.base.request(\n      'GET',\n      `/api/v2/checks${this.base.queryString(request, [\n        'offset',\n        'limit',\n        'orgID',\n      ])}`,\n      request,\n      requestOptions\n    )\n  }\n  /**\n   * Add new check.\n   * See {@link https://v2.docs.influxdata.com/v2.0/api/#operation/CreateCheck }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  createCheck(\n    request: CreateCheckRequest,\n    requestOptions?: RequestOptions\n  ): Promise<Check> {\n    return this.base.request(\n      'POST',\n      `/api/v2/checks`,\n      request,\n      requestOptions,\n      'application/json'\n    )\n  }\n  /**\n   * Get a check.\n   * See {@link https://v2.docs.influxdata.com/v2.0/api/#operation/GetChecksID }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  getChecksID(\n    request: GetChecksIDRequest,\n    requestOptions?: RequestOptions\n  ): Promise<Check> {\n    return this.base.request(\n      'GET',\n      `/api/v2/checks/${request.checkID}`,\n      request,\n      requestOptions\n    )\n  }\n  /**\n   * Update a check.\n   * See {@link https://v2.docs.influxdata.com/v2.0/api/#operation/PutChecksID }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  putChecksID(\n    request: PutChecksIDRequest,\n    requestOptions?: RequestOptions\n  ): Promise<Check> {\n    return this.base.request(\n      'PUT',\n      `/api/v2/checks/${request.checkID}`,\n      request,\n      requestOptions,\n      'application/json'\n    )\n  }\n  /**\n   * Update a check.\n   * See {@link https://v2.docs.influxdata.com/v2.0/api/#operation/PatchChecksID }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  patchChecksID(\n    request: PatchChecksIDRequest,\n    requestOptions?: RequestOptions\n  ): Promise<Check> {\n    return this.base.request(\n      'PATCH',\n      `/api/v2/checks/${request.checkID}`,\n      request,\n      requestOptions,\n      'application/json'\n    )\n  }\n  /**\n   * Delete a check.\n   * See {@link https://v2.docs.influxdata.com/v2.0/api/#operation/DeleteChecksID }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  deleteChecksID(\n    request: DeleteChecksIDRequest,\n    requestOptions?: RequestOptions\n  ): Promise<void> {\n    return this.base.request(\n      'DELETE',\n      `/api/v2/checks/${request.checkID}`,\n      request,\n      requestOptions\n    )\n  }\n  /**\n   * List all labels for a check.\n   * See {@link https://v2.docs.influxdata.com/v2.0/api/#operation/GetChecksIDLabels }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  getChecksIDLabels(\n    request: GetChecksIDLabelsRequest,\n    requestOptions?: RequestOptions\n  ): Promise<LabelsResponse> {\n    return this.base.request(\n      'GET',\n      `/api/v2/checks/${request.checkID}/labels`,\n      request,\n      requestOptions\n    )\n  }\n  /**\n   * Add a label to a check.\n   * See {@link https://v2.docs.influxdata.com/v2.0/api/#operation/PostChecksIDLabels }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  postChecksIDLabels(\n    request: PostChecksIDLabelsRequest,\n    requestOptions?: RequestOptions\n  ): Promise<LabelResponse> {\n    return this.base.request(\n      'POST',\n      `/api/v2/checks/${request.checkID}/labels`,\n      request,\n      requestOptions,\n      'application/json'\n    )\n  }\n  /**\n   * Delete label from a check.\n   * See {@link https://v2.docs.influxdata.com/v2.0/api/#operation/DeleteChecksIDLabelsID }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  deleteChecksIDLabelsID(\n    request: DeleteChecksIDLabelsIDRequest,\n    requestOptions?: RequestOptions\n  ): Promise<void> {\n    return this.base.request(\n      'DELETE',\n      `/api/v2/checks/${request.checkID}/labels/${request.labelID}`,\n      request,\n      requestOptions\n    )\n  }\n  /**\n   * Get a check query.\n   * See {@link https://v2.docs.influxdata.com/v2.0/api/#operation/GetChecksIDQuery }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  getChecksIDQuery(\n    request: GetChecksIDQueryRequest,\n    requestOptions?: RequestOptions\n  ): Promise<FluxResponse> {\n    return this.base.request(\n      'GET',\n      `/api/v2/checks/${request.checkID}/query`,\n      request,\n      requestOptions\n    )\n  }\n}\n","import {InfluxDB} from '@influxdata/influxdb-client'\nimport {APIBase, RequestOptions} from '../APIBase'\nimport {\n  AddResourceMemberRequestBody,\n  Cell,\n  CellUpdate,\n  CellWithViewProperties,\n  Cells,\n  CreateCell,\n  CreateDashboardRequest,\n  Dashboard,\n  DashboardWithViewProperties,\n  Dashboards,\n  LabelMapping,\n  LabelResponse,\n  LabelsResponse,\n  ResourceMember,\n  ResourceMembers,\n  ResourceOwner,\n  ResourceOwners,\n  View,\n} from './types'\n\nexport interface GetDashboardsRequest {\n  offset?: number\n  limit?: number\n  descending?: any\n  /** The owner ID. */\n  owner?: string\n  /** The column to sort by. */\n  sortBy?: string\n  /** List of dashboard IDs to return. If both `id` and `owner` are specified, only `id` is used. */\n  id?: any\n  /** The organization ID. */\n  orgID?: string\n  /** The organization name. */\n  org?: string\n}\nexport interface PostDashboardsRequest {\n  /** Dashboard to create */\n  body: CreateDashboardRequest\n}\nexport interface GetDashboardsIDRequest {\n  /** The ID of the dashboard to update. */\n  dashboardID: string\n  /** Includes the cell view properties in the response if set to `properties` */\n  include?: string\n}\nexport interface PatchDashboardsIDRequest {\n  /** The ID of the dashboard to update. */\n  dashboardID: string\n  /** Patching of a dashboard */\n  body: {\n    /** optional, when provided will replace the name */\n    name?: string\n    /** optional, when provided will replace the description */\n    description?: string\n    /** optional, when provided will replace all existing cells with the cells provided */\n    cells?: CellWithViewProperties\n  }\n}\nexport interface DeleteDashboardsIDRequest {\n  /** The ID of the dashboard to update. */\n  dashboardID: string\n}\nexport interface PostDashboardsIDCellsRequest {\n  /** The ID of the dashboard to update. */\n  dashboardID: string\n  /** Cell that will be added */\n  body: CreateCell\n}\nexport interface PutDashboardsIDCellsRequest {\n  /** The ID of the dashboard to update. */\n  dashboardID: string\n  /** entity body */\n  body: Cells\n}\nexport interface PatchDashboardsIDCellsIDRequest {\n  /** The ID of the dashboard to update. */\n  dashboardID: string\n  /** The ID of the cell to update. */\n  cellID: string\n  /** entity body */\n  body: CellUpdate\n}\nexport interface DeleteDashboardsIDCellsIDRequest {\n  /** The ID of the dashboard to delete. */\n  dashboardID: string\n  /** The ID of the cell to delete. */\n  cellID: string\n}\nexport interface GetDashboardsIDCellsIDViewRequest {\n  /** The dashboard ID. */\n  dashboardID: string\n  /** The cell ID. */\n  cellID: string\n}\nexport interface PatchDashboardsIDCellsIDViewRequest {\n  /** The ID of the dashboard to update. */\n  dashboardID: string\n  /** The ID of the cell to update. */\n  cellID: string\n  /** entity body */\n  body: View\n}\nexport interface GetDashboardsIDLabelsRequest {\n  /** The dashboard ID. */\n  dashboardID: string\n}\nexport interface PostDashboardsIDLabelsRequest {\n  /** The dashboard ID. */\n  dashboardID: string\n  /** Label to add */\n  body: LabelMapping\n}\nexport interface DeleteDashboardsIDLabelsIDRequest {\n  /** The dashboard ID. */\n  dashboardID: string\n  /** The ID of the label to delete. */\n  labelID: string\n}\nexport interface GetDashboardsIDMembersRequest {\n  /** The dashboard ID. */\n  dashboardID: string\n}\nexport interface PostDashboardsIDMembersRequest {\n  /** The dashboard ID. */\n  dashboardID: string\n  /** User to add as member */\n  body: AddResourceMemberRequestBody\n}\nexport interface DeleteDashboardsIDMembersIDRequest {\n  /** The ID of the member to remove. */\n  userID: string\n  /** The dashboard ID. */\n  dashboardID: string\n}\nexport interface GetDashboardsIDOwnersRequest {\n  /** The dashboard ID. */\n  dashboardID: string\n}\nexport interface PostDashboardsIDOwnersRequest {\n  /** The dashboard ID. */\n  dashboardID: string\n  /** User to add as owner */\n  body: AddResourceMemberRequestBody\n}\nexport interface DeleteDashboardsIDOwnersIDRequest {\n  /** The ID of the owner to remove. */\n  userID: string\n  /** The dashboard ID. */\n  dashboardID: string\n}\n/**\n * Dashboards API\n */\nexport class DashboardsAPI {\n  // internal\n  private base: APIBase\n\n  /**\n   * Creates DashboardsAPI\n   * @param influxDB - an instance that knows how to communicate with InfluxDB server\n   */\n  constructor(influxDB: InfluxDB) {\n    this.base = new APIBase(influxDB)\n  }\n  /**\n   * Get all dashboards.\n   * See {@link https://v2.docs.influxdata.com/v2.0/api/#operation/GetDashboards }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  getDashboards(\n    request?: GetDashboardsRequest,\n    requestOptions?: RequestOptions\n  ): Promise<Dashboards> {\n    return this.base.request(\n      'GET',\n      `/api/v2/dashboards${this.base.queryString(request, [\n        'offset',\n        'limit',\n        'descending',\n        'owner',\n        'sortBy',\n        'id',\n        'orgID',\n        'org',\n      ])}`,\n      request,\n      requestOptions\n    )\n  }\n  /**\n   * Create a dashboard.\n   * See {@link https://v2.docs.influxdata.com/v2.0/api/#operation/PostDashboards }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  postDashboards(\n    request: PostDashboardsRequest,\n    requestOptions?: RequestOptions\n  ): Promise<Dashboard | DashboardWithViewProperties> {\n    return this.base.request(\n      'POST',\n      `/api/v2/dashboards`,\n      request,\n      requestOptions,\n      'application/json'\n    )\n  }\n  /**\n   * Get a Dashboard.\n   * See {@link https://v2.docs.influxdata.com/v2.0/api/#operation/GetDashboardsID }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  getDashboardsID(\n    request: GetDashboardsIDRequest,\n    requestOptions?: RequestOptions\n  ): Promise<Dashboard | DashboardWithViewProperties> {\n    return this.base.request(\n      'GET',\n      `/api/v2/dashboards/${request.dashboardID}${this.base.queryString(\n        request,\n        ['include']\n      )}`,\n      request,\n      requestOptions\n    )\n  }\n  /**\n   * Update a dashboard.\n   * See {@link https://v2.docs.influxdata.com/v2.0/api/#operation/PatchDashboardsID }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  patchDashboardsID(\n    request: PatchDashboardsIDRequest,\n    requestOptions?: RequestOptions\n  ): Promise<Dashboard> {\n    return this.base.request(\n      'PATCH',\n      `/api/v2/dashboards/${request.dashboardID}`,\n      request,\n      requestOptions,\n      'application/json'\n    )\n  }\n  /**\n   * Delete a dashboard.\n   * See {@link https://v2.docs.influxdata.com/v2.0/api/#operation/DeleteDashboardsID }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  deleteDashboardsID(\n    request: DeleteDashboardsIDRequest,\n    requestOptions?: RequestOptions\n  ): Promise<void> {\n    return this.base.request(\n      'DELETE',\n      `/api/v2/dashboards/${request.dashboardID}`,\n      request,\n      requestOptions\n    )\n  }\n  /**\n   * Create a dashboard cell.\n   * See {@link https://v2.docs.influxdata.com/v2.0/api/#operation/PostDashboardsIDCells }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  postDashboardsIDCells(\n    request: PostDashboardsIDCellsRequest,\n    requestOptions?: RequestOptions\n  ): Promise<Cell> {\n    return this.base.request(\n      'POST',\n      `/api/v2/dashboards/${request.dashboardID}/cells`,\n      request,\n      requestOptions,\n      'application/json'\n    )\n  }\n  /**\n   * Replace cells in a dashboard.\n   * See {@link https://v2.docs.influxdata.com/v2.0/api/#operation/PutDashboardsIDCells }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  putDashboardsIDCells(\n    request: PutDashboardsIDCellsRequest,\n    requestOptions?: RequestOptions\n  ): Promise<Dashboard> {\n    return this.base.request(\n      'PUT',\n      `/api/v2/dashboards/${request.dashboardID}/cells`,\n      request,\n      requestOptions,\n      'application/json'\n    )\n  }\n  /**\n   * Update the non-positional information related to a cell.\n   * See {@link https://v2.docs.influxdata.com/v2.0/api/#operation/PatchDashboardsIDCellsID }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  patchDashboardsIDCellsID(\n    request: PatchDashboardsIDCellsIDRequest,\n    requestOptions?: RequestOptions\n  ): Promise<Cell> {\n    return this.base.request(\n      'PATCH',\n      `/api/v2/dashboards/${request.dashboardID}/cells/${request.cellID}`,\n      request,\n      requestOptions,\n      'application/json'\n    )\n  }\n  /**\n   * Delete a dashboard cell.\n   * See {@link https://v2.docs.influxdata.com/v2.0/api/#operation/DeleteDashboardsIDCellsID }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  deleteDashboardsIDCellsID(\n    request: DeleteDashboardsIDCellsIDRequest,\n    requestOptions?: RequestOptions\n  ): Promise<void> {\n    return this.base.request(\n      'DELETE',\n      `/api/v2/dashboards/${request.dashboardID}/cells/${request.cellID}`,\n      request,\n      requestOptions\n    )\n  }\n  /**\n   * Retrieve the view for a cell.\n   * See {@link https://v2.docs.influxdata.com/v2.0/api/#operation/GetDashboardsIDCellsIDView }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  getDashboardsIDCellsIDView(\n    request: GetDashboardsIDCellsIDViewRequest,\n    requestOptions?: RequestOptions\n  ): Promise<View> {\n    return this.base.request(\n      'GET',\n      `/api/v2/dashboards/${request.dashboardID}/cells/${request.cellID}/view`,\n      request,\n      requestOptions\n    )\n  }\n  /**\n   * Update the view for a cell.\n   * See {@link https://v2.docs.influxdata.com/v2.0/api/#operation/PatchDashboardsIDCellsIDView }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  patchDashboardsIDCellsIDView(\n    request: PatchDashboardsIDCellsIDViewRequest,\n    requestOptions?: RequestOptions\n  ): Promise<View> {\n    return this.base.request(\n      'PATCH',\n      `/api/v2/dashboards/${request.dashboardID}/cells/${request.cellID}/view`,\n      request,\n      requestOptions,\n      'application/json'\n    )\n  }\n  /**\n   * list all labels for a dashboard.\n   * See {@link https://v2.docs.influxdata.com/v2.0/api/#operation/GetDashboardsIDLabels }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  getDashboardsIDLabels(\n    request: GetDashboardsIDLabelsRequest,\n    requestOptions?: RequestOptions\n  ): Promise<LabelsResponse> {\n    return this.base.request(\n      'GET',\n      `/api/v2/dashboards/${request.dashboardID}/labels`,\n      request,\n      requestOptions\n    )\n  }\n  /**\n   * Add a label to a dashboard.\n   * See {@link https://v2.docs.influxdata.com/v2.0/api/#operation/PostDashboardsIDLabels }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  postDashboardsIDLabels(\n    request: PostDashboardsIDLabelsRequest,\n    requestOptions?: RequestOptions\n  ): Promise<LabelResponse> {\n    return this.base.request(\n      'POST',\n      `/api/v2/dashboards/${request.dashboardID}/labels`,\n      request,\n      requestOptions,\n      'application/json'\n    )\n  }\n  /**\n   * Delete a label from a dashboard.\n   * See {@link https://v2.docs.influxdata.com/v2.0/api/#operation/DeleteDashboardsIDLabelsID }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  deleteDashboardsIDLabelsID(\n    request: DeleteDashboardsIDLabelsIDRequest,\n    requestOptions?: RequestOptions\n  ): Promise<void> {\n    return this.base.request(\n      'DELETE',\n      `/api/v2/dashboards/${request.dashboardID}/labels/${request.labelID}`,\n      request,\n      requestOptions\n    )\n  }\n  /**\n   * List all dashboard members.\n   * See {@link https://v2.docs.influxdata.com/v2.0/api/#operation/GetDashboardsIDMembers }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  getDashboardsIDMembers(\n    request: GetDashboardsIDMembersRequest,\n    requestOptions?: RequestOptions\n  ): Promise<ResourceMembers> {\n    return this.base.request(\n      'GET',\n      `/api/v2/dashboards/${request.dashboardID}/members`,\n      request,\n      requestOptions\n    )\n  }\n  /**\n   * Add a member to a dashboard.\n   * See {@link https://v2.docs.influxdata.com/v2.0/api/#operation/PostDashboardsIDMembers }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  postDashboardsIDMembers(\n    request: PostDashboardsIDMembersRequest,\n    requestOptions?: RequestOptions\n  ): Promise<ResourceMember> {\n    return this.base.request(\n      'POST',\n      `/api/v2/dashboards/${request.dashboardID}/members`,\n      request,\n      requestOptions,\n      'application/json'\n    )\n  }\n  /**\n   * Remove a member from a dashboard.\n   * See {@link https://v2.docs.influxdata.com/v2.0/api/#operation/DeleteDashboardsIDMembersID }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  deleteDashboardsIDMembersID(\n    request: DeleteDashboardsIDMembersIDRequest,\n    requestOptions?: RequestOptions\n  ): Promise<void> {\n    return this.base.request(\n      'DELETE',\n      `/api/v2/dashboards/${request.dashboardID}/members/${request.userID}`,\n      request,\n      requestOptions\n    )\n  }\n  /**\n   * List all dashboard owners.\n   * See {@link https://v2.docs.influxdata.com/v2.0/api/#operation/GetDashboardsIDOwners }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  getDashboardsIDOwners(\n    request: GetDashboardsIDOwnersRequest,\n    requestOptions?: RequestOptions\n  ): Promise<ResourceOwners> {\n    return this.base.request(\n      'GET',\n      `/api/v2/dashboards/${request.dashboardID}/owners`,\n      request,\n      requestOptions\n    )\n  }\n  /**\n   * Add an owner to a dashboard.\n   * See {@link https://v2.docs.influxdata.com/v2.0/api/#operation/PostDashboardsIDOwners }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  postDashboardsIDOwners(\n    request: PostDashboardsIDOwnersRequest,\n    requestOptions?: RequestOptions\n  ): Promise<ResourceOwner> {\n    return this.base.request(\n      'POST',\n      `/api/v2/dashboards/${request.dashboardID}/owners`,\n      request,\n      requestOptions,\n      'application/json'\n    )\n  }\n  /**\n   * Remove an owner from a dashboard.\n   * See {@link https://v2.docs.influxdata.com/v2.0/api/#operation/DeleteDashboardsIDOwnersID }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  deleteDashboardsIDOwnersID(\n    request: DeleteDashboardsIDOwnersIDRequest,\n    requestOptions?: RequestOptions\n  ): Promise<void> {\n    return this.base.request(\n      'DELETE',\n      `/api/v2/dashboards/${request.dashboardID}/owners/${request.userID}`,\n      request,\n      requestOptions\n    )\n  }\n}\n","import {InfluxDB} from '@influxdata/influxdb-client'\nimport {APIBase, RequestOptions} from '../APIBase'\nimport {DBRP, DBRPUpdate, DBRPs} from './types'\n\nexport interface GetDBRPsRequest {\n  /** Specifies the organization ID to filter on */\n  orgID: string\n  /** Specifies the mapping ID to filter on */\n  id?: string\n  /** Specifies the bucket ID to filter on */\n  bucketID?: string\n  /** Specifies filtering on default */\n  default?: any\n  /** Specifies the database to filter on */\n  db?: string\n  /** Specifies the retention policy to filter on */\n  rp?: string\n}\nexport interface PostDBRPRequest {\n  /** The database retention policy mapping to add */\n  body: DBRP\n}\nexport interface GetDBRPsIDRequest {\n  /** The database retention policy mapping ID */\n  dbrpID: string\n  /** Specifies the organization ID of the mapping */\n  orgID: string\n}\nexport interface PatchDBRPIDRequest {\n  /** The database retention policy mapping. */\n  dbrpID: string\n  /** Database retention policy update to apply */\n  body: DBRPUpdate\n  /** Specifies the organization ID of the mapping */\n  orgID: string\n}\nexport interface DeleteDBRPIDRequest {\n  /** The database retention policy mapping */\n  dbrpID: string\n  /** Specifies the organization ID of the mapping */\n  orgID: string\n}\n/**\n * Dbrps API\n */\nexport class DbrpsAPI {\n  // internal\n  private base: APIBase\n\n  /**\n   * Creates DbrpsAPI\n   * @param influxDB - an instance that knows how to communicate with InfluxDB server\n   */\n  constructor(influxDB: InfluxDB) {\n    this.base = new APIBase(influxDB)\n  }\n  /**\n   * List all database retention policy mappings.\n   * See {@link https://v2.docs.influxdata.com/v2.0/api/#operation/GetDBRPs }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  getDBRPs(\n    request: GetDBRPsRequest,\n    requestOptions?: RequestOptions\n  ): Promise<DBRPs> {\n    return this.base.request(\n      'GET',\n      `/api/v2/dbrps${this.base.queryString(request, [\n        'orgID',\n        'id',\n        'bucketID',\n        'default',\n        'db',\n        'rp',\n      ])}`,\n      request,\n      requestOptions\n    )\n  }\n  /**\n   * Add a database retention policy mapping.\n   * See {@link https://v2.docs.influxdata.com/v2.0/api/#operation/PostDBRP }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  postDBRP(\n    request: PostDBRPRequest,\n    requestOptions?: RequestOptions\n  ): Promise<DBRP> {\n    return this.base.request(\n      'POST',\n      `/api/v2/dbrps`,\n      request,\n      requestOptions,\n      'application/json'\n    )\n  }\n  /**\n   * Retrieve a database retention policy mapping.\n   * See {@link https://v2.docs.influxdata.com/v2.0/api/#operation/GetDBRPsID }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  getDBRPsID(\n    request: GetDBRPsIDRequest,\n    requestOptions?: RequestOptions\n  ): Promise<DBRP> {\n    return this.base.request(\n      'GET',\n      `/api/v2/dbrps/${request.dbrpID}${this.base.queryString(request, [\n        'orgID',\n      ])}`,\n      request,\n      requestOptions\n    )\n  }\n  /**\n   * Update a database retention policy mapping.\n   * See {@link https://v2.docs.influxdata.com/v2.0/api/#operation/PatchDBRPID }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  patchDBRPID(\n    request: PatchDBRPIDRequest,\n    requestOptions?: RequestOptions\n  ): Promise<DBRP> {\n    return this.base.request(\n      'PATCH',\n      `/api/v2/dbrps/${request.dbrpID}${this.base.queryString(request, [\n        'orgID',\n      ])}`,\n      request,\n      requestOptions,\n      'application/json'\n    )\n  }\n  /**\n   * Delete a database retention policy.\n   * See {@link https://v2.docs.influxdata.com/v2.0/api/#operation/DeleteDBRPID }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  deleteDBRPID(\n    request: DeleteDBRPIDRequest,\n    requestOptions?: RequestOptions\n  ): Promise<void> {\n    return this.base.request(\n      'DELETE',\n      `/api/v2/dbrps/${request.dbrpID}${this.base.queryString(request, [\n        'orgID',\n      ])}`,\n      request,\n      requestOptions\n    )\n  }\n}\n","import {InfluxDB} from '@influxdata/influxdb-client'\nimport {APIBase, RequestOptions} from '../APIBase'\nimport {DeletePredicateRequest} from './types'\n\nexport interface PostDeleteRequest {\n  /** Predicate delete request */\n  body: DeletePredicateRequest\n  /** Specifies the organization to delete data from. */\n  org?: string\n  /** Specifies the bucket to delete data from. */\n  bucket?: string\n  /** Specifies the organization ID of the resource. */\n  orgID?: string\n  /** Specifies the bucket ID to delete data from. */\n  bucketID?: string\n}\n/**\n * Delete API\n */\nexport class DeleteAPI {\n  // internal\n  private base: APIBase\n\n  /**\n   * Creates DeleteAPI\n   * @param influxDB - an instance that knows how to communicate with InfluxDB server\n   */\n  constructor(influxDB: InfluxDB) {\n    this.base = new APIBase(influxDB)\n  }\n  /**\n   * Delete time series data from InfluxDB.\n   * See {@link https://v2.docs.influxdata.com/v2.0/api/#operation/PostDelete }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  postDelete(\n    request: PostDeleteRequest,\n    requestOptions?: RequestOptions\n  ): Promise<void> {\n    return this.base.request(\n      'POST',\n      `/api/v2/delete${this.base.queryString(request, [\n        'org',\n        'bucket',\n        'orgID',\n        'bucketID',\n      ])}`,\n      request,\n      requestOptions,\n      'application/json'\n    )\n  }\n}\n","import {InfluxDB} from '@influxdata/influxdb-client'\nimport {APIBase, RequestOptions} from '../APIBase'\nimport {\n  Document,\n  DocumentCreate,\n  DocumentUpdate,\n  Documents,\n  LabelMapping,\n  LabelResponse,\n  LabelsResponse,\n} from './types'\n\nexport interface GetDocumentsTemplatesRequest {\n  /** Specifies the name of the organization of the template. */\n  org?: string\n  /** Specifies the organization ID of the template. */\n  orgID?: string\n}\nexport interface PostDocumentsTemplatesRequest {\n  /** Template that will be created */\n  body: DocumentCreate\n}\nexport interface GetDocumentsTemplatesIDRequest {\n  /** The template ID. */\n  templateID: string\n}\nexport interface PutDocumentsTemplatesIDRequest {\n  /** The template ID. */\n  templateID: string\n  /** Template that will be updated */\n  body: DocumentUpdate\n}\nexport interface DeleteDocumentsTemplatesIDRequest {\n  /** The template ID. */\n  templateID: string\n}\nexport interface GetDocumentsTemplatesIDLabelsRequest {\n  /** The template ID. */\n  templateID: string\n}\nexport interface PostDocumentsTemplatesIDLabelsRequest {\n  /** The template ID. */\n  templateID: string\n  /** Label to add */\n  body: LabelMapping\n}\nexport interface DeleteDocumentsTemplatesIDLabelsIDRequest {\n  /** The template ID. */\n  templateID: string\n  /** The label ID. */\n  labelID: string\n}\n/**\n * Documents API\n */\nexport class DocumentsAPI {\n  // internal\n  private base: APIBase\n\n  /**\n   * Creates DocumentsAPI\n   * @param influxDB - an instance that knows how to communicate with InfluxDB server\n   */\n  constructor(influxDB: InfluxDB) {\n    this.base = new APIBase(influxDB)\n  }\n  /**\n   * See {@link https://v2.docs.influxdata.com/v2.0/api/#operation/GetDocumentsTemplates }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  getDocumentsTemplates(\n    request?: GetDocumentsTemplatesRequest,\n    requestOptions?: RequestOptions\n  ): Promise<Documents> {\n    return this.base.request(\n      'GET',\n      `/api/v2/documents/templates${this.base.queryString(request, [\n        'org',\n        'orgID',\n      ])}`,\n      request,\n      requestOptions\n    )\n  }\n  /**\n   * Create a template.\n   * See {@link https://v2.docs.influxdata.com/v2.0/api/#operation/PostDocumentsTemplates }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  postDocumentsTemplates(\n    request: PostDocumentsTemplatesRequest,\n    requestOptions?: RequestOptions\n  ): Promise<Document> {\n    return this.base.request(\n      'POST',\n      `/api/v2/documents/templates`,\n      request,\n      requestOptions,\n      'application/json'\n    )\n  }\n  /**\n   * See {@link https://v2.docs.influxdata.com/v2.0/api/#operation/GetDocumentsTemplatesID }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  getDocumentsTemplatesID(\n    request: GetDocumentsTemplatesIDRequest,\n    requestOptions?: RequestOptions\n  ): Promise<Document> {\n    return this.base.request(\n      'GET',\n      `/api/v2/documents/templates/${request.templateID}`,\n      request,\n      requestOptions\n    )\n  }\n  /**\n   * See {@link https://v2.docs.influxdata.com/v2.0/api/#operation/PutDocumentsTemplatesID }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  putDocumentsTemplatesID(\n    request: PutDocumentsTemplatesIDRequest,\n    requestOptions?: RequestOptions\n  ): Promise<Document> {\n    return this.base.request(\n      'PUT',\n      `/api/v2/documents/templates/${request.templateID}`,\n      request,\n      requestOptions,\n      'application/json'\n    )\n  }\n  /**\n   * Delete a template.\n   * See {@link https://v2.docs.influxdata.com/v2.0/api/#operation/DeleteDocumentsTemplatesID }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  deleteDocumentsTemplatesID(\n    request: DeleteDocumentsTemplatesIDRequest,\n    requestOptions?: RequestOptions\n  ): Promise<void> {\n    return this.base.request(\n      'DELETE',\n      `/api/v2/documents/templates/${request.templateID}`,\n      request,\n      requestOptions\n    )\n  }\n  /**\n   * List all labels for a template.\n   * See {@link https://v2.docs.influxdata.com/v2.0/api/#operation/GetDocumentsTemplatesIDLabels }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  getDocumentsTemplatesIDLabels(\n    request: GetDocumentsTemplatesIDLabelsRequest,\n    requestOptions?: RequestOptions\n  ): Promise<LabelsResponse> {\n    return this.base.request(\n      'GET',\n      `/api/v2/documents/templates/${request.templateID}/labels`,\n      request,\n      requestOptions\n    )\n  }\n  /**\n   * Add a label to a template.\n   * See {@link https://v2.docs.influxdata.com/v2.0/api/#operation/PostDocumentsTemplatesIDLabels }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  postDocumentsTemplatesIDLabels(\n    request: PostDocumentsTemplatesIDLabelsRequest,\n    requestOptions?: RequestOptions\n  ): Promise<LabelResponse> {\n    return this.base.request(\n      'POST',\n      `/api/v2/documents/templates/${request.templateID}/labels`,\n      request,\n      requestOptions,\n      'application/json'\n    )\n  }\n  /**\n   * Delete a label from a template.\n   * See {@link https://v2.docs.influxdata.com/v2.0/api/#operation/DeleteDocumentsTemplatesIDLabelsID }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  deleteDocumentsTemplatesIDLabelsID(\n    request: DeleteDocumentsTemplatesIDLabelsIDRequest,\n    requestOptions?: RequestOptions\n  ): Promise<void> {\n    return this.base.request(\n      'DELETE',\n      `/api/v2/documents/templates/${request.templateID}/labels/${request.labelID}`,\n      request,\n      requestOptions\n    )\n  }\n}\n","import {InfluxDB} from '@influxdata/influxdb-client'\nimport {APIBase, RequestOptions} from '../APIBase'\nimport {Flags} from './types'\n\nexport interface GetFlagsRequest {}\n/**\n * Flags API\n */\nexport class FlagsAPI {\n  // internal\n  private base: APIBase\n\n  /**\n   * Creates FlagsAPI\n   * @param influxDB - an instance that knows how to communicate with InfluxDB server\n   */\n  constructor(influxDB: InfluxDB) {\n    this.base = new APIBase(influxDB)\n  }\n  /**\n   * Return the feature flags for the currently authenticated user.\n   * See {@link https://v2.docs.influxdata.com/v2.0/api/#operation/GetFlags }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  getFlags(\n    request?: GetFlagsRequest,\n    requestOptions?: RequestOptions\n  ): Promise<Flags> {\n    return this.base.request('GET', `/api/v2/flags`, request, requestOptions)\n  }\n}\n","import {InfluxDB} from '@influxdata/influxdb-client'\nimport {APIBase, RequestOptions} from '../APIBase'\nimport {HealthCheck} from './types'\n\nexport interface GetHealthRequest {}\n/**\n * Health API\n */\nexport class HealthAPI {\n  // internal\n  private base: APIBase\n\n  /**\n   * Creates HealthAPI\n   * @param influxDB - an instance that knows how to communicate with InfluxDB server\n   */\n  constructor(influxDB: InfluxDB) {\n    this.base = new APIBase(influxDB)\n  }\n  /**\n   * Get the health of an instance.\n   * See {@link https://v2.docs.influxdata.com/v2.0/api/#operation/GetHealth }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  getHealth(\n    request?: GetHealthRequest,\n    requestOptions?: RequestOptions\n  ): Promise<HealthCheck> {\n    return this.base.request('GET', `/health`, request, requestOptions)\n  }\n}\n","import {InfluxDB} from '@influxdata/influxdb-client'\nimport {APIBase, RequestOptions} from '../APIBase'\nimport {\n  LabelCreateRequest,\n  LabelResponse,\n  LabelUpdate,\n  LabelsResponse,\n} from './types'\n\nexport interface GetLabelsRequest {\n  /** The organization ID. */\n  orgID?: string\n}\nexport interface PostLabelsRequest {\n  /** Label to create */\n  body: LabelCreateRequest\n}\nexport interface GetLabelsIDRequest {\n  /** The ID of the label to update. */\n  labelID: string\n}\nexport interface PatchLabelsIDRequest {\n  /** The ID of the label to update. */\n  labelID: string\n  /** Label update */\n  body: LabelUpdate\n}\nexport interface DeleteLabelsIDRequest {\n  /** The ID of the label to delete. */\n  labelID: string\n}\n/**\n * Labels API\n */\nexport class LabelsAPI {\n  // internal\n  private base: APIBase\n\n  /**\n   * Creates LabelsAPI\n   * @param influxDB - an instance that knows how to communicate with InfluxDB server\n   */\n  constructor(influxDB: InfluxDB) {\n    this.base = new APIBase(influxDB)\n  }\n  /**\n   * Get all labels.\n   * See {@link https://v2.docs.influxdata.com/v2.0/api/#operation/GetLabels }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  getLabels(\n    request?: GetLabelsRequest,\n    requestOptions?: RequestOptions\n  ): Promise<LabelsResponse> {\n    return this.base.request(\n      'GET',\n      `/api/v2/labels${this.base.queryString(request, ['orgID'])}`,\n      request,\n      requestOptions\n    )\n  }\n  /**\n   * Create a label.\n   * See {@link https://v2.docs.influxdata.com/v2.0/api/#operation/PostLabels }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  postLabels(\n    request: PostLabelsRequest,\n    requestOptions?: RequestOptions\n  ): Promise<LabelResponse> {\n    return this.base.request(\n      'POST',\n      `/api/v2/labels`,\n      request,\n      requestOptions,\n      'application/json'\n    )\n  }\n  /**\n   * Get a label.\n   * See {@link https://v2.docs.influxdata.com/v2.0/api/#operation/GetLabelsID }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  getLabelsID(\n    request: GetLabelsIDRequest,\n    requestOptions?: RequestOptions\n  ): Promise<LabelResponse> {\n    return this.base.request(\n      'GET',\n      `/api/v2/labels/${request.labelID}`,\n      request,\n      requestOptions\n    )\n  }\n  /**\n   * Update a label.\n   * See {@link https://v2.docs.influxdata.com/v2.0/api/#operation/PatchLabelsID }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  patchLabelsID(\n    request: PatchLabelsIDRequest,\n    requestOptions?: RequestOptions\n  ): Promise<LabelResponse> {\n    return this.base.request(\n      'PATCH',\n      `/api/v2/labels/${request.labelID}`,\n      request,\n      requestOptions,\n      'application/json'\n    )\n  }\n  /**\n   * Delete a label.\n   * See {@link https://v2.docs.influxdata.com/v2.0/api/#operation/DeleteLabelsID }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  deleteLabelsID(\n    request: DeleteLabelsIDRequest,\n    requestOptions?: RequestOptions\n  ): Promise<void> {\n    return this.base.request(\n      'DELETE',\n      `/api/v2/labels/${request.labelID}`,\n      request,\n      requestOptions\n    )\n  }\n}\n","import {InfluxDB} from '@influxdata/influxdb-client'\nimport {APIBase, RequestOptions} from '../APIBase'\nimport {PasswordResetBody, User} from './types'\n\nexport interface GetMeRequest {}\nexport interface PutMePasswordRequest {\n  auth: {user: string; password: string}\n  /** New password */\n  body: PasswordResetBody\n}\n/**\n * Me API\n */\nexport class MeAPI {\n  // internal\n  private base: APIBase\n\n  /**\n   * Creates MeAPI\n   * @param influxDB - an instance that knows how to communicate with InfluxDB server\n   */\n  constructor(influxDB: InfluxDB) {\n    this.base = new APIBase(influxDB)\n  }\n  /**\n   * Return the current authenticated user.\n   * See {@link https://v2.docs.influxdata.com/v2.0/api/#operation/GetMe }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  getMe(\n    request?: GetMeRequest,\n    requestOptions?: RequestOptions\n  ): Promise<User> {\n    return this.base.request('GET', `/api/v2/me`, request, requestOptions)\n  }\n  /**\n   * Update a password.\n   * See {@link https://v2.docs.influxdata.com/v2.0/api/#operation/PutMePassword }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  putMePassword(\n    request: PutMePasswordRequest,\n    requestOptions?: RequestOptions\n  ): Promise<void> {\n    return this.base.request(\n      'PUT',\n      `/api/v2/me/password`,\n      request,\n      requestOptions,\n      'application/json'\n    )\n  }\n}\n","import {InfluxDB} from '@influxdata/influxdb-client'\nimport {APIBase, RequestOptions} from '../APIBase'\nimport {\n  LabelMapping,\n  LabelResponse,\n  LabelsResponse,\n  NotificationEndpoint,\n  NotificationEndpointUpdate,\n  NotificationEndpoints,\n  PostNotificationEndpoint,\n} from './types'\n\nexport interface GetNotificationEndpointsRequest {\n  offset?: number\n  limit?: number\n  /** Only show notification endpoints that belong to specific organization ID. */\n  orgID: string\n}\nexport interface CreateNotificationEndpointRequest {\n  /** Notification endpoint to create */\n  body: PostNotificationEndpoint\n}\nexport interface GetNotificationEndpointsIDRequest {\n  /** The notification endpoint ID. */\n  endpointID: string\n}\nexport interface PutNotificationEndpointsIDRequest {\n  /** The notification endpoint ID. */\n  endpointID: string\n  /** A new notification endpoint to replace the existing endpoint with */\n  body: NotificationEndpoint\n}\nexport interface PatchNotificationEndpointsIDRequest {\n  /** The notification endpoint ID. */\n  endpointID: string\n  /** Check update to apply */\n  body: NotificationEndpointUpdate\n}\nexport interface DeleteNotificationEndpointsIDRequest {\n  /** The notification endpoint ID. */\n  endpointID: string\n}\nexport interface GetNotificationEndpointsIDLabelsRequest {\n  /** The notification endpoint ID. */\n  endpointID: string\n}\nexport interface PostNotificationEndpointIDLabelsRequest {\n  /** The notification endpoint ID. */\n  endpointID: string\n  /** Label to add */\n  body: LabelMapping\n}\nexport interface DeleteNotificationEndpointsIDLabelsIDRequest {\n  /** The notification endpoint ID. */\n  endpointID: string\n  /** The ID of the label to delete. */\n  labelID: string\n}\n/**\n * NotificationEndpoints API\n */\nexport class NotificationEndpointsAPI {\n  // internal\n  private base: APIBase\n\n  /**\n   * Creates NotificationEndpointsAPI\n   * @param influxDB - an instance that knows how to communicate with InfluxDB server\n   */\n  constructor(influxDB: InfluxDB) {\n    this.base = new APIBase(influxDB)\n  }\n  /**\n   * Get all notification endpoints.\n   * See {@link https://v2.docs.influxdata.com/v2.0/api/#operation/GetNotificationEndpoints }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  getNotificationEndpoints(\n    request: GetNotificationEndpointsRequest,\n    requestOptions?: RequestOptions\n  ): Promise<NotificationEndpoints> {\n    return this.base.request(\n      'GET',\n      `/api/v2/notificationEndpoints${this.base.queryString(request, [\n        'offset',\n        'limit',\n        'orgID',\n      ])}`,\n      request,\n      requestOptions\n    )\n  }\n  /**\n   * Add a notification endpoint.\n   * See {@link https://v2.docs.influxdata.com/v2.0/api/#operation/CreateNotificationEndpoint }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  createNotificationEndpoint(\n    request: CreateNotificationEndpointRequest,\n    requestOptions?: RequestOptions\n  ): Promise<NotificationEndpoint> {\n    return this.base.request(\n      'POST',\n      `/api/v2/notificationEndpoints`,\n      request,\n      requestOptions,\n      'application/json'\n    )\n  }\n  /**\n   * Get a notification endpoint.\n   * See {@link https://v2.docs.influxdata.com/v2.0/api/#operation/GetNotificationEndpointsID }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  getNotificationEndpointsID(\n    request: GetNotificationEndpointsIDRequest,\n    requestOptions?: RequestOptions\n  ): Promise<NotificationEndpoint> {\n    return this.base.request(\n      'GET',\n      `/api/v2/notificationEndpoints/${request.endpointID}`,\n      request,\n      requestOptions\n    )\n  }\n  /**\n   * Update a notification endpoint.\n   * See {@link https://v2.docs.influxdata.com/v2.0/api/#operation/PutNotificationEndpointsID }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  putNotificationEndpointsID(\n    request: PutNotificationEndpointsIDRequest,\n    requestOptions?: RequestOptions\n  ): Promise<NotificationEndpoint> {\n    return this.base.request(\n      'PUT',\n      `/api/v2/notificationEndpoints/${request.endpointID}`,\n      request,\n      requestOptions,\n      'application/json'\n    )\n  }\n  /**\n   * Update a notification endpoint.\n   * See {@link https://v2.docs.influxdata.com/v2.0/api/#operation/PatchNotificationEndpointsID }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  patchNotificationEndpointsID(\n    request: PatchNotificationEndpointsIDRequest,\n    requestOptions?: RequestOptions\n  ): Promise<NotificationEndpoint> {\n    return this.base.request(\n      'PATCH',\n      `/api/v2/notificationEndpoints/${request.endpointID}`,\n      request,\n      requestOptions,\n      'application/json'\n    )\n  }\n  /**\n   * Delete a notification endpoint.\n   * See {@link https://v2.docs.influxdata.com/v2.0/api/#operation/DeleteNotificationEndpointsID }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  deleteNotificationEndpointsID(\n    request: DeleteNotificationEndpointsIDRequest,\n    requestOptions?: RequestOptions\n  ): Promise<void> {\n    return this.base.request(\n      'DELETE',\n      `/api/v2/notificationEndpoints/${request.endpointID}`,\n      request,\n      requestOptions\n    )\n  }\n  /**\n   * List all labels for a notification endpoint.\n   * See {@link https://v2.docs.influxdata.com/v2.0/api/#operation/GetNotificationEndpointsIDLabels }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  getNotificationEndpointsIDLabels(\n    request: GetNotificationEndpointsIDLabelsRequest,\n    requestOptions?: RequestOptions\n  ): Promise<LabelsResponse> {\n    return this.base.request(\n      'GET',\n      `/api/v2/notificationEndpoints/${request.endpointID}/labels`,\n      request,\n      requestOptions\n    )\n  }\n  /**\n   * Add a label to a notification endpoint.\n   * See {@link https://v2.docs.influxdata.com/v2.0/api/#operation/PostNotificationEndpointIDLabels }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  postNotificationEndpointIDLabels(\n    request: PostNotificationEndpointIDLabelsRequest,\n    requestOptions?: RequestOptions\n  ): Promise<LabelResponse> {\n    return this.base.request(\n      'POST',\n      `/api/v2/notificationEndpoints/${request.endpointID}/labels`,\n      request,\n      requestOptions,\n      'application/json'\n    )\n  }\n  /**\n   * Delete a label from a notification endpoint.\n   * See {@link https://v2.docs.influxdata.com/v2.0/api/#operation/DeleteNotificationEndpointsIDLabelsID }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  deleteNotificationEndpointsIDLabelsID(\n    request: DeleteNotificationEndpointsIDLabelsIDRequest,\n    requestOptions?: RequestOptions\n  ): Promise<void> {\n    return this.base.request(\n      'DELETE',\n      `/api/v2/notificationEndpoints/${request.endpointID}/labels/${request.labelID}`,\n      request,\n      requestOptions\n    )\n  }\n}\n","import {InfluxDB} from '@influxdata/influxdb-client'\nimport {APIBase, RequestOptions} from '../APIBase'\nimport {\n  FluxResponse,\n  LabelMapping,\n  LabelResponse,\n  LabelsResponse,\n  NotificationRule,\n  NotificationRuleUpdate,\n  NotificationRules,\n  PostNotificationRule,\n} from './types'\n\nexport interface GetNotificationRulesRequest {\n  offset?: number\n  limit?: number\n  /** Only show notification rules that belong to a specific organization ID. */\n  orgID: string\n  /** Only show notifications that belong to the specific check ID. */\n  checkID?: string\n  /** Only return notification rules that \"would match\" statuses which contain the tag key value pairs provided. */\n  tag?: string\n}\nexport interface CreateNotificationRuleRequest {\n  /** Notification rule to create */\n  body: PostNotificationRule\n}\nexport interface GetNotificationRulesIDRequest {\n  /** The notification rule ID. */\n  ruleID: string\n}\nexport interface PutNotificationRulesIDRequest {\n  /** The notification rule ID. */\n  ruleID: string\n  /** Notification rule update to apply */\n  body: NotificationRule\n}\nexport interface PatchNotificationRulesIDRequest {\n  /** The notification rule ID. */\n  ruleID: string\n  /** Notification rule update to apply */\n  body: NotificationRuleUpdate\n}\nexport interface DeleteNotificationRulesIDRequest {\n  /** The notification rule ID. */\n  ruleID: string\n}\nexport interface GetNotificationRulesIDLabelsRequest {\n  /** The notification rule ID. */\n  ruleID: string\n}\nexport interface PostNotificationRuleIDLabelsRequest {\n  /** The notification rule ID. */\n  ruleID: string\n  /** Label to add */\n  body: LabelMapping\n}\nexport interface DeleteNotificationRulesIDLabelsIDRequest {\n  /** The notification rule ID. */\n  ruleID: string\n  /** The ID of the label to delete. */\n  labelID: string\n}\nexport interface GetNotificationRulesIDQueryRequest {\n  /** The notification rule ID. */\n  ruleID: string\n}\n/**\n * NotificationRules API\n */\nexport class NotificationRulesAPI {\n  // internal\n  private base: APIBase\n\n  /**\n   * Creates NotificationRulesAPI\n   * @param influxDB - an instance that knows how to communicate with InfluxDB server\n   */\n  constructor(influxDB: InfluxDB) {\n    this.base = new APIBase(influxDB)\n  }\n  /**\n   * Get all notification rules.\n   * See {@link https://v2.docs.influxdata.com/v2.0/api/#operation/GetNotificationRules }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  getNotificationRules(\n    request: GetNotificationRulesRequest,\n    requestOptions?: RequestOptions\n  ): Promise<NotificationRules> {\n    return this.base.request(\n      'GET',\n      `/api/v2/notificationRules${this.base.queryString(request, [\n        'offset',\n        'limit',\n        'orgID',\n        'checkID',\n        'tag',\n      ])}`,\n      request,\n      requestOptions\n    )\n  }\n  /**\n   * Add a notification rule.\n   * See {@link https://v2.docs.influxdata.com/v2.0/api/#operation/CreateNotificationRule }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  createNotificationRule(\n    request: CreateNotificationRuleRequest,\n    requestOptions?: RequestOptions\n  ): Promise<NotificationRule> {\n    return this.base.request(\n      'POST',\n      `/api/v2/notificationRules`,\n      request,\n      requestOptions,\n      'application/json'\n    )\n  }\n  /**\n   * Get a notification rule.\n   * See {@link https://v2.docs.influxdata.com/v2.0/api/#operation/GetNotificationRulesID }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  getNotificationRulesID(\n    request: GetNotificationRulesIDRequest,\n    requestOptions?: RequestOptions\n  ): Promise<NotificationRule> {\n    return this.base.request(\n      'GET',\n      `/api/v2/notificationRules/${request.ruleID}`,\n      request,\n      requestOptions\n    )\n  }\n  /**\n   * Update a notification rule.\n   * See {@link https://v2.docs.influxdata.com/v2.0/api/#operation/PutNotificationRulesID }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  putNotificationRulesID(\n    request: PutNotificationRulesIDRequest,\n    requestOptions?: RequestOptions\n  ): Promise<NotificationRule> {\n    return this.base.request(\n      'PUT',\n      `/api/v2/notificationRules/${request.ruleID}`,\n      request,\n      requestOptions,\n      'application/json'\n    )\n  }\n  /**\n   * Update a notification rule.\n   * See {@link https://v2.docs.influxdata.com/v2.0/api/#operation/PatchNotificationRulesID }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  patchNotificationRulesID(\n    request: PatchNotificationRulesIDRequest,\n    requestOptions?: RequestOptions\n  ): Promise<NotificationRule> {\n    return this.base.request(\n      'PATCH',\n      `/api/v2/notificationRules/${request.ruleID}`,\n      request,\n      requestOptions,\n      'application/json'\n    )\n  }\n  /**\n   * Delete a notification rule.\n   * See {@link https://v2.docs.influxdata.com/v2.0/api/#operation/DeleteNotificationRulesID }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  deleteNotificationRulesID(\n    request: DeleteNotificationRulesIDRequest,\n    requestOptions?: RequestOptions\n  ): Promise<void> {\n    return this.base.request(\n      'DELETE',\n      `/api/v2/notificationRules/${request.ruleID}`,\n      request,\n      requestOptions\n    )\n  }\n  /**\n   * List all labels for a notification rule.\n   * See {@link https://v2.docs.influxdata.com/v2.0/api/#operation/GetNotificationRulesIDLabels }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  getNotificationRulesIDLabels(\n    request: GetNotificationRulesIDLabelsRequest,\n    requestOptions?: RequestOptions\n  ): Promise<LabelsResponse> {\n    return this.base.request(\n      'GET',\n      `/api/v2/notificationRules/${request.ruleID}/labels`,\n      request,\n      requestOptions\n    )\n  }\n  /**\n   * Add a label to a notification rule.\n   * See {@link https://v2.docs.influxdata.com/v2.0/api/#operation/PostNotificationRuleIDLabels }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  postNotificationRuleIDLabels(\n    request: PostNotificationRuleIDLabelsRequest,\n    requestOptions?: RequestOptions\n  ): Promise<LabelResponse> {\n    return this.base.request(\n      'POST',\n      `/api/v2/notificationRules/${request.ruleID}/labels`,\n      request,\n      requestOptions,\n      'application/json'\n    )\n  }\n  /**\n   * Delete label from a notification rule.\n   * See {@link https://v2.docs.influxdata.com/v2.0/api/#operation/DeleteNotificationRulesIDLabelsID }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  deleteNotificationRulesIDLabelsID(\n    request: DeleteNotificationRulesIDLabelsIDRequest,\n    requestOptions?: RequestOptions\n  ): Promise<void> {\n    return this.base.request(\n      'DELETE',\n      `/api/v2/notificationRules/${request.ruleID}/labels/${request.labelID}`,\n      request,\n      requestOptions\n    )\n  }\n  /**\n   * Get a notification rule query.\n   * See {@link https://v2.docs.influxdata.com/v2.0/api/#operation/GetNotificationRulesIDQuery }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  getNotificationRulesIDQuery(\n    request: GetNotificationRulesIDQueryRequest,\n    requestOptions?: RequestOptions\n  ): Promise<FluxResponse> {\n    return this.base.request(\n      'GET',\n      `/api/v2/notificationRules/${request.ruleID}/query`,\n      request,\n      requestOptions\n    )\n  }\n}\n","import {InfluxDB} from '@influxdata/influxdb-client'\nimport {APIBase, RequestOptions} from '../APIBase'\nimport {\n  AddResourceMemberRequestBody,\n  Organization,\n  Organizations,\n  ResourceMember,\n  ResourceMembers,\n  ResourceOwner,\n  ResourceOwners,\n  SecretKeys,\n  SecretKeysResponse,\n  Secrets,\n} from './types'\n\nexport interface GetOrgsRequest {\n  offset?: number\n  limit?: number\n  descending?: any\n  /** Filter organizations to a specific organization name. */\n  org?: string\n  /** Filter organizations to a specific organization ID. */\n  orgID?: string\n  /** Filter organizations to a specific user ID. */\n  userID?: string\n}\nexport interface PostOrgsRequest {\n  /** Organization to create */\n  body: Organization\n}\nexport interface GetOrgsIDRequest {\n  /** The ID of the organization to get. */\n  orgID: string\n}\nexport interface PatchOrgsIDRequest {\n  /** The ID of the organization to get. */\n  orgID: string\n  /** Organization update to apply */\n  body: Organization\n}\nexport interface DeleteOrgsIDRequest {\n  /** The ID of the organization to delete. */\n  orgID: string\n}\nexport interface GetOrgsIDSecretsRequest {\n  /** The organization ID. */\n  orgID: string\n}\nexport interface PatchOrgsIDSecretsRequest {\n  /** The organization ID. */\n  orgID: string\n  /** Secret key value pairs to update/add */\n  body: Secrets\n}\nexport interface PostOrgsIDSecretsRequest {\n  /** The organization ID. */\n  orgID: string\n  /** Secret key to delete */\n  body: SecretKeys\n}\nexport interface GetOrgsIDMembersRequest {\n  /** The organization ID. */\n  orgID: string\n}\nexport interface PostOrgsIDMembersRequest {\n  /** The organization ID. */\n  orgID: string\n  /** User to add as member */\n  body: AddResourceMemberRequestBody\n}\nexport interface DeleteOrgsIDMembersIDRequest {\n  /** The ID of the member to remove. */\n  userID: string\n  /** The organization ID. */\n  orgID: string\n}\nexport interface GetOrgsIDOwnersRequest {\n  /** The organization ID. */\n  orgID: string\n}\nexport interface PostOrgsIDOwnersRequest {\n  /** The organization ID. */\n  orgID: string\n  /** User to add as owner */\n  body: AddResourceMemberRequestBody\n}\nexport interface DeleteOrgsIDOwnersIDRequest {\n  /** The ID of the owner to remove. */\n  userID: string\n  /** The organization ID. */\n  orgID: string\n}\n/**\n * Orgs API\n */\nexport class OrgsAPI {\n  // internal\n  private base: APIBase\n\n  /**\n   * Creates OrgsAPI\n   * @param influxDB - an instance that knows how to communicate with InfluxDB server\n   */\n  constructor(influxDB: InfluxDB) {\n    this.base = new APIBase(influxDB)\n  }\n  /**\n   * List all organizations.\n   * See {@link https://v2.docs.influxdata.com/v2.0/api/#operation/GetOrgs }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  getOrgs(\n    request?: GetOrgsRequest,\n    requestOptions?: RequestOptions\n  ): Promise<Organizations> {\n    return this.base.request(\n      'GET',\n      `/api/v2/orgs${this.base.queryString(request, [\n        'offset',\n        'limit',\n        'descending',\n        'org',\n        'orgID',\n        'userID',\n      ])}`,\n      request,\n      requestOptions\n    )\n  }\n  /**\n   * Create an organization.\n   * See {@link https://v2.docs.influxdata.com/v2.0/api/#operation/PostOrgs }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  postOrgs(\n    request: PostOrgsRequest,\n    requestOptions?: RequestOptions\n  ): Promise<Organization> {\n    return this.base.request(\n      'POST',\n      `/api/v2/orgs`,\n      request,\n      requestOptions,\n      'application/json'\n    )\n  }\n  /**\n   * Retrieve an organization.\n   * See {@link https://v2.docs.influxdata.com/v2.0/api/#operation/GetOrgsID }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  getOrgsID(\n    request: GetOrgsIDRequest,\n    requestOptions?: RequestOptions\n  ): Promise<Organization> {\n    return this.base.request(\n      'GET',\n      `/api/v2/orgs/${request.orgID}`,\n      request,\n      requestOptions\n    )\n  }\n  /**\n   * Update an organization.\n   * See {@link https://v2.docs.influxdata.com/v2.0/api/#operation/PatchOrgsID }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  patchOrgsID(\n    request: PatchOrgsIDRequest,\n    requestOptions?: RequestOptions\n  ): Promise<Organization> {\n    return this.base.request(\n      'PATCH',\n      `/api/v2/orgs/${request.orgID}`,\n      request,\n      requestOptions,\n      'application/json'\n    )\n  }\n  /**\n   * Delete an organization.\n   * See {@link https://v2.docs.influxdata.com/v2.0/api/#operation/DeleteOrgsID }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  deleteOrgsID(\n    request: DeleteOrgsIDRequest,\n    requestOptions?: RequestOptions\n  ): Promise<void> {\n    return this.base.request(\n      'DELETE',\n      `/api/v2/orgs/${request.orgID}`,\n      request,\n      requestOptions\n    )\n  }\n  /**\n   * List all secret keys for an organization.\n   * See {@link https://v2.docs.influxdata.com/v2.0/api/#operation/GetOrgsIDSecrets }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  getOrgsIDSecrets(\n    request: GetOrgsIDSecretsRequest,\n    requestOptions?: RequestOptions\n  ): Promise<SecretKeysResponse> {\n    return this.base.request(\n      'GET',\n      `/api/v2/orgs/${request.orgID}/secrets`,\n      request,\n      requestOptions\n    )\n  }\n  /**\n   * Update secrets in an organization.\n   * See {@link https://v2.docs.influxdata.com/v2.0/api/#operation/PatchOrgsIDSecrets }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  patchOrgsIDSecrets(\n    request: PatchOrgsIDSecretsRequest,\n    requestOptions?: RequestOptions\n  ): Promise<void> {\n    return this.base.request(\n      'PATCH',\n      `/api/v2/orgs/${request.orgID}/secrets`,\n      request,\n      requestOptions,\n      'application/json'\n    )\n  }\n  /**\n   * Delete secrets from an organization.\n   * See {@link https://v2.docs.influxdata.com/v2.0/api/#operation/PostOrgsIDSecrets }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  postOrgsIDSecrets(\n    request: PostOrgsIDSecretsRequest,\n    requestOptions?: RequestOptions\n  ): Promise<void> {\n    return this.base.request(\n      'POST',\n      `/api/v2/orgs/${request.orgID}/secrets/delete`,\n      request,\n      requestOptions,\n      'application/json'\n    )\n  }\n  /**\n   * List all members of an organization.\n   * See {@link https://v2.docs.influxdata.com/v2.0/api/#operation/GetOrgsIDMembers }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  getOrgsIDMembers(\n    request: GetOrgsIDMembersRequest,\n    requestOptions?: RequestOptions\n  ): Promise<ResourceMembers> {\n    return this.base.request(\n      'GET',\n      `/api/v2/orgs/${request.orgID}/members`,\n      request,\n      requestOptions\n    )\n  }\n  /**\n   * Add a member to an organization.\n   * See {@link https://v2.docs.influxdata.com/v2.0/api/#operation/PostOrgsIDMembers }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  postOrgsIDMembers(\n    request: PostOrgsIDMembersRequest,\n    requestOptions?: RequestOptions\n  ): Promise<ResourceMember> {\n    return this.base.request(\n      'POST',\n      `/api/v2/orgs/${request.orgID}/members`,\n      request,\n      requestOptions,\n      'application/json'\n    )\n  }\n  /**\n   * Remove a member from an organization.\n   * See {@link https://v2.docs.influxdata.com/v2.0/api/#operation/DeleteOrgsIDMembersID }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  deleteOrgsIDMembersID(\n    request: DeleteOrgsIDMembersIDRequest,\n    requestOptions?: RequestOptions\n  ): Promise<void> {\n    return this.base.request(\n      'DELETE',\n      `/api/v2/orgs/${request.orgID}/members/${request.userID}`,\n      request,\n      requestOptions\n    )\n  }\n  /**\n   * List all owners of an organization.\n   * See {@link https://v2.docs.influxdata.com/v2.0/api/#operation/GetOrgsIDOwners }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  getOrgsIDOwners(\n    request: GetOrgsIDOwnersRequest,\n    requestOptions?: RequestOptions\n  ): Promise<ResourceOwners> {\n    return this.base.request(\n      'GET',\n      `/api/v2/orgs/${request.orgID}/owners`,\n      request,\n      requestOptions\n    )\n  }\n  /**\n   * Add an owner to an organization.\n   * See {@link https://v2.docs.influxdata.com/v2.0/api/#operation/PostOrgsIDOwners }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  postOrgsIDOwners(\n    request: PostOrgsIDOwnersRequest,\n    requestOptions?: RequestOptions\n  ): Promise<ResourceOwner> {\n    return this.base.request(\n      'POST',\n      `/api/v2/orgs/${request.orgID}/owners`,\n      request,\n      requestOptions,\n      'application/json'\n    )\n  }\n  /**\n   * Remove an owner from an organization.\n   * See {@link https://v2.docs.influxdata.com/v2.0/api/#operation/DeleteOrgsIDOwnersID }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  deleteOrgsIDOwnersID(\n    request: DeleteOrgsIDOwnersIDRequest,\n    requestOptions?: RequestOptions\n  ): Promise<void> {\n    return this.base.request(\n      'DELETE',\n      `/api/v2/orgs/${request.orgID}/owners/${request.userID}`,\n      request,\n      requestOptions\n    )\n  }\n}\n","import {InfluxDB} from '@influxdata/influxdb-client'\nimport {APIBase, RequestOptions} from '../APIBase'\nimport {\n  ASTResponse,\n  AnalyzeQueryResponse,\n  FluxSuggestion,\n  FluxSuggestions,\n  InfluxQLQuery,\n  LanguageRequest,\n  Query,\n} from './types'\n\nexport interface PostQueryAstRequest {\n  /** Analyzed Flux query to generate abstract syntax tree. */\n  body: LanguageRequest\n}\nexport interface GetQuerySuggestionsRequest {}\nexport interface GetQuerySuggestionsNameRequest {\n  /** The name of the branching suggestion. */\n  name: string\n}\nexport interface PostQueryAnalyzeRequest {\n  /** Flux or InfluxQL query to analyze */\n  body: Query\n}\nexport interface PostQueryRequest {\n  /** Flux query or specification to execute */\n  body: Query | InfluxQLQuery\n  /** Specifies the name of the organization executing the query. Takes either the ID or Name interchangeably. If both `orgID` and `org` are specified, `org` takes precedence. */\n  org?: string\n  /** Specifies the ID of the organization executing the query. If both `orgID` and `org` are specified, `org` takes precedence. */\n  orgID?: string\n}\n/**\n * Query API\n */\nexport class QueryAPI {\n  // internal\n  private base: APIBase\n\n  /**\n   * Creates QueryAPI\n   * @param influxDB - an instance that knows how to communicate with InfluxDB server\n   */\n  constructor(influxDB: InfluxDB) {\n    this.base = new APIBase(influxDB)\n  }\n  /**\n   * See {@link https://v2.docs.influxdata.com/v2.0/api/#operation/PostQueryAst }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  postQueryAst(\n    request: PostQueryAstRequest,\n    requestOptions?: RequestOptions\n  ): Promise<ASTResponse> {\n    return this.base.request(\n      'POST',\n      `/api/v2/query/ast`,\n      request,\n      requestOptions,\n      'application/json'\n    )\n  }\n  /**\n   * See {@link https://v2.docs.influxdata.com/v2.0/api/#operation/GetQuerySuggestions }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  getQuerySuggestions(\n    request?: GetQuerySuggestionsRequest,\n    requestOptions?: RequestOptions\n  ): Promise<FluxSuggestions> {\n    return this.base.request(\n      'GET',\n      `/api/v2/query/suggestions`,\n      request,\n      requestOptions\n    )\n  }\n  /**\n   * See {@link https://v2.docs.influxdata.com/v2.0/api/#operation/GetQuerySuggestionsName }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  getQuerySuggestionsName(\n    request: GetQuerySuggestionsNameRequest,\n    requestOptions?: RequestOptions\n  ): Promise<FluxSuggestion> {\n    return this.base.request(\n      'GET',\n      `/api/v2/query/suggestions/${request.name}`,\n      request,\n      requestOptions\n    )\n  }\n  /**\n   * Analyze an InfluxQL or Flux query.\n   * See {@link https://v2.docs.influxdata.com/v2.0/api/#operation/PostQueryAnalyze }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  postQueryAnalyze(\n    request: PostQueryAnalyzeRequest,\n    requestOptions?: RequestOptions\n  ): Promise<AnalyzeQueryResponse> {\n    return this.base.request(\n      'POST',\n      `/api/v2/query/analyze`,\n      request,\n      requestOptions,\n      'application/json'\n    )\n  }\n  /**\n   * Query InfluxDB.\n   * See {@link https://v2.docs.influxdata.com/v2.0/api/#operation/PostQuery }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  postQuery(\n    request: PostQueryRequest,\n    requestOptions?: RequestOptions\n  ): Promise<string> {\n    return this.base.request(\n      'POST',\n      `/api/v2/query${this.base.queryString(request, ['org', 'orgID'])}`,\n      request,\n      requestOptions,\n      'application/json'\n    )\n  }\n}\n","import {InfluxDB} from '@influxdata/influxdb-client'\nimport {APIBase, RequestOptions} from '../APIBase'\nimport {Ready} from './types'\n\nexport interface GetReadyRequest {}\n/**\n * Ready API\n */\nexport class ReadyAPI {\n  // internal\n  private base: APIBase\n\n  /**\n   * Creates ReadyAPI\n   * @param influxDB - an instance that knows how to communicate with InfluxDB server\n   */\n  constructor(influxDB: InfluxDB) {\n    this.base = new APIBase(influxDB)\n  }\n  /**\n   * Get the readiness of an instance at startup.\n   * See {@link https://v2.docs.influxdata.com/v2.0/api/#operation/GetReady }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  getReady(\n    request?: GetReadyRequest,\n    requestOptions?: RequestOptions\n  ): Promise<Ready> {\n    return this.base.request('GET', `/ready`, request, requestOptions)\n  }\n}\n","import {InfluxDB} from '@influxdata/influxdb-client'\nimport {APIBase, RequestOptions} from '../APIBase'\nimport {\n  AddResourceMemberRequestBody,\n  LabelMapping,\n  LabelResponse,\n  LabelsResponse,\n  ResourceMember,\n  ResourceMembers,\n  ResourceOwner,\n  ResourceOwners,\n  ScraperTargetRequest,\n  ScraperTargetResponse,\n  ScraperTargetResponses,\n} from './types'\n\nexport interface GetScrapersRequest {\n  /** Specifies the name of the scraper target. */\n  name?: string\n  /** List of scraper target IDs to return. If both `id` and `owner` are specified, only `id` is used. */\n  id?: any\n  /** Specifies the organization ID of the scraper target. */\n  orgID?: string\n  /** Specifies the organization name of the scraper target. */\n  org?: string\n}\nexport interface PostScrapersRequest {\n  /** Scraper target to create */\n  body: ScraperTargetRequest\n}\nexport interface GetScrapersIDRequest {\n  /** The scraper target ID. */\n  scraperTargetID: string\n}\nexport interface PatchScrapersIDRequest {\n  /** The scraper target ID. */\n  scraperTargetID: string\n  /** Scraper target update to apply */\n  body: ScraperTargetRequest\n}\nexport interface DeleteScrapersIDRequest {\n  /** The scraper target ID. */\n  scraperTargetID: string\n}\nexport interface GetScrapersIDLabelsRequest {\n  /** The scraper target ID. */\n  scraperTargetID: string\n}\nexport interface PostScrapersIDLabelsRequest {\n  /** The scraper target ID. */\n  scraperTargetID: string\n  /** Label to add */\n  body: LabelMapping\n}\nexport interface DeleteScrapersIDLabelsIDRequest {\n  /** The scraper target ID. */\n  scraperTargetID: string\n  /** The label ID. */\n  labelID: string\n}\nexport interface GetScrapersIDMembersRequest {\n  /** The scraper target ID. */\n  scraperTargetID: string\n}\nexport interface PostScrapersIDMembersRequest {\n  /** The scraper target ID. */\n  scraperTargetID: string\n  /** User to add as member */\n  body: AddResourceMemberRequestBody\n}\nexport interface DeleteScrapersIDMembersIDRequest {\n  /** The ID of member to remove. */\n  userID: string\n  /** The scraper target ID. */\n  scraperTargetID: string\n}\nexport interface GetScrapersIDOwnersRequest {\n  /** The scraper target ID. */\n  scraperTargetID: string\n}\nexport interface PostScrapersIDOwnersRequest {\n  /** The scraper target ID. */\n  scraperTargetID: string\n  /** User to add as owner */\n  body: AddResourceMemberRequestBody\n}\nexport interface DeleteScrapersIDOwnersIDRequest {\n  /** The ID of owner to remove. */\n  userID: string\n  /** The scraper target ID. */\n  scraperTargetID: string\n}\n/**\n * Scrapers API\n */\nexport class ScrapersAPI {\n  // internal\n  private base: APIBase\n\n  /**\n   * Creates ScrapersAPI\n   * @param influxDB - an instance that knows how to communicate with InfluxDB server\n   */\n  constructor(influxDB: InfluxDB) {\n    this.base = new APIBase(influxDB)\n  }\n  /**\n   * Get all scraper targets.\n   * See {@link https://v2.docs.influxdata.com/v2.0/api/#operation/GetScrapers }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  getScrapers(\n    request?: GetScrapersRequest,\n    requestOptions?: RequestOptions\n  ): Promise<ScraperTargetResponses> {\n    return this.base.request(\n      'GET',\n      `/api/v2/scrapers${this.base.queryString(request, [\n        'name',\n        'id',\n        'orgID',\n        'org',\n      ])}`,\n      request,\n      requestOptions\n    )\n  }\n  /**\n   * Create a scraper target.\n   * See {@link https://v2.docs.influxdata.com/v2.0/api/#operation/PostScrapers }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  postScrapers(\n    request: PostScrapersRequest,\n    requestOptions?: RequestOptions\n  ): Promise<ScraperTargetResponse> {\n    return this.base.request(\n      'POST',\n      `/api/v2/scrapers`,\n      request,\n      requestOptions,\n      'application/json'\n    )\n  }\n  /**\n   * Get a scraper target by ID.\n   * See {@link https://v2.docs.influxdata.com/v2.0/api/#operation/GetScrapersID }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  getScrapersID(\n    request: GetScrapersIDRequest,\n    requestOptions?: RequestOptions\n  ): Promise<ScraperTargetResponse> {\n    return this.base.request(\n      'GET',\n      `/api/v2/scrapers/${request.scraperTargetID}`,\n      request,\n      requestOptions\n    )\n  }\n  /**\n   * Update a scraper target.\n   * See {@link https://v2.docs.influxdata.com/v2.0/api/#operation/PatchScrapersID }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  patchScrapersID(\n    request: PatchScrapersIDRequest,\n    requestOptions?: RequestOptions\n  ): Promise<ScraperTargetResponse> {\n    return this.base.request(\n      'PATCH',\n      `/api/v2/scrapers/${request.scraperTargetID}`,\n      request,\n      requestOptions,\n      'application/json'\n    )\n  }\n  /**\n   * Delete a scraper target.\n   * See {@link https://v2.docs.influxdata.com/v2.0/api/#operation/DeleteScrapersID }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  deleteScrapersID(\n    request: DeleteScrapersIDRequest,\n    requestOptions?: RequestOptions\n  ): Promise<void> {\n    return this.base.request(\n      'DELETE',\n      `/api/v2/scrapers/${request.scraperTargetID}`,\n      request,\n      requestOptions\n    )\n  }\n  /**\n   * List all labels for a scraper target.\n   * See {@link https://v2.docs.influxdata.com/v2.0/api/#operation/GetScrapersIDLabels }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  getScrapersIDLabels(\n    request: GetScrapersIDLabelsRequest,\n    requestOptions?: RequestOptions\n  ): Promise<LabelsResponse> {\n    return this.base.request(\n      'GET',\n      `/api/v2/scrapers/${request.scraperTargetID}/labels`,\n      request,\n      requestOptions\n    )\n  }\n  /**\n   * Add a label to a scraper target.\n   * See {@link https://v2.docs.influxdata.com/v2.0/api/#operation/PostScrapersIDLabels }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  postScrapersIDLabels(\n    request: PostScrapersIDLabelsRequest,\n    requestOptions?: RequestOptions\n  ): Promise<LabelResponse> {\n    return this.base.request(\n      'POST',\n      `/api/v2/scrapers/${request.scraperTargetID}/labels`,\n      request,\n      requestOptions,\n      'application/json'\n    )\n  }\n  /**\n   * Delete a label from a scraper target.\n   * See {@link https://v2.docs.influxdata.com/v2.0/api/#operation/DeleteScrapersIDLabelsID }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  deleteScrapersIDLabelsID(\n    request: DeleteScrapersIDLabelsIDRequest,\n    requestOptions?: RequestOptions\n  ): Promise<void> {\n    return this.base.request(\n      'DELETE',\n      `/api/v2/scrapers/${request.scraperTargetID}/labels/${request.labelID}`,\n      request,\n      requestOptions\n    )\n  }\n  /**\n   * List all users with member privileges for a scraper target.\n   * See {@link https://v2.docs.influxdata.com/v2.0/api/#operation/GetScrapersIDMembers }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  getScrapersIDMembers(\n    request: GetScrapersIDMembersRequest,\n    requestOptions?: RequestOptions\n  ): Promise<ResourceMembers> {\n    return this.base.request(\n      'GET',\n      `/api/v2/scrapers/${request.scraperTargetID}/members`,\n      request,\n      requestOptions\n    )\n  }\n  /**\n   * Add a member to a scraper target.\n   * See {@link https://v2.docs.influxdata.com/v2.0/api/#operation/PostScrapersIDMembers }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  postScrapersIDMembers(\n    request: PostScrapersIDMembersRequest,\n    requestOptions?: RequestOptions\n  ): Promise<ResourceMember> {\n    return this.base.request(\n      'POST',\n      `/api/v2/scrapers/${request.scraperTargetID}/members`,\n      request,\n      requestOptions,\n      'application/json'\n    )\n  }\n  /**\n   * Remove a member from a scraper target.\n   * See {@link https://v2.docs.influxdata.com/v2.0/api/#operation/DeleteScrapersIDMembersID }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  deleteScrapersIDMembersID(\n    request: DeleteScrapersIDMembersIDRequest,\n    requestOptions?: RequestOptions\n  ): Promise<void> {\n    return this.base.request(\n      'DELETE',\n      `/api/v2/scrapers/${request.scraperTargetID}/members/${request.userID}`,\n      request,\n      requestOptions\n    )\n  }\n  /**\n   * List all owners of a scraper target.\n   * See {@link https://v2.docs.influxdata.com/v2.0/api/#operation/GetScrapersIDOwners }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  getScrapersIDOwners(\n    request: GetScrapersIDOwnersRequest,\n    requestOptions?: RequestOptions\n  ): Promise<ResourceOwners> {\n    return this.base.request(\n      'GET',\n      `/api/v2/scrapers/${request.scraperTargetID}/owners`,\n      request,\n      requestOptions\n    )\n  }\n  /**\n   * Add an owner to a scraper target.\n   * See {@link https://v2.docs.influxdata.com/v2.0/api/#operation/PostScrapersIDOwners }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  postScrapersIDOwners(\n    request: PostScrapersIDOwnersRequest,\n    requestOptions?: RequestOptions\n  ): Promise<ResourceOwner> {\n    return this.base.request(\n      'POST',\n      `/api/v2/scrapers/${request.scraperTargetID}/owners`,\n      request,\n      requestOptions,\n      'application/json'\n    )\n  }\n  /**\n   * Remove an owner from a scraper target.\n   * See {@link https://v2.docs.influxdata.com/v2.0/api/#operation/DeleteScrapersIDOwnersID }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  deleteScrapersIDOwnersID(\n    request: DeleteScrapersIDOwnersIDRequest,\n    requestOptions?: RequestOptions\n  ): Promise<void> {\n    return this.base.request(\n      'DELETE',\n      `/api/v2/scrapers/${request.scraperTargetID}/owners/${request.userID}`,\n      request,\n      requestOptions\n    )\n  }\n}\n","import {InfluxDB} from '@influxdata/influxdb-client'\nimport {APIBase, RequestOptions} from '../APIBase'\nimport {IsOnboarding, OnboardingRequest, OnboardingResponse} from './types'\n\nexport interface GetSetupRequest {}\nexport interface PostSetupRequest {\n  /** Source to create */\n  body: OnboardingRequest\n}\nexport interface PostSetupUserRequest {\n  /** Source to create */\n  body: OnboardingRequest\n}\n/**\n * Setup API\n */\nexport class SetupAPI {\n  // internal\n  private base: APIBase\n\n  /**\n   * Creates SetupAPI\n   * @param influxDB - an instance that knows how to communicate with InfluxDB server\n   */\n  constructor(influxDB: InfluxDB) {\n    this.base = new APIBase(influxDB)\n  }\n  /**\n   * Check if database has default user, org, bucket.\n   * See {@link https://v2.docs.influxdata.com/v2.0/api/#operation/GetSetup }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  getSetup(\n    request?: GetSetupRequest,\n    requestOptions?: RequestOptions\n  ): Promise<IsOnboarding> {\n    return this.base.request('GET', `/api/v2/setup`, request, requestOptions)\n  }\n  /**\n   * Set up initial user, org and bucket.\n   * See {@link https://v2.docs.influxdata.com/v2.0/api/#operation/PostSetup }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  postSetup(\n    request: PostSetupRequest,\n    requestOptions?: RequestOptions\n  ): Promise<OnboardingResponse> {\n    return this.base.request(\n      'POST',\n      `/api/v2/setup`,\n      request,\n      requestOptions,\n      'application/json'\n    )\n  }\n  /**\n   * Set up a new user, org and bucket.\n   * See {@link https://v2.docs.influxdata.com/v2.0/api/#operation/PostSetupUser }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  postSetupUser(\n    request: PostSetupUserRequest,\n    requestOptions?: RequestOptions\n  ): Promise<OnboardingResponse> {\n    return this.base.request(\n      'POST',\n      `/api/v2/setup/user`,\n      request,\n      requestOptions,\n      'application/json'\n    )\n  }\n}\n","import {InfluxDB} from '@influxdata/influxdb-client'\nimport {APIBase, RequestOptions} from '../APIBase'\n\nexport interface PostSigninRequest {\n  auth: {user: string; password: string}\n}\n/**\n * Signin API\n */\nexport class SigninAPI {\n  // internal\n  private base: APIBase\n\n  /**\n   * Creates SigninAPI\n   * @param influxDB - an instance that knows how to communicate with InfluxDB server\n   */\n  constructor(influxDB: InfluxDB) {\n    this.base = new APIBase(influxDB)\n  }\n  /**\n   * Exchange basic auth credentials for session.\n   * See {@link https://v2.docs.influxdata.com/v2.0/api/#operation/PostSignin }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  postSignin(\n    request: PostSigninRequest,\n    requestOptions?: RequestOptions\n  ): Promise<void> {\n    return this.base.request('POST', `/api/v2/signin`, request, requestOptions)\n  }\n}\n","import {InfluxDB} from '@influxdata/influxdb-client'\nimport {APIBase, RequestOptions} from '../APIBase'\n\nexport interface PostSignoutRequest {}\n/**\n * Signout API\n */\nexport class SignoutAPI {\n  // internal\n  private base: APIBase\n\n  /**\n   * Creates SignoutAPI\n   * @param influxDB - an instance that knows how to communicate with InfluxDB server\n   */\n  constructor(influxDB: InfluxDB) {\n    this.base = new APIBase(influxDB)\n  }\n  /**\n   * Expire the current session.\n   * See {@link https://v2.docs.influxdata.com/v2.0/api/#operation/PostSignout }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  postSignout(\n    request?: PostSignoutRequest,\n    requestOptions?: RequestOptions\n  ): Promise<void> {\n    return this.base.request('POST', `/api/v2/signout`, request, requestOptions)\n  }\n}\n","import {InfluxDB} from '@influxdata/influxdb-client'\nimport {APIBase, RequestOptions} from '../APIBase'\nimport {Buckets, HealthCheck, Source, Sources} from './types'\n\nexport interface GetSourcesRequest {\n  /** The organization name. */\n  org?: string\n}\nexport interface PostSourcesRequest {\n  /** Source to create */\n  body: Source\n}\nexport interface GetSourcesIDRequest {\n  /** The source ID. */\n  sourceID: string\n}\nexport interface PatchSourcesIDRequest {\n  /** The source ID. */\n  sourceID: string\n  /** Source update */\n  body: Source\n}\nexport interface DeleteSourcesIDRequest {\n  /** The source ID. */\n  sourceID: string\n}\nexport interface GetSourcesIDHealthRequest {\n  /** The source ID. */\n  sourceID: string\n}\nexport interface GetSourcesIDBucketsRequest {\n  /** The source ID. */\n  sourceID: string\n  /** The organization name. */\n  org?: string\n}\n/**\n * Sources API\n */\nexport class SourcesAPI {\n  // internal\n  private base: APIBase\n\n  /**\n   * Creates SourcesAPI\n   * @param influxDB - an instance that knows how to communicate with InfluxDB server\n   */\n  constructor(influxDB: InfluxDB) {\n    this.base = new APIBase(influxDB)\n  }\n  /**\n   * Get all sources.\n   * See {@link https://v2.docs.influxdata.com/v2.0/api/#operation/GetSources }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  getSources(\n    request?: GetSourcesRequest,\n    requestOptions?: RequestOptions\n  ): Promise<Sources> {\n    return this.base.request(\n      'GET',\n      `/api/v2/sources${this.base.queryString(request, ['org'])}`,\n      request,\n      requestOptions\n    )\n  }\n  /**\n   * Creates a source.\n   * See {@link https://v2.docs.influxdata.com/v2.0/api/#operation/PostSources }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  postSources(\n    request: PostSourcesRequest,\n    requestOptions?: RequestOptions\n  ): Promise<Source> {\n    return this.base.request(\n      'POST',\n      `/api/v2/sources`,\n      request,\n      requestOptions,\n      'application/json'\n    )\n  }\n  /**\n   * Get a source.\n   * See {@link https://v2.docs.influxdata.com/v2.0/api/#operation/GetSourcesID }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  getSourcesID(\n    request: GetSourcesIDRequest,\n    requestOptions?: RequestOptions\n  ): Promise<Source> {\n    return this.base.request(\n      'GET',\n      `/api/v2/sources/${request.sourceID}`,\n      request,\n      requestOptions\n    )\n  }\n  /**\n   * Update a Source.\n   * See {@link https://v2.docs.influxdata.com/v2.0/api/#operation/PatchSourcesID }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  patchSourcesID(\n    request: PatchSourcesIDRequest,\n    requestOptions?: RequestOptions\n  ): Promise<Source> {\n    return this.base.request(\n      'PATCH',\n      `/api/v2/sources/${request.sourceID}`,\n      request,\n      requestOptions,\n      'application/json'\n    )\n  }\n  /**\n   * Delete a source.\n   * See {@link https://v2.docs.influxdata.com/v2.0/api/#operation/DeleteSourcesID }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  deleteSourcesID(\n    request: DeleteSourcesIDRequest,\n    requestOptions?: RequestOptions\n  ): Promise<void> {\n    return this.base.request(\n      'DELETE',\n      `/api/v2/sources/${request.sourceID}`,\n      request,\n      requestOptions\n    )\n  }\n  /**\n   * Get the health of a source.\n   * See {@link https://v2.docs.influxdata.com/v2.0/api/#operation/GetSourcesIDHealth }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  getSourcesIDHealth(\n    request: GetSourcesIDHealthRequest,\n    requestOptions?: RequestOptions\n  ): Promise<HealthCheck> {\n    return this.base.request(\n      'GET',\n      `/api/v2/sources/${request.sourceID}/health`,\n      request,\n      requestOptions\n    )\n  }\n  /**\n   * Get buckets in a source.\n   * See {@link https://v2.docs.influxdata.com/v2.0/api/#operation/GetSourcesIDBuckets }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  getSourcesIDBuckets(\n    request: GetSourcesIDBucketsRequest,\n    requestOptions?: RequestOptions\n  ): Promise<Buckets> {\n    return this.base.request(\n      'GET',\n      `/api/v2/sources/${\n        request.sourceID\n      }/buckets${this.base.queryString(request, ['org'])}`,\n      request,\n      requestOptions\n    )\n  }\n}\n","import {InfluxDB} from '@influxdata/influxdb-client'\nimport {APIBase, RequestOptions} from '../APIBase'\nimport {Stack} from './types'\n\nexport interface ListStacksRequest {\n  /** The organization id of the stacks */\n  orgID: string\n  /** A collection of names to filter the list by. */\n  name?: string\n  /** A collection of stackIDs to filter the list by. */\n  stackID?: string\n}\nexport interface CreateStackRequest {\n  /** Stack to create. */\n  body: {\n    orgID?: string\n    name?: string\n    description?: string\n    urls?: string[]\n  }\n}\nexport interface ReadStackRequest {\n  /** The stack id */\n  stack_id: string\n}\nexport interface UpdateStackRequest {\n  /** The stack id */\n  stack_id: string\n  /** Influx stack to update. */\n  body: {\n    name?: string\n    description?: string\n    templateURLs?: string[]\n    additionalResources?: Array<{\n      resourceID: string\n      kind: string\n      templateMetaName?: string\n    }>\n  }\n}\nexport interface DeleteStackRequest {\n  /** The stack id */\n  stack_id: string\n  /** The organization id of the user */\n  orgID: string\n}\nexport interface UninstallStackRequest {\n  /** The stack id */\n  stack_id: string\n}\n/**\n * Stacks API\n */\nexport class StacksAPI {\n  // internal\n  private base: APIBase\n\n  /**\n   * Creates StacksAPI\n   * @param influxDB - an instance that knows how to communicate with InfluxDB server\n   */\n  constructor(influxDB: InfluxDB) {\n    this.base = new APIBase(influxDB)\n  }\n  /**\n   * Grab a list of installed InfluxDB Templates.\n   * See {@link https://v2.docs.influxdata.com/v2.0/api/#operation/ListStacks }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  listStacks(\n    request: ListStacksRequest,\n    requestOptions?: RequestOptions\n  ): Promise<{\n    stacks?: Stack[]\n  }> {\n    return this.base.request(\n      'GET',\n      `/api/v2/stacks${this.base.queryString(request, [\n        'orgID',\n        'name',\n        'stackID',\n      ])}`,\n      request,\n      requestOptions\n    )\n  }\n  /**\n   * Create a new stack.\n   * See {@link https://v2.docs.influxdata.com/v2.0/api/#operation/CreateStack }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  createStack(\n    request: CreateStackRequest,\n    requestOptions?: RequestOptions\n  ): Promise<Stack> {\n    return this.base.request(\n      'POST',\n      `/api/v2/stacks`,\n      request,\n      requestOptions,\n      'application/json'\n    )\n  }\n  /**\n   * Grab a stack by its ID.\n   * See {@link https://v2.docs.influxdata.com/v2.0/api/#operation/ReadStack }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  readStack(\n    request: ReadStackRequest,\n    requestOptions?: RequestOptions\n  ): Promise<Stack> {\n    return this.base.request(\n      'GET',\n      `/api/v2/stacks/${request.stack_id}`,\n      request,\n      requestOptions\n    )\n  }\n  /**\n   * Update an InfluxDB Stack.\n   * See {@link https://v2.docs.influxdata.com/v2.0/api/#operation/UpdateStack }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  updateStack(\n    request: UpdateStackRequest,\n    requestOptions?: RequestOptions\n  ): Promise<Stack> {\n    return this.base.request(\n      'PATCH',\n      `/api/v2/stacks/${request.stack_id}`,\n      request,\n      requestOptions,\n      'application/json'\n    )\n  }\n  /**\n   * Delete a stack and remove all its associated resources.\n   * See {@link https://v2.docs.influxdata.com/v2.0/api/#operation/DeleteStack }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  deleteStack(\n    request: DeleteStackRequest,\n    requestOptions?: RequestOptions\n  ): Promise<void> {\n    return this.base.request(\n      'DELETE',\n      `/api/v2/stacks/${request.stack_id}${this.base.queryString(request, [\n        'orgID',\n      ])}`,\n      request,\n      requestOptions\n    )\n  }\n  /**\n   * Uninstall an InfluxDB Stack.\n   * See {@link https://v2.docs.influxdata.com/v2.0/api/#operation/UninstallStack }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  uninstallStack(\n    request: UninstallStackRequest,\n    requestOptions?: RequestOptions\n  ): Promise<Stack> {\n    return this.base.request(\n      'POST',\n      `/api/v2/stacks/${request.stack_id}/uninstall`,\n      request,\n      requestOptions\n    )\n  }\n}\n","import {InfluxDB} from '@influxdata/influxdb-client'\nimport {APIBase, RequestOptions} from '../APIBase'\nimport {\n  AddResourceMemberRequestBody,\n  LabelMapping,\n  LabelResponse,\n  LabelsResponse,\n  Logs,\n  ResourceMember,\n  ResourceMembers,\n  ResourceOwner,\n  ResourceOwners,\n  Run,\n  RunManually,\n  Runs,\n  Task,\n  TaskCreateRequest,\n  TaskUpdateRequest,\n  Tasks,\n} from './types'\n\nexport interface GetTasksRequest {\n  /** Returns task with a specific name. */\n  name?: string\n  /** Return tasks after a specified ID. */\n  after?: string\n  /** Filter tasks to a specific user ID. */\n  user?: string\n  /** Filter tasks to a specific organization name. */\n  org?: string\n  /** Filter tasks to a specific organization ID. */\n  orgID?: string\n  /** Filter tasks by a status--\"inactive\" or \"active\". */\n  status?: string\n  /** The number of tasks to return */\n  limit?: number\n}\nexport interface PostTasksRequest {\n  /** Task to create */\n  body: TaskCreateRequest\n}\nexport interface GetTasksIDRequest {\n  /** The task ID. */\n  taskID: string\n}\nexport interface PatchTasksIDRequest {\n  /** The task ID. */\n  taskID: string\n  /** Task update to apply */\n  body: TaskUpdateRequest\n}\nexport interface DeleteTasksIDRequest {\n  /** The ID of the task to delete. */\n  taskID: string\n}\nexport interface GetTasksIDRunsRequest {\n  /** The ID of the task to get runs for. */\n  taskID: string\n  /** Returns runs after a specific ID. */\n  after?: string\n  /** The number of runs to return */\n  limit?: number\n  /** Filter runs to those scheduled after this time, RFC3339 */\n  afterTime?: string\n  /** Filter runs to those scheduled before this time, RFC3339 */\n  beforeTime?: string\n}\nexport interface PostTasksIDRunsRequest {\n  taskID: string\n  /** entity body */\n  body: RunManually\n}\nexport interface GetTasksIDRunsIDRequest {\n  /** The task ID. */\n  taskID: string\n  /** The run ID. */\n  runID: string\n}\nexport interface DeleteTasksIDRunsIDRequest {\n  /** The task ID. */\n  taskID: string\n  /** The run ID. */\n  runID: string\n}\nexport interface PostTasksIDRunsIDRetryRequest {\n  /** The task ID. */\n  taskID: string\n  /** The run ID. */\n  runID: string\n}\nexport interface GetTasksIDLogsRequest {\n  /** The task ID. */\n  taskID: string\n}\nexport interface GetTasksIDRunsIDLogsRequest {\n  /** ID of task to get logs for. */\n  taskID: string\n  /** ID of run to get logs for. */\n  runID: string\n}\nexport interface GetTasksIDLabelsRequest {\n  /** The task ID. */\n  taskID: string\n}\nexport interface PostTasksIDLabelsRequest {\n  /** The task ID. */\n  taskID: string\n  /** Label to add */\n  body: LabelMapping\n}\nexport interface DeleteTasksIDLabelsIDRequest {\n  /** The task ID. */\n  taskID: string\n  /** The label ID. */\n  labelID: string\n}\nexport interface GetTasksIDMembersRequest {\n  /** The task ID. */\n  taskID: string\n}\nexport interface PostTasksIDMembersRequest {\n  /** The task ID. */\n  taskID: string\n  /** User to add as member */\n  body: AddResourceMemberRequestBody\n}\nexport interface DeleteTasksIDMembersIDRequest {\n  /** The ID of the member to remove. */\n  userID: string\n  /** The task ID. */\n  taskID: string\n}\nexport interface GetTasksIDOwnersRequest {\n  /** The task ID. */\n  taskID: string\n}\nexport interface PostTasksIDOwnersRequest {\n  /** The task ID. */\n  taskID: string\n  /** User to add as owner */\n  body: AddResourceMemberRequestBody\n}\nexport interface DeleteTasksIDOwnersIDRequest {\n  /** The ID of the owner to remove. */\n  userID: string\n  /** The task ID. */\n  taskID: string\n}\n/**\n * Tasks API\n */\nexport class TasksAPI {\n  // internal\n  private base: APIBase\n\n  /**\n   * Creates TasksAPI\n   * @param influxDB - an instance that knows how to communicate with InfluxDB server\n   */\n  constructor(influxDB: InfluxDB) {\n    this.base = new APIBase(influxDB)\n  }\n  /**\n   * List all tasks.\n   * See {@link https://v2.docs.influxdata.com/v2.0/api/#operation/GetTasks }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  getTasks(\n    request?: GetTasksRequest,\n    requestOptions?: RequestOptions\n  ): Promise<Tasks> {\n    return this.base.request(\n      'GET',\n      `/api/v2/tasks${this.base.queryString(request, [\n        'name',\n        'after',\n        'user',\n        'org',\n        'orgID',\n        'status',\n        'limit',\n      ])}`,\n      request,\n      requestOptions\n    )\n  }\n  /**\n   * Create a new task.\n   * See {@link https://v2.docs.influxdata.com/v2.0/api/#operation/PostTasks }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  postTasks(\n    request: PostTasksRequest,\n    requestOptions?: RequestOptions\n  ): Promise<Task> {\n    return this.base.request(\n      'POST',\n      `/api/v2/tasks`,\n      request,\n      requestOptions,\n      'application/json'\n    )\n  }\n  /**\n   * Retrieve a task.\n   * See {@link https://v2.docs.influxdata.com/v2.0/api/#operation/GetTasksID }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  getTasksID(\n    request: GetTasksIDRequest,\n    requestOptions?: RequestOptions\n  ): Promise<Task> {\n    return this.base.request(\n      'GET',\n      `/api/v2/tasks/${request.taskID}`,\n      request,\n      requestOptions\n    )\n  }\n  /**\n   * Update a task.\n   * See {@link https://v2.docs.influxdata.com/v2.0/api/#operation/PatchTasksID }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  patchTasksID(\n    request: PatchTasksIDRequest,\n    requestOptions?: RequestOptions\n  ): Promise<Task> {\n    return this.base.request(\n      'PATCH',\n      `/api/v2/tasks/${request.taskID}`,\n      request,\n      requestOptions,\n      'application/json'\n    )\n  }\n  /**\n   * Delete a task.\n   * See {@link https://v2.docs.influxdata.com/v2.0/api/#operation/DeleteTasksID }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  deleteTasksID(\n    request: DeleteTasksIDRequest,\n    requestOptions?: RequestOptions\n  ): Promise<void> {\n    return this.base.request(\n      'DELETE',\n      `/api/v2/tasks/${request.taskID}`,\n      request,\n      requestOptions\n    )\n  }\n  /**\n   * List runs for a task.\n   * See {@link https://v2.docs.influxdata.com/v2.0/api/#operation/GetTasksIDRuns }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  getTasksIDRuns(\n    request: GetTasksIDRunsRequest,\n    requestOptions?: RequestOptions\n  ): Promise<Runs> {\n    return this.base.request(\n      'GET',\n      `/api/v2/tasks/${request.taskID}/runs${this.base.queryString(request, [\n        'after',\n        'limit',\n        'afterTime',\n        'beforeTime',\n      ])}`,\n      request,\n      requestOptions\n    )\n  }\n  /**\n   * Manually start a task run, overriding the current schedule.\n   * See {@link https://v2.docs.influxdata.com/v2.0/api/#operation/PostTasksIDRuns }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  postTasksIDRuns(\n    request: PostTasksIDRunsRequest,\n    requestOptions?: RequestOptions\n  ): Promise<Run> {\n    return this.base.request(\n      'POST',\n      `/api/v2/tasks/${request.taskID}/runs`,\n      request,\n      requestOptions,\n      'application/json'\n    )\n  }\n  /**\n   * Retrieve a single run for a task.\n   * See {@link https://v2.docs.influxdata.com/v2.0/api/#operation/GetTasksIDRunsID }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  getTasksIDRunsID(\n    request: GetTasksIDRunsIDRequest,\n    requestOptions?: RequestOptions\n  ): Promise<Run> {\n    return this.base.request(\n      'GET',\n      `/api/v2/tasks/${request.taskID}/runs/${request.runID}`,\n      request,\n      requestOptions\n    )\n  }\n  /**\n   * Cancel a running task.\n   * See {@link https://v2.docs.influxdata.com/v2.0/api/#operation/DeleteTasksIDRunsID }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  deleteTasksIDRunsID(\n    request: DeleteTasksIDRunsIDRequest,\n    requestOptions?: RequestOptions\n  ): Promise<void> {\n    return this.base.request(\n      'DELETE',\n      `/api/v2/tasks/${request.taskID}/runs/${request.runID}`,\n      request,\n      requestOptions\n    )\n  }\n  /**\n   * Retry a task run.\n   * See {@link https://v2.docs.influxdata.com/v2.0/api/#operation/PostTasksIDRunsIDRetry }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  postTasksIDRunsIDRetry(\n    request: PostTasksIDRunsIDRetryRequest,\n    requestOptions?: RequestOptions\n  ): Promise<Run> {\n    return this.base.request(\n      'POST',\n      `/api/v2/tasks/${request.taskID}/runs/${request.runID}/retry`,\n      request,\n      requestOptions\n    )\n  }\n  /**\n   * Retrieve all logs for a task.\n   * See {@link https://v2.docs.influxdata.com/v2.0/api/#operation/GetTasksIDLogs }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  getTasksIDLogs(\n    request: GetTasksIDLogsRequest,\n    requestOptions?: RequestOptions\n  ): Promise<Logs> {\n    return this.base.request(\n      'GET',\n      `/api/v2/tasks/${request.taskID}/logs`,\n      request,\n      requestOptions\n    )\n  }\n  /**\n   * Retrieve all logs for a run.\n   * See {@link https://v2.docs.influxdata.com/v2.0/api/#operation/GetTasksIDRunsIDLogs }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  getTasksIDRunsIDLogs(\n    request: GetTasksIDRunsIDLogsRequest,\n    requestOptions?: RequestOptions\n  ): Promise<Logs> {\n    return this.base.request(\n      'GET',\n      `/api/v2/tasks/${request.taskID}/runs/${request.runID}/logs`,\n      request,\n      requestOptions\n    )\n  }\n  /**\n   * List all labels for a task.\n   * See {@link https://v2.docs.influxdata.com/v2.0/api/#operation/GetTasksIDLabels }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  getTasksIDLabels(\n    request: GetTasksIDLabelsRequest,\n    requestOptions?: RequestOptions\n  ): Promise<LabelsResponse> {\n    return this.base.request(\n      'GET',\n      `/api/v2/tasks/${request.taskID}/labels`,\n      request,\n      requestOptions\n    )\n  }\n  /**\n   * Add a label to a task.\n   * See {@link https://v2.docs.influxdata.com/v2.0/api/#operation/PostTasksIDLabels }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  postTasksIDLabels(\n    request: PostTasksIDLabelsRequest,\n    requestOptions?: RequestOptions\n  ): Promise<LabelResponse> {\n    return this.base.request(\n      'POST',\n      `/api/v2/tasks/${request.taskID}/labels`,\n      request,\n      requestOptions,\n      'application/json'\n    )\n  }\n  /**\n   * Delete a label from a task.\n   * See {@link https://v2.docs.influxdata.com/v2.0/api/#operation/DeleteTasksIDLabelsID }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  deleteTasksIDLabelsID(\n    request: DeleteTasksIDLabelsIDRequest,\n    requestOptions?: RequestOptions\n  ): Promise<void> {\n    return this.base.request(\n      'DELETE',\n      `/api/v2/tasks/${request.taskID}/labels/${request.labelID}`,\n      request,\n      requestOptions\n    )\n  }\n  /**\n   * List all task members.\n   * See {@link https://v2.docs.influxdata.com/v2.0/api/#operation/GetTasksIDMembers }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  getTasksIDMembers(\n    request: GetTasksIDMembersRequest,\n    requestOptions?: RequestOptions\n  ): Promise<ResourceMembers> {\n    return this.base.request(\n      'GET',\n      `/api/v2/tasks/${request.taskID}/members`,\n      request,\n      requestOptions\n    )\n  }\n  /**\n   * Add a member to a task.\n   * See {@link https://v2.docs.influxdata.com/v2.0/api/#operation/PostTasksIDMembers }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  postTasksIDMembers(\n    request: PostTasksIDMembersRequest,\n    requestOptions?: RequestOptions\n  ): Promise<ResourceMember> {\n    return this.base.request(\n      'POST',\n      `/api/v2/tasks/${request.taskID}/members`,\n      request,\n      requestOptions,\n      'application/json'\n    )\n  }\n  /**\n   * Remove a member from a task.\n   * See {@link https://v2.docs.influxdata.com/v2.0/api/#operation/DeleteTasksIDMembersID }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  deleteTasksIDMembersID(\n    request: DeleteTasksIDMembersIDRequest,\n    requestOptions?: RequestOptions\n  ): Promise<void> {\n    return this.base.request(\n      'DELETE',\n      `/api/v2/tasks/${request.taskID}/members/${request.userID}`,\n      request,\n      requestOptions\n    )\n  }\n  /**\n   * List all owners of a task.\n   * See {@link https://v2.docs.influxdata.com/v2.0/api/#operation/GetTasksIDOwners }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  getTasksIDOwners(\n    request: GetTasksIDOwnersRequest,\n    requestOptions?: RequestOptions\n  ): Promise<ResourceOwners> {\n    return this.base.request(\n      'GET',\n      `/api/v2/tasks/${request.taskID}/owners`,\n      request,\n      requestOptions\n    )\n  }\n  /**\n   * Add an owner to a task.\n   * See {@link https://v2.docs.influxdata.com/v2.0/api/#operation/PostTasksIDOwners }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  postTasksIDOwners(\n    request: PostTasksIDOwnersRequest,\n    requestOptions?: RequestOptions\n  ): Promise<ResourceOwner> {\n    return this.base.request(\n      'POST',\n      `/api/v2/tasks/${request.taskID}/owners`,\n      request,\n      requestOptions,\n      'application/json'\n    )\n  }\n  /**\n   * Remove an owner from a task.\n   * See {@link https://v2.docs.influxdata.com/v2.0/api/#operation/DeleteTasksIDOwnersID }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  deleteTasksIDOwnersID(\n    request: DeleteTasksIDOwnersIDRequest,\n    requestOptions?: RequestOptions\n  ): Promise<void> {\n    return this.base.request(\n      'DELETE',\n      `/api/v2/tasks/${request.taskID}/owners/${request.userID}`,\n      request,\n      requestOptions\n    )\n  }\n}\n","import {InfluxDB} from '@influxdata/influxdb-client'\nimport {APIBase, RequestOptions} from '../APIBase'\nimport {TelegrafPlugins} from './types'\n\nexport interface GetTelegrafPluginsRequest {\n  /** The type of plugin desired. */\n  type?: string\n}\n/**\n * Telegraf API\n */\nexport class TelegrafAPI {\n  // internal\n  private base: APIBase\n\n  /**\n   * Creates TelegrafAPI\n   * @param influxDB - an instance that knows how to communicate with InfluxDB server\n   */\n  constructor(influxDB: InfluxDB) {\n    this.base = new APIBase(influxDB)\n  }\n  /**\n   * See {@link https://v2.docs.influxdata.com/v2.0/api/#operation/GetTelegrafPlugins }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  getTelegrafPlugins(\n    request?: GetTelegrafPluginsRequest,\n    requestOptions?: RequestOptions\n  ): Promise<TelegrafPlugins> {\n    return this.base.request(\n      'GET',\n      `/api/v2/telegraf/plugins${this.base.queryString(request, ['type'])}`,\n      request,\n      requestOptions\n    )\n  }\n}\n","import {InfluxDB} from '@influxdata/influxdb-client'\nimport {APIBase, RequestOptions} from '../APIBase'\nimport {\n  AddResourceMemberRequestBody,\n  LabelMapping,\n  LabelResponse,\n  LabelsResponse,\n  ResourceMember,\n  ResourceMembers,\n  ResourceOwner,\n  ResourceOwners,\n  Telegraf,\n  TelegrafRequest,\n  Telegrafs,\n} from './types'\n\nexport interface GetTelegrafsRequest {\n  /** The organization ID the Telegraf config belongs to. */\n  orgID?: string\n}\nexport interface PostTelegrafsRequest {\n  /** Telegraf config to create */\n  body: TelegrafRequest\n}\nexport interface GetTelegrafsIDRequest {\n  /** The Telegraf config ID. */\n  telegrafID: string\n}\nexport interface PutTelegrafsIDRequest {\n  /** The Telegraf config ID. */\n  telegrafID: string\n  /** Telegraf config update to apply */\n  body: TelegrafRequest\n}\nexport interface DeleteTelegrafsIDRequest {\n  /** The Telegraf config ID. */\n  telegrafID: string\n}\nexport interface GetTelegrafsIDLabelsRequest {\n  /** The Telegraf config ID. */\n  telegrafID: string\n}\nexport interface PostTelegrafsIDLabelsRequest {\n  /** The Telegraf config ID. */\n  telegrafID: string\n  /** Label to add */\n  body: LabelMapping\n}\nexport interface DeleteTelegrafsIDLabelsIDRequest {\n  /** The Telegraf config ID. */\n  telegrafID: string\n  /** The label ID. */\n  labelID: string\n}\nexport interface GetTelegrafsIDMembersRequest {\n  /** The Telegraf config ID. */\n  telegrafID: string\n}\nexport interface PostTelegrafsIDMembersRequest {\n  /** The Telegraf config ID. */\n  telegrafID: string\n  /** User to add as member */\n  body: AddResourceMemberRequestBody\n}\nexport interface DeleteTelegrafsIDMembersIDRequest {\n  /** The ID of the member to remove. */\n  userID: string\n  /** The Telegraf config ID. */\n  telegrafID: string\n}\nexport interface GetTelegrafsIDOwnersRequest {\n  /** The Telegraf config ID. */\n  telegrafID: string\n}\nexport interface PostTelegrafsIDOwnersRequest {\n  /** The Telegraf config ID. */\n  telegrafID: string\n  /** User to add as owner */\n  body: AddResourceMemberRequestBody\n}\nexport interface DeleteTelegrafsIDOwnersIDRequest {\n  /** The ID of the owner to remove. */\n  userID: string\n  /** The Telegraf config ID. */\n  telegrafID: string\n}\n/**\n * Telegrafs API\n */\nexport class TelegrafsAPI {\n  // internal\n  private base: APIBase\n\n  /**\n   * Creates TelegrafsAPI\n   * @param influxDB - an instance that knows how to communicate with InfluxDB server\n   */\n  constructor(influxDB: InfluxDB) {\n    this.base = new APIBase(influxDB)\n  }\n  /**\n   * See {@link https://v2.docs.influxdata.com/v2.0/api/#operation/GetTelegrafs }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  getTelegrafs(\n    request?: GetTelegrafsRequest,\n    requestOptions?: RequestOptions\n  ): Promise<Telegrafs> {\n    return this.base.request(\n      'GET',\n      `/api/v2/telegrafs${this.base.queryString(request, ['orgID'])}`,\n      request,\n      requestOptions\n    )\n  }\n  /**\n   * Create a Telegraf config.\n   * See {@link https://v2.docs.influxdata.com/v2.0/api/#operation/PostTelegrafs }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  postTelegrafs(\n    request: PostTelegrafsRequest,\n    requestOptions?: RequestOptions\n  ): Promise<Telegraf> {\n    return this.base.request(\n      'POST',\n      `/api/v2/telegrafs`,\n      request,\n      requestOptions,\n      'application/json'\n    )\n  }\n  /**\n   * Retrieve a Telegraf config.\n   * See {@link https://v2.docs.influxdata.com/v2.0/api/#operation/GetTelegrafsID }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  getTelegrafsID(\n    request: GetTelegrafsIDRequest,\n    requestOptions?: RequestOptions\n  ): Promise<string> {\n    return this.base.request(\n      'GET',\n      `/api/v2/telegrafs/${request.telegrafID}`,\n      request,\n      requestOptions\n    )\n  }\n  /**\n   * Update a Telegraf config.\n   * See {@link https://v2.docs.influxdata.com/v2.0/api/#operation/PutTelegrafsID }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  putTelegrafsID(\n    request: PutTelegrafsIDRequest,\n    requestOptions?: RequestOptions\n  ): Promise<Telegraf> {\n    return this.base.request(\n      'PUT',\n      `/api/v2/telegrafs/${request.telegrafID}`,\n      request,\n      requestOptions,\n      'application/json'\n    )\n  }\n  /**\n   * Delete a Telegraf config.\n   * See {@link https://v2.docs.influxdata.com/v2.0/api/#operation/DeleteTelegrafsID }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  deleteTelegrafsID(\n    request: DeleteTelegrafsIDRequest,\n    requestOptions?: RequestOptions\n  ): Promise<void> {\n    return this.base.request(\n      'DELETE',\n      `/api/v2/telegrafs/${request.telegrafID}`,\n      request,\n      requestOptions\n    )\n  }\n  /**\n   * List all labels for a Telegraf config.\n   * See {@link https://v2.docs.influxdata.com/v2.0/api/#operation/GetTelegrafsIDLabels }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  getTelegrafsIDLabels(\n    request: GetTelegrafsIDLabelsRequest,\n    requestOptions?: RequestOptions\n  ): Promise<LabelsResponse> {\n    return this.base.request(\n      'GET',\n      `/api/v2/telegrafs/${request.telegrafID}/labels`,\n      request,\n      requestOptions\n    )\n  }\n  /**\n   * Add a label to a Telegraf config.\n   * See {@link https://v2.docs.influxdata.com/v2.0/api/#operation/PostTelegrafsIDLabels }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  postTelegrafsIDLabels(\n    request: PostTelegrafsIDLabelsRequest,\n    requestOptions?: RequestOptions\n  ): Promise<LabelResponse> {\n    return this.base.request(\n      'POST',\n      `/api/v2/telegrafs/${request.telegrafID}/labels`,\n      request,\n      requestOptions,\n      'application/json'\n    )\n  }\n  /**\n   * Delete a label from a Telegraf config.\n   * See {@link https://v2.docs.influxdata.com/v2.0/api/#operation/DeleteTelegrafsIDLabelsID }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  deleteTelegrafsIDLabelsID(\n    request: DeleteTelegrafsIDLabelsIDRequest,\n    requestOptions?: RequestOptions\n  ): Promise<void> {\n    return this.base.request(\n      'DELETE',\n      `/api/v2/telegrafs/${request.telegrafID}/labels/${request.labelID}`,\n      request,\n      requestOptions\n    )\n  }\n  /**\n   * List all users with member privileges for a Telegraf config.\n   * See {@link https://v2.docs.influxdata.com/v2.0/api/#operation/GetTelegrafsIDMembers }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  getTelegrafsIDMembers(\n    request: GetTelegrafsIDMembersRequest,\n    requestOptions?: RequestOptions\n  ): Promise<ResourceMembers> {\n    return this.base.request(\n      'GET',\n      `/api/v2/telegrafs/${request.telegrafID}/members`,\n      request,\n      requestOptions\n    )\n  }\n  /**\n   * Add a member to a Telegraf config.\n   * See {@link https://v2.docs.influxdata.com/v2.0/api/#operation/PostTelegrafsIDMembers }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  postTelegrafsIDMembers(\n    request: PostTelegrafsIDMembersRequest,\n    requestOptions?: RequestOptions\n  ): Promise<ResourceMember> {\n    return this.base.request(\n      'POST',\n      `/api/v2/telegrafs/${request.telegrafID}/members`,\n      request,\n      requestOptions,\n      'application/json'\n    )\n  }\n  /**\n   * Remove a member from a Telegraf config.\n   * See {@link https://v2.docs.influxdata.com/v2.0/api/#operation/DeleteTelegrafsIDMembersID }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  deleteTelegrafsIDMembersID(\n    request: DeleteTelegrafsIDMembersIDRequest,\n    requestOptions?: RequestOptions\n  ): Promise<void> {\n    return this.base.request(\n      'DELETE',\n      `/api/v2/telegrafs/${request.telegrafID}/members/${request.userID}`,\n      request,\n      requestOptions\n    )\n  }\n  /**\n   * List all owners of a Telegraf config.\n   * See {@link https://v2.docs.influxdata.com/v2.0/api/#operation/GetTelegrafsIDOwners }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  getTelegrafsIDOwners(\n    request: GetTelegrafsIDOwnersRequest,\n    requestOptions?: RequestOptions\n  ): Promise<ResourceOwners> {\n    return this.base.request(\n      'GET',\n      `/api/v2/telegrafs/${request.telegrafID}/owners`,\n      request,\n      requestOptions\n    )\n  }\n  /**\n   * Add an owner to a Telegraf config.\n   * See {@link https://v2.docs.influxdata.com/v2.0/api/#operation/PostTelegrafsIDOwners }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  postTelegrafsIDOwners(\n    request: PostTelegrafsIDOwnersRequest,\n    requestOptions?: RequestOptions\n  ): Promise<ResourceOwner> {\n    return this.base.request(\n      'POST',\n      `/api/v2/telegrafs/${request.telegrafID}/owners`,\n      request,\n      requestOptions,\n      'application/json'\n    )\n  }\n  /**\n   * Remove an owner from a Telegraf config.\n   * See {@link https://v2.docs.influxdata.com/v2.0/api/#operation/DeleteTelegrafsIDOwnersID }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  deleteTelegrafsIDOwnersID(\n    request: DeleteTelegrafsIDOwnersIDRequest,\n    requestOptions?: RequestOptions\n  ): Promise<void> {\n    return this.base.request(\n      'DELETE',\n      `/api/v2/telegrafs/${request.telegrafID}/owners/${request.userID}`,\n      request,\n      requestOptions\n    )\n  }\n}\n","import {InfluxDB} from '@influxdata/influxdb-client'\nimport {APIBase, RequestOptions} from '../APIBase'\nimport {Template, TemplateApply, TemplateExport, TemplateSummary} from './types'\n\nexport interface ApplyTemplateRequest {\n  /** entity body */\n  body: TemplateApply\n}\nexport interface ExportTemplateRequest {\n  /** Export resources as an InfluxDB template. */\n  body: TemplateExport\n}\n/**\n * Templates API\n */\nexport class TemplatesAPI {\n  // internal\n  private base: APIBase\n\n  /**\n   * Creates TemplatesAPI\n   * @param influxDB - an instance that knows how to communicate with InfluxDB server\n   */\n  constructor(influxDB: InfluxDB) {\n    this.base = new APIBase(influxDB)\n  }\n  /**\n   * Apply or dry-run an InfluxDB Template.\n   * See {@link https://v2.docs.influxdata.com/v2.0/api/#operation/ApplyTemplate }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  applyTemplate(\n    request: ApplyTemplateRequest,\n    requestOptions?: RequestOptions\n  ): Promise<TemplateSummary> {\n    return this.base.request(\n      'POST',\n      `/api/v2/templates/apply`,\n      request,\n      requestOptions,\n      'application/json'\n    )\n  }\n  /**\n   * Export a new Influx Template.\n   * See {@link https://v2.docs.influxdata.com/v2.0/api/#operation/ExportTemplate }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  exportTemplate(\n    request: ExportTemplateRequest,\n    requestOptions?: RequestOptions\n  ): Promise<Template> {\n    return this.base.request(\n      'POST',\n      `/api/v2/templates/export`,\n      request,\n      requestOptions,\n      'application/json'\n    )\n  }\n}\n","import {InfluxDB} from '@influxdata/influxdb-client'\nimport {APIBase, RequestOptions} from '../APIBase'\nimport {PasswordResetBody, User, Users} from './types'\n\nexport interface GetUsersRequest {}\nexport interface PostUsersRequest {\n  /** User to create */\n  body: User\n}\nexport interface GetUsersIDRequest {\n  /** The user ID. */\n  userID: string\n}\nexport interface PatchUsersIDRequest {\n  /** The ID of the user to update. */\n  userID: string\n  /** User update to apply */\n  body: User\n}\nexport interface DeleteUsersIDRequest {\n  /** The ID of the user to delete. */\n  userID: string\n}\nexport interface PostUsersIDPasswordRequest {\n  /** The user ID. */\n  userID: string\n  auth: {user: string; password: string}\n  /** New password */\n  body: PasswordResetBody\n}\n/**\n * Users API\n */\nexport class UsersAPI {\n  // internal\n  private base: APIBase\n\n  /**\n   * Creates UsersAPI\n   * @param influxDB - an instance that knows how to communicate with InfluxDB server\n   */\n  constructor(influxDB: InfluxDB) {\n    this.base = new APIBase(influxDB)\n  }\n  /**\n   * List all users.\n   * See {@link https://v2.docs.influxdata.com/v2.0/api/#operation/GetUsers }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  getUsers(\n    request?: GetUsersRequest,\n    requestOptions?: RequestOptions\n  ): Promise<Users> {\n    return this.base.request('GET', `/api/v2/users`, request, requestOptions)\n  }\n  /**\n   * Create a user.\n   * See {@link https://v2.docs.influxdata.com/v2.0/api/#operation/PostUsers }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  postUsers(\n    request: PostUsersRequest,\n    requestOptions?: RequestOptions\n  ): Promise<User> {\n    return this.base.request(\n      'POST',\n      `/api/v2/users`,\n      request,\n      requestOptions,\n      'application/json'\n    )\n  }\n  /**\n   * Retrieve a user.\n   * See {@link https://v2.docs.influxdata.com/v2.0/api/#operation/GetUsersID }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  getUsersID(\n    request: GetUsersIDRequest,\n    requestOptions?: RequestOptions\n  ): Promise<User> {\n    return this.base.request(\n      'GET',\n      `/api/v2/users/${request.userID}`,\n      request,\n      requestOptions\n    )\n  }\n  /**\n   * Update a user.\n   * See {@link https://v2.docs.influxdata.com/v2.0/api/#operation/PatchUsersID }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  patchUsersID(\n    request: PatchUsersIDRequest,\n    requestOptions?: RequestOptions\n  ): Promise<User> {\n    return this.base.request(\n      'PATCH',\n      `/api/v2/users/${request.userID}`,\n      request,\n      requestOptions,\n      'application/json'\n    )\n  }\n  /**\n   * Delete a user.\n   * See {@link https://v2.docs.influxdata.com/v2.0/api/#operation/DeleteUsersID }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  deleteUsersID(\n    request: DeleteUsersIDRequest,\n    requestOptions?: RequestOptions\n  ): Promise<void> {\n    return this.base.request(\n      'DELETE',\n      `/api/v2/users/${request.userID}`,\n      request,\n      requestOptions\n    )\n  }\n  /**\n   * Update a password.\n   * See {@link https://v2.docs.influxdata.com/v2.0/api/#operation/PostUsersIDPassword }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  postUsersIDPassword(\n    request: PostUsersIDPasswordRequest,\n    requestOptions?: RequestOptions\n  ): Promise<void> {\n    return this.base.request(\n      'POST',\n      `/api/v2/users/${request.userID}/password`,\n      request,\n      requestOptions,\n      'application/json'\n    )\n  }\n}\n","import {InfluxDB} from '@influxdata/influxdb-client'\nimport {APIBase, RequestOptions} from '../APIBase'\nimport {\n  LabelMapping,\n  LabelResponse,\n  LabelsResponse,\n  Variable,\n  Variables,\n} from './types'\n\nexport interface GetVariablesRequest {\n  /** The organization name. */\n  org?: string\n  /** The organization ID. */\n  orgID?: string\n}\nexport interface PostVariablesRequest {\n  /** Variable to create */\n  body: Variable\n}\nexport interface GetVariablesIDRequest {\n  /** The variable ID. */\n  variableID: string\n}\nexport interface PutVariablesIDRequest {\n  /** The variable ID. */\n  variableID: string\n  /** Variable to replace */\n  body: Variable\n}\nexport interface PatchVariablesIDRequest {\n  /** The variable ID. */\n  variableID: string\n  /** Variable update to apply */\n  body: Variable\n}\nexport interface DeleteVariablesIDRequest {\n  /** The variable ID. */\n  variableID: string\n}\nexport interface GetVariablesIDLabelsRequest {\n  /** The variable ID. */\n  variableID: string\n}\nexport interface PostVariablesIDLabelsRequest {\n  /** The variable ID. */\n  variableID: string\n  /** Label to add */\n  body: LabelMapping\n}\nexport interface DeleteVariablesIDLabelsIDRequest {\n  /** The variable ID. */\n  variableID: string\n  /** The label ID to delete. */\n  labelID: string\n}\n/**\n * Variables API\n */\nexport class VariablesAPI {\n  // internal\n  private base: APIBase\n\n  /**\n   * Creates VariablesAPI\n   * @param influxDB - an instance that knows how to communicate with InfluxDB server\n   */\n  constructor(influxDB: InfluxDB) {\n    this.base = new APIBase(influxDB)\n  }\n  /**\n   * Get all variables.\n   * See {@link https://v2.docs.influxdata.com/v2.0/api/#operation/GetVariables }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  getVariables(\n    request?: GetVariablesRequest,\n    requestOptions?: RequestOptions\n  ): Promise<Variables> {\n    return this.base.request(\n      'GET',\n      `/api/v2/variables${this.base.queryString(request, ['org', 'orgID'])}`,\n      request,\n      requestOptions\n    )\n  }\n  /**\n   * Create a variable.\n   * See {@link https://v2.docs.influxdata.com/v2.0/api/#operation/PostVariables }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  postVariables(\n    request: PostVariablesRequest,\n    requestOptions?: RequestOptions\n  ): Promise<Variable> {\n    return this.base.request(\n      'POST',\n      `/api/v2/variables`,\n      request,\n      requestOptions,\n      'application/json'\n    )\n  }\n  /**\n   * Get a variable.\n   * See {@link https://v2.docs.influxdata.com/v2.0/api/#operation/GetVariablesID }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  getVariablesID(\n    request: GetVariablesIDRequest,\n    requestOptions?: RequestOptions\n  ): Promise<Variable> {\n    return this.base.request(\n      'GET',\n      `/api/v2/variables/${request.variableID}`,\n      request,\n      requestOptions\n    )\n  }\n  /**\n   * Replace a variable.\n   * See {@link https://v2.docs.influxdata.com/v2.0/api/#operation/PutVariablesID }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  putVariablesID(\n    request: PutVariablesIDRequest,\n    requestOptions?: RequestOptions\n  ): Promise<Variable> {\n    return this.base.request(\n      'PUT',\n      `/api/v2/variables/${request.variableID}`,\n      request,\n      requestOptions,\n      'application/json'\n    )\n  }\n  /**\n   * Update a variable.\n   * See {@link https://v2.docs.influxdata.com/v2.0/api/#operation/PatchVariablesID }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  patchVariablesID(\n    request: PatchVariablesIDRequest,\n    requestOptions?: RequestOptions\n  ): Promise<Variable> {\n    return this.base.request(\n      'PATCH',\n      `/api/v2/variables/${request.variableID}`,\n      request,\n      requestOptions,\n      'application/json'\n    )\n  }\n  /**\n   * Delete a variable.\n   * See {@link https://v2.docs.influxdata.com/v2.0/api/#operation/DeleteVariablesID }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  deleteVariablesID(\n    request: DeleteVariablesIDRequest,\n    requestOptions?: RequestOptions\n  ): Promise<void> {\n    return this.base.request(\n      'DELETE',\n      `/api/v2/variables/${request.variableID}`,\n      request,\n      requestOptions\n    )\n  }\n  /**\n   * List all labels for a variable.\n   * See {@link https://v2.docs.influxdata.com/v2.0/api/#operation/GetVariablesIDLabels }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  getVariablesIDLabels(\n    request: GetVariablesIDLabelsRequest,\n    requestOptions?: RequestOptions\n  ): Promise<LabelsResponse> {\n    return this.base.request(\n      'GET',\n      `/api/v2/variables/${request.variableID}/labels`,\n      request,\n      requestOptions\n    )\n  }\n  /**\n   * Add a label to a variable.\n   * See {@link https://v2.docs.influxdata.com/v2.0/api/#operation/PostVariablesIDLabels }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  postVariablesIDLabels(\n    request: PostVariablesIDLabelsRequest,\n    requestOptions?: RequestOptions\n  ): Promise<LabelResponse> {\n    return this.base.request(\n      'POST',\n      `/api/v2/variables/${request.variableID}/labels`,\n      request,\n      requestOptions,\n      'application/json'\n    )\n  }\n  /**\n   * Delete a label from a variable.\n   * See {@link https://v2.docs.influxdata.com/v2.0/api/#operation/DeleteVariablesIDLabelsID }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  deleteVariablesIDLabelsID(\n    request: DeleteVariablesIDLabelsIDRequest,\n    requestOptions?: RequestOptions\n  ): Promise<void> {\n    return this.base.request(\n      'DELETE',\n      `/api/v2/variables/${request.variableID}/labels/${request.labelID}`,\n      request,\n      requestOptions\n    )\n  }\n}\n","import {InfluxDB} from '@influxdata/influxdb-client'\nimport {APIBase, RequestOptions} from '../APIBase'\n\nexport interface PostWriteRequest {\n  /** Line protocol body */\n  body: string\n  /** Specifies the destination organization for writes. Takes either the ID or Name interchangeably. If both `orgID` and `org` are specified, `org` takes precedence. */\n  org: string\n  /** Specifies the ID of the destination organization for writes. If both `orgID` and `org` are specified, `org` takes precedence. */\n  orgID?: string\n  /** The destination bucket for writes. */\n  bucket: string\n  /** The precision for the unix timestamps within the body line-protocol. */\n  precision?: any\n}\n/**\n * Write API\n */\nexport class WriteAPI {\n  // internal\n  private base: APIBase\n\n  /**\n   * Creates WriteAPI\n   * @param influxDB - an instance that knows how to communicate with InfluxDB server\n   */\n  constructor(influxDB: InfluxDB) {\n    this.base = new APIBase(influxDB)\n  }\n  /**\n   * Write time series data into InfluxDB.\n   * See {@link https://v2.docs.influxdata.com/v2.0/api/#operation/PostWrite }\n   * @param request - request parameters and body (if supported)\n   * @param requestOptions - optional transport options\n   * @returns promise of response\n   */\n  postWrite(\n    request: PostWriteRequest,\n    requestOptions?: RequestOptions\n  ): Promise<void> {\n    return this.base.request(\n      'POST',\n      `/api/v2/write${this.base.queryString(request, [\n        'org',\n        'orgID',\n        'bucket',\n        'precision',\n      ])}`,\n      request,\n      requestOptions,\n      'text/plain'\n    )\n  }\n}\n"],"names":["influxDB","Error","transport","this","APIBase","request","params","reduce","acc","key","val","encodeURIComponent","String","method","path","requestOptions","mediaType","sendOptions","headers","auth","value","user","password","btoa","body","base","RootAPI","AuthorizationsAPI","queryString","authID","BucketsAPI","bucketID","labelID","userID","ChecksAPI","checkID","DashboardsAPI","dashboardID","cellID","DbrpsAPI","dbrpID","DeleteAPI","DocumentsAPI","templateID","FlagsAPI","HealthAPI","LabelsAPI","MeAPI","NotificationEndpointsAPI","endpointID","NotificationRulesAPI","ruleID","OrgsAPI","orgID","QueryAPI","name","ReadyAPI","ScrapersAPI","scraperTargetID","SetupAPI","SigninAPI","SignoutAPI","SourcesAPI","sourceID","StacksAPI","stack_id","TasksAPI","taskID","runID","TelegrafAPI","TelegrafsAPI","telegrafID","TemplatesAPI","UsersAPI","VariablesAPI","variableID","WriteAPI"],"mappings":"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"}
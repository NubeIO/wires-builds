{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./nodes/node-io.ts","webpack:///./nodes/container.ts","webpack:///./nodes/node-info.ts","webpack:///./nodes/node.ts","webpack:///./nodes/node-interface.ts","webpack:///./nodes/utils.ts","webpack:///./utils/helper.ts","webpack:///./nodes/utils/time-utils.ts","webpack:///./nodes/flexible-node.ts","webpack:///./utils/loggers.ts","webpack:///./config.ts","webpack:///external \"logplease\"","webpack:///./nodes/constants.ts","webpack:///./utils/id-generator.ts","webpack:///./nodes/node-type-registry.ts","webpack:///external \"moment-timezone\"","webpack:///external \"axios\"","webpack:///external \"lodash\"","webpack:///./nodes/container-node.ts","webpack:///./nodes/node-link.ts","webpack:///./utils/decorators.ts","webpack:///./nodes/node-db-helper.ts","webpack:///external \"express\"","webpack:///external \"child_process\"","webpack:///./utils/errors.ts","webpack:///./nodes/serializable.ts","webpack:///./nodes/utils/crypto-utils.ts","webpack:///./nodes/nodes/dashboard/ui-node.ts","webpack:///external \"node-bacnet\"","webpack:///./nodes/nodes/statistics/statistics.ts","webpack:///./nodes/node-registry.ts","webpack:///./app.ts","webpack:///./shared/websocket-events.ts","webpack:///./nodes/node-factory.ts","webpack:///external \"fs\"","webpack:///./nodes/utils/os-utils.ts","webpack:///./database/database/BaseDatabase.ts","webpack:///external \"moment\"","webpack:///./shared/validator.ts","webpack:///./promise-actor.ts","webpack:///./nodes/utils/file-utils.ts","webpack:///./database/datasource/PlatformDataSource.ts","webpack:///./nodes/nodes/protocols/edge-28/edge-constant.ts","webpack:///./backend/models/point-model.ts","webpack:///external \"enumify\"","webpack:///./nodes/node-hook.ts","webpack:///./nodes/registry.ts","webpack:///./pub-sub/PubSubHelpers.ts","webpack:///./nodes/node-icons.ts","webpack:///./nodes/nodes/IoT/shared/mixin.ts","webpack:///./nodes/nodes/system/system-utils.ts","webpack:///./nodes/nodes/history/HistoryBase.ts","webpack:///external \"jsonata\"","webpack:///./nodes/nodes/protocols/edge-28/edge-utils.ts","webpack:///./nodes/nodes/protocols/bacnet/bacnet-constant.ts","webpack:///./nodes/nodes/protocols/model/point-node.ts","webpack:///./utils/pattern.ts","webpack:///./nodes/nodes/protocols/connection-node-mixin.ts","webpack:///external \"mqtt\"","webpack:///external \"path\"","webpack:///./database/database.ts","webpack:///./backend/entry.ts","webpack:///./server/service/node-service.ts","webpack:///./nodes/utils/ip-address-utils.ts","webpack:///./nodes/utils/uuid-utils.ts","webpack:///./nodes/nodes/protocols/modbus/modbus-fc/modbus-point-byte-order.ts","webpack:///./nodes/nodes/bsa/bsa-client-config.ts","webpack:///external \"influx\"","webpack:///./nodes/lib/psychrolib.ts","webpack:///./nodes/utils/points/BACnet-enums-units.ts","webpack:///./nodes/nodes/protocols/bacnet/bacnet-utils.ts","webpack:///./nodes/nodes/protocols/bacnet-server/core/util.js","webpack:///external \"mqtt-match\"","webpack:///./nodes/nodes/protocols/mqtt/mqtt-client-node.ts","webpack:///external \"cron\"","webpack:///external \"cronstrue\"","webpack:///./shared/link-result-visitor.ts","webpack:///external \"@hapi/joi\"","webpack:///./nodes/node-presenter.ts","webpack:///./pub-sub/DispatchNode.ts","webpack:///./pub-sub/DispatcherRegistry.ts","webpack:///./pub-sub/PubSub.ts","webpack:///./backend/api.ts","webpack:///./nodes/nodes/IoT/shared/api-container-node.ts","webpack:///./nodes/nodes/IoT/shared/top-level-api-container-node.ts","webpack:///external \"lodash-decorators/debounce\"","webpack:///external \"socket.io\"","webpack:///./server/middleware.ts","webpack:///./server/routes/handler/api-handler.ts","webpack:///./server/service/NodeCRUDService.ts","webpack:///./shared/etl-result.ts","webpack:///./server/service/NodeETLService.ts","webpack:///./nodes/nodes/container/folder.ts","webpack:///external \"os\"","webpack:///external \"set-ip-address\"","webpack:///external \"ip\"","webpack:///external \"util\"","webpack:///./nodes/nodes/container/abstract-folder-io.ts","webpack:///./nodes/utils/setting-utils.ts","webpack:///./nodes/utils/points/point-ref-utils.ts","webpack:///./nodes/utils/string-json-compare-utils.ts","webpack:///./nodes/utils/node-utils.ts","webpack:///./nodes/utils/MathUtils.ts","webpack:///./nodes/nodes/protocols/edge-28/edge-gpio-utils.ts","webpack:///./nodes/nodes/protocols/bacnet-server/bacnet-server-node.ts","webpack:///./nodes/nodes/protocols/model/container-node-store.ts","webpack:///./nodes/nodes/protocols/ProtocolDeviceNode.ts","webpack:///./utils/enums.ts","webpack:///./nodes/nodes/node-mixin.ts","webpack:///./nodes/nodes/protocols/bacnet-server/core/bacnet-object-property.js","webpack:///./nodes/nodes/protocols/bacnet-server/core/bacnet-model.ts","webpack:///./nodes/nodes/protocols/lora-raw/lora-two-way-in.ts","webpack:///external \"crypto\"","webpack:///external \"modbus-serial\"","webpack:///external \"net\"","webpack:///./nodes/nodes/protocols/mqtt/mqtt-client-node-store.ts","webpack:///external \"serialport\"","webpack:///./nodes/utils/nodes/node-colour-change.ts","webpack:///external \"source-map-support\"","webpack:///external \"process\"","webpack:///external \"minimist\"","webpack:///external \"dotenv\"","webpack:///./backend/backend.ts","webpack:///external \"slugid\"","webpack:///./shared/link-result.ts","webpack:///./pub-sub/IPubSub.ts","webpack:///./nodes/utils/help/protocols/edge-28.ts","webpack:///./nodes/nodes/IoT/datapoint-node.ts","webpack:///./backend/datapoint.ts","webpack:///./nodes/nodes/IoT/installer-node.ts","webpack:///./backend/installer.ts","webpack:///./nodes/nodes/IoT/shared/api-node.ts","webpack:///./server/dashboard.ts","webpack:///./server/server.ts","webpack:///external \"body-parser\"","webpack:///external \"cookie-parser\"","webpack:///external \"http\"","webpack:///external \"morgan\"","webpack:///./server/dashboard-server-socket.ts","webpack:///./server/editor-server-socket.ts","webpack:///./nodes/node-utils.ts","webpack:///./server/ping-pong-server-socket.ts","webpack:///./server/routes/api-editor.ts","webpack:///./server/routes/handler/api-link-handler.ts","webpack:///./server/service/NodeLinkService.ts","webpack:///./server/routes/handler/api-node-handler.ts","webpack:///./server/wire-name-server-socket.ts","webpack:///external \"express-validator\"","webpack:///./server/routes/dashboard.ts","webpack:///./server/routes/api-dashboard.ts","webpack:///./server/routes/editor.ts","webpack:///./server/routes/api-wire-name.ts","webpack:///./database/datasource/WireNameDataSource.ts","webpack:///./server/routes/auth.ts","webpack:///external \"crypto-js\"","webpack:///./server/routes/api-help.ts","webpack:///./database/datasource/HelpDataSource.ts","webpack:///./server/routes/api-platform.ts","webpack:///external \"systeminformation\"","webpack:///external \"network\"","webpack:///./utils/wires-plat.ts","webpack:///./nodes/nodes/index.ts","webpack:///./nodes/nodes/boolean/and.ts","webpack:///./nodes/nodes/boolean/or.ts","webpack:///./nodes/nodes/boolean/xor.ts","webpack:///./nodes/nodes/boolean/not.ts","webpack:///./nodes/nodes/boolean/toggle.ts","webpack:///./nodes/nodes/boolean/one-shot.ts","webpack:///./nodes/nodes/boolean/min-on-off.ts","webpack:///./nodes/nodes/boolean/on-delay.ts","webpack:///./nodes/nodes/boolean/off-delay.ts","webpack:///./nodes/nodes/boolean/ticker.ts","webpack:///./nodes/nodes/compare/equal.ts","webpack:///./nodes/nodes/compare/greater-than.ts","webpack:///./nodes/nodes/compare/less-than.ts","webpack:///./nodes/nodes/compare/between.ts","webpack:///./nodes/nodes/compare/hysteresis.ts","webpack:///./nodes/nodes/compare/type-check.ts","webpack:///./nodes/nodes/connection/DispatchListener.ts","webpack:///./pub-sub/Decorators.ts","webpack:///./nodes/nodes/connection/local-transmitter-single.ts","webpack:///./nodes/nodes/connection/local-receiver-single.ts","webpack:///./nodes/nodes/connection/local-transmitter.ts","webpack:///./nodes/nodes/connection/local-receiver.ts","webpack:///./nodes/nodes/connection/hub.ts","webpack:///./nodes/nodes/container/folder-input.ts","webpack:///./nodes/nodes/container/folder-output.ts","webpack:///./nodes/nodes/conversion/bit-mask.ts","webpack:///./nodes/nodes/conversion/bit-split.ts","webpack:///./nodes/nodes/conversion/bool-to-int.ts","webpack:///./nodes/nodes/conversion/buffer-to-hex-string.ts","webpack:///./nodes/nodes/conversion/buffer-to-num.ts","webpack:///./nodes/nodes/conversion/data-conversion.ts","webpack:///external \"convert-units\"","webpack:///./nodes/nodes/conversion/hex-string-to-buffer.ts","webpack:///./nodes/nodes/conversion/int-to-byte-four-array.ts","webpack:///./nodes/nodes/count/any-event-counter.ts","webpack:///./nodes/nodes/count/counter.ts","webpack:///./nodes/nodes/count/triggered-ramp.ts","webpack:///./nodes/nodes/count/interval-ramp.ts","webpack:///./nodes/nodes/count/waveform.ts","webpack:///./nodes/nodes/csv/csv-merge-rows.ts","webpack:///./nodes/nodes/csv/csv-merge-columns.ts","webpack:///./nodes/nodes/bsa/bsa-cumulocity-device.ts","webpack:///./nodes/nodes/bsa/bsa-cumulocity-point.ts","webpack:///./nodes/nodes/bsa/bsa-cumulocity-alarm.ts","webpack:///./nodes/nodes/custom-function/function.ts","webpack:///./nodes/nodes/custom-function/base-function-node.ts","webpack:///external \"vm2\"","webpack:///./nodes/nodes/custom-function/uuid.ts","webpack:///./nodes/nodes/dashboard/label.ts","webpack:///./nodes/nodes/dashboard/button.ts","webpack:///./nodes/nodes/dashboard/switch.ts","webpack:///./nodes/nodes/dashboard/progress.ts","webpack:///./nodes/nodes/dashboard/slider.ts","webpack:///./nodes/nodes/dashboard/text-box.ts","webpack:///./nodes/nodes/dashboard/log.ts","webpack:///./nodes/nodes/dashboard/chart.ts","webpack:///./nodes/nodes/debug/console.ts","webpack:///./nodes/nodes/debug/notes.ts","webpack:///./nodes/nodes/debug/watch.ts","webpack:///./nodes/nodes/error/link-error-check.ts","webpack:///./nodes/nodes/error/output-error-check.ts","webpack:///./nodes/nodes/filter/only-true.ts","webpack:///./nodes/nodes/filter/only-false.ts","webpack:///./nodes/nodes/filter/only-between.ts","webpack:///./nodes/nodes/filter/only-greater.ts","webpack:///./nodes/nodes/filter/only-lower.ts","webpack:///./nodes/nodes/filter/only-equal.ts","webpack:///./nodes/nodes/filter/prevent-null.ts","webpack:///./nodes/nodes/filter/prevent-equal.ts","webpack:///./nodes/nodes/filter/prevent-duplicates.ts","webpack:///./nodes/nodes/history/data-store.ts","webpack:///./nodes/nodes/history/influx-db.ts","webpack:///./nodes/nodes/history/influx-db-2.ts","webpack:///external \"@influxdata/influxdb-client\"","webpack:///external \"@influxdata/influxdb-client-apis\"","webpack:///./nodes/nodes/history/history.ts","webpack:///./nodes/nodes/history/point-persistence.ts","webpack:///./nodes/nodes/history/point-tag.ts","webpack:///./nodes/nodes/hvac/deadband.ts","webpack:///./nodes/nodes/hvac/thermostat.ts","webpack:///./nodes/nodes/hvac/lead-lag-staging.ts","webpack:///./nodes/nodes/hvac/lead-lag-switch.ts","webpack:///./nodes/nodes/hvac/pac-unit-control.ts","webpack:///./nodes/nodes/hvac/PID.ts","webpack:///./nodes/lib/pid-controller.ts","webpack:///./nodes/nodes/hvac/toggle-duration.ts","webpack:///./nodes/nodes/hvac/psychometrics.ts","webpack:///./nodes/nodes/hvac/energy-conversion.ts","webpack:///./nodes/nodes/hvac/power-conversion.ts","webpack:///./nodes/nodes/hvac/volume-conversion.ts","webpack:///./nodes/nodes/hvac/temperature-conversion.ts","webpack:///./nodes/nodes/hvac/atm-pressure-conversion.ts","webpack:///./nodes/nodes/hvac/pressure-conversion.ts","webpack:///./nodes/nodes/hvac/actuator-sizing.ts","webpack:///./nodes/nodes/hvac/k-factor.ts","webpack:///./nodes/nodes/hvac/dp-airflow.ts","webpack:///./nodes/nodes/json/array-builder.ts","webpack:///./nodes/nodes/json/array-builder-num.ts","webpack:///./nodes/nodes/json/array-combine.ts","webpack:///./nodes/nodes/json/json-builder.ts","webpack:///./nodes/nodes/json/json-enum-builder.ts","webpack:///./nodes/nodes/json/json-filter.ts","webpack:///./nodes/nodes/json/json-obj-filter.ts","webpack:///./nodes/nodes/json/json-filter-compare.ts","webpack:///./nodes/nodes/json/json-filter-multiple.ts","webpack:///./nodes/nodes/json/json-checker.ts","webpack:///./nodes/nodes/json/json-parse.ts","webpack:///./nodes/nodes/json/json-prevent-duplicates.ts","webpack:///./nodes/nodes/json/json-query.ts","webpack:///./nodes/nodes/latch/any-latch.ts","webpack:///./nodes/nodes/latch/bool-latch.ts","webpack:///./nodes/nodes/latch/num-latch.ts","webpack:///./nodes/nodes/latch/string-latch.ts","webpack:///./nodes/nodes/latch/set-reset.ts","webpack:///./nodes/nodes/math/add.ts","webpack:///./nodes/nodes/math/subtract.ts","webpack:///./nodes/nodes/math/multiply.ts","webpack:///./nodes/nodes/math/divide.ts","webpack:///./nodes/nodes/math/absolute.ts","webpack:///./nodes/nodes/math/modulus.ts","webpack:///./nodes/nodes/math/power.ts","webpack:///./nodes/nodes/math-advanced/acos.ts","webpack:///./nodes/nodes/math-advanced/asin.ts","webpack:///./nodes/nodes/math-advanced/atan.ts","webpack:///./nodes/nodes/math-advanced/cbrt.ts","webpack:///./nodes/nodes/math-advanced/cos.ts","webpack:///./nodes/nodes/math-advanced/exp.ts","webpack:///./nodes/nodes/math-advanced/log.ts","webpack:///./nodes/nodes/math-advanced/log10.ts","webpack:///./nodes/nodes/math-advanced/sin.ts","webpack:///./nodes/nodes/math-advanced/sqrt.ts","webpack:///./nodes/nodes/math-advanced/tan.ts","webpack:///./nodes/nodes/math-trigger/trigger-add.ts","webpack:///./nodes/nodes/math-trigger/trigger-subtract.ts","webpack:///./nodes/nodes/math-trigger/trigger-multiply.ts","webpack:///./nodes/nodes/math-trigger/trigger-divide.ts","webpack:///./nodes/nodes/math-trigger/trigger-modulus.ts","webpack:///./nodes/nodes/math-trigger/trigger-power.ts","webpack:///./nodes/nodes/miscellaneous/geo-hash.ts","webpack:///external \"ngeohash\"","webpack:///./nodes/nodes/miscellaneous/num-series-generator.ts","webpack:///./nodes/nodes/miscellaneous/append-to-strings.ts","webpack:///./nodes/nodes/nube/get-schedules.ts","webpack:///external \"btoa\"","webpack:///./nodes/nodes/num-transform/round.ts","webpack:///./nodes/nodes/num-transform/floor.ts","webpack:///./nodes/nodes/num-transform/ceil.ts","webpack:///./nodes/nodes/num-transform/limit.ts","webpack:///./nodes/nodes/num-transform/scale.ts","webpack:///./nodes/nodes/num-transform/linear-shaper.ts","webpack:///./nodes/nodes/num-transform/fade.ts","webpack:///./nodes/nodes/num-transform/rate-limit.ts","webpack:///./nodes/nodes/point/bool-constant.ts","webpack:///./nodes/nodes/point/num-constant.ts","webpack:///./nodes/nodes/point/string-constant.ts","webpack:///./nodes/nodes/point/json-constant.ts","webpack:///./nodes/nodes/point/bool-writable.ts","webpack:///./nodes/nodes/point/num-writable.ts","webpack:///./nodes/nodes/point/string-writable.ts","webpack:///./nodes/nodes/point/generic-point.ts","webpack:///./nodes/utils/points/history-config.ts","webpack:///./nodes/utils/points/priority-config.ts","webpack:///./nodes/nodes/protocols/email/email.ts","webpack:///external \"nodemailer\"","webpack:///./nodes/nodes/protocols/http/http-client.ts","webpack:///./nodes/nodes/protocols/edge-28/edge-28-network.ts","webpack:///./nodes/nodes/protocols/edge-28/edge-28-input.ts","webpack:///./nodes/nodes/protocols/edge-28/edge-10k-sensor-calc.ts","webpack:///./nodes/nodes/protocols/edge-28/edge-28-output.ts","webpack:///./nodes/nodes/protocols/edge-28/edge-28-lora-reset.ts","webpack:///./nodes/nodes/protocols/bacnet/bacnet-network.ts","webpack:///./nodes/nodes/protocols/bacnet/bacnet-device.ts","webpack:///./nodes/nodes/protocols/bacnet/bacnet-point.ts","webpack:///./nodes/nodes/protocols/model/point-node-utils.ts","webpack:///./nodes/nodes/protocols/bacnet-server/core/bacnet-device.js","webpack:///external \"assert\"","webpack:///./nodes/nodes/protocols/bacnet-server/core/bacnet-object.js","webpack:///./nodes/nodes/protocols/bacnet-server/core/typemap-property.js","webpack:///./nodes/nodes/protocols/bacnet-server/core/mandatory-properties.js","webpack:///./nodes/nodes/protocols/bacnet-server/bacnet-server-point.ts","webpack:///./nodes/nodes/protocols/bacnet-server/bacnet-server-api.ts","webpack:///./nodes/nodes/protocols/lora-raw/lora.ts","webpack:///./nodes/nodes/protocols/lora-raw/lora-two-way-out.ts","webpack:///./nodes/nodes/protocols/lora-raw-v2/lora-raw-points.ts","webpack:///./nodes/nodes/protocols/lora-raw-v2/lora-raw-crypt.ts","webpack:///external \"node-aes-cmac\"","webpack:///./nodes/nodes/protocols/lora-raw-v2/lora-raw-sensor-legacy.ts","webpack:///./nodes/nodes/protocols/modbus/modbus-server.ts","webpack:///./nodes/nodes/protocols/modbus/modbus-rtu-device.ts","webpack:///./nodes/nodes/protocols/modbus/modbus-rtu-point.ts","webpack:///./nodes/nodes/protocols/modbus/modbus-rtu-network.ts","webpack:///./nodes/nodes/protocols/modbus/modbus-fc/modbus-point-methods.ts","webpack:///./nodes/nodes/protocols/modbus/modbus-functions.ts","webpack:///./nodes/nodes/protocols/mqtt/mqtt-client.ts","webpack:///./nodes/nodes/protocols/mqtt/mqtt-client-single.ts","webpack:///./nodes/nodes/protocols/mqtt/core/mqtt-device.ts","webpack:///./nodes/nodes/protocols/mqtt/mqtt-point-node.ts","webpack:///./nodes/nodes/protocols/mqtt/core/mqtt-model.ts","webpack:///./nodes/nodes/protocols/mqtt/mqtt-generic-node.ts","webpack:///./nodes/nodes/protocols/mqtt-broker/mqtt-broker.ts","webpack:///./nodes/nodes/protocols/mqtt/topic-parts.ts","webpack:///./nodes/nodes/protocols/mqtt/topic-builder.ts","webpack:///./nodes/nodes/protocols/serial-connector/serial-connector.ts","webpack:///./nodes/utils/serial-utils.ts","webpack:///./nodes/nodes/schedule/weekly-schedule.ts","webpack:///./nodes/nodes/schedule/schedule-merge.ts","webpack:///./nodes/nodes/schedule/schedule-checker.ts","webpack:///./nodes/nodes/schedule/schedule-utils.ts","webpack:///./nodes/nodes/statistics/min-max-avg.ts","webpack:///./nodes/nodes/statistics/avg.ts","webpack:///./nodes/nodes/statistics/min.ts","webpack:///./nodes/nodes/statistics/max.ts","webpack:///./nodes/nodes/statistics/sum.ts","webpack:///./nodes/nodes/statistics/median.ts","webpack:///./nodes/nodes/statistics/range.ts","webpack:///./nodes/nodes/statistics/rank.ts","webpack:///./nodes/nodes/statistics/stats-all.ts","webpack:///./nodes/nodes/streams/stream-average.ts","webpack:///./nodes/nodes/streams/stream-highest.ts","webpack:///./nodes/nodes/streams/stream-lowest.ts","webpack:///./nodes/nodes/streams/stream-sum.ts","webpack:///./nodes/nodes/streams/stream-merge.ts","webpack:///./nodes/nodes/streams/gate.ts","webpack:///./nodes/nodes/streams/stack.ts","webpack:///./nodes/nodes/streams/queue.ts","webpack:///./nodes/nodes/streams/stream-delay.ts","webpack:///./nodes/nodes/streams/stream-delay-meter.ts","webpack:///./nodes/nodes/streams/frequency-meter.ts","webpack:///./nodes/nodes/streams/flatline.ts","webpack:///./nodes/nodes/string/string-acronyms.ts","webpack:///./nodes/nodes/string/string-compare.ts","webpack:///./nodes/nodes/string/substring-cut.ts","webpack:///./nodes/nodes/string/string-join.ts","webpack:///./nodes/nodes/string/string-length.ts","webpack:///./nodes/nodes/string/string-index-of.ts","webpack:///./nodes/nodes/string/char-at-index.ts","webpack:///./nodes/nodes/string/string-split.ts","webpack:///./nodes/nodes/string/string-case.ts","webpack:///./nodes/nodes/string/char-to-ascii.ts","webpack:///./nodes/nodes/string/ascii-to-char.ts","webpack:///./nodes/nodes/string/string-buffer.ts","webpack:///./nodes/nodes/switch/bool-switch.ts","webpack:///./nodes/nodes/switch/num-switch.ts","webpack:///./nodes/nodes/switch/string-switch.ts","webpack:///./nodes/nodes/switch/bool-select.ts","webpack:///./nodes/nodes/switch/num-select.ts","webpack:///./nodes/nodes/switch/string-select.ts","webpack:///./nodes/nodes/switch/bool-output-select.ts","webpack:///./nodes/nodes/switch/num-output-select.ts","webpack:///./nodes/nodes/switch/string-output-select.ts","webpack:///./nodes/nodes/system/host-info.ts","webpack:///./nodes/nodes/system/platform.ts","webpack:///./nodes/nodes/system/system-info.ts","webpack:///./nodes/nodes/system/beep.ts","webpack:///./nodes/nodes/system/execute-cmd.ts","webpack:///./nodes/nodes/system/flow-export.ts","webpack:///./nodes/nodes/system/ip/network-interfaces-bbb.ts","webpack:///./nodes/nodes/system/ip/network-interfaces.ts","webpack:///./nodes/nodes/system/wires-version.ts","webpack:///./nodes/nodes/time/time-conversion.ts","webpack:///./nodes/nodes/time/time-conversion-plus.ts","webpack:///./nodes/nodes/time/timezone-conversion.ts","webpack:///./nodes/utils/timezone-utils.ts","webpack:///./nodes/nodes/time/clock.ts","webpack:///./nodes/nodes/time/date.ts","webpack:///./nodes/nodes/time/time-diff.ts","webpack:///./nodes/nodes/time/stopwatch.ts","webpack:///./nodes/nodes/time/cron-interval.ts","webpack:///./nodes/nodes/time/cron-weekly.ts","webpack:///./nodes/nodes/time/cron-expression.ts","webpack:///external \"cron-validator\"","webpack:///./nodes/nodes/time/timestamp-generator.ts","webpack:///./nodes/nodes/trigger/change-of-value.ts","webpack:///./nodes/nodes/trigger/random.ts","webpack:///./nodes/nodes/trigger/inject.ts","webpack:///./nodes/nodes/trigger/interval-inject.ts","webpack:///./nodes/nodes/trigger/iterator.ts","webpack:///./nodes/nodes/widget/schedule-afterhours-off.ts","webpack:///./nodes/nodes/widget/schedule-prestart-fixed.ts","webpack:///./nodes/nodes/unknown/unknown-export.ts","webpack:///./nodes/nodes/unknown/unknown.ts","webpack:///./database/neDbDatabase.ts","webpack:///./database/datasource/AuthUserDataSource.ts","webpack:///external \"nedb\"","webpack:///external \"jsonwebtoken\"","webpack:///./database/datasource/DashboardDataSource.ts","webpack:///./database/datasource/HistorianDataSource.ts","webpack:///./database/datasource/NodeDataSource.ts","webpack:///./database/datasource/ScheduleDataSource.ts","webpack:///./database/datasource/UserDataSource.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","Type","SettingType","NodeSetting","description","type","config","validation","toJSON","this","SerializableHelper","serialize","serializedObj","AbstractNodeIO","label","locked","pos","round","data","updated","subNodeId","NodeOutput","links","super","isEmpty","map","Link","NodeInput","setting","link","isOptional","convertStringToType","STRING","NUMBER","BOOLEAN","JSON","ANY","convertSettingType","convertType","DROPDOWN","logger","color","Colors","Magenta","ContainerRegistry","DefaultContainerRegistry","IdGenerator","instance","_instance","rootContainer","force","container","optimizeBeforeRegister","id","server_dashboard_socket","server_editor_socket","client_socket","db","dashboard","ErrorHandler","NodeInContainerRegistry","DefaultSubNodeRegistry","parent","containerRegistry","globalNodeRegistry","node","isCaching","sNode","NodeFactory","toSimpleNode","nodeId","createNodeId","cid","logInfo","side","isFolderNode","sub_container","Promise","resolve","isNode","then","NodeHookHelper","execute","createNodeDbHelper","delete","_","remove","validate","nodeItself","shouldRejectNodeType","RegistryError","getReadableId","k","insert","doRegister","reassignContainer","globalRegistry","Container","folderNode","properties","renderers","UNINITIALIZED","ROOT","cloneObject","_itself","_nodeRegistry","clear","obj","serializedNodes","node_class","parentContainerNodeType","show_in_menu","recursive","alwaysInsideContainer","NodeTypeRegistry","registerNodeType","nodeRegistry","list","stop","isRunning","iteration","globaltime","runningtime","fixedtime","fixedtime_lapse","elapsed_time","starttime","sendActionToRenderer","onStopEvent","execution_timer_id","clearInterval","renderer","deselectAllNodes","detachRenderer","push","boxcolor","theme","NODE_DEFAULT_BOXCOLOR","setDirtyCanvas","indexOf","splice","length","interval","onPlayEvent","getTime","that","setInterval","runStep","steps","start","transferDataBetweenNodes","now","Date","EXECUTE_INTERVAL","executeLastTime","isUpdated","UPDATE_INPUTS_INTERVAL","updateInputsLastTime","inputs","onExecuteStep","onAfterExecute","elapsed","outputs","output","target_node","debugErr","target_id","ioId","slot","target_input","parseValue","action","params","apply","includeSubContainers","nodes","addNodes","_nodes","toLowerCase","ContainerNode","getNodesByType","forEach","nodeClass","getNodesByClass","parentId","getAllNodes","isContainer","iconImageUrl","icon","title","sort","a","b","foreground","background","f","editor","message","info","debug","warn","error","NODE_INFO","aiIcon","frog","inputsDesc","outputsDesc","doNothing","BROADCAST","NodeState","Node","settings","flags","MIN_WIDTH","settingConfigs","contextMenu","clonable","showIcon","convertInput","input","dataType","decimals","inputDataType","Number","isNaN","toFixed","stringify","oldSettings","oldName","oldIcon","size","Shape2D","isDisplayable","computeSize","entries","filter","isNotNull","disconnectInputLink","disconnectOutputLinks","selected_nodes","node_dragged","onSerialize","serializedNode","isNew","doMerge","o1","o2","shouldMerge","serialized","mapToObjectSameKey","merge","debugWarn","UNKNOWN_NODE","category","getParent","keys","v","callback","val","getInputData","setOutputData","update","saveSettings","saveProperties","saveInputs","saveOutputs","props","output_id","only_if_new","undefined","isRecentlyActive","dispatch","slotId","iSetting","exist","isNull","hasValidInput","nullable","settingName","match","items","x","includes","err","stack","extra_info","getFreeOutputId","hidden","getFreeInputId","defaultValue","addInput","position","inputsCount","getInputsCount","myID","source","target","outputNode","linksArray","replaceLinkIndex","findIndex","io","compareNodeIO","updateNodeOutput","immediateDirtyCanvas","ids","redrawNode","target_count","diff","removeInput","getOutputsCount","addOutput","removeOutput","values","Math","max","getLastInputIndex","getLastOutputIndex","changeWidth","computeHeight","title_width","compute_text_size","maxLabelWidth","maxNameWidth","labelWidth","nameWidth","text","width","nodeIO","registry","BackendLinkVisitor","visit","createLinkHandler","disconnectOutput","input_slot","input_id","disconnectInput","dirty_foreground","dirty_background","collapsed","Side","server","emit","onlyConnectedUsers","socket","in","inputs_values","outputs_values","inputId","outputId","slots_values","NODE_IO_VALUES","sendMessageToEditorSide","UPDATE_SETTINGS","payload","UPDATE_PROPERTIES","UPDATE_OUTPUTS","UPDATE_STATE","nodeState","UPDATE_TITLE","UPDATE_NAME","UPDATE_VALUE","moment","format","state","broadcastNodeStateToClients","inputSettings","outputSettings","tempNode","e","ERROR","extractErrorMessage","NOTIFICATION","PubSubHelpers","Enumify","closeEnum","isSerializedContainer","isFunction","Utils","getFullYear","getMonth","getDate","getHours","getMinutes","parse","typeofVal","parseFloat","test","originalVal","formatAsPerValueType","toString","performance","digits","pow","substr","textarea","document","createElement","textContent","style","body","appendChild","select","execCommand","ex","removeChild","filename","element","setAttribute","encodeURIComponent","display","click","day","WEEKDAYS","operatorsBoolName","operatorsMathName","operatorsBool","eq","neq","lt","lte","gt","gte","btwn","contains","regex","RegExp","true","false","null","notNull","empty","Array","isArray","Buffer","isBuffer","notEmpty","operatorsStatName","stat","array","min","range","midRange","sum","num","mean","median","mid","modes","modeMap","maxCount","variance","standardDeviation","sqrt","meanAbsoluteDeviation","abs","zScores","buildUrl","host","port","schema","reduce","cv","pv","clamp","remap","inMin","inMax","outMin","outMax","renameKey","old_key","new_key","cloned","pSBC","percentageChange","fromColor","toColor","useLinear","g","P","h","parseInt","isToColorString","pSBCr","split","slice","sleep","ms","setTimeout","isJSON","isString","String","isGreaterThanZero","isNumeric","trim","toLowerSnakeCase","replace","str","func","isFinite","convertToNumber","strict","inString","Error","Generator","generator","mapper","args","from","to","step","union","collections","Set","unionToArray","mapToObject","keyMapper","valMapper","arrayToObject","arr","idx","groupBy","accumulator","objectOf","TIME_TYPE","TimeUtils","timeOut","timeType","DAYS","HOURS","MINUTES","SECONDS","MILLISECONDS","momentValue","roundedMinutes","ceil","minute","clone","second","millisecond","timeInMs","duration","timeConvert","mm","days","hours","minutes","seconds","milliseconds","padStart","monthNames","dayNames","dts","toDateString","mnu","pad","mn","dy","getDay","dt","yr","hr","mi","ny","getSeconds","mil","getMilliseconds","thr","amp","date","yearMonthDay","year","month","monthAsNumber","dayAsNumber","dayOfYearNumber","pmOrAm","hourAsAmPm","hour","timeHourMin","time","minutesSeconds","epoch","rawDate","console","log","FlexibleNode","nullableInputs","dynamicInputsExist","dynamicOutputsExist","dynamicSettingsExist","dynamicInputsField","dynamicOutputsField","dynamicInputStartPosition","dynamicInputsStartName","dynamicOutputsStartName","dynamicInputsType","dynamicOutputsType","dynamicMinInputs","dynamicMaxInputs","dynamicMinOutputs","dynamicMaxOutputs","dynamicDefaultInputs","dynamicDefaultOutputs","addDynamicInputsOnRange","save","count","dynamicInputsCount","addedInputsCount","addInputWithName","inputCount","updateNodeInput","addDynamicOutputsOnRange","dynamicOutputsCount","addedOutputsCount","addOutputWithName","settingWiseDynamicInputsAndSettingsUpdate","startingCount","targetCount","addDynamicSettings","settingWiseDynamicInputsAndSettingsUpdateForBoolean","dynamicIndex","getInputSetting","changeDynamicInputsAndSettings","db_logger","Blue","registry_logger","reliability_logger","Red","node_service_logger","Cyan","server_logger","Yellow","heartbeat_logger","env","process","rubix","version","buildNb","secretKey","SECRET_KEY","PORT","dataDir","DATA_DIR","loopInterval","LOOP_INTERVAL","backendSync","enabled","BACKEND_ENABLED","baseUrl","BACKEND_API","nodeRefreshIntervalSeconds","NODE_DISTANCE","pointRefreshIntervalSeconds","NODE_REFRESH_INTERVAL_SEC","nodeDistance","POINT_REFRESH_INTERVAL_SEC","database","compactionInterval","bsa","baseURL","BSA_BASEURL","username","BSA_USERNAME","password","BSA_PASSWORD","paths","measurement","path","BSA_PATHS_MEASUREMENT_PATH","accept","BSA_PATHS_MEASUREMENT_ACCEPT","alarm","BSA_PATHS_ALARM_PATH","BSA_PATHS_ALARM_ACCEPT","contentType","BSA_PATHS_ALARM_CONTENTTYPE","device","BSA_PATHS_DEVICE_PATH","ditto","DITTO_BASEURL","DITTO_USERNAME","DITTO_PASSWORD","pg","PG_BASEURL","influxDb","protocol","INFLUX_DB_PROTOCOL","INFLUX_DB_HOST","INFLUX_DB_PORT","databaseName","INFLUX_DB_DB_NAME","INFLUX_DB_USERNAME","INFLUX_DB_PASSWORD","influxDb2","INFLUX_DB_2_PROTOCOL","url","INFLUX_DB_2_URL","token","INFLUX_DB_2_TOKEN","bucket","INFLUX_DB_2_BUCKET","org","INFLUX_DB_2_ORG","INFLUX_DB_2_USERNAME","INFLUX_DB_2_PASSWORD","edge28","EDGE_28_BASEURL","EDGE_28_PORT","apiVer","EDGE_28_API_VER","mqtt","MQTT_PROTOCOL","MQTT_HOST","MQTT_PORT","MQTT_USERNAME","MQTT_PASSWORD","RUBIX_VERSION","require","EDGES_PARENT_CONTAINER_TYPE","MODULES_PARENT_CONTAINER_TYPE","SERVICES_PARENT_CONTAINER_TYPE","EDGE_CONTAINER_TYPE","NETWORK_CONTAINER_TYPE","DEVICE_CONTAINER_TYPE","GROUP_CONTAINER_TYPE","POINT_NODE_TYPE","SERVICE_NODE_TYPE","MODULE_NODE_TYPE","IOT_TYPES","MODBUS_RTU_NETWORK","MODBUS_RTU_DEVICE","MODBUS_RTU_POINT","BACNET_NETWORK","BACNET_DEVICE","BACNET_POINT","EDGE_28_NETWORK","EDGE_28_INPUT","EDGE_28_OUTPUT","MQTT_NETWORK","MQTT_POINT_WRITE","MQTT_POINT_READ","BaseIdGenerator","cId","nId","shouldGenerateCid","v4","AbstractRegistry","lastIndexOf","node_name","onlyInsideContainer","headerColor","register","has","_registry","folder","deserialize","applyTitle","onAdded","afterAdded","content","openContainer","NAME","createNodeLink","targets","createBiNodeLink","DefaultBiNodeLink","nodeIOtoMsg","msg","join","slimIOtoKey","io1","io2","_bySource","_byTarget","nodeLinks","nl","sKey","tKey","target_node_id","target_slot","target_input_id","createLegacyLinkHandler","dbHelper","DefaultLinkHandler","targetNode","outputSlot","number","oId","iId","validator","nodeValidator","lenient","DefaultNodeLinkHandler","ContainerRegistryValidator","NodeRegistryValidator","globalStrict","bT","base","rT","references","len","direction","first","next","last","nodeLink","optimized","add","optimize","statement","doCreate","flatMap","bi","LinkResult","doDisconnectOutput","some","fromNode","toAnother","newOne","slimIO","doDisconnectInput","skipSourceLinks","validateSource","doConnect","prev","current","isUnlinkable","NotFoundError","hasInput","skip","targetIO","validateTarget","sourceIO","result","logError","alert","propertyKey","descriptor","fn","ErrorCallbackHandler","errHandler","AsyncErrorHandler","DefaultNodeDbHelper","AsyncDbHelper","oneArgs","listNodes","_id","$in","query","updateNode","$set","threeArgs","addNode","batchInsertNodes","insertedNodes","batchDeleteNodes","total","twoArgs","removeNode","item","SerializedObject","CryptoJS","CryptoUtils","encrypt","AES","decrypt","cipherText","enc","Utf8","UiNode","defaultTitle","uiElementType","titlePrefix","isDashboardNode","uiPanelValue","onNodeChangePanelOrTitle","changeTitle","newSettings","newName","onNodeRemoved","sendToDashboard","panelName","storeInDatabase","mess","Statistics","onInputUpdated","DefaultGlobalNodeRegistry","createKey","GlobalNodeRegistry","NodeRegistryHelper","allSettled","registerNode","results","accumulate","RegistryResult","standardize","unregisterNode","reject","status","reason","errors","objects","idGenerator","genContainerId","_parent","shouldGenerateNid","genNodeId","cNode","promises","all","concat","y","xs","install","Green","argv","envFile","envFileAbsPath","isAbsolute","cwd","global","__rootdirname","__dirname","App","NODE_ENV","registerNodeTypes","Server","Dashboard","dashboardSocket","initRoot","connectDatabase","asyncLoadDatabase","onDatabaseReady","catch","onDatabaseError","dataBase","enable","useInternalDb","Backend","configApp","noArgs","getNodes","NodeTree","NoChangeId","compute","flatten","registerNodes","loadFromDatabase","startBackend","run","exit","editorSocket","app","PACK_UP_NODES","IMPORT_NODES","EXPORT_NODES","CLONE_NODES","REMOVE_NODES","CREATE_NODE","CREATE_LINK","REMOVE_LINK","MOVE_LINK","UPDATE_NODE_SETTING","ADD_NODE_INPUT","ADD_NODE_OUTPUT","REMOVE_NODE_INPUT","REMOVE_NODE_OUTPUT","nn","os","si","pkg","OsUtils","command","options","exec","stdout","stderr","hostname","cpuTemperature","fsSize","valueObject","cpu","osInfo","system","systemInfo","model","mem","systemTime","hostName","getCurrentWiresVersion","dataPath","cleanUpInterval","dbPath","dbName","NeDBDataStore","persistence","setAutocompactionInterval","load","loadDatabase","Joi","string","required","mustExisted","ListValidator","PromiseActor","singleton","FileUtils","dirname","__filename","dirPath","fs","readdir","files","file","fileName","existsSync","open","fd","writeFile","directoryPath","directory","normalize","code","mkdir","mkdirSync","filePath","readFile","buff","fileContent","Boolean","line","index","objStringify","json","appendFile","filepath","checkFileExists","unlink","ipDb","createFile","encoding","edgeApi","SEND_PAYLOAD_TO_CHILD","ADD_POINT","REMOVE_POINT","edgeIp","edgePort","edgeApiVer","PointValueCreator","init","presentValue","priority","priorityArray","DefaultPointValue","normalizePriorityArray","by","pa","highestValue","find","isResetState","createPriorityArray","funcName","enableDebug","itemName","itemNullable","RegistryItemExistedError","DispatchNode","point","getPoint","pubSubSingleton","addPoint","getDisplayPointName","removePoint","renamePoint","getSelectedProtocol","getSelectedPoint","pointName","getSelectedPointName","connect","disconnect","names","parentNode","getParentNode","reverse","UNKNOWN_POINT_NAME","Icons","aiColour","uiMainIcon","uiMainColour","logicMainColour","logicAndIcon","logicOrIcon","logicNotIcon","compareGreaterIcon","mathMainColour","mathMainIcon","mathAddIcon","mathSubIcon","mathDivideIcon","mathTimesIcon","edgeNetwork","Mixin","entry","entryId","assign","entryFactory","namePrefix","createSettingForm","broadcastSettingsToClients","broadcastTitleToClients","settingFields","applyEntry","createEntry","displayError","deactivate","READONLY","isEqual","updateEntry","deleteEntry","getTakenIdentifiers","takenIdentifiers","identifier","makeIdentifier","globalSiblings","constructor","toUpperCase","self","getNodeType","docs","deviceID","getPlatform","clientId","Influx","HistoryMode","DataBaseType","HistoryBase","alarmCount","tagCount","lastTrigger","GROUP","POSTGRES","InfluxDB","addInputWithSettings","COV","PERIODIC","TRIGGER_ONLY","addHistoryConfiguration","historyFunctionsForAfterSettingsChange","assignInputsOutputs","tableNameInput","pointNameInput","resetOutputs","doPeriodicHistoryFunctions","clearStoredHisInput","updateHistoryCountOutput","doNonPeriodicHistoryFunctions","timeoutFunc","histTriggerInput","histErrorOutput","storedHistCountOutput","lastHistExportOutput","valueInput","takeValueFromInput","setSettingsConfig","groups","conditions","period","weight","periodUnits","checkTriggered","storeLogEntry","checkCOV","trySendStoredData","points","tagList","fields","timestamp","valueOf","tags","errorFlag","clientIdFromPlat","deviceIdFromPlat","getClientIdDb","getDeviceIdDb","multiPointPost","deviceid","clientid","ts","toISOString","pgUrl","method","writeOptions","client","writePoints","configSettings","changeInputDynamically","changeAlarmsCount","renameAlarmInputs","changeTagsCount","persistProperties","storageLimit","minuteRound","nearestFutureMinutes","alarmNum","j","shift","trigger","threshold","isPeriodic","debugInfo","changeInputsCount","alarmsToAdd","insertIntoObjectAtPosition","tagsToAdd","Grey","childNode","createMessage","pointType","pointId","GET_BACNET_CLIENT","GET_NETWORK_NODE","GET_POINTS","GET_PRESENT_VALUE","SEND_POINT_VALUE","ADD_DEVICE","REMOVE_DEVICE","WRITE_PRESENT_VALUE","MockHasPointOutputObservers","MOCK","PointOutputObserver","outputSlots","connStatus","pointValue","convert","Base","PointNodeMixinBase","_iPresentValue","_iPriority","_iPriorityArrayLot","_iPriorityArrayJson","_sInputGroup","_sInputMethod","_sDecimal","_oOut","_oPriority","_oPriorityArray","flowHandler","initializePointBySettingObject","notifyOutput","handleOnUpdate","pointObservers","updateTitle","handleDynamicInput","initializePointBySettingInput","reEvaluateSettingByInput","inputMethod","InputMethod","enumValueOf","VALUE_PRIORITY","valueInputIdx","priorityInputIdx","PRIORITY_ARRAY_LOT","startIdx","priorityArrayInputIdx","PRIORITY_ARRAY_JSON","valueOutputIdx","priorityOutputIdx","priorityArrayOutputIdx","modelSettingKey","enumKey","presentValueType","cfg","computeTitle","st","cur","oldInputMethod","newInputMethod","hideInput","showInput","show","recomputeInputLinks","MockCentralizedListener","LISTENER","eventSourceId","observers","observer","ConnectionOutput","ConnectionOutputObserver","ConnectionStatus","lookupByLabel","itselfConnected","isError","ExternalConnectionNodeMixin","ExternalConnectionNodeMixinBase","AbleEnableNode","connectionStatus","UNCONNECTED","statusOutputIdx","errorOutputIdx","isEnabled","isConnConnected","CONNECTED","DISCONNECTED","getConnectionStatus","DependantConnectionNodeMixinBase","executeFunction","isParentConnected","parentConnectionNode","isConnected","statusObserver","handleError","cbHandler","param","param1","param2","param3","NormalEntry","_nodeType","service_id","service_name","cRegistry","listByContainer","getNodesInContainer","network","cp","set_ip_address","ip","IpAddressUtils","get_interfaces_list","iface","upDown","newIP","netNetmask","newGateway","newNameserver","checkIP","isV4Format","checkNetMask","checkGateway","nameserver","execSync","substring","setIpDHCP","ipAddress","subnetMask","gateway","setIP","interface1Eth","dhcp1Eth","eth1Ip","eth1Sub","eth1Gate","eth1NameServer","interface2Eth","dhcp2Eth","eth2Ip","eth2Sub","eth2Gate","eth2NameServer","msgFailToUpdate","interfaceEth1","dhcpEth1","ethIp1","ethSub1","ethGate1","ethNameServer1","interfaceEth2","dhcpEth2","ethIp2","ethSub2","ethGate2","ethNameServer2","checkIpValidEth1","checkIpValid","checkIpValidEth2","interfacesArray","eth1","interface","dhcp","eth2","subnetMaskLength","subnet","ip_address","prefix","nameservers","configure","UuidUtils","dataArray","isUUID","createDirectory","create8DigId","createUUID","random","create12DigId","ModbusByteOrder","TYPES","INT16","UINT16","INT32","UINT32","FLOAT32","INT64","UINT64","DOUBLE64","ENDIAN","LEB_BEW","LEB_LEW","BEB_LEW","BEB_BEW","readByteOrder","buffer","offset","endian","buf","swap16","swap32","swap64","readInt16LE","readUInt16LE","readInt32LE","readUInt32LE","readFloatLE","readDoubleLE","writeValue","alloc","writeInt16LE","writeUInt16LE","writeInt32LE","writeUInt32LE","writeFloatLE","writeDoubleLE","bsaClientConfig","auth","headers","exp","PSYCHROLIB_UNITS","PSYCHROLIB_TOLERANCE","IP","SI","SetUnitSystem","UnitSystem","GetUnitSystem","isIP","GetTRankineFromTFahrenheit","T_F","GetTFahrenheitFromTRankine","T_R","GetTKelvinFromTCelsius","T_C","GetTCelsiusFromTKelvin","T_K","GetTCelsiusFromTFahrenheit","GetTFahrenheitFromTCelsius","GetTRankineFromTCelsius","GetTKelvinFromTFahrenheit","GetTFahrenheitFromTKelvin","GetTRankineFromTKelvin","GetTCelsiusFromTRankine","GetTKelvinFromTRankine","GetTWetBulbFromTDewPoint","TDryBulb","TDewPoint","Pressure","HumRatio","GetHumRatioFromTDewPoint","GetTWetBulbFromHumRatio","GetTWetBulbFromRelHum","RelHum","GetHumRatioFromRelHum","GetRelHumFromTDewPoint","GetSatVapPres","GetRelHumFromTWetBulb","TWetBulb","GetHumRatioFromTWetBulb","GetRelHumFromHumRatio","GetTDewPointFromRelHum","VapPres","GetVapPresFromRelHum","GetTDewPointFromVapPres","GetTDewPointFromTWetBulb","GetTDewPointFromHumRatio","GetRelHumFromVapPres","dLnPws_","dLnPws","T","BOUNDS","TDewPoint_iter","lnVP_iter","lnVP","d_lnVP","GetVapPresFromTDewPoint","TWetBulbSup","TWetBulbInf","BoundedHumRatio","Wsstar","GetSatHumRatio","GetHumRatioFromVapPres","GetVapPresFromHumRatio","GetSpecificHumFromHumRatio","GetHumRatioFromSpecificHum","SpecificHum","GetDryAirEnthalpy","GetDryAirDensity","GetDryAirVolume","GetTDryBulbFromEnthalpyAndHumRatio","MoistAirEnthalpy","GetHumRatioFromEnthalpyAndTDryBulb","LnPws","SatVaporPres","GetSatAirEnthalpy","GetMoistAirEnthalpy","GetVaporPressureDeficit","GetDegreeOfSaturation","GetMoistAirVolume","GetTDryBulbFromMoistAirVolumeAndHumRatio","MoistAirVolume","GetMoistAirDensity","GetStandardAtmPressure","Altitude","GetStandardAtmTemperature","GetSeaLevelPressure","StnPressure","TColumn","H","GetStationPressure","SeaLevelPressure","CalcPsychrometricsFromTWetBulb","CalcPsychrometricsFromTDewPoint","CalcPsychrometricsFromRelHum","BACnetEnumsUnits","COMMON_METRIC","COMMON_IMPERIAL","Electrical","Energy","Enthalpy","Entropy","Force","Frequency","Humidity","Length","Light","Mass","Flow","Temperature","Time","Torque","Velocity","Volume","VolumetricFlow","Other","unitCategory","NO_UNITS","PERCENT","PERCENT_RELATIVE_HUMIDITY","DEGREES_CELSIUS","KILOPASCALS","DEGREES_FAHRENHEIT","POUNDS_FORCE_PER_SQUARE_INCH","MILLIAMPERES","AMPERES","AMPERES_PER_METER","AMPERES_PER_SQUARE_METER","AMPERE_SQUARE_METERS","DECIBELS","DECIBELS_MILLIVOLT","DECIBELS_VOLT","FARADS","HENRYS","OHMS","OHM_METERS","MILLIOHMS","KILOHMS","MEGOHMS","MICROSIEMENS","MILLISIEMENS","SIEMENS","SIEMENS_PER_METER","TESLAS","VOLTS","MILLIVOLTS","KILOVOLTS","MEGAVOLTS","VOLT_AMPERES","KILOVOLT_AMPERES","MEGAVOLT_AMPERES","VOLT_AMPERES_REACTIVE","KILOVOLT_AMPERES_REACTIVE","MEGAVOLT_AMPERES_REACTIVE","VOLTS_PER_DEGREE_KELVIN","VOLTS_PER_METER","DEGREES_PHASE","POWER_FACTOR","WEBERS","JOULES","KILOJOULES","KILOJOULES_PER_KILOGRAM","MEGAJOULES","WATT_HOURS","KILOWATT_HOURS","MEGAWATT_HOURS","WATT_HOURS_REACTIVE","KILOWATT_HOURS_REACTIVE","MEGAWATT_HOURS_REACTIVE","BTUS","KILO_BTUS","MEGA_BTUS","THERMS","TON_HOURS","JOULES_PER_KILOGRAM_DRY_AIR","KILOJOULES_PER_KILOGRAM_DRY_AIR","MEGAJOULES_PER_KILOGRAM_DRY_AIR","BTUS_PER_POUND_DRY_AIR","BTUS_PER_POUND","JOULES_PER_DEGREE_KELVIN","KILOJOULES_PER_DEGREE_KELVIN","MEGAJOULES_PER_DEGREE_KELVIN","JOULES_PER_KILOGRAM_DEGREE_KELVIN","NEWTON","CYCLES_PER_HOUR","CYCLES_PER_MINUTE","HERTZ","KILOHERTZ","MEGAHERTZ","PER_HOUR","GRAMS_OF_WATER_PER_KILOGRAM_DRY_AIR","MICROMETERS","MILLIMETERS","CENTIMETERS","KILOMETERS","METERS","INCHES","FEET","CANDELAS","CANDELAS_PER_SQUARE_METER","WATTS_PER_SQUARE_FOOT","WATTS_PER_SQUARE_METER","LUMENS","LUXES","FOOT_CANDLES","MILLIGRAMS","GRAMS","KILOGRAMS","POUNDS_MASS","TONS","GRAMS_PER_SECOND","GRAMS_PER_MINUTE","KILOGRAMS_PER_SECOND","KILOGRAMS_PER_MINUTE","KILOGRAMS_PER_HOUR","POUNDS_MASS_PER_SECOND","POUNDS_MASS_PER_MINUTE","POUNDS_MASS_PER_HOUR","TONS_PER_HOUR","Power","MILLIWATTS","WATTS","KILOWATTS","MEGAWATTS","BTUS_PER_HOUR","KILO_BTUS_PER_HOUR","HORSEPOWER","TONS_REFRIGERATION","PASCALS","HECTOPASCALS","MILLIBARS","BARS","MILLIMETERS_OF_WATER","CENTIMETERS_OF_WATER","INCHES_OF_WATER","MILLIMETERS_OF_MERCURY","CENTIMETERS_OF_MERCURY","INCHES_OF_MERCURY","DEGREES_KELVIN","DEGREES_KELVIN_PER_HOUR","DEGREES_KELVIN_PER_MINUTE","DEGREE_DAYS_CELSIUS","DEGREE_DAYS_FAHRENHEIT","DELTA_DEGREES_FAHRENHEIT","DELTA_DEGREES_KELVIN","YEARS","MONTHS","WEEKS","HUNDREDTHS_SECONDS","NEWTON_METERS","MILLIMETERS_PER_SECOND","MILLIMETERS_PER_MINUTE","METERS_PER_SECOND","METERS_PER_MINUTE","METERS_PER_HOUR","KILOMETERS_PER_HOUR","FEET_PER_SECOND","FEET_PER_MINUTE","MILES_PER_HOUR","CUBIC_FEET","CUBIC_METERS","IMPERIAL_GALLONS","MILLILITERS","LITERS","US_GALLONS","CUBIC_FEET_PER_SECOND","CUBIC_FEET_PER_MINUTE","CUBIC_FEET_PER_HOUR","CUBIC_METERS_PER_SECOND","CUBIC_METERS_PER_MINUTE","CUBIC_METERS_PER_HOUR","IMPERIAL_GALLONS_PER_MINUTE","MILLILITERS_PER_SECOND","LITERS_PER_SECOND","LITERS_PER_MINUTE","LITERS_PER_HOUR","US_GALLONS_PER_MINUTE","US_GALLONS_PER_HOUR","DEGREES_ANGULAR","DEGREES_CELSIUS_PER_HOUR","DEGREES_CELSIUS_PER_MINUTE","DEGREES_FAHRENHEIT_PER_HOUR","DEGREES_FAHRENHEIT_PER_MINUTE","JOULE_SECONDS","KILOGRAMS_PER_CUBIC_METER","KW_HOURS_PER_SQUARE_METER","KW_HOURS_PER_SQUARE_FOOT","MEGAJOULES_PER_SQUARE_METER","MEGAJOULES_PER_SQUARE_FOOT","NEWTON_SECONDS","NEWTONS_PER_METER","PARTS_PER_MILLION","PARTS_PER_BILLION","PERCENT_OBSCURATION_PER_FOOT","PERCENT_OBSCURATION_PER_METER","PERCENT_PER_SECOND","PER_MINUTE","PER_SECOND","PSI_PER_DEGREE_FAHRENHEIT","RADIANS","RADIANS_PER_SECOND","REVOLUTIONS_PER_MINUTE","SQUARE_METERS_PER_NEWTON","WATTS_PER_METER_PER_DEGREE_KELVIN","WATTS_PER_SQUARE_METER_DEGREE_KELVIN","PER_MILLE","GRAMS_PER_GRAM","KILOGRAMS_PER_KILOGRAM","GRAMS_PER_KILOGRAM","MILLIGRAMS_PER_GRAM","MILLIGRAMS_PER_KILOGRAM","GRAMS_PER_MILLILITER","GRAMS_PER_LITER","MILLIGRAMS_PER_LITER","MICROGRAMS_PER_LITER","GRAMS_PER_CUBIC_METER","MILLIGRAMS_PER_CUBIC_METER","MICROGRAMS_PER_CUBIC_METER","NANOGRAMS_PER_CUBIC_METER","GRAMS_PER_CUBIC_CENTIMETER","BECQUERELS","MEGABECQUERELS","GRAY","MILLIGRAY","MICROGRAY","SIEVERTS","MILLISIEVERTS","MICROSIEVERTS","MICROSIEVERTS_PER_HOUR","DECIBELS_A","NEPHELOMETRIC_TURBIDITY_UNIT","PH","GRAMS_PER_SQUARE_METER","MINUTES_PER_DEGREE_KELVIN","networkNode","deviceNode","pointNode","bacnet","Util","group","propertyId","getEnumName","enum","PropertyIdentifier","MQTT_CLIENT_NODE","REGISTER_MQTT_PUBLISHER","UNREGISTER_MQTT_PUBLISHER","UPDATE_MQTT_PUBLISHER","PUBLISH_MQTT_DATA","REGISTER_MQTT_SUBSCRIBER","UPDATE_MQTT_SUBSCRIBER","UNREGISTER_MQTT_SUBSCRIBER","REGISTER_MQTT_POINT","UPDATE_MQTT_POINT","UNREGISTER_MQTT_POINT","MqttCentralizedPointOutputObserver","CentralizedPointOutputObserver","publisherTopic","publishedTopic","subscriberTopic","subscribedTopic","MqttClientNode","ProtocolDeviceNode","_oTopicsSlot","publishers","MqttPublisherStore","subscribers","MqttSubscriberStore","mqttClient","retriedItems","mixinEnableInputSetting","PASSWORD","authentication","registerMqttPoint","updateMqttPoint","unregisterMqttPoint","afterUnregister","unregister","registerMqttSubscriber","updateMqttSubscriber","unregisterMqttSubscriber","publishMqttData","listNodeIds","subscribersByTopic","lookup","topic","createMqttConnectionOptions","DefaultMqttClient","retryConnection","updateClientStatus","onReceiveMessage","errMsg","notifyConnStatusOutput","listen","converter","publish","subscribe","mqttClientDoUnsubscribe","unsubscribe","toPublisher","toSubscriber","BaseNodeLinkVisitor","DefaultLinkVisitor","ioKey","ios","nid","inputVisitor","outputVisitor","nodeVisitor","updateAsync","perNode","containerVisitor","TWEAK_POS","pos1","pos2","relative","p1","guard","p2","origin","bottomRight","positions","avg","eventPos","bottomRightPos","fallbackX","fallbackY","left","top","height","aLeft","aBottom","aRight","aTop","bLeft","bBottom","bRight","bTop","delta","x1","cos","acos","x2","PI","x3","cbrt","DispatcherRegistry","unMap","store","soft","listeners","updateProtocols","storePoint","respKey","extractData","assignAllTo","factoryEntry","response","factory","ApiContainerNode","extra_node_types","childNodeType","movable","findFreeIdentifier","api","initAPI","old","onAfterSettingsChange","onCreated","nameSuffix","onRemoved","fetchChildren","children","childIds","childNodes","collectChildNodes","existingChildNodes","obsoleteChildNodes","is_protected","processNextChildEntry","onGetMessageToEditorSide","runWithEditor","remaining","pop","existingNode","syncWithBackend","persistConfiguration","nodeType","TopLevelApiContainerNode","ignore_remove","removable","schemaMiddleware","req","res","details","authMiddleware","isAuthenticated","resp","event","send","errorFunc","NodeCRUDService","NodeService","reg","CreationResult","metadata","findNodes","batchDeleteByIds","initETLResult","RemoveResult","ETLResult","containerId","genMessage","className","dest","cleanupResult","rr","NodeETLService","atPos","nodeIds","doExport","doPackUp","doImport","CloneResult","ExportResult","ImportResult","exportIds","listByIds","CONTAINER_NODE_TYPE","createFolder","tree","batchInsert","pNodes","removeNodes","pr","PackResult","destCId","contextCId","containers","nodeMap","analyze","build","remain","mapContainers","remapNodes","buildBranch","NodeBranch","siblingIds","generateId","descendant","relativePos","computeRelativePositions","lr","ContainerValidator","NodeValidator","batchCreate","normalizeNode","branch","flattenBranch","allPos","avgPos","sub","linkResult","oldId","lookupNodeType","move","normalizeNodeInputs","normalizeNodeOutputs","getLinkByInput","getLinkByOutput","AbstractFolderIONode","isUnderContainer","correctParentIO","inputOrOutput","findParentIOById","after","before","newObj","insertAfter","matchBoth","foundFlag","prop","TAGNAME","CHILLER","CHWP","PlantChilledWater","BuildingInfo","HeatExchanger","CoolingTower","CWP","PlantCoolingTower","Boiler","HWP","BoilerPlant","FloorControl","AHU_VAV","AHU_CAV","FCU","FTU","PAC_HotWaterReheat","PAC_ReverseCycle","PAC_ElectricReheat","PAC_Electric_Reheat_WaterCooled","OutsideAirFan","SupplyAirFan","ReturnAirFan","AHUReturnAirFan","CarParkSupplyAirFan","CarParkExhaustAirFan","ToiletExhaustAirFan","KitchenExhaustAirFan","ExhaustAirFan","GeneralExhaustAirFan","VAV","Power_SubMeter","PowerSiteMeter","Gas_SubMeter","Gas_SiteMeter","Water_subMeter","Water_SiteMeter","tagRefs","acronyms","BMS","RTD","AHU","CW","RTU","RH","EVP","CT","CTF","RT","RAT","SAT","ZT","CHL","BLR","AC","RAC","EVAP","HVAC","HLI","BTU","CMD","REM","SYS","RV","SOL","DX","BACnet","LoRa","KNX","LoRaWAN","Modbus","LON","N2","SP","SETP","LIQ","PMP","TEMP","TMP","PRESS","EEV","DISCH","tagCategory","kind","unit","equipType","compareType","s1","s2","inputType","Equals","NotEquals","GreaterThanEqual","GreaterThan","LessThanEqual","LessThan","Includes","startsWith","endsWith","valueWithKey","findVal","setProps","MATH_FUNC_TYPE","MathUtils","out","mathFuncType","mathValue","NA","ADD","SUBTRACT","MULTIPLY","DIVIDE","REMAINDER","EXP","BOOL_INVERT","invert","ONE_TO_TRUE","oneToTrue","TRUE_TO_ONE","trueToOne","NUMBER_INVERT","numInvert","validateNumbers","every","EdgeGPIOUtils","value_420","min_target","max_target","ui_value","min_range","max_range","scaleToGPIOValue","minOutput","maxOutput","minInput","maxInput","pinValue","scaleFromGPIOValue","uiAsDI","diInvert","BACNET_SERVER_NODE_TYPE","REGISTER_BACNET_POINT","UPDATE_BACNET_POINT","PUSH_BACNET_POINT_VALUE","UNREGISTER_BACNET_POINT","BACNetCentralizedPointOutputObserver","objectId","objectInstance","objectType","objectName","BacnetNodeServerStore","OneIdentifierOneNodeStore","BACnetServerNode","_oPointsSlot","afterRegister","afterUpdate","pushValue","PointKind","lookupByValue","bp","BacnetPointCreator","broadcastNameToClients","deviceId","databaseRevision","address","broadcast","apduTimeout","updatePoint","updateValue","delObject","DefaultContainerErrorNode","nodeIdErrors","AbstractContainerStore","cb","checkExistence","afterUnregisterIfExisted","addError","alreadyExistedMsg","removeError","listErrors","predicate","_title","mixinConnectionStatusOutput","startOrStop","DefaultObservable","kickoff","createThenStart","statusObservable","connObserverNodes","notify","handleErrorInKickOff","enumValues","enableSettingKey","enableDescription","enableInputIdx","parentIsEnabled","nodeUtil","propertyTypeMap","pi","typeEnumMap","OBJECT_TYPE","ObjectType","typeId","readOnly","subscriptions","getPropName","callbacks","_value","newValue","onPropertyChanged","valueAsString","inspect","custom","enumKeys","pk","ANALOG_INPUT","ANALOG_OUTPUT","ANALOG_VALUE","BINARY_INPUT","BINARY_OUTPUT","BINARY_VALUE","MULTI_STATE_INPUT","MULTI_STATE_OUTPUT","MULTI_STATE_VALUE","DefaultBacnetPoint","LORA_DATA_TYPE_NAMES","LORA_DATA_TYPE_LENGTHS","LoRaRawTwoWayInput","payloadDefinition","updateOutputs","stringToDataTypes","senderId","parseError","pointParsed","fill","readUInt8","type_length","INT8","readInt8","UINT8","FLOAT","outputsCount","publisher","subscriber","ps","OneIdentifierManyNodeStore","setNodeState","backendSyncCfg","ensureParentContainers","refreshPeriodically","findOrCreateNode","EdgesParentContainerNode","edgesContainer","ModulesParentContainerNode","modulesContainer","ServicesParentContainerNode","servicesContainer","type_name","root","refreshParentContainers","_map","u","EdgeHelp","NetworkDesc","EdgeContainerNode","EdgeAPI","customer_code","side_code","firmware_version","data_version","NetworkContainerNode","NetworkAPI","protocols","DeviceContainerNode","edge_node","errorMessage","DeviceAPI","manufacturer","GroupContainerNode","PointNode","network_node","edge_id","FolderAPI","device_node","PointAPI","edge","measure_unit","precision","backend","Point","fetchPointData","updatePointData","device_id","Api","_objId","fetchMany","objId","fetchOne","patch","newEntry","Edge","post","Network","Device","Folder","put","ModuleNode","ModuleAPI","ServiceNode","ServiceAPI","BaseServiceNode","required_settings","service_type","published_by","deploy_id","deploy_location","created_at","modified_at","settingsHeaderComponent","template","areSettingsValid","displayMessage","broadcastPropertiesToClients","ApplicationAPI","Service","ApiNode","uiPanels","getUiPanels","panels","removeElementForNode","removeEmptyPanels","sendUiPanel","newPanelName","newTitle","uiElemet","newPanel","getUiPanel","subPanels","uiElements","updateUiPanel","addUiPanel","getUiPanelsList","changed","panel","pan","removeUiPanel","oldPanel","subPanel","expressValidator","workingDir","express","locals","middleware","routes","handleErrors","start_io","webServer","use","morgan","statusCode","bodyParser","limit","urlencoded","extended","cookieParser","publicFolder","static","apiEditorSetup","normalizePort","set","http","createServer","on","syscall","addr","io_root","EditorServerSocket","DashboardServerSocket","wireNameSocket","WireNameServerSocket","pingPongSocket","PingPongServerSocket","of","cont","getSubNode","renameFunction","room","leave","checkContainerNodeValidity","sendSlotsValues","connectedSocket","connected","rooms","slotsValues","getNodesIOValues","subNodes","formatAndTrimValue","httpServer","socketServer","SocketIO","handshake","ApiEditorRouter","router","Router","nodeHandler","onList","onRemove","onCreate","onPackUp","onExport","onClone","onImport","linkHandler","onMove","activeNodesIds","updateActiveNodes","getDb","subcontainers","headersSent","legacySetup","_nodeHandler","ApiNodeHandler","_linkHandler","ApiLinkHandler","setup","ApiHandler","linkService","NodeLinkService","emitSuccess","emitError","another","handler","persist","fromLink","re","crudService","etlService","createNode","packUpNodes","cloneNodes","exportNodes","NodeArrayValidator","allowUnknown","importNodes","render","container_id","nodeEditor","redirect","wire","getWireName","changeWireName","wireName","authUserSchema","encryptTextSchema","route","encryptedText","authUser","addAuthUser","getAuthUser","deleteAuthUsers","getAuthToken","stringHtml","getHelpComment","changeHelpComment","platform","updatePlatform","hostFile","out8","wiresPlatUrlBuilder","EPWiresUpdate","systemAll","eth","getEth","updateEth","parseBool","updateIpRubixCompute","PLAT","ep","AndNode","boolean","and","allInputs","getDefinedInputValues","areAllInputsTrue","OrNode","or","anyTrue","XorNode","xor","in1","in2","NotNode","not","emitTransformedInput","ToggleNode","toggle","toggleOnAny","inputUpdated","lastVal","OneShotNode","clearTimers","lastFireValue","lastResetValue","timeUnits","reset","fire","delay","delayMilli","remainingFunc","remainingUpdateMillis","remainingUpdateSize","clearTimeout","MinOnOffNode","minOn","timeMinOn","minOff","timeMinOff","timeOn","timeOff","minOnEnabled","minOffEnabled","minOnTime","minOffTime","lastValue","DelayOnNode","lastInput","lastReset","DelayOffNode","TickerNode","lastInterval","runState","ticker","EqualNode","compare","equal","GreaterNode","LessThanNode","BetweenNode","between","HysteresisNode","hysteresis","inMsg","risingEdge","fallingEdge","TypeCheckNode","DispatchListener","originalHeaderColor","connection","TREE_SELECT","blockNull","sendMessageToServerSide","updateSubscriptionTree","getSelectedPointText","getStore","matchProtocolItem","getMatchProtocolItem","protocolsItems","protocolsItem","protocolItems","protocolItem","item1","item2","Disconnect","Connect","Map","UnMap","Rename","Dispatch","ConnectionLocalTransmitterNode","receivers","getReceivers","updateTransmitterTopics","isEnable","ifNew","receiver","ConnectionLocalReceiverNode","topicList","inputEnable","inputNumTopic","topicDropdown","setTopic","transmitterTopic","updateChannel","broadcastOutputsToClients","transmitters","transmitter","pushSettings","manualTopicOption","changeTopicsCount","renameInputs","triggerTransmitterNodeUpdate","HubNode","hub","inputValue","ContainerInputNode","hasItself","containerNode","FOLDER_INPUT","ContainerOutputNode","recomputeOutputLinks","FOLDER_OUTPUT","BitMaskSingle","conversion","BIT","BYTE","BitMaskMultiple","mask","updateMask","BIT_START","IntToBits","setNewOutputs","START","BYTES","outputIndex","outputsLen","BoolToIntNode","IntToBoolNode","StringToBool","BufferToHexString","BufferToNumNode","dataEndian","writeUInt16BE","UnitConversionNode","ensureFromToConfig","createTreeSelectItems","asItem","measures","unitType","possibilities","categoryName","units","HexStringToBuffer","IntToFourByteArrayNode","EventCounterNode","inputData","CounterNode","counter","lastUp","lastDown","up","down","setValue","TriggeredRamp","countUp","currentVal","IntervalRampNode","lastEnable","WaveformNode","waveform","intervalTime","periodTime","amplitude","startTime","lastTime","recalculate","signalType","sin","sign","CSVMergeRowsNode","csv","outputCSV","addCSV","CSVMergeColumnsNode","originalColumnsArray","mergeColumnsArray","originalColumnsCount","mergeColumnsCount","BSACumulocityDeviceNode","cumulocity","createDevice","checkDeviceExists","deviceName","getDeviceName","managedObjects","c8y_IsDevice","BSACumulocityNode","measurementName","measurementType","seriesName","measurements","ALARM_TYPE","alarmConfig","WARNING","MINOR","MAJOR","CRITICAL","BSACumulocityAlarmNode","postAlarm","alarmInput","alarmName","severity","alarmID","FunctionNode","BaseFunctionNode","function","mixinScriptSetting","executeConfiguredScript","getScriptInput","emitResult","variables","NodeVM","timeout","sandbox","defaultScript","CODE_AREA","UuidNode","uuid","out12","out28","UiLabelNode","formatValue","setState","UiButtonNode","button","buttonText","sendIOValuesToEditor","UiSwitchNode","switch","getState","UiProgressNode","progress","UiSliderNode","slider","UiTextBoxNode","UiLogNode","messagesPerSec","updateMessPerSec","maxRecords","removeOldRecords","sendMessageToDashboardSide","rec","unshift","records","del","dropped","record","$push","$each","$slice","$unset","UiChartNode","chart","ConsoleNode","MAX_MESS_PER_SEC","timer","NotesNode","comments","nodeColour","INFO","WatchNode","dataUpdated","UPDATE_INTERVAL","watch","startSending","lastData","showValueOnInput","LinkErrorCheckNode","subContainers","searchThisContainer","searchSubContainers","checkLinksForInputOutputData","searchContainer","isTopRecursion","currentContainer","nodeList","numNodes","getNodeById","outputLinks","linkInfo","containerName","containerErrors","nodeName","nodeErrors","outputName","outputNum","inputNode","inputNodeName","inputNodeSlot","containerNum","OutputErrorCheckNode","checkForOutputsWithNoData","FiltersOnlyTrueNode","FiltersOnlyFalseNode","FiltersOnlyFromRangeNode","FiltersOnlyGreaterNode","FiltersOnlyLowerNode","FiltersOnlyEqualNode","FiltersPreventNullNode","FiltersPreventEqualNode","FiltersPreventDuplicatesNode","AnyDataStoreNode","history","someMoment","timezone","Intl","DateTimeFormat","resolvedOptions","timeZone","dateTz","timeFormatedArray","tz","csvString","_d","formatOutputs","InfluxDBNode","inName","inJsonInput","outError","outLastExport","outMsg","user","createClient","hasMeasurement","hasMeasurementTags","hasMeasurementFields","HttpError","SetupAPI","InfluxDB2Node","inEnable","getWriteApi","useDefaultTags","location","tag","field","floatField","stringField","booleanField","writePoint","toLineProtocol","close","HistoryNode","addHistorySettingsConfig","PointPersistence","preventDuplicates","TOPIC_OPTIONS","PointTagNode","inputOneNum","inputTwoNum","inputThreeNum","pointFeedbackNum","inputJsonNum","pointIdNumIn","equipRefNumIn","measurementNumIn","manualTagsNum","pointValNumOut","nameNumOut","topicNumOut","jsonNumOut","errorNumOut","onWatchChange","eventType","clientName","siteId","siteName","siteAddress","city","zip","country","lat","lon","pointFeedback","jsonInput","inputOne","inputTwo","inputThree","pointValueIsJSON","pointArray","in3","equipRef","toLocaleLowerCase","manualSettings","manualEquip","manualSensor","manualTags","tagSetting","tagType","pointArr","pointTags","outOut","DeadbandNode","hvac","deadband","setpoint","ThermostatNode","thermostat","clgMode","htgMode","clgSP","LeadLagStagingNode","ENABLESLOT","ROTATESLOT","UPSLOT","DOWNSLOT","DELAYSLOT","MINONSLOT","FAULTSTARTSLOT","JSONSLOT","ORDERSLOT","STAGESLOT","OUTPUTSTARTSLOT","updateCount","initializeOutputJSON","rotate","lastRotate","stageUP","stageDOWN","upDelay","minOnDelay","currentStage","stageChange","fault","faultArray","convertNumToLetter","setOutputs","resetController","setOutputJSON","updateOutputsCount","updateInputsCount","generateRotations","shiftVal","requiredFaultInputs","convertNumber","fromCharCode","enableInput","rotateInput","stageUpInput","stageDownInput","stageUpDelay","order","orderIndex","numUnits","stageArray","useFaultInputs","currentTime","stageStartTime","LeadLagSwitchNode","PACUnitControl","ZTSLOT","SPSLOT","CLGOFSTSLOT","HTGOFSTSLOT","STGUPSLOT","MDLYSLOT","ECONOASLOT","OATSLOT","ECONHISLOT","ECONLOSLOT","FSSLOT","CLGMSLOT","HTGMSLOT","COMPSTGSLOT","ECONOMSLOT","OADMPSLOT","RVSLOT","COMPSTARTSLOT","econoLow","econoHigh","updateStageCount","updateFSInput","fanStatus","fanStatusInput","disable","clgOffset","htgOffset","htgSP","offSPInterval","OATemp","checkEconoConditions","temp","OAD","econoDB","zoneTemp","modeChangeDelay","econoAllow","econoHighLimit","econoLowLimit","fanStatusActual","fanStatusEffective","fanStatusOffTime","compStage","econoMode","OADamper","compArray","setpointMode","numCompressors","econoConditionsDB","requireFanStatus","fanStatusOffDelay","htgModeEnd","clgModeEnd","PID","PIDFunctionNode","lastResetVal","pid","minOut","maxOut","inP","inI","inD","setSampleTime","setOutputLimits","setMode","setOutput","setBias","getOutput","initialize","manual","processVariable","bias","setPoint","setTunings","setControllerDirection","setInput","calculatePidOutput","Input","Setpoint","Kp","Ki","Kd","ControllerDirection","mySetpoint","inAuto","SampleTime","millis","myBias","ITerm","myOutput","current_value","setDirection","ki","dInput","kp","kd","dispKp","dispKi","dispKd","SampleTimeInSec","NewSampleTime","ratio","Min","Max","Mode","newAuto","getKp","getKd","getKi","getMode","getDirection","controllerDirection","getInput","getSetPoint","getBias","ToggleDurationNode","runtime","offDelay","remainingMins","runtimeVal","startCountdown","onExecute","psychrolib","PsychrometricCalculationsNode","psychro","psychrometrics","setConversionFunction","onInputOrSettingsChange","input1","input2","input3","clearOutputs","outputArray","conversionFunction","EnergyUnitConversionNode","PowerUnitConversionNode","VolumeUnitConversionNode","TempConvertNode","AtmosphericPressureNode","updateTitleAndFunction","altitude","pressure","PressureConvertNode","ActuatorSizingNode","updateTitles","outputm2","outputft2","KFactorNode","area","DP","airflow","kFactor","DPAirflowNode","KFactor","airflowCFM","airflowLS","ArrayBuilderNode","ArrayBuilderNumNode","ArrayCombineNode","merged","JSONBuilderNode","filterKeys","addInputs","getFilterKeys","dynamicOutputStartPosition","updateInputs","diffKeyFromPos","fromPos","JSONEnumBuilderNode","definition","JsonFilter","JsonObjFilter","JsonFilterCompare","jsonCheck","string2","JsonFilterMultiple","inInput","outJsonOutput","outputs_count","changeOutputsAndSettings","renameInputsOutputs","outputJson","changeMyOutputsCount","targetOutputCount","changeOutputsCount","getOutputNumber","JsonCheckerNode","isJson","JsonParse","JsonPreventDuplicates","getChanges","oldArray","newArray","older","jsonata","JsonQueryNode","queryInput","evaluate","AnyLatchNode","latch","lastLatchValue","BoolLatchNode","NumLatchNode","StringLatchNode","SetResetNode","lock","AddNode","math","settingOutput","MathSubNode","subtract","MathMultiplyNode","multiply","MathDivideNode","divide","div","MathAbsNode","absolute","MathModulusNode","modulus","MathPowNode","power","MathAcosNode","MathAsinNode","asin","MathAtanNode","atan","MathCbrtNode","MathCosNode","MathExpNode","MathLogarithmNode","log10","MathSinNode","MathSqrtNode","MathTanNode","tan","TriggerAddNode","MathTriggerSubNode","MathTriggerMultiplyNode","MathTriggerDivideNode","MathTriggerModulusNode","MathTriggerPowNode","geohash","GeoHashNode","miscellaneous","encode","decode","NumSeriesGenerator","factor","AddressHelperString","prepend","append","btoa","GetSchedulesNode","nube","setExecuteInterval","getDittoSchedules","dittoUrl","MathDecimalPlaceNode","MathFloorNode","floor","MathCeilNode","LimitNode","ScaleNode","scale","LinearShaperNode","inputCountBefore","renameInputsAndSettings","updateInputsLabels","pointFormatted","stepSize","stepIndex","valueAtPosition","positionInStep","startValueIndex","startValue","endValue","TimeFadeNode","updateInterval","fade","timerFinished","RateLimitNode","BoolConstantNode","NumConstantNode","StringConstantNode","JsonConstantNode","passNull","BoolPriorityNode","NumWritableNode","StringPriorityNode","GenericNode","addPrioritySettings","addHistorySettings","addPrioritySettingsConfig","priorityOnCreated","historyOnCreated","doPriorityFunctions","doHistoryFunctions","priorityFunctionsForAfterSettingsChange","HistoryConfig","isOutput","history_group","databaseType","useInterval","clientIDfromPlat","deviceIDfromPlat","foundDeviceID","foundClientID","inputVal","typeOfVal","valAsNum","setPeriodicLogging","isNumber","findMainContainer","PriorityConfig","input_group","inputName","inputNumber","highestPriorityIndex","initializePriorityArray","removeInputAtPosition","updatePriorityInputsFromSettings","addInputAtPosition","removeAll","startPosition","settingsArray","inputsArray","inputArrayatY","inputArrayatX","EmailNode","services","service","email","pass","subject","nodemailer","createTransport","sendMail","HttpMethod","HttpClientNode","GET","methodsWithBody","PATCH","PUT","POST","getSanitizedUrl","getSanitizedMethod","input_data","validateMethod","request","Edge28ApiNode","pointNodes","inAlarmTrigger","inHistoryTrigger","outVal","outMessageJson","outAlarm","_ui","_di","UI_timeoutFunc","DI_timeoutFunc","startInputPolling","pollUIs","sendPayloadToPointNodesFunc","pollDIs","edgeReadUI_Store","fetchPointValue","edgeReadDI_Store","sendPayloadToChild","pointsDI","pointsUI","pollInputsAndSend","POINT_TYPE","POINT_TYPE_TEXT","Edge28InputPointNode","DIGITAL","UI_DIGITAL","_0_10DC","_0_20MA","_4_20MA","_10K_THERMISTOR","isDigitalType","pointEnable","pointDebug","pointNumber","lowScale","highScale","mathFunc","unitsType","sendPointValue","pointOffset","NORMAL","sendJson","pointTypeText","mathSwitch","pointCalcs","limitValDc","limitValMaZero","limitValMaFour","scaleUI420ma","scale420maToRange","calc10kThermistor","uiType","Edge10kSensorUtils","raw10K","temps10K","OUTPUT_POINT_TYPE","OUTPUT_POINT_TYPE_TEXT","Edge28OutputPointNode","deviceContainerID","newSetting","resendTime","DO","UO_AS_DIGITAL","UO_AS_0_10DC","lastSendTime","inputChange","apiCall","nodeVal","writePointValue","Edge28LORAResetNode","resetLORAConnect","BACnetNetwork","bacnetClient","deviceNodes","inNetworkEnable","inDiscover","initializeBacnetClient","iAm","whoIs","networkNumber","networkNumberWhoIs","net","closeBacnetClient","Bacnet","broadcastAddress","Poll","BACnetDevice","isFirst","isPolling","shouldPoll","delayBetweenDevice","delayBetweenPoint","setBacnetClient","setPayloadsToPointNodes","addDevice","updateNetworkSettings","requestPoll","removeDevice","getNetworkNode","persistSettings","pntList","currentPollValue","polling","STOP","outputMsg","scanDeviceFunc","getBacnetClient","deviceAddress","writeProperty","adr","requestArray","DEVICE","OBJECT_LIST","readPropertyMultiple","readObject","OBJECT_IDENTIFIER","OBJECT_NAME","DESCRIPTION","UNITS","PRESENT_VALUE","readProperty","errorClass","objectInfo","objectProperties","findValueById","readObjectList","objectArray","readObjectFull","deviceObjects","mapToDeviceObject","readPresentValue","writePresentValue","pollingFuncOrTimeout","race","pollingFunc","selectPoint","manualPoint","BACnetPoint","pollCount","pollCountFail","inputInNum","outputOutNum","jsonOutNum","errorOutNum","logsOutNum","pointsList","getPoints","setPointsListItems","getPresentValue","objectTag","pointWriteEnable","setPointValue","bacnetPointName","setJsonOutput","assert","BE","BACnetObject","BACnetObjectProperty","deviceInfo","hostInfo","covListener","dev","APDU_TIMEOUT","_settings","getProperty","header","expectingReply","sender","forwardedFrom","enumType","confirmedService","ConfirmedServiceChoice","UnconfirmedServiceChoice","errorResponse","invokeId","ErrorClass","SERVICES","ErrorCode","REJECT_UNRECOGNIZED_SERVICE","ttl","bdt","resultResponse","BvlcResultFormat","SUCCESSFUL_COMPLETION","lowLimit","highLimit","SEGMENTATION_SUPPORTED","VENDOR_IDENTIFIER","iAmResponse","getObject","OBJECT","UNKNOWN_OBJECT","property3","PRIORITY_ARRAY","value2","encodePropValue","PROPERTY","UNKNOWN_PROPERTY","priorityValue","priorityNum","priorityArr","q","aa","pri","arrType","addProperty","ApplicationTags","REAL","simpleAckResponse","INVALID_ARRAY_INDEX","propertyName","objectIdName","READ_PROPERTY","readPropertyResponse","responseList","propGroup","propListFriendly","ASN1_MAX_PROPERTY_ID","ObjectTypesSupported","propList","ALL","getAllPropertyIds","PROPERTY_LIST","ASN1_ARRAY_ALL","errorCode","readPropertyMultipleResponse","monitoredObjectId","subscriberAddress","subscriberProcessId","lifetime","issueConfirmedNotifications","sendPropertyCov","OPTIONAL_FUNCTIONALITY_NOT_SUPPORTED","monitoredProperty","monitoredIndex","confirmedCOVNotification","encodedValue","BIT_STRING","createBitstring","NULL","UNSIGNED_INTEGER","SIGNED_INTEGER","DOUBLE","CHARACTER_STRING","ENUMERATED","OBJECTIDENTIFIER","typeName","SYSTEM_STATUS","DeviceStatus","OPERATIONAL","VENDOR_NAME","MODEL_NAME","FIRMWARE_REVISION","APPLICATION_SOFTWARE_VERSION","PROTOCOL_VERSION","PROTOCOL_REVISION","PROTOCOL_SERVICES_SUPPORTED","ServicesSupported","CONFIRMED_COV_NOTIFICATION","SUBSCRIBE_COV","READ_PROPERTY_MULTIPLE","WRITE_PROPERTY","I_AM","WHO_IS","SUBSCRIBE_COV_PROPERTY","MAX_APDU_LENGTH_ACCEPTED","Segmentation","SEGMENTED_BOTH","NUMBER_OF_APDU_RETRIES","DEVICE_ADDRESS_BINDING","DATABASE_REVISION","dynamicProperties","adpuTimeout","onUnhandledEvent","onRegisterForeignDevice","onWhoIs","onWriteProperty","onReadProperty","onReadPropertyMultiple","onSubscribeCov","onSubscribeProperty","reinitializeDevice","ReinitializedState","COLDSTART","bacnetPoint","isInteger","PRIORITY","objectTypeId","MandatoryProperties","PROTOCOL_OBJECT_TYPES_SUPPORTED","STATUS_FLAGS","EVENT_STATE","EventState","OUT_OF_SERVICE","EngineeringUnits","ignoreProps","propertyList","selfTypeId","missingProperties","selfName","missingPropertyNames","objectList","objType","objectsOfType","typeList","onObjectPropertyChanged","fullPropList","keyName","typeGroup","DEVICE_TYPE","OCTET_STRING","RELIABILITY","RELINQUISH_DEFAULT","BACnetServerPointNode","DependantConnectionNodeMixin","PointNodeMixin","mixinPointValueInputOutput","cast","listener","createPayload","mightOnlyValueChanged","equals","cov","changedOfValue","createPointValue","matchMQTT","BACnetServerRest","inputFault","outConnection","outNum","outJson","messageQueue","rateLimitMS","AUTOCOMPLETE","point_object","getObjectIdentifier","getPointObject","fetchPoints","selectedPoint","object_name","object_type","objectIdentifier","pointValueIn1","pointValueIn10","pointValueIn16","doPointWrite","getPointUUID","setEnable","setSelectedPoint","getEnable","disconnectFromBroker","connectToBroker","mqttMessage","getTopic","processMessage","end","SensorType","LoraSensorDecoderNode","watchdogDelay","nodeID","Droplet","MicroEdge","watchdog","microEdgeA1","microEdgeA2","microEdgeA3","sensorType","resetWatchdog","writeOutputs","dropletDecode","microEdgeDecode","watchdogTime","microEdgeOutputs","MicroEdgeAnalogs","analogInputs","Vref","V","R0","R","topicsBuilder","pulses","voltage","a1","a2","a3","rssi","snr","lastMessage","lastMessageTimeStamp","humidity","lux","movement","b1Sensor","b2_sensor","currentSensorType","LoRaRawTwoWayOutput","inputsUpdated","checkInputAndType","isOk","data_lengths","writeUInt8","writeInt8","LoRaRawPointsInput","addressPrefix","keyBuffer","nonce","outputOffset","updateSettings","encryptedBuffer","dataBuffer","loraRawCrypt","loraRawDecryptBuffer","LORA_RAW_ERROR","LRERR_NOERR","startPos","outputValues","pointCount","addrPrefix","LoRaRawPointsOutput","errorOutputIndex","nonceLen","encBuffer","loraRawEncryptBuffer","crypto","aesCmac","IV_DEFAULT","iv","LRERR_INVALID_KEY","LRERR_INVALID_IV","cipher","createCipheriv","setAutoPadding","final","cmacBlock","cmac","returnAsBuffer","LRERR_INVALID_PAYLOAD","LRERR_INVALID_CMAC","createDecipheriv","LoraSensorLegacyDecoderNode","keyHex","ModbusRTU","ModbusServerNode","tcpServer","createModbusServer","closeTcpServer","coils","registers","unitId","minAddress","maxInputAddress","maxAddress","bufferFactor","vector","getCoil","unitID","getInputRegister","readUInt16BE","getHoldingRegister","setCoil","setRegister","readDeviceIdentification","0","salveAddress","once","ServerTCP","ModbusSerialDeviceNode","outStatus","ipPort","ping","transport","sock","Socket","destroy","deviceEnable","DISABLED","ModbusPointNode","outModbusMessage","outArray","pointAddress","pointTimeout","pointLimitEnable","limitLow","limitHigh","valOffset","valPrecision","lastInputState","Transport","ModbusSerialNetworkNode","rs485DeviceName","isPortOk","isPortInUse","serialPortStatus","pollEnableSetting","tcpClients","outPortStatus","outPortMsg","TCP","manualPortNum","parity","dataBits","stopBits","devicePolling","registerDelay","baudRate","manualPort","container_db","devicesPoints","devices","getDevice","nodeDetailsMessage","sub_id","setupForPolling","poll","connectRTUBuffered","FIRST_START","pollDevicesPoints","getDevicesPoints","errorOnModbusDevicesExec","deviceCID","deviceAddressOffset","deviceObj","existingTcpClients","getTcpKey","isOpen","connectTCP","sendDeviceError","errorOnModbusPointsExec","pntAddr","pntType","pntOffset","pntVal","pntCid","pntId","pntDataType","pntDataEndian","modbusMethods","sendPointMessage","sendDeviceMessage","sendPointError","networkEnable","DO_NOT_INIT","ModbusMethods","regAddr","regLength","nodeInputValue","funcType","methodType","dataTypeCase","thisInstance","ft","pntSwitch","setID","readBool","nubeType","nubeAnalogueRead","typeDevice","cidDevice","doc","deviceSubCID","deviceTimeout","pntMathFunc","pntMathValue","pntTimeout","pointVal","topicsCount","useEnv","topics_count","topics","processQueue","msgAsNum","toFixedNumber","outInd","setMQTTOutput","MqttClientSingleNode","inData","inTopic","qos","retain","callbackWhenConnected","callbackWhenOffline","callbackIncomingMessage","connack","packet","cmd","onConnect","onClose","onDisconnect","onEnd","onError","onOffline","onPacketReceive","onPacketSend","onMessage","MqttPointNode","_iTopic","_sReqRes","mqttPoint","createMqttPointStoreItem","topicInputIdx","mqttTopic","isReqRes","SillyMqttPoint","MqttPointCreator","MqttPointValue","incomingMessage","MqttPointStoreItem","onConvertMessage","DefaultMqttPoint","MqttGenericNode","MqttGenericNodeMixinBase","unregisterAction","shouldRegister","registerAction","updateAction","doAfterUpdate","MqttGenericNodeMixin","mixinMqttTopicInputSetting","MqttBroker","stopBroker","decryptPass","statusBroker","startBroker","checkAuthentication","passwordFile","allowAnonymousIndex","allowAnonymous","allowAnonymousArray","passwordRefIndex","passwordRef","passwordRefArray","MqttTopicPartsNode","MQTTTopicBuilderNode","SerialPort","SerialConnectorNode","baudRates","closePort","connectToSerialPort","writePortData","listPorts","portName","autoOpen","Readline","parsers","pipe","delimiter","readPortData","formattedExecutionTime","write","portList","ports","WeeklyScheduleNode","daysArray","schedule","guess","makeHoursDropdown","makeMinsDropdown","startHour","startMin","endHour","endMin","scheduleOutput","weekly","events","schedID","tzOffset","utcOffset","offsetHours","offsetMins","rolloverFlag","startHourUTC","startMinsUTC","endHourUTC","endMinsUTC","sundayIndex","saturdayIndex","daysOutput","colour","hoursArray","minsArray","ScheduleMergeNode","inputString","inputObject","weeklyOutput","eventOutput","weeklySched","eventSched","ScheduleChecker","nextStart","nextStop","schedulePayload","zone","weeklyScheduleOutput","sched","ScheduleUtils","checkWeeklySchedule","scheduleStatus","isBefore","eventsOutput","eventScheduleOutput","checkEventsSchedule","eventSchedule","nextOn","nextOff","scheduleValue","dates","dtUTC","startMoment","endMoment","isAfter","weeklySchedule","getISOday","startArray","part","endArray","startMomentArray","isoWeekday","endMomentArray","MinMaxAvgNode","statistics","getDefinedInputsOrSettingsValues","AvgNode","MinNode","MaxNode","SumNode","MedianNode","RangeNode","RankNode","rank","outputCount","AnyStatAllNode","NumbersAverageNode","streams","resetToNull","NumbersHighestNode","NumbersLowestNode","NumbersSumNode","StreamMergeNode","GateNode","gate","StackNode","QueueNode","queue","DelayNode","delayedValues","DelayMeterNode","TimeFrequencyMeterNode","countWas","FlatlineNode","StringCaseAcronymsNode","StringCompareNode","string1","TextCutSubstringNode","StringJoinNode","TextStringLengthNode","StringIndexOfNode","searchFor","TextCharAtIndexNode","TextSplitStringsNode","currentIndex","lastStart","lastNext","splitNext","separator","splittedText","StringCaseChangeNode","toTitleCase","phrase","word","charAt","setTitleAndConversionFunction","TextASCIICodeNode","charCodeAt","TextASCIICharNode","StringBufferNode","useTrigger","bufferData","lastSend","lastClear","lastAdd","addTrigger","triggerInput","BoolSwitchNode","inA","inB","NumSwitchNode","StringSwitchNode","BoolSelectNode","NumSelectNode","StringSelectNode","BoolOutputSelectNode","active","NumOutputSelectNode","StringOutputSelectNode","HostInfo","systemMem","callSystemInfo","callInfo","PlatNode","haystackAbout","serverName","productVersion","SystemInfo","settingsConfig","settingsText","filteredNodeSettings","settingValue","outType","totalmem","freemem","networkInterfaces","uptime","homedir","arch","loadavg","getSysInfo","SystemBeepNode","beep","SystemExecuteNode","FlowExport","UpdateIPEdge28","timeStamp","getTimeStamp","interfaceEth0","eth0Ip","messageOutput","errorOutput","msgOut","newIpEth0","netNetmaskEth0","newGatewayEth0","newNameServerEth0","getInterfaces","enableInterfaceEth0","enableNetwork","disableNetwork","interfaceTypeEth0","writeChanges","reboot","checkIpSettingsEth0","bbbGetInterfaceDetails","bbbSetIPDHCP","bbbSetIPFixed","nodeColourChange","getActiveNetworks","getInterfaceEth0","networkUpDown","UpdateIP","newIpEth1","netNetmaskEth1","newGatewayEth1","newNameServerEth1","enableInterfaceEth1","interfaceTypeEth1","checkIpSettingsEth1","eth0","getInterfaceEth1","WiresVersion","getNodeJsVersion","getNPMVersion","TimeConvertNode","TimeConvertPlusNode","TIME","EPOCH","NEW_TS","timeSelection","timeConvertPlus","TimezoneConvertNode","tsCategory","local","region","tsType","TimezoneUtils","africaZones","americaZones","antarcticaZones","asiaZones","atlanticZones","australiaZones","europeZones","indianZones","pacificZones","ClockNode","clock","addOutputs","advanced","DateNode","dayString","toLocaleDateString","TimeDiffNode","date1","date2","diffTime","diffTotals","years","months","StopwatchNode","lastRunVal","stopwatch","CronJob","construe","CronIntervalNode","job","jobCronExp","dayBetweenStart","dayBetweenEnd","cronSetting","nextJobs","cronType","cronExp","nextDates","jsonataQuery","CronWeeklyNode","cronValidator","CronExpressionNode","valid","isValidCron","TimestampGeneratorNode","unix","COVNode","RandomNode","TriggeredInjectNode","inject","InjectNode","TimeIteratorNode","complete","lastStop","reqInterval","reqIterations","iterator","iterations","ScheduleAfterhoursOffWidgetNode","currentMode","remainingRuntime","widget","AHRuntime","modeInput","startSchedule","startAfterhours","schedInput","AHDuration","SchedulePrestartFixedNode","condition1_range1","condition1_range2","condition1_time","condition2_range1","condition2_range2","condition2_time","condition3_range1","condition3_range2","condition3_time","condition4_range1","condition4_range2","condition4_time","condition5_range1","condition5_range2","condition5_time","condition6_range1","condition6_range2","condition6_time","condition7_range1","condition7_range2","condition7_time","condition8_range1","condition8_range2","condition8_time","condition9_range1","condition9_range2","condition9_time","condition10_range1","condition10_range2","condition10_time","fromRange","toRange","UnknownNode","unknown","NeDbDatabase","authUserDatabase","userDatabase","nodeDatabase","dashboardDatabase","scheduleDatabase","historianDatabase","CLEANUP_INTERVAL","addUser","addOrUpdateUser","getUsers","getUser","getAsyncUsers","updateUser","getUsersCount","removeUser","dropUsers","getNode","dropNodes","dropUiPanels","addSchedule","updateSchedule","removeSchedule","addHistory","updateHistory","removeHistory","jwt","AuthUserDataSource","AbstractDatabase","findOne","multi","expiresIn","verify","decoded","DashboardDataSource","removed","HistorianDataSource","updatedCallback","removedCallback","NodeDataSource","ser_node","ScheduleDataSource","UserDataSource","usr"],"mappings":"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OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OAKA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OAEA,OACA,OAGA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OAGA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OAEA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OAEA,OACA,OAGA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,MACA,OACA,OACA,OACA,OACA,OAIA,OAGA,OACA,OACA,OAGA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OAEA,OAEA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,Q,8EC5RA,aACA,OACA,OACA,OAEA,MAAMS,UAAgB,EAAAt3D,aAEpB,cACEpjB,QACAd,KAAKskB,sBAAuB,EAC5BtkB,KAAK4kB,kBAAoB,EAAAplB,KAAKiC,QAC9BzB,KAAKoL,MAAQ,EAAAa,UAAUwvE,QAAQC,IAAItwE,MACnCpL,KAAKL,YAAc,EAAAsM,UAAUwvE,QAAQC,IAAI/7E,YACzCK,KAAK8S,UAAU,SAAU,EAAAtT,KAAKiC,SAC9BzB,KAAK8S,UAAU,UAA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A,cACA,eACA,cACA,aACA,kBACA,eACA,gBACA,aACA,YACA,aACA,gBACA,iBACA,YACA,cACA,mBACA,iBACA,YACA,eACA,eACA,gBACA,iBACA,aACA,iBACA,eACA,iBACA,gBACA,eACA,mBACA,oBACA,eACA,aACA,eACA,gBACA,cACA,eACA,oBACA,mBACA,YACA,YACA,iBACA,iBACA,aACA,gBACA,iBACA,cACA,gBACA,iBACA,aACA,gBACA,iBACA,qBACA,cACA,gBACA,eACA,cACA,eACA,aACA,aACA,mBACA,cACA,gBACA,mBACA,eACA,cACA,qBACA,gBAGG,EAAAD,gBAAkB,CACrB,mBACA,mBACA,4BACA,uBACA,oBACA,oBACA,qBACA,mBACA,mBACA,qBAGG,EAAAD,aAAe,CAClB,eACA,oBACA,oBACA,iCACA,8BACA,4BACA,0BACA,6BACA,4BACA,iCACA,0BACA,6BACA,6BACA,4BACA,4BACA,mBACA,mBACA,gBACA,yBACA,mBACA,gBACA,iBACA,uBACA,oBACA,iBACA,gBACA,wBACA,uBACA,iBACA,kBACA,kBACA,kBACA,oBACA,qBACA,kBACA,iBACA,kBACA,uBACA,iBACA,uBACA,iBACA,kBACA,mBACA,mBACA,sBACA,sBACA,oBACA,oBACA,kBACA,oBACA,qBACA,oBACA,oBACA,iBACA,kBACA,iBACA,qBACA,+BACA,uBACA,0BACA,6BACA,4BACA,wBACA,4BACA,0BACA,iBACA,kBACA,kBACA,iBACA,8BACA,8BACA,iBACA,eACA,sBACA,iBACA,kBACA,iBACA,qBACA,oBACA,mBACA,oBACA,iBACA,qBACA,sBACA,mBACA,kBACA,oBACA,qBACA,iBACA,mBACA,kBACA,eACA,kBACA,8BACA,8BACA,iCACA,kBACA,iBACA,sBACA,qBACA,kBACA,yBACA,wBACA,sBACA,sBACA,uBACA,sBACA,uBACA,iBACA,iBACA,mBACA,qBACA,mBACA,mBACA,wBACA,oBACA,uBACA,gBACA,mBACA,wBACA,sBACA,gBACA,sBACA,kBACA,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","file":"app.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 120);\n","import { isEmpty } from '../utils/helper';\nimport { Link } from './node-link';\nimport { Deserializable, Serializable, SerializableHelper } from './serializable';\nimport Validation from './validation/Validation';\n\nexport enum Type {\n  STRING   = 'string',\n  NUMBER   = 'number',\n  BOOLEAN  = 'boolean',\n  ANY      = 'any',\n  JSON     = 'json',\n  DROPDOWN = 'dropdown', // it is same as `ANY`, but when it has setting as pair it checks for validity\n}\n\nexport type IOType = 'input' | 'output';\n\nexport interface SerializedNodeIO {\n  name: string;\n  type: Type;\n  label?: string;\n  locked?: boolean;\n  pos?: number;\n  round?: boolean;\n  subNodeId?: number | string;\n}\n\nexport interface SerializedNodeInput extends SerializedNodeIO {\n  link?: Link;\n  isOptional?: boolean;\n  setting: InputSetting;\n}\n\nexport interface SerializedNodeOutput extends SerializedNodeIO {\n  links?: Array<Link>;\n}\n\nexport interface NodeIO extends SerializedNodeIO, Serializable<SerializedNodeIO> {\n  data?: any;\n  updated?: boolean;\n}\n\nexport interface SerializedNodeSetting {\n\n  description: string;\n  type?: SettingType;\n  value?: any;\n  config?: any;\n}\n\nexport class NodeSetting implements SerializedNodeSetting, Serializable<SerializedNodeSetting>,\n                                    Deserializable<SerializedNodeSetting> {\n\n  description: string;\n  type?: SettingType;\n  value?: any;\n  config?: any;\n  validation?: Validation;\n  toJSON?: Function; // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify#toJSON_behavior\n\n  constructor(description: string, type?: SettingType, value?: any, config?: any, validation?: Validation,\n              toJSON?: Function) {\n    this.description = description;\n    this.type = type;\n    this.value = value;\n    this.config = config;\n    this.validation = validation;\n    this.toJSON = toJSON;\n  }\n\n  static create(object: {\n    description: string, type?: SettingType, value?: any, config?: any, validation?: Validation, toJSON?: Function\n  }): NodeSetting {\n    return new NodeSetting(object.description, object.type, object.value, object.config, object.validation,\n                           object.toJSON);\n  };\n\n  serialize(): SerializedNodeSetting {\n    return {\n      description: this.description,\n      type: this.type,\n      config: SerializableHelper.serialize<object>(this.config),\n      value: SerializableHelper.serialize<object>(this.value),\n    };\n  }\n\n  deserialize(serializedObj: SerializedNodeSetting): NodeSetting {\n    return NodeSetting.create(serializedObj);\n  }\n}\n\nabstract class AbstractNodeIO implements NodeIO {\n\n  name: string;\n  type: Type;\n  label?: string;\n  locked?: boolean;\n  pos?: number;\n  round?: boolean;\n  subNodeId?: number | string;\n  data?: any;\n  updated?: boolean;\n\n  protected constructor(name: string, type: Type, label?: string, locked?: boolean, pos?: number,\n                        round?: boolean, data?: any, updated?: boolean, subNodeId?: number | string) {\n    this.name = name;\n    this.type = type;\n    this.label = label;\n    this.locked = locked;\n    this.pos = pos;\n    this.round = round;\n    this.subNodeId = subNodeId;\n    this.data = data;\n    this.updated = updated;\n  }\n\n  serialize(): SerializedNodeIO {\n    return {\n      name: this.name,\n      type: this.type,\n      label: this.label,\n      locked: this.locked,\n      pos: this.pos,\n      round: this.round,\n      subNodeId: this.subNodeId,\n    } as SerializedNodeIO;\n  }\n\n}\n\nexport class NodeOutput extends AbstractNodeIO\n  implements NodeIO, SerializedNodeOutput, Serializable<SerializedNodeOutput>, Deserializable<SerializedNodeOutput> {\n\n  links?: Link[];\n\n  constructor(name: string, type: Type, links?: Array<Link>, label?: string, locked?: boolean, pos?: number,\n              round?: boolean, data?: any, updated?: boolean, subNodeId?: number | string) {\n    super(name, type, label, locked, pos, round, data, updated, subNodeId);\n    this.links = isEmpty(links) ? [] : links.map(l => Link.create(l));\n  }\n\n  static create(object: {\n    name: string, type: Type, links?: Array<Link>, label?: string, locked?: boolean,\n    pos?: number, round?: boolean, data?: any, updated?: boolean, subNodeId?: number | string\n  }) {\n    return new NodeOutput(object.name, object.type, object.links, object.label, object.locked, object.pos, object.round,\n                          object.data, object.updated, object.subNodeId);\n  }\n\n  serialize(): SerializedNodeOutput {\n    return { ...super.serialize(), links: this.links?.map(l => SerializableHelper.serialize(l)) };\n  }\n\n  deserialize(serializedObj: SerializedNodeOutput): NodeOutput {\n    return NodeOutput.create({ ...serializedObj });\n  }\n\n}\n\nexport interface InputSetting {\n  exist: boolean; // bind setting exist or not\n  nullable: boolean; // whether null value is acceptable or not\n  hidden: boolean;\n}\n\nexport class NodeInput extends AbstractNodeIO\n  implements NodeIO, SerializedNodeInput, Serializable<SerializedNodeInput>, Deserializable<SerializedNodeInput> {\n\n  link?: Link;\n  isOptional?: boolean;\n  setting: InputSetting;\n\n  constructor(name: string, type: Type, setting: InputSetting, link?: Link, isOptional?: boolean, label?: string,\n              locked?: boolean, pos?: number, round?: boolean, data?: any, updated?: boolean,\n              subNodeId?: number | string) {\n    super(name, type, label, locked, pos, round, data, updated, subNodeId);\n    this.link = Link.create(link);\n    this.isOptional = isOptional;\n    this.setting = setting;\n  }\n\n  static create(object: {\n    name: string, type: Type, setting: InputSetting, link?: Link, isOptional?: boolean, label?: string,\n    locked?: boolean, pos?: number, round?: boolean, data?: any, updated?: boolean, subNodeId?: number | string\n  }) {\n    return new NodeInput(object.name, object.type, object.setting, object.link, object.isOptional, object.label,\n                         object.locked, object.pos, object.round, object.data, object.updated, object.subNodeId);\n  }\n\n  serialize(): SerializedNodeInput {\n    return {\n      ...super.serialize(),\n      link: SerializableHelper.serialize(this.link),\n      setting: SerializableHelper.serialize(this.setting),\n      isOptional: this.isOptional,\n    } as SerializedNodeInput;\n  }\n\n  deserialize(serializedObj: SerializedNodeInput): NodeInput {\n    return NodeInput.create({ ...serializedObj });\n  }\n}\n\nexport interface IInputInfo {\n  input: NodeInput;\n  slot: number;\n  link_pos: [number, number];\n  locked: boolean;\n}\n\nexport interface IOutputInfo {\n  output: NodeOutput;\n  slot: number;\n  link_pos: [number, number];\n  locked: boolean;\n}\n\nexport const convertStringToType = (type: string): Type => {\n  switch (type) {\n    case Type.STRING:\n      return Type.STRING;\n    case Type.NUMBER:\n      return Type.NUMBER;\n    case Type.BOOLEAN:\n      return Type.BOOLEAN;\n    case Type.JSON:\n      return Type.JSON;\n  }\n  return Type.ANY;\n};\n\nexport enum SettingType {\n  STRING      = 'string',\n  NUMBER      = 'number',\n  BOOLEAN     = 'boolean',\n  READONLY    = 'readonly',\n  DROPDOWN    = 'dropdown',\n  TREE_SELECT = 'treeselect',\n  AUTOCOMPLETE = 'autocomplete',\n  CODE_AREA   = 'codearea',\n  PASSWORD    = 'password',\n  GROUP       = 'group',\n}\n\nexport const convertSettingType = (type: SettingType): Type => {\n  switch (type) {\n    case SettingType.STRING:\n      return Type.STRING;\n    case SettingType.NUMBER:\n      return Type.NUMBER;\n    case SettingType.BOOLEAN:\n      return Type.BOOLEAN;\n  }\n  return Type.ANY;\n};\n\nexport const convertType = (type: Type): SettingType => {\n  switch (type) {\n    case Type.STRING:\n      return SettingType.STRING;\n    case Type.NUMBER:\n      return SettingType.NUMBER;\n    case Type.BOOLEAN:\n      return SettingType.BOOLEAN;\n    case Type.DROPDOWN:\n      return SettingType.DROPDOWN;\n  }\n  return SettingType.STRING;\n};\n","/**\n * Created by Derwish (derwish.pro@gmail.com) on 04.07.2016.\n * License: http://www.gnu.org/licenses/gpl-3.0.txt\n */\nimport { get } from 'lodash';\nimport { Colors, create } from 'logplease';\nimport { Renderer } from '../client/editor/renderer';\nimport { Database } from '../database/database';\nimport { Dashboard } from '../server/dashboard';\nimport { ErrorHandler } from '../utils/decorators';\nimport { RegistryError } from '../utils/errors';\nimport { IdGenerator } from '../utils/id-generator';\nimport { ContainerNode } from './container-node';\nimport { Node } from './node';\nimport { createNodeDbHelper } from './node-db-helper';\nimport { NodeFactory } from './node-factory';\nimport { NodeHookHelper } from './node-hook';\nimport {\n  ContainerRegistryMetadata,\n  GlobalNodeRegistryMetadata,\n  IContainer,\n  IFolderNode,\n  isFolderNode,\n  isNode,\n  SerializedContainer,\n  SerializedNode,\n  Side,\n} from './node-interface';\nimport { DefaultContainerRegistry, DefaultSubNodeRegistry } from './node-registry';\nimport { NodeTypeRegistry } from './node-type-registry';\nimport { SerializableHelper } from './serializable';\nimport Utils from './utils';\nimport Namespace = SocketIO.Namespace;\n\nconst logger = create('container', { color: Colors.Magenta });\n\nexport class ContainerRegistry extends DefaultContainerRegistry<Container> {\n\n  private static _instance: ContainerRegistry;\n\n  private constructor() {\n    super(IdGenerator.instance());\n  }\n\n  public static instance(): ContainerRegistry {\n    if (!ContainerRegistry._instance) {\n      ContainerRegistry._instance = new ContainerRegistry();\n    }\n\n    return ContainerRegistry._instance;\n  }\n\n  rootContainer(): Container {\n    return <Container>super.rootContainer();\n  }\n\n  @ErrorHandler\n  protected optimizeBeforeRegister(c: Container, force: boolean): Container {\n    const container = super.optimizeBeforeRegister(c, force);\n    if (container.id + '' !== '0') {\n      let rootContainer = this.rootContainer();\n      if (rootContainer.server_dashboard_socket) container.server_dashboard_socket = rootContainer.server_dashboard_socket;\n      if (rootContainer.server_editor_socket) container.server_editor_socket = rootContainer.server_editor_socket;\n      if (rootContainer.client_socket) container.client_socket = rootContainer.client_socket;\n      if (rootContainer.db) container.db = rootContainer.db;\n      if (rootContainer.dashboard) container.dashboard = rootContainer.dashboard;\n    }\n    return container;\n  }\n}\n\nexport class NodeInContainerRegistry extends DefaultSubNodeRegistry<Node> {\n\n  constructor(parent: Container, containerRegistry?: ContainerRegistryMetadata,\n              globalNodeRegistry?: GlobalNodeRegistryMetadata) {\n    super(<IContainer><unknown>parent, containerRegistry, globalNodeRegistry);\n  }\n\n  parent(): Container {\n    return <Container>super.parent();\n  }\n\n  remove(node: Node | number | string, isCaching?: boolean): Promise<Node> {\n    const sNode = NodeFactory.toSimpleNode(node['cid'] ?? this.parent().id, node['id'] ?? node);\n    const nodeId = IdGenerator.createNodeId(sNode.cid, sNode.id);\n    this.parent().logInfo(`Removing node '${nodeId}' on ${this.parent().side}...`);\n    if (isFolderNode(node)) {\n      sNode['sub_container'] = (<ContainerNode>node).sub_container;\n    }\n    return Promise.resolve(isNode(node) ? <Node>node : sNode)\n                  .then(n => this.globalNodeRegistry.get(n) ?? n)\n                  .then(n => NodeHookHelper.execute(<Node>n, 'onRemoved') ?? n)\n                  .then(n => NodeHookHelper.execute(<Node>n, 'beforeRemoveNode') ?? n)\n                  .then(n => isCaching ? n : createNodeDbHelper().delete(this.parent().db, sNode).then(_ => n))\n                  .then(n => super.remove(<Node>n, isCaching))\n                  .then(n => NodeHookHelper.execute(n, 'afterRemoveNode') ?? n)\n                  .then(n => {\n                    this.parent().logInfo(`Node '${nodeId}' is removed on ${this.parent().side}`);\n                    return n;\n                  });\n  }\n\n  protected validate(node: Node, force: boolean, key: string): Node {\n    const n = super.validate(node, force, key);\n    if (this.parent().nodeItself() && this.parent().nodeItself().shouldRejectNodeType(n?.type)) {\n      throw new RegistryError(`Trying to create non-compatible child node '${n.getReadableId()}' with type ` +\n                              `'${n.type}' in container '${this.parent().id}'...`, n);\n    }\n    return n;\n  }\n\n  protected doRegister(k: string | number, node: Node, force: boolean = false, isCaching?: boolean): Promise<Node> {\n    this.parent().logInfo(`Creating new node '${node.getReadableId()}' on ${this.parent().side}...`);\n    return Promise.resolve(node)\n                  .then(n => NodeHookHelper.execute(n, 'onCreated') ?? n)\n                  .then(n => isCaching ? n : createNodeDbHelper().insert(this.parent().db, n).then(_ => n))\n                  .then(n => super.doRegister(k, n, force, isCaching))\n                  .then(n => NodeHookHelper.execute(n, 'onAdded') ?? n)\n                  .then(n => NodeHookHelper.execute(n, 'afterAdded') ?? n)\n                  .then(n => {\n                    this.parent().logInfo(`New node '${node.getReadableId()}' is created on ${this.parent().side}`);\n                    return n;\n                  });\n  }\n}\n\nexport const reassignContainer = <T extends IFolderNode>(node: T, container: SerializedContainer | IContainer,\n                                                         containerRegistry?: ContainerRegistryMetadata,\n                                                         globalRegistry?: GlobalNodeRegistryMetadata): T => {\n  node.sub_container = Container.create(node.side, container, node, containerRegistry, globalRegistry);\n  return node;\n};\n\nexport class Container implements IContainer {\n  id: string | number;\n  name?: string;\n  serializedNodes?: SerializedNode[];\n  config: {\n    links_ontop?: boolean;\n  };\n  side: Side;\n  client_socket: SocketIOClient.Socket; //SocketIOClient.Socket|SocketIO.Server;\n  server_dashboard_socket: Namespace;\n  server_editor_socket: Namespace;\n  db: Database;\n  dashboard: Dashboard;\n  renderers: Array<Renderer>;\n  isRunning: boolean;\n  iteration: number;\n  tag?: string;\n  globaltime: number;\n  runningtime: number;\n  fixedtime: number;\n  fixedtime_lapse: number;\n  elapsed_time: number;\n  starttime: number;\n  execution_timer_id: number | any;\n  onStopEvent: Function;\n  onExecuteStep: Function;\n  onAfterExecute: Function;\n  onPlayEvent: Function;\n  frame: number;\n  private readonly _itself: IFolderNode;\n  private readonly _nodeRegistry: NodeInContainerRegistry;\n\n  protected constructor(side: Side, id?: string | number, folderNode?: IFolderNode, properties?: any,\n                        containerRegistry?: ContainerRegistryMetadata,\n                        globalNodeRegistry?: GlobalNodeRegistryMetadata) {\n    this.renderers = null;\n    this.side = side;\n    this.id = id ?? folderNode?.id ?? IdGenerator.UNINITIALIZED;\n    this.name = this.id === IdGenerator.ROOT ? 'Main' : properties?.name ?? '';\n    this.config = Utils.cloneObject(properties?.config);\n    this._itself = folderNode;\n    this._nodeRegistry = new NodeInContainerRegistry(this, containerRegistry, globalNodeRegistry);\n    this.clear();\n  }\n\n  static initRoot(side: Side, containerRegistry?: ContainerRegistryMetadata,\n                  globalNodeRegistry?: GlobalNodeRegistryMetadata) {\n    return new Container(side, IdGenerator.ROOT, null, null, containerRegistry, globalNodeRegistry);\n  }\n\n  static create(side: Side,\n                obj?: { id: string | number; name?: string; config?: any; serializedNodes?: any[] },\n                folderNode?: IFolderNode,\n                containerRegistry?: ContainerRegistryMetadata,\n                globalNodeRegistry?: GlobalNodeRegistryMetadata): Container {\n    let container = new Container(side, obj?.id, folderNode, obj, containerRegistry, globalNodeRegistry);\n    container.serializedNodes = obj?.serializedNodes;\n    return container;\n  }\n\n  /**\n   * @deprecated Use {@link NodeTypeRegistry#registerNodeType}\n   */\n  static registerNodeType(\n    type: string,\n    node_class: any,\n    parentContainerNodeType: string = null,\n    show_in_menu: boolean           = true,\n    recursive: boolean              = false,\n    alwaysInsideContainer: boolean  = false,\n  ): void {\n    NodeTypeRegistry.registerNodeType(type, node_class, parentContainerNodeType, show_in_menu, recursive,\n                                      alwaysInsideContainer);\n  }\n\n  nodeItself(): ContainerNode {\n    return this.id === IdGenerator.ROOT ? null : <ContainerNode>this._itself;\n  }\n\n  nodeRegistry(): NodeInContainerRegistry {\n    return this._nodeRegistry;\n  }\n\n  /**\n   * @deprecated Use {@link #nodeRegistry()}\n   * @return {Node[]}\n   */\n  subNodes() {\n    return this.nodeRegistry().list();\n  }\n\n  /**\n   * @deprecated Use {@link #nodeRegistry()}\n   * @param {string | number | Node} node\n   * @return {Node}\n   */\n  getSubNode(node: string | number | Node): Node {\n    return this.nodeRegistry().get(node);\n  }\n\n  /**\n   * Removes all nodes from this container\n   */\n  clear(): void {\n    this.stop();\n    this.isRunning = false;\n\n    //nodes\n    this.nodeRegistry().clear();\n\n    //iterations\n    this.iteration = 0;\n\n    this.config = {};\n\n    //timing\n    this.globaltime = 0;\n    this.runningtime = 0;\n    this.fixedtime = 0;\n    this.fixedtime_lapse = 0.01;\n    this.elapsed_time = 0.01;\n    this.starttime = 0;\n\n    this.sendActionToRenderer('clear');\n  }\n\n  /**\n   * Stops the execution loop of the container\n   */\n  stop(): void {\n    if (!this.isRunning) return;\n\n    this.isRunning = false;\n\n    if (this.onStopEvent) this.onStopEvent();\n\n    if (this.execution_timer_id != null) clearInterval(this.execution_timer_id);\n    this.execution_timer_id = null;\n\n    for (let node of this.nodeRegistry().list()) {\n      if (node['onStopContainer']) node['onStopContainer']();\n    }\n  }\n\n  /**\n   * Attach renderer to this container\n   * @param renderer\n   */\n  attachRenderer(renderer: Renderer): void {\n    if (renderer.container && renderer.container != this) {\n      renderer.deselectAllNodes();\n      renderer.container.detachRenderer(renderer);\n    }\n\n    renderer.container = this;\n    if (!this.renderers) this.renderers = [];\n    this.renderers.push(renderer);\n\n    //reset active nodes\n    for (let node of renderer.container.nodeRegistry().list()) {\n      node.boxcolor = renderer.theme.NODE_DEFAULT_BOXCOLOR;\n      node.setDirtyCanvas(true, true);\n    }\n  }\n\n  /**\n   * Detach renderer from this container\n   * @param renderer\n   */\n  detachRenderer(renderer: Renderer): void {\n    if (!this.renderers) return;\n\n    let pos = this.renderers.indexOf(renderer);\n    if (pos == -1) return;\n\n    renderer.container = null;\n\n    this.renderers.splice(pos, 1);\n    if (this.renderers.length == 0) delete this.renderers;\n  }\n\n  /**\n   * Starts running this container every interval milliseconds.\n   * @param interval amount of milliseconds between executions\n   */\n  //STARTS from here\n  run(interval: number = 1): void {\n    if (this.isRunning) return;\n\n    this.isRunning = true;\n\n    if (this.onPlayEvent) this.onPlayEvent();\n\n    for (let node of this.nodeRegistry().list()) {\n      if (node['onRunContainer']) node['onRunContainer']();\n    }\n\n    //launch\n    this.starttime = Utils.getTime();\n    let that = this;\n\n    //on each loop interval this runStep gets calls for 1 time, currently the inter == 100ms\n    this.execution_timer_id = setInterval(() => that.runStep(1), interval);\n  }\n\n  /**\n   * Run N steps (cycles) of the container\n   * @param steps number of steps to run, default is 1\n   */\n  // THIS block gets called on LOOP_INTERVAL, CURRENTLY this is 100ms on .env and whatever comes in this 100ms inside, those outputs gets ignored, coz we only read value on 100ms\n  runStep(steps: number = 1): void {\n    let start = Utils.getTime();\n    this.globaltime = 0.001 * (start - this.starttime);\n\n    for (let i = 0; i < steps; i++) {\n      this.transferDataBetweenNodes(); // this one is the main block where we are doing all operation to see whether our in/out got changed or not //main block to calculate whether our in/out got changed or not\n\n      let now = Date.now();\n\n      for (let node of this.nodeRegistry().list()) {\n        // on each 100ms we are looping on this block, and we are seeing whether that interval is exceeded to EXECUTE_INTERVAL or not, if exceeded then call onExecute, so this block is only useful for the operation\n        // which should be greater than 100ms to perform some kind of action\n        if (\n          !node.EXECUTE_INTERVAL ||\n          (node.EXECUTE_INTERVAL && !node.executeLastTime) ||\n          (node.executeLastTime && now - node.executeLastTime >= node.EXECUTE_INTERVAL)\n        ) {\n          if (node['onExecute']) node['onExecute']();\n\n          if (node.EXECUTE_INTERVAL) node.executeLastTime = now;\n        }\n\n        // this updated is came from transferDataBetweenNodes\n        // these UPDATE_INPUTS_INTERVAL is also plays roles as Debounce, normally we don't have value on the node for this variable, so it directly enters into the block\n        if (node.isUpdated) {\n          if (\n            !node.UPDATE_INPUTS_INTERVAL ||\n            (node.UPDATE_INPUTS_INTERVAL && !node.updateInputsLastTime) ||\n            (node.updateInputsLastTime && now - node.updateInputsLastTime >= node.UPDATE_INPUTS_INTERVAL)\n          ) {\n            if (node['onInputUpdated']) node['onInputUpdated']();//here we get called our onInputUpdated\n\n            node.isUpdated = false;\n\n            for (let i in node.inputs) if (node.inputs[i].updated) node.inputs[i].updated = false;\n\n            if (node.UPDATE_INPUTS_INTERVAL) node.updateInputsLastTime = now; //this is for restricting multiple values on that interval and to act like Debounce\n          }\n        }\n      }\n\n      this.fixedtime += this.fixedtime_lapse;\n\n      if (this.onExecuteStep) this.onExecuteStep();\n    }\n\n    if (this.onAfterExecute) this.onAfterExecute();\n\n    let elapsed = Utils.getTime() - start;\n    if (elapsed == 0) elapsed = 1;\n    this.elapsed_time = 0.001 * elapsed;\n    this.globaltime += 0.001 * elapsed;\n    this.iteration += 1;\n  }\n\n  transferDataBetweenNodes() {\n    // it runs on each 100ms interval so\n    //all nodes\n    for (let node of this.nodeRegistry().list()) {\n      if (!node.outputs) continue;\n\n      //all outputs\n      for (let o in node.outputs) {\n        let output = node.outputs[o];\n        if (!output.updated) continue;// when updated is true from output of each node we dont break the loop and it will go down\n\n        output.updated = false; // make update false, hence we will not get as updated=true on next loop\n\n        if (output.links == null) continue;//if links is not no need to do any operation\n\n        //all output links\n        for (let link of output.links) { //loop on all links\n          let target_node = this.nodeRegistry().get(link.nodeId); // this is where we had an issue, coz node was deleted but link wasn't\n          if (!target_node) {\n            this.debugErr(`Can't transfer data from node ${node.getReadableId()}. Target node not found`);\n            continue;\n          }\n\n          let target_id = link.ioId ?? link.slot;\n          let target_input = target_node.inputs[target_id];\n\n          if (!target_input) return;\n          target_input.data = Utils.parseValue(output.data, target_input.type); // Now change the input of target node, which is connected wit the output\n\n          target_node.isUpdated = true; //now we made the target node also updated as like on setOutputData, so that target node will perform same operation for it's targeted nodes\n          target_input.updated = true; // plays important role for onInputUpdated()\n        }\n      }\n    }\n  }\n\n  /**\n   * Returns the amount of time the container has been running in milliseconds\n   * @method getTime\n   * @returns number of milliseconds the container has been running\n   */\n  getTime(): number {\n    return this.globaltime;\n  }\n\n  /**\n   * Sends action to renderer\n   * @param action\n   * @param params\n   */\n  sendActionToRenderer(action: string, params?: Array<any>): void {\n    if (!this.renderers) return;\n\n    for (let i = 0; i < this.renderers.length; ++i) {\n      let c = this.renderers[i];\n      if (c[action]) c[action].apply(c, params);\n    }\n  }\n\n  /**\n   * Get nodes\n   */\n  getNodes(includeSubContainers = false): Array<Node> {\n    let nodes = [];\n\n    addNodes(this.nodeRegistry().list());\n\n    function addNodes(_nodes: Node[]) {\n      for (let n of _nodes) {\n        nodes.push(n);\n\n        if (includeSubContainers && isFolderNode(n)) {\n          addNodes((<ContainerNode>n).sub_container.nodeRegistry().list());\n        }\n      }\n    }\n\n    return nodes;\n  }\n\n  /**\n   * Returns a list of nodes that matches a type\n   * @param type the name of the node type\n   * @param includeSubContainers\n   * @returns a list with all the nodes of this type\n   */\n  getNodesByType(type: string, includeSubContainers = false): Array<Node> {\n    type = type.toLowerCase();\n    let r = [];\n    //TODO: performance, refactor it\n    for (let node of this.nodeRegistry().list()) {\n      if (node.type.toLowerCase() == type) r.push(node);\n    }\n\n    if (includeSubContainers) {\n      for (let node of this.nodeRegistry().list()) {\n        if (node instanceof ContainerNode) {\n          let nodes = (<ContainerNode>node).sub_container.getNodesByType(type, true);\n          nodes.forEach(n => r.push(n));\n        }\n      }\n    }\n\n    return r;\n  }\n\n  /**\n   * Returns a list of nodes that are an instance of the provided node-class (or one of its subclasses)\n   * @returns a list with all the nodes of this type\n   * @param nodeClass\n   * @param includeSubContainers\n   */\n  getNodesByClass(nodeClass: Function, includeSubContainers = false): Array<Node> {\n    let r = [];\n    //TODO: performance, refactor it\n    for (let node of this.nodeRegistry().list()) {\n      if (node instanceof nodeClass) r.push(node);\n    }\n\n    if (includeSubContainers) {\n      for (let node of this.nodeRegistry().list()) {\n        if (node instanceof ContainerNode) {\n          let nodes = (<ContainerNode>node).sub_container.getNodesByClass(nodeClass, true);\n          nodes.forEach(n => r.push(n));\n        }\n      }\n    }\n\n    return r;\n  }\n\n  getAllNodes(parent?: Node[],\n              parentId: string | number = 0): Array<{ id: string; name: string; isContainer: boolean; list?: Array<{ id: string; name: string }>; }> {\n    let list = [];\n    let nodes = parent ?? this.nodeRegistry().list();\n    nodes.forEach(node => {\n      if (node instanceof ContainerNode) {\n        list.push({\n                    id: node.sub_container.id,\n                    name: node.sub_container.name,\n                    parentId,\n                    list: this.getAllNodes(node.sub_container.nodeRegistry().list(), node.sub_container.id),\n                    isContainer: true,\n                    iconImageUrl: node.iconImageUrl,\n                    icon: node.icon,\n                  });\n      } else {\n        list.push({\n                    id: node.id,\n                    parentId,\n                    name: node.name ? `${node.name}: ${node.title}` : node.title,\n                    isContainer: false,\n                    iconImageUrl: node.iconImageUrl,\n                    icon: node.icon,\n                  });\n      }\n    });\n    return list.sort((a, b) => {\n      if (a.isContainer && b.isContainer) {\n        return a.id - b.id;\n      } else if (a.isContainer && !b.isContainer) {\n        return -1;\n      } else {\n        return 1;\n      }\n    });\n  }\n\n  /**\n   * Set canvas to dirty for update\n   * @param foreground\n   * @param background\n   */\n  setDirtyCanvas(foreground?: boolean, background?: boolean): void {\n    this.sendActionToRenderer('setDirty', [foreground, background]);\n  }\n\n  /**\n   * Executes a callback with the editor instance if available\n   */\n  runWithEditor(f: (Editor) => void) {\n    const editor = get(this, 'renderers[0].editor');\n    if (editor) f(editor);\n  }\n\n  /**\n   * @returns serialized container\n   */\n  serialize(): SerializedContainer {\n    return {\n      id: this.id,\n      name: this.name,\n      config: this.config,\n      serializedNodes: this.nodeRegistry().list().map(node => SerializableHelper.serialize(node)),\n    };\n  }\n\n  logInfo(message: string): void {\n    logger.info(`[${this.id}] ${message}`);\n  }\n\n  /**\n   * Print debug message to console\n   * @param message\n   */\n  debug(message: string): void {\n    logger.debug(`[${this.id}] ${message}`);\n  }\n\n  /**\n   * Print error message to console\n   * @param message\n   */\n  debugWarn(message: string): void {\n    logger.warn(`[${this.id}] ${message}`);\n  }\n\n  /**\n   * Print error message to console\n   * @param message\n   */\n  debugErr(message: string): void {\n    logger.error(`[${this.id}] ${message}`);\n  }\n\n}\n","import Icons from \"./node-icons\";\nimport EdgeHelp from \"./utils/help/protocols/edge-28\";\n\n\n\nexport const NODE_INFO = {\n    'boolean': {\n        'and': { title: 'AND', description: \"Performs a logical 'AND' operation (output 'true' when ALL inputs are 'true'). You can specify the number of inputs in the node settings.\" },\n        'min-on-off': { title: 'Min On Off', description: \"‘output’ matches ‘input’ but is delayed by the 'minOn' and 'minOff' durations. ‘output’ will remain 'true' for 'minOn' duration then match the ‘input’ value. ‘output’ will remain 'false' for 'minOff' duration then match the ‘input’ value. 'minOn' and 'minOff' delays are cancelled when 'reset' transitions from 'false' to 'true. ‘minOn active’ is ‘true’ during ‘minOn’ periods. ‘minOff active’ is ‘true’ during ‘minOff’ periods.  'minOn' and 'minOff' units can be configured from settings. Maximum ‘minOn’ and ‘'minOff'’ setting is 587 hours.   (See Figure A.)\" },\n        'not': { title: 'NOT', description: \"Performs a logical 'NOT' operation (output will be the inverse of the input).\" },\n        'off-delay': { title: 'Off Delay', description: \"‘output’ matches ‘input’, but ‘output’ transitions from 'true' to 'false' are delayed by 'delay' duration. The delay is cancelled when 'reset' transitions from 'false' to 'true. ‘offDelay active’ is ‘true’ during ‘offDelay’ periods. 'delay' units can be configured from settings.  Maximum ‘delay’ setting is 587 hours. (See Figure A.)\" },\n        'on-delay': { title: 'On Delay', description: \"‘output’ matches ‘input’, but ‘output’ transitions from 'false' to 'true' are delayed by 'delay' duration. The delay is cancelled when 'reset' transitions from 'false' to 'true. ‘onDelay active’ is ‘true’ during ‘onDelay’ periods. 'delay' units can be configured from settings. Maximum ‘delay’ setting is 587 hours.  (See Figure A.)\" },\n        'one-shot': { title: 'One Shot', description: \"Triggers output to 'true' for 'interval' duration when 'trigger' input transitions from 'false' to 'true.  Output is reset to 'false' when 'reset' transitions from 'false' to 'true. 'interval' units can be configured from settings. Maximum ‘interval’ setting is 587 hours. (See Figure A.).  If 'Retrigger While Output Is 'true'' setting is false, then 'fire' input transitions will have an effect when output is 'false'.\" },\n        'or': { title: 'OR', description: \"Performs a logical 'OR' operation (output 'true' when ANY input is 'true'). You can specify the number of inputs in the node settings.\" },\n        'ticker': { title: 'Ticker', description: \"While 'enable' is 'true', ‘output’ will change to 'true' at every 'interval' period. If 'Generate False' setting is set to ‘true’, ‘output’ will be 'false' for the second half of the 'interval' period. When 'enable' is 'false', ‘output’ will be 'false'. 'interval' units can be configured from settings.  Maximum ‘interval’ setting is 587 hours.  (See Figure A.)\" },\n        'toggle': { title: 'Toggle', description: \"When the 'input' transitions from 'false' to 'true', 'output' will switch between 'false'/'true'.   (See Figure A.)\" },\n        'xor': { title: 'XOR', description: \"Performs a logical 'XOR' operation (output 'true' when EITHER input is 'true', but not both). Limited to only 2 inputs.\" },\n    },\n    \"cumulocity\": {\n        \"cumulocity-device\": { title: 'Cumulocity Device', description: \"see https://cumulocity.com/guides/concepts/introduction/\" },\n        \"cumulocity-point\": { title: 'Cumulocity Point (History)', description: \"see https://cumulocity.com/guides/concepts/introduction/\" },\n        \"cumulocity-alarm\": { title: 'Cumulocity Alarm', description: \"see https://cumulocity.com/guides/concepts/introduction/\" },\n    },\n    'compare': {\n        'between': { title: 'Between', description: \"'output' is 'true' when 'in 1' is within the numeric range between 'from' value and 'to' value (exclusive), otherwise 'output' is 'false'.  'output' will be 'false' if either input is undefined. 'outp not' is always the opposite of 'output'.\" },\n        'equal': { title: 'Equal', description: \"'output equal' is 'true' when 'in 1' and 'in 2' are identical, otherwise 'output equal' is 'false'.  Can be used to compare boolean, numeric, and string values; it can also be used to compare 'null' values. 'output not equal' is always the opposite of 'out equal'.\" },\n        'greater-than': { title: 'Greater than', description: \"'out >' is 'true' when 'in 1' is greater than 'in 2', otherwise 'out >' is 'false'. 'out >=' is 'true' when 'in 1' is greater than or equal to 'in 2', otherwise 'out>=' is 'false'.  Both Outputs will be 'false' if either input is undefined.\" },\n        'hysteresis': { title: 'Hysteresis', description: \"Boolean 'output' based on 'input' in relation to 'risingEdge' and 'fallingEdge' setpoints.  There are 2 cases: 'risingEdge' greater than 'fallingEdge', and 'risingEdge' less than 'fallingEdge'. [For 'risingEdge' > 'fallingEdge'] => 'output' is 'true' when 'input' is greater than 'risingEdge'.  'output' is  'false' when 'input' is less than 'fallingEdge'. [For 'fallingEdge' < 'fallingEdge'] => 'output' is 'false' when 'input' is greater than 'risingEdge'.  'output' is 'true' when 'input' is less than 'fallingEdge'.  In both cases, when 'input' is between 'risingEdge' and 'fallingEdge', 'output' will remain in its current state.\" },\n        'less-than': { title: 'Less than', description: \"'out <' is 'true' when 'in 1' is less than 'in 2', otherwise 'out <' is 'false'.  'out <=' is 'true' when 'in 1' is less than or equal to 'in 2', otherwise 'out <=' is 'false'.  Both outputs will be 'false' if either input is undefined.\" },\n        'type-check': { title: 'Type Check (string)', description: \"'output' is 'true' when 'input' type matches 'Type to check' setting.  'isType' outputs the type of the 'input' value.\" },\n    },\n    \"connection\": {\n        \"dispatch-listener\": { title: \"Dispatch Listener\", description: \"Listens dispatch values\", iconImageUrl: Icons.aiIcon },\n        \"link-transmitter-single\": { title: \"Link Transmitter Single\", description: \"This node works in conjunction with link-receiver node, and provides a connection of nodes without the graphical wires. ‘in #’ inputs will be sent to the corresponding ‘out #’ output on link-receiver nodes with matching ‘Channel Number’ settings. The number of inputs is configurable from settings.\", iconImageUrl: Icons.aiIcon },\n        \"link-receiver-single\": { title: 'Link Receiver Single', description: \"This node works in conjunction with link-transmitter node and provides a connection of nodes without the graphical wires. ‘out #’ outputs will match the corresponding ‘in #’ input from link-transmitter nodes with matching ‘Channel Number’ settings. The number of outputs is configurable from settings.\", iconImageUrl: Icons.aiIcon },\n        \"link-transmitter\": { title: 'Link Transmitter', description: \"This node works in conjunction with link-receiver node, and provides a connection of nodes without the graphical wires. ‘in #’ inputs will be sent to the corresponding ‘out #’ output on link-receiver nodes with matching ‘Channel Number’ settings. The number of inputs is configurable from settings.\" },\n        \"link-receiver\": { title: 'Link Receiver ', description: \"This node works in conjunction with link-transmitter node and provides a connection of nodes without the graphical wires. ‘out #’ outputs will match the corresponding ‘in #’ input from link-transmitter nodes with matching ‘Channel Number’ settings. The number of outputs is configurable from settings.\" },\n        'hub': { title: 'Hub', description: \"This node merges multiple inputs into a single stream/output.  Any new 'input' ('in #') value will be passed to 'output'.  The number of inputs can be modified from settings.\" },\n    },\n    'container': {\n        'folder': { title: 'Folder', description: \"Contains other nodes\" },\n        'folder-input': { title: 'Folder Input', description: \"Input of the container\", iconImageUrl: Icons.aiIcon },\n        'folder-output': { title: 'Folder Output', description: \"Output of the container\", iconImageUrl: Icons.aiIcon },\n    },\n    'conversion': {\n        'bit-mask-single': { title: 'Bit Mask Single', description: \"A node to mask a single bit of a byte\" },\n        'bit-mask-multiple': { title: 'Bit Mask Multiple', description: \"A node to mask certain bits of a byte\" },\n        'int-to-bits': { title: 'Bit Split', description: \"A node to split an Int (or Int array) into all individual bits\\nAssuming all Ints are 8 bits (UINT8)\" },\n        'bool-to-int': { title: 'Bool-to-Int Conversion', description: \"This node converts a Boolean to a Number.\" },\n        'int-to-bool': { title: 'Int-to-Bool Conversion', description: \"This node converts a Number to a Boolean.\" },\n        'string-to-bool': { title: 'String-to-Bool Conversion', description: \"This node converts a String to a Boolean.\" },\n        'buffer-to-hex-string': { title: 'Buffer to hex string', description: \"\" },\n        'buffer-to-num': { title: 'Buffer To Num', description: \"A node to convert byte array (string or json array) (8bit words or 16bit words) to a num with Big-endian And Little-endian format. Example [16691, 34079] = 11.22 (BEB_BEW, FLOAT32)\" },\n        'convert-units': { title: 'Unit converter', description: \"This node converts units.\" },\n        'hex-string-to-buffer': { title: 'Hex string to Buffer', description: \"\" },\n        'int-to-buffer': { title: 'Int to Buffer', description: \"A node to convert an int to a buffer array to an int with Big-endian And Little-endian format. This node is used for testing data types\" },\n    },\n    'count': {\n        'any-event-counter': { title: 'Any Event Counter', description: \"‘count' increases by 1 every time an event occurs at 'input'. Any incoming value, including null, will be taken. 'count' will be reset to 0 when 'reset' transitions from 'false' to 'true.  ‘toggle’ will alternate between ‘true’ and ‘false’, changing each time count increases.\" },\n        'counter': { title: 'Counter', description: \"'count' increases by 1 every time 'countUp' transitions from 'false' to 'true.  'count' decreases by 1 every time 'countDown' transitions from 'false' to 'true.  'count' will be set to 'set value' when 'reset' transitions from 'false' to 'true.\" },\n        'interval-ramp': { title: 'Interval Ramp', description: \"‘output' changes at every 'interval' period, while 'enable' is set to 'true'. 'output' will change by the 'step' value on each change (if a full 'step' would cause the output to be greater than 'max', or less than 'min' it will be limited by 'max' or 'min' respectively). 'output' will first ramp up to 'max' then it will change directions and ramp down to 'min'. 'output' will be reset to 'min' when 'reset' transitions from 'false' to 'true. If ‘Ramp Up Only’ setting is ticked, the ramp down stage will be bypassed and ‘output’ will be reset back to ‘min’ value when it reaches the ‘max’ value. 'interval’ units can be configured from settings.  Maximum ‘interval’ setting is 587 hours.\" },\n        'triggered-ramp': { title: 'Triggered Ramp', description: \"'output' changes on every time 'trigger' transitions from 'false' to 'true'. If 'count on true->false?' setting is enabled, 'output' will also change on 'false' to 'true' transition.   'output' will change by the 'step' value on each change (if a full 'step' would cause the output to be greater than 'max', or less than 'min' it will be limited by 'max' or 'min' respectively).  'output' will first ramp up to 'max' then it will change directions and ramp down to 'min'.  'output' will be reset to 'min' when 'reset' transitions from 'false' to 'true.\" },\n        'waveform': { title: 'Waveform', description: \"This node generates a sequence of numbers based on the selected settings; these sequences (waveforms) are of the form 'Ramp', 'Sine', 'Square', 'Triangle', and 'Sawtooth'. While 'enable' is 'true', 'output' will produce the next number in the sequence after every 'interval' duration. The period (how often the waveform pattern repeats) is defined by 'period'. The amplitude of the waveform is defined by 'amplitude'. The waveform can be inverted by setting 'Invert Output' to 'true' in settings. The waveform will reset to its starting position if 'reset' transitions from 'false' to 'true'.  'interval' and ‘period’ units can be configured from settings.  Maximum 'interval' and ‘period’ setting is 587 hours.\" },\n    },\n    'csv': {\n        'csv-merge-columns': { title: 'CSV Merge Columns', description: \"This node merges the columns of properly formatted CSV strings.  ‘merge’ CSV string will be joined with the ‘original’ CSV string.  The ‘merge’ CSV columns will be added to the right of the ‘original’ CSV columns.  ‘null’ will be added to rows where no value exists for that column.  No error checking.\" },\n        'csv-merge-rows': { title: 'CSV Merge Rows', description: \"This node merges the rows of properly formatted CSV strings.  ‘merge’ CSV string will be joined with the ‘original’ CSV string.  The ‘merge’ CSV rows will be added below the ‘original’ CSV rows.  Only the ‘original’ header titles will be kept.  No error checking.\" },\n    },\n    'custom-function': {\n        'fan-out-function': { title: 'Fan-Out Function', description: 'Evaluates a code block upon message reception, and sends results to multiple outputs. The incoming value is accessible through the variable named \"message\". Values can be emitted by using emit(index, value), where the index specifies the outlet. Emit can be called multiple times.' },\n        'merge-function': { title: 'Merge Function', description: 'Evaluates a code block upon message reception. The incoming values is accessible by index in the array named \"messages\". The \"return\" value will be emitted through the outlet, unless that value is null. The script runs every time any inlet receives a value.' },\n        'function': { title: 'Function', description: \"Evaluates a code block upon message reception. The incoming value is accessible through the variable named “message”. The “return” value will be emitted through the outlet. Null values are ignored.\" },\n        'uuid': { title: 'UUID', description: \"A node function to create a UUID identifier. A universally unique identifier (UUID) is an identifier standard used in software construction. A UUID is simply a 128-bit value. The meaning of each bit is defined by any of several variants. For human-readable display, many systems use a canonical format using hexadecimal text with inserted hyphen characters. For example : de305d54-75b4-431b-adb2-eb6b9e546014\" },\n    },\n    'dashboard': {\n        'button': { title: 'Button', description: \"Dashboard node which displays a push button on the dashboard.  When clicked it will send 'true' from the node 'output'.\" },\n        'label': { title: 'Label', description: \"Dashboard node which displays inputed values on the dashboard.\" },\n        'log': { title: 'Log', description: \"Dashboard node which displays a log of the values wired into 'input', these log entries have timestamps attached.  There is an option in settings to save the log entries to the Wires Database (DB).\" },\n        'progress': { title: 'Progress', description: \"Dashboard node which displays 'input' value from 0-100 on a progress bar on the dashboard.\" },\n        'slider': { title: 'Slider', description: \"Dashboard node which displays an input slider bar on the dashboard.  The user can move the slider bar knob to adjust the output between 0 and 100.  The slider can be overridden by wiring a Numeric into the node 'input'.\" },\n        'switch': { title: 'Switch', description: \"Dashboard node which displays a toggle switchon the dashboard.  When clicked it will switch the node 'output' between 'true' and 'false'.  The button text can be edited in settings.  The button can be overridden by wiring a Boolean into the node 'input'.\" },\n        'text-box': { title: 'Text-Box', description: \"Dashboard node which provides a user input text box on the dashboard.  The entered string is sent from the node 'output'.  The text-box can be overridden by wiring a String into the node 'input'.\" },\n        'chart': { title: 'Chart', description: \"Dashboard node which displays a chart of the values wired into 'input'.  Chart properties and types can be modified in settings.  There is an option in settings to save the chart entries to the Wires Database (DB).\" },\n    },\n    'debug': {\n        'console': { title: 'Console', description: \"Show value inside the console\" },\n        'comments': { title: 'Comments', description: \"This node is simply for adding some code comments\" },\n        'watch': { title: 'Watch', description: \"Show value of input\" },\n    },\n    'error': {\n        'link-check': { title: 'Link Error Check', description: \"This node is designed to check that links have the same value on both ends\" },\n        'output-check': { title: 'Output Error Check', description: \"This node is designed to check that outputs have a 'data' value\" },\n    },\n    'filter': {\n        'only-true': { title: 'Only True', description: \"This node filters ‘input’ values. Only ‘true’ values are passed to ‘output’.\" },\n        'only-false': { title: 'Only False', description: \"This node filters ‘input’ values. Only ‘false’ values are passed to ‘output’.\" },\n        'only-between': { title: 'Only Between', description: \"This node filters ‘input’ values. Only Numeric ‘input’ values between ‘min’ and ‘max’ are passed to ‘output’.\" },\n        'only-greater': { title: 'Only Greater', description: \"This node filters ‘input’ values. Only Numeric ‘input’ values greater than ‘threshold’ are passed to ‘output’.\" },\n        'only-lower': { title: 'Only Lower', description: \"This node filters ‘input’ values. Only Numeric ‘input’ values less than ‘threshold’ are passed to ‘output’.\" },\n        'only-equal': { title: 'Only Equal', description: \"This node filters ‘input’ values. Only ‘input’ values equal to ‘match’ are passed to ‘output’.\" },\n        'prevent-null': { title: 'Prevent Null', description: \"This node filters ‘input’ values. All ‘input’ values are passed to ‘output’ EXCEPT ‘null’.\" },\n        'prevent-equal': { title: 'Prevent Equal', description: \"This node filters ‘input’ values. All ‘input’ values are passed to ‘output’ EXCEPT ‘input’ values which are equal to ‘match’.\" },\n        'prevent-duplicates': { title: 'Prevent Duplicates', description: \"This node filters ‘input’ values. All ‘input’ values are passed to ‘output’ EXCEPT ‘input’ values which are equal to the previous ‘input’ value.\" },\n        'reduce-duplicates': { title: 'Reduce Duplicates', description: 'This node reduces the number of duplicated transmitted values. When the value on the input is changed, the node sends it to the output and stops receiving the same value at a specified time interval. The values that come at this time and that are the same are simply ignored, but the last value will be stored if it is enabled in the settings. When the interval passes, the last value is sent to the output. This reduces the number of events, if they are sent too often, but ensures that the node will always send the last actual value. You can disable the sending of the last value in the settings of the node. This may be necessary if you do not want to receive messages late, but then it is not guaranteed that the nodes connected to this node will have the last actual value. If you activate Reset pin, the node will reset the timer and send the last value, if it is enabled in the settings.' },\n        'reduce-events': { title: 'Reduce Events', description: 'This node reduces the number of transmitted values. When the value on the input is changed, the node sends it to the output and stops receiving at a specified time interval. The values that come at this time are simply ignored, but the last value will be stored if it is enabled in the settings. When the interval passes, the last value is sent to the output. This reduces the number of events, if they are sent too often, but ensures that the node will always send the last actual value. You can disable the sending of the last value in the settings of the node. This may be necessary if you do not want to receive messages late, but then it is not guaranteed that the nodes connected to this node will have the last actual value. If you activate Reset pin, the node will reset the timer and send the last value, if it is enabled in the settings.' }\n\n\n    },\n    'history': {\n        'data-store': { title: 'Data Store', description: \"The data-store node is used to store history log data locally. The data-store node has limited memory so the capacity is limited to 50 log entries; beware of using too many data-store nodes as it could affect the operation of Wires. The history logs can be configured to log in UTC or local timezone, and the output format can be set to ‘Array’, ‘CSV’, or ‘JSON’. If ‘Round up in increments of’ setting is used (not zero), then the timestamp will be rounded up to the nearest increment value step.\" },\n        'influx-db': { title: 'Influx-DB', description: \"A node for sending data to influxDB\" },\n        'influx-db-2': { title: 'Influx-DB-2', description: \"A node for sending data to influxDB v2\" },\n        'history': { title: 'History', description: \"The History node is used to store values to an external database. History logs (when enabled) are pushed to either the Nube DB or an Influx DB instance. A ‘Point Name’ should be entered (under ‘History’ settings) to identify the history by name. History logging options are ‘Change Of Value (COV)’, ‘Periodic’, and ‘Trigger Only’. When set to COV, a log will be saved when the value changes by the ‘COV Threshold’ from the last saved history value. When set to ‘Periodic’ a log will be saved at every ‘Logging Interval’ period. When set to either ‘COV’ or ‘Periodic’ a log entry can be saved by transitioning the ‘histTrigger’ input from ‘false’ to ‘true’. If only the ‘histTrigger’ action is required, set the ‘History Logging Mode’ to ‘Trigger Only’. If the history/history node is unable to send the history logs to the configured database (network connection issues, or incorrect configuration) then they will be stored locally, and ‘storedHistCount’ will increase. Currently the local storage limit is set to 50 logs. The history/history node has limited memory so the capacity is limited to 50 log entries; beware of using too many history/history nodes as it could affect the operation of Wires. If ‘Round up in increments of’ setting is used (not zero), then the timestamp will be rounded up to the nearest increment value step. If the input value is a Number, the ‘Decimal Places’ setting will round the input value to the specified number of decimal places.\" },\n        'persistence': { title: 'Point Persistance', description: \"This node is used when you want to store the node output on a restart and also to not pass to the output any null values. While ‘enable’ is ‘true’, ‘output’ will send ‘input’ value at every ‘interval’ period. When ‘enable’ is ‘false’, ‘output’ will be ‘null’. ‘interval’ units can be configured from settings. Maximum ‘interval’ setting is 587 hours. On a trigger input the output will be sent even if the enable is set to false\" },\n        'point-tags': { title: 'Point Tag Node', description: \"A node generating HVAC tags\" },\n        \n\n    },\n    \"hvac\": {\n        \"deadband\": { title: \"Deadband\", description: \"This node applies a Hysteresis function (see hysteresis node), with a deadband centered at ‘setpoint’. The ON direction can be reversed from settings.\" },\n        \"thermostat\": { title: \"Heat/Cool Thermostat\", description: \"This node functions as a Heat/Cool thermostat. While ‘enable’ is set to ‘true’, the node will function as follows: ‘CLG Mode’ will be set to ‘true’ if ‘input’ is greater than ‘setpoint’ + ‘CLG offset’, ‘CLG Mode’ will be set to ‘false’ if ‘input’ is less than ‘setpoint’. ‘HTG Mode’ will be set to ‘true’ if ‘input’ is less than ‘setpoint’ - ‘HTG offset’, ‘HTG Mode’ will be set to ‘false’ if ‘input’ is greater than ‘setpoint’. If ‘enable’ is ‘false’, ‘CLG Mode’ and ‘HTG Mode’ will both be set to ‘false’.\" },\n        \"pac-unit-control\": { title: \"PAC Unit Control\", description: \"This node functions as a Heat/Cool thermostat. While ‘enable’ is set to ‘true’, the node will function as follows: ‘CLG Mode’ will be set to ‘true’ if ‘input’ is greater than ‘setpoint’ + ‘CLG offset’, ‘CLG Mode’ will be set to ‘false’ if ‘input’ is less than ‘setpoint’. ‘HTG Mode’ will be set to ‘true’ if ‘input’ is less than ‘setpoint’ - ‘HTG offset’, ‘HTG Mode’ will be set to ‘false’ if ‘input’ is greater than ‘setpoint’. If ‘enable’ is ‘false’, ‘CLG Mode’ and ‘HTG Mode’ will both be set to ‘false’.\" },\n        \"PID\": { title: \"PID\", description: \"This node generates a PID ‘output’ based on input parameter settings. Inputs: Enable, Setpoint, Process Variable, inP (Proportional), inI (Integral), inD (Derivative), Direction, Interval, MaxOut, MinOut, Manual, and Bias. If ‘direction’ is ‘true’ the PID will be a Direct loop (‘output’ increases when ‘processVariable’ > ‘setpoint’), if ‘direction’ is ‘false’ the PID will be a Reverse loop (‘output’ increases when ‘processVariable’ < ‘setpoint’). ‘interval’ is the period that the PID output is re-calculated. ‘bias’ value is added to ‘output’. ‘manual’ will be the ‘output’ value when ‘enable’ is ‘false’. PID integral factor will be reset to 0 when ‘reset’ transitions from ‘false’ to ‘true’. 'interval’ units can be configured from settings. Maximum ‘interval’ setting is 587 hours.\" },\n        \"toggle-duration\": { title: \"Toggle Duration\", description: \"This node accepts a ‘pushButton’ input which triggers ‘output’ to ‘true’ for the ‘runtime’, or until ‘pushButton’ transitions from ‘false’ to ‘true’ within the ‘runtime’ period\" },\n        \"psychrometrics\": { title: \"Psychrometric Calcs (Metric/SI)\", description: \"This node provides psychrometric calculations based on a selection of: Dry Bulb Temp, Wet Bulb Temp, Dew Point, Relative Humidity, and Pressure. Inputs and Outputs as follows: (i) Dry bulb temperature in °F [IP] or °C [SI]; (i) Wet bulb temperature in °F [IP] or °C [SI]; (i) Atmospheric pressure in Psi [IP] or Pa [SI]; (o) Humidity ratio in lb_H₂O lb_Air⁻¹ [IP] or kg_H₂O kg_Air⁻¹ [SI]; (o) Dew point temperature in °F [IP] or °C [SI]; (o) Relative humidity [0-1]; (o) Partial pressure of water vapor in moist air in Psi [IP] or Pa [SI]; (o) Moist air enthalpy in Btu lb⁻¹ [IP] or J kg⁻¹ [SI]; (o) Specific volume ft³ lb⁻¹ [IP] or in m³ kg⁻¹ [SI]. Input types can be selected from settings. Outputs will change based on selected input type. Unit system can be set from settings to be in: Metric/SI or Imperial/IP.\" },\n        \"energy-conversion\": { title: \"Energy Conversion (W·h)\", description: \"This node converts between Energy units watt-hour (W·h), kilowatt-hour (kW·h), British Thermal Unit (Btu), calorie (cal), joule(J), and joule(kJ). Input type can be selected from settings. Outputs will change based on selected input type.\" },\n        \"power-conversion\": { title: \"Power Conversion (kW)\", description: \"This node converts between Power units kilowatt (kW), Tons of Refrigeration (tons), British Thermal Unit per hour (Btu/h), and Electrical Horsepower (hp). Input type can be selected from settings. Outputs will change based on selected input type.\" },\n        \"volume-conversion\": { title: \"Volume Conversion (L)\", description: \"This node converts between Volume units Litre (L), Cubic Metre (m³), Cubic Foot (ft³), and Gallon (gal). Input type can be selected from settings. Outputs will change based on selected input type.\" },\n        \"temperature-conversion\": { title: \"Temperature Conversion (C-> F)\", description: \"This node converts between Temperature units: Celsius, Fahrenheit, Kelvin, and Rankine . Input type can be selected from settings. Outputs will change based on selected input type.\" },\n        \"atmospheric-pressure\": { title: \"Atmospheric Pressure (Meters-> Pa)\", description: \"This node converts ‘altitude’ to Atmospheric Pressure in various units: Pascal (Pa), Standard Atmosphere (atm), Bar (bar), and Pound-force per square inch (lbf/in2) . ‘altitude’ units can be set from settings to be in: Metric/SI (Meters-> Pa), or Imperial/IP (Feet-> Psi).\" },\n        \"pressure-conversion\": { title: \"Pressure Conversion (Pa)\", description: \"This node converts between Pressure units: Pascal (Pa), Standard Atmosphere (atm), Bar (bar), and Pound-force per square inch (lbf/in2) . Input type can be selected from settings. Outputs will change based on selected input type.\" },\n        \"actuator-sizing\": { title: \"Actuator Sizing\", description: \"This node provides a calculation for sizing of damper actuators based on cross sectional area.\" },\n        \"k-factor\": { title: \"K Factor\", description: \"This node computes the K Factor (Airflow Multiplier) based on Airflow(air hood), Differential Pressure, and Duct Area. This is frequenty used in VAV applications.\" },\n        \"dp-airflow\": { title: \"DP Airflow\", description: \"This node computes the Airflow based on a Differential Pressure, Duct Area, and a K-Factor. This is frequenty used in VAV applications.\" },\n        \"lead-lag-staging\": { title: \"Lead Lag Staging\", description: \"This node provides enable signals to equipment in a Lead-Lag configuration.\" },\n        \"lead-lag-switch\": { title: \"Lead Lag Switch\", description: \"This node rotates the lead unit between A and B when 'rotate' is toggled.\" },\n\n\n    },\n    \"json\": {\n        \"array-builder\": { title: 'Array Builder', description: \"Outputs an array of values based on the input values\" },\n        \"array-builder-number\": { title: 'Array Builder Number', description: \"Outputs an array of values based on the input values as numbers\" },\n        \"array-combine\": { title: 'Array Combine', description: \"This node will combine two array into one array\" },\n        \"json-builder\": { title: 'JSON builder', description: \"JSON builder\" },\n        \"json-enum-builder\": { title: 'JSON enum builder', description: \"JSON enum builder\" },\n        \"json-filter\": { title: 'Json Filter', description: \"Filter a json object Example: msg.myKey\" },\n        \"json-obj-filter\": { title: 'Json Array Of Object Filter', description: \"Filter a json object Example: msg.myKey\" },\n        \"json-prevent-duplicates\": { title: 'Json Prevent Duplicates', description: \"This node takes a json input and will return the json input if a value has changed\" }, \n        \"json-filter-compare\": { title: 'Json Comparison Compare (Equals)', description: \"This node provides several functions to compare a JSON object input, with a Boolean ‘output’. Available comparison functions are: Equals, Includes, Starts With, and Ends With. The comparison function is selected from settings.\" },\n        \"json-filter-multiple\": { title: 'Json Filter Multiple', description: \"Filter a json object to multiple outputs. There are two Output Update options for whether you want to update all keys or not (ALL: update as `null` when the key value will not be on the JSON, FOUND: don't update values and leave as is when key key value doesn't exist\" },\n        \"json-checker\": { title: 'JSON Checker', description: \"Checks ‘input’ for valid JSON format string.\" },\n        \"json-parse\": { title: 'Json Parse', description: \"Return JSON.stringify or a JSON.parse\" },\n        \"json-query\": { title: 'Json Query (JSONata)', description: \"Filter a json data using JSONata http://docs.jsonata.org/overview\" },\n        \"json-forEach-functions\": { title: 'Json ForEach functions', description: \"Return json object values.\" },\n        \"json-keys\": { title: 'Json Keys', description: \"Return json object values. Example: Object.keys(in)\" },\n    },\n    \"latch\": {\n        \"any-latch\": { title: 'Any data type Latch', description: \"The ‘input’ value (Input value can be any data type) is passed to ‘output’ when ‘latch’ transitions from ‘false’ to ‘true’; The ‘output’ value is maintained until the next ‘false’ to ‘true’ transition.\" },\n        \"bool-latch\": { title: 'Boolean Latch', description: \"The Boolean ‘input’ value is passed to ‘output’ when ‘latch’ transitions from ‘false’ to ‘true’; The ‘output’ value is maintained until the next ‘false’ to ‘true’ transition.\" },\n        \"num-latch\": { title: 'Numeric Latch', description: \"The Numeric ‘input’ value is passed to ‘output’ when ‘latch’ transitions from ‘false’ to ‘true’; The ‘output’ value is maintained until the next ‘false’ to ‘true’ transition.\" },\n        \"string-latch\": { title: 'String Latch', description: \"The String ‘input’ value is passed to ‘output’ when ‘latch’ transitions from ‘false’ to ‘true’; The ‘output’ value is maintained until the next ‘false’ to ‘true’ transition.\" },\n        \"set-reset\": { title: 'Set Reset', description: \"‘output’ will change to ‘true’ when ‘set’ is ‘true’, and ‘reset’ is ‘false’. There are 2 cases when ‘output’ will change to ‘false’: 1) ‘reset’ is ‘true’, and 'set is ‘false’. 2) If the ‘Reset when set=true’ setting is turned ON (Default), and ‘reset’ and ‘set’ are both ‘true’ . If this setting is turned OFF, ‘output’ will only change to ‘false’ under Case 1) conditions.\" },\n    },\n    \"math\": {\n        \"add\": { title: 'Add', description: \"(‘output’ = ‘in 1’ + ‘in 2’ + …) ‘output’ is the result of adding of all Numeric inputs. Input values can be set from settings. The number of inputs is configurable from settings.\" },\n        \"subtract\": { title: 'Subtract', description: \"(‘output’ = ‘in 1’ - ‘in 2’ - …) ‘output’ is the result of subtracting each Numeric input in order. Input values can be set from settings. The number of inputs is configurable from settings.\" },\n        \"multiply\": { title: 'Multiply', description: \"(‘output’ = ‘in 1’ * ‘in 2’ * …) ‘output’ is the result of multiplying each Numeric input in order. Input values can be set from settings. The number of inputs is configurable from settings.\" },\n        \"divide\": { title: 'Divide', description: \"(‘output’ = ‘in 1’ / ‘in 2’ / …) ‘output’ is the result of dividing each Numeric input in order. Input values can be set from settings. The number of inputs is configurable from settings.\" },\n        \"absolute\": { title: 'Absolute', description: \"(‘output’ = |‘in 1’|) ‘output’ is the absolute value (positive) of the Numeric input.\" },\n        \"modulus\": { title: 'Modulus', description: \"(‘output’ = ‘in 1’ % ‘in 2’) ‘output’ is the modulus of the Numeric inputs. Input values can be set from settings.\" },\n        \"power\": { title: 'Power', description: \"(‘output’ = ‘in 1’ ^ ‘in 2’) ‘output’ is the result of ‘in 1’ to the power of ‘in 2’. Input values can be set from settings.\" },\n        \"flexible-math\": { title: \"Flexible Math\", description: \"\" },\n\n    },\n    \"math-advanced\": {\n        \"acos\": { title: 'Acos', description: \"‘acos(x)’ is the result of arccos(‘x’). The Inverse Cosine function of input ‘x’.\" },\n        \"asin\": { title: 'Asin', description: \"‘asin(x)’ is the result of arcsin(‘x’). The Inverse Sine function of input ‘x’.\" },\n        \"atan\": { title: 'Atan', description: \"‘atan(x)’ is the result of arctan(‘x’). The Inverse Tangent function of input ‘x’.\" },\n        \"cbrt\": { title: 'Cbrt', description: \"‘cbrt(x)’ is the Cubic Root of input ‘x’.\" },\n        \"cos\": { title: 'Cos', description: \"‘cos(x)’ is the result of cos(‘x’). The Cosine function of input ‘x’.\" },\n        \"exp\": { title: 'Exp', description: \"(‘exp(x)’ = E^‘x’) ‘exp(x)’ is the result of raising E (Euler’s Number 2.71828) to the power of ‘x’. The Natural Exponential function.\" },\n        \"log\": { title: 'Logarithm (Base E)', description: \"‘log(x)’ is the result of log(‘x’) with base E (Euler’s Number 2.71828). The Natural Logarithmic function of input ‘x’.\" },\n        \"log10\": { title: 'Logarithm (Base 10)', description: \"‘log10(x)’ is the result of log(‘x’) with base 10.\" },\n        \"sin\": { title: 'Sin', description: \"‘sin(x)’ is the result of sin(‘x’). The Sine function of input ‘x’.\" },\n        \"sqrt\": { title: 'Sqrt', description: \"‘sqrt(x)’ is the Square Root of input ‘x’.\" },\n        \"tan\": { title: 'Tan', description: \"‘tan(x)’ is the result of tan(‘x’). The Tangent function of input ‘x’.\" },\n    },\n    \"math-trigger\": {\n        \"trigger-add\": { title: 'Trigger Add', description: \"When ‘trigger’ transitions from ‘false’ to ‘true’, ‘output’ is updated with the result of the addition of all inputs (‘in 1’ + ‘in 2’ + …). Input values can be set from settings. The number of inputs is configurable from settings.\" },\n        \"trigger-subtract\": { title: 'Trigger Subtract', description: \"When ‘trigger’ transitions from ‘false’ to ‘true’, ‘output’ is updated with the result of the subtraction of all inputs (‘in 1’ - ‘in 2’ - …). Input values can be set from settings. The number of inputs is configurable from settings.\" },\n        \"trigger-multiply\": { title: 'Trigger Multiply', description: \"When ‘trigger’ transitions from ‘false’ to ‘true’, ‘output’ is updated with the result of the multiplication of all inputs (‘in 1’ * ‘in 2’ * …). Input values can be set from settings. The number of inputs is configurable from settings.\" },\n        \"trigger-divide\": { title: 'Trigger Divide', description: \"When ‘trigger’ transitions from ‘false’ to ‘true’, ‘output’ is updated with the result of the division of all inputs (‘in 1’ / ‘in 2’ / …). Input values can be set from settings. The number of inputs is configurable from settings.\" },\n        \"trigger-modulus\": { title: 'Trigger Modulus', description: \"When ‘trigger’ transitions from ‘false’ to ‘true’, ‘output’ is updated with the result of the modulus of the inputs (‘in 1’ % ‘in 2’). Input values can be set from settings.\" },\n        \"trigger-power\": { title: 'Trigger Power', description: \"When ‘trigger’ transitions from ‘false’ to ‘true’, ‘output’ is updated with the result of ‘in1’ to the power of ‘in2’ (‘in 1’ ^ ‘in 2’). Input values can be set from settings.\" },\n    },\n    \"miscellaneous\": {\n        \"geo-hash\": { title: 'Geohash decode/encode', description: \"A function that encodes lat,lon to and from a geo-hash\" },\n        \"num-series-generator\": { title: 'Numeric Series Generator', description: \"\" },\n        \"append-to-strings\": { title: 'Append To Strings', description: \"\" },\n    },\n    \"network\": {\n        \"network-ping\": { title: 'Network Ping', description: \"Ping's an IP on the network, Example inputs '192.168.1.1', 'google.com', 'aidan-android'\" },\n        \"network-scan\": { title: 'Network Scan', description: \"A node for doing an IP and MAC network scan. Returns JSON output\" },\n    },\n    \"nube\": {\n        \"get-schedules\": { title: 'Get-Schedules', description: \"This node is used to fetch schedules from the Nube dashboard. The ‘Get-Schedules’ node will output all schedules from the device; Specific schedule selection is done on the ‘Schedule-Checker’ node. ‘Interval’ (set from settings) is how often the node will re-check for schedule changes (minimum 10 seconds). In order for the ‘get-schedules’ node to work, there must be a `system/platform’ node in the main container (default editor pane) and there must be a ‘deviceID’ in the ‘system/platform’ node settings, It is recommended that the API-Schedule node is used in conjunction with a filter/prevent-null node to maintain the last successful schedule read in the case that the API-Login node becomes disconnected. 'interval’ units can be configured from settings. Maximum ‘interval’ setting is 587 hours.\" },\n    },\n    \"num-transform\": {\n        \"round\": { title: 'Round (Decimal Place)', description: \"‘output’ is the ‘input’ value rounded to the configured number of decimal places. The number of decimal places can be configured from settings (limited to 5 decimal places).\" },\n        \"floor\": { title: 'Floor', description: \"‘output’ is the ‘input’ value rounded DOWN to the nearest integer.\" },\n        \"ceil\": { title: 'Ceil', description: \"‘output’ is the ‘input’ value rounded UP to the nearest integer.\" },\n        \"limit\": { title: 'Limit', description: \"‘output’ follows the ‘input’ value when it is between the ‘min’ and ‘max’ values. If ‘input’ is greater than the ‘max’ value, ‘output’ will be the ‘max’ value. If ‘input’ is less than the ‘min’ value, ‘output’ will be the ‘min’ value. ‘max’ and ‘min’ values can be configured from settings.\" },\n        \"scale\": { title: 'Scale', description: \"Performs a linear interpolation of the ‘input’ value based configured settings. When ‘input’ value is between ‘in-min’ and ‘in-max’ it is linearly interpolated between ‘out-min’ and ‘out-max’. If ‘input’ is greater than the ‘in-max’ value, ‘output’ will be the ‘out-max’ value. If ‘input’ is less than the ‘in-min’ value, ‘output’ will be the ‘out-min’ value. ‘in-max’, ‘in-min’, ‘out-max’, and ‘out-min’ values can be configured from settings.\" },\n        \"linear-shaper\": { title: 'Linear shaper', description: \"Performs a linear interpolation of the ‘input’ value between configured inflection points. The number of inflection points can be configured in settings. The inflection points will be evenly distributed from 0-100. Values for each inflection point can be wired in, or set from settings. When the ‘input’ value is between 0 and 100 the ‘output’ value will be the linear interpolation of the ‘input’ value between the surrounding inflection point values.\" },\n        \"fade\": { title: 'Fade', description: \"This node makes a smooth transition from ‘from’ to ‘to’ over the ‘interval’ period when ‘enable’ transitions from ‘false’ to ‘true’; after this ‘interval’ period ‘output’ will match the ‘to’ value while ‘enable’ is ‘true’. During the ‘interval’ period, the rate of ‘output’ change cannot be changed. Once the ‘interval’ period is complete ‘out=to’ becomes ‘true’ until ‘enable’ becomes ‘false’ again.\" },\n        \"rate-limit\": { title: 'Rate-Limit', description: \"This node makes a rate limited transition from its current output value to the ‘input’ value. When ‘enable’ is ‘true’, ‘output’ is permitted to change towards the ‘input’ value based on settings values. ‘output’ can change by ‘step’ size every ‘interval’ period. ‘output’ will be ‘null’ when ‘enable’ is ‘false’.\" },\n    },\n    \"point\": {\n        \"bool-constant\": { title: 'Boolean Constant', description: \"Outputs a Boolean value set from settings. Can also output null.\" },\n        \"num-constant\": { title: 'Numeric Constant', description: \"Outputs a Numeric value set from settings. Can also output null by leaving the settings field blank.\" },\n        \"string-constant\": { title: 'String Constant', description: \"Outputs a String value set from settings. Can also output null by leaving the settings field blank.\" },\n        \"json-constant\": { title: 'Json Constant', description: \"Outputs a JSON value set from settings. Can also output null by leaving the settings field blank. Example {“name”:“John Hill”, “age”:31} or [1,2,3,4]\" },\n        \"bool-writable\": { title: 'Boolean Writable (Priority)', description: \"Outputs the highest priority, non-null, Boolean input. Highest priority is ‘in 1’ then ‘in 2’ and so on. Input values can also be wired in, or set from settings. The number of inputs can be modified from settings.\" },\n        \"num-writable\": { title: 'Numeric Writable (Priority)', description: \"Outputs the highest priority, non-null, Numeric input. Highest priority is ‘in 1’ then ‘in 2’ and so on. Input values can also be wired in, or set from settings. The number of inputs can be modified from settings.\" },\n        \"string-writable\": { title: 'String Writable (Priority)', description: \"Outputs the highest priority, non-null, String input. Highest priority is ‘in 1’ then ‘in 2’ and so on. Input values can also be wired in, or set from settings. The number of inputs can be modified from settings.\" },\n        \"generic-point\": { title: 'Generic Point', description: \"This node is to test the generic point input types\" },\n    },\n    \"protocols/misc\": {\n        \"email\": { title: 'Email', description: \"Once configured (in settings) with the sender email server details (‘email’ and ‘password’) for Gmail, Hotmail, Outlook365, or Yahoo accounts: This node will attempt to send a new email when ‘trigger’ transitions from ‘false’ to ‘true’. The String ‘recipient’ value will be the to: email address; The String ‘subject’ value will be the email subject; and the String ‘message’ value will be the email body. The ‘response’ output will be ‘true’ if the email is sent successfully. The ‘error’ output will be an error message String if there is an error sending the email.\" },\n        \"serial-connector\": { title: 'Serial Connector', description: \"This node reads/writes serial data from/to the onboard serial ports.  These ports can be RS485 ports, or Rubix Compute wireless interface ports.  Once the Port and Baud Rate settings are configured, when enabled, the ‘output’ will be raw messages received over the configured serial port.  Any values written to the ‘writeValue’ input will be sent on the configured serial port\" },\n    },\n    \"protocols/http\": {\n        \"dynamic-http-client\": { title: \"Dynamic HTTP client\", description: 'Sends a HTTP(S) request by executing a \"axios\" configuration JSON object. The request will be triggered when a configuration object is received on the inlet. The configuration object must be the \"config\" object of the \"axios\" library. For a list of all possible options, see here: https://github.com/axios/axios#request-config' },\n        \"http-client\": { title: \"HTTP client\", description: 'Sends a HTTP(S) request to the specified URL, using the specified request method. The request will be triggered when data is received on the inlet. For PUT/POST/PATCH requests, the received data string will be submitted as the request body.' }\n    },\n    \"protocols/nube\": {\n        \"edge-28-network\": { title: 'Edge 28 Network', description: \"The is node is used for reading and writing values to the edge-io-28. This node uses an internal rest-api to talk to the edge-io-28. No details need to be set\", iconImageUrl: Icons.frog},\n        \"edge-28-lora-reset\": { title: 'Edge IO 28 LORA Map Reset', description: \"The is node is used in conjunction with the edge-io-28 when using the lora-Connect. This node uses an internal rest-api to rest a LORA Map gateway connected to an edge-io-28 controller. The reason for this nodes is to give the user more control over the nube hardware. When a trigger is activated on the node input or the interval timer is triggered the lora-modules will be reset. The reboot of the module only takes 1000ms to restart \" },\n        \"edge-28-input\": { title: \"Edge IO 28 Input\", description: EdgeHelp.inputsDesc },\n        \"edge-28-output\": { title: \"Edge IO 28 Output\", description: EdgeHelp.outputsDesc }\n    },\n    \"protocols/bacnet\": {\n        \"bacnet-network\": { title: 'BACnet Network', description: \"This node acts as a container for bacnet-device nodes. All bacnet-device nodes should be added within the bacnet-network container. IP configuration for the BACnet network connection are set from settings. The bacnet-network node can also be used to perform a BACnet Discover (WhoIs).\" },\n        \"bacnet-device\": { title: 'BACnet Device', description: \"This node acts as a container for bacnet-point nodes. All bacnet-device nodes should be added within the bacnet-network container.  All bacnet-point nodes should be added within a bacnet-device container node.  Configuration of BACnet device connections are set from settings.  Both IP and MSTP BACnet devices can be configured from the bacnet-device settings.\" },\n        \"bacnet-point\": { title: 'BACnet Point', description: \"All bacnet-point nodes should be added within the bacnet-device container node. Configuration of BACnet points are set from settings.  If the bacnet-network, and bacnet-device are configured correctly, the BACnet points will be available to select from the ‘Select a point’ setting; otherwise the point can be set manually. For information on History settings, see History/History node. Configuration is the same for bacnet-point histories.\" },\n    },\n    \"protocols/bacnet-server\": {\n        \"bacnet-server-api\": { title: 'BACnet Server', description: \"A BACnet server is used to host BACnet points to be read/written by other BACnet devices. The bacnet-server node acts as a container for bacnet-server-point nodes. All bacnet-server-point nodes should be added within the bacnet-server container. IP configurations for the BACnet server connection are set from settings.\" },\n        \"bacnet-server\": { title: 'BACnet Server', description: \"A BACnet server is used to host BACnet points to be read/written by other BACnet devices. The bacnet-server node acts as a container for bacnet-server-point nodes. All bacnet-server-point nodes should be added within the bacnet-server container. IP configurations for the BACnet server connection are set from settings.\" },\n    },\n    \"protocols/lora-raw\": {\n        \"lora-sensor-decoder\": { title: 'Lora Sensor Decoder (Droplet | ALL)', description: \"This node is used to decode raw serial input messages to LORA sensor values. It should be used in conjunction with the protocols/serial-connector node. If a ‘nodeID’ is set, only messages from matching LORA sensors will be output; if no ‘nodeID’ is set, all valid LORA sensor messages will be output. Outputs that are not present in the raw serial input message will be ‘null’. ‘lowBatteryAlm’ output will be ‘true’ if the LORA sensor has a battery ‘voltage’ value less than the ‘Low battery warning voltage’ setting; otherwise it will be ‘false’. ‘watchdog’ output will be ‘true’ if there has been no valid message from the ‘nodeID’ LORA sensor for the ‘Watchdog Delay’; otherwise ‘watchdog’ output will be false. Maximum ‘Watchdog Delay’ setting is 587 hours. This node can be used for decoding Nube Droplet sensors, and Nube MicroEdge sensors. The sensor type can be selected from settings.\" },\n        \"lora-raw-two-way-in\": { title: 'Nube LoRaRAW Two Way In', description: \"This node parses Nubes LoRa Two Way protocol\" },\n        \"lora-raw-two-way-out\": { title: 'Nube LoRaRAW Two Way Out', description: \"This node compiles points to Nubes LoRa Two Way protocol\" },\n        \"lora-raw-filter\": { title: 'Nube LoRaRAW Filter', description: \"This node filters differe nube lora protocols\" },\n        \"lora-raw-two-way-test\": { title: 'Nube LoRaRAW Two Way Test Node', description: \"Acts as the transport layer for testing only\" },\n    },\n    \"protocols/lora-raw-v2\": {\n        \"lora-raw-points-in\": { title: 'Nube LoRaRAW Points In', description: \"This node parses Nubes LoRa Points protocol payload\" },\n        \"lora-raw-points-out\": { title: 'Nube LoRaRAW Points Out', description: \"This node compiles points to Nubes LoRa Points protocol\" },\n        \"lora-raw-sensor-decoder-legacy\": { title: 'Lora Sensor Decoder (Droplet | ALL)', description: \"LEGACY DECODER. PROVIDES DECRYPTION AS NEW FIRMWARE DOESNT. This node is used to decode raw serial input messages to LORA sensor values. It should be used in conjunction with the protocols/serial-connector node. If a ‘nodeID’ is set, only messages from matching LORA sensors will be output. If no ‘nodeID’ is set, all valid LORA sensor messages will be output. Outputs that are not present in the raw serial input message will be ‘null’. ‘lowBatteryAlm’ output will be ‘true’ if the LORA sensor has a battery ‘voltage’ value less than the ‘Low battery warning voltage’ setting otherwise it will be ‘false’. ‘watchdog’ output will be ‘true’ if there has been no valid message from the ‘nodeID’ LORA sensor for the ‘Watchdog Delay’ otherwise ‘watchdog’ output will be false. Maximum ‘Watchdog Delay’ setting is 587 hours. This node can be used for decoding Nube Droplet sensors, and Nube MicroEdge sensors. The sensor type can be selected from settings.\" },\n    },\n    \"protocols/modbus\": {\n        \"modbus-server\": { title: 'Modbus Server', description: \"This node is used to create a modbus server. Once the Port and Modbus Address settings are configured, when enabled, this node will create a Local Modbus TCP/IP Server. The points on this created Modbus Server can be written to and read from with other Modbus Nodes, or from another device.\" },\n        \"modbus-rtu-network\": { title: 'Modbus 485 Network', description: \"This node is used as a modbus TCP or RTU(rs485) modbus network. The device and points for the device will be added inside this node (right click and **open** on the network node to add the device and points)\" },\n        \"modbus-device\" : {title: \"Modbus Device\", description: \"This node is used as a modbus TCP or RTU(rs485) modbus device. The node is to be added inside a modbus network node (The network details will be added in the network node). The points for the device will be added inside this node\"},\n        \"modbus-485-network\" : {title: \"Modbus 485 Network\", description: \"This node is used as a modbus TCP or RTU(rs485) modbus network. The device and points for the device will be added inside this node (right click and **open** on the network node to add the device and points)\"},\n        \"modbus-point\" : {title: \"Modbus Point\", description: \"This node is used as a modbus device point. The points for the device will be added inside the device node (right click and **open** on the network node to add the device and points) \"},\n    },\n    \"protocols/mqtt\": {\n        \"client\": { title: 'MQTT client', description: \"This node connects to an MQTT Broker, subscribes to topics, and can publish values to topics. Once configured (in settings) with a valid ‘Broker URL’, ‘Broker Port’, and ‘Authentication’ (if required), this node will read and write to MQTT topics when ‘enable’ is ‘true’. Number of topics, and the topic names can be configured from settings. Each topic will have a corresponding input and output.\" },\n        \"client-single\": { title: 'MQTT Single Topic client', description: \"This node connects to an MQTT Broker, subscribes to topics, and can publish values to topics. Once configured (in settings) with a valid ‘Broker URL’, ‘Broker Port’, and ‘Authentication’ (if required), this node will read and write to MQTT topics when ‘enable’ is ‘true’. Each topic will have a corresponding input and output.\" },\n        \"mqtt-network\": { title: 'Folder', description: \"This node acts as a container for MQTT nodes. All MQTT nodes should be added within the MQTT-Network container. The MQTT broker details can be configured in settings.\" },\n        \"mqtt-topic-extractor\": { title: 'MQTT topic extractor', description: \"The is node is used to extract sections out of an MQTT topic\" },\n        \"topic-builder\": { title: 'MQTT Topic Builder', description: \"This node takes String inputs and concatenates/joins them with ‘/’ to produce an MQTT Topic ‘output’. The number of inputs can be modified from settings.\" },\n        \"mqtt-point\": { title: 'MQTT Point', description: 'Mqtt Point Node includes MQTT publisher and subscriber inside. This node connects to an MQTT Broker, subscribes to a topic, and can publish values once we enable the node.' },\n    },\n    \"protocols/mqtt-broker\": {\n        \"mqtt-broker\": { title: 'MQTT Broker', description: \"\" },\n    },\n    \"protocols/social\": {\n        \"slack-bot\": { title: \"Slack Bot\", description: \"Slack\" },\n        \"sms-twilio\": { title: \"Twilio SMS\", description: \"Send a sms without the need of a sim card using twilio\" },\n    },\n    \"protocols/websocket\": {\n        \"websocket\": { title: \"WebSocket\", description: \"WebSocket Client for request/listen output\" },\n    },\n    \"schedule\": {\n        \"weekly-schedule\": { title: 'Weekly Schedule', description: \"Weekly Schedule\" },\n        \"event-schedule\": { title: 'Event Schedule Node', description: \"Event Schedule Node\" },\n        \"schedule-merge\": { title: 'Merge Schedule', description: \"Merge Schedule\" },\n        \"schedule-checker\": { title: 'Schedule Checker (unconfigured)', description: \"This node checks the API-Schedule output string for active schedules that match the selected ‘Schedule Name’ setting. ‘output’ will be ‘true’ when the matching schedule is active and ‘enable’ is ‘true’; otherwise ‘output’ will be ‘false’. ‘nextStart’ is the timestamp output of the next scheduled start time. ‘nextStop’ is the timestamp output of the next scheduled stop time. ‘lastCheck’ is the timestamp output of the last time a schedule check was run. ‘error’ output will be ‘true’ if there is an error while checking the schedule input string; otherwise ‘error’ will be false. The frequency that schedules are checked can be modified with the ‘Schedule Check Interval’ setting (set in millis). The ‘Timestamp Output Format’ setting can be adjusted to output timestamps as strings or as Epoch Timestamps. String timestamps will be displayed in the timezone specified by the ‘Timezone’ setting.\" },\n    },\n    \"statistics\": {\n        \"min-max-avg\": { title: 'Min-Max-Avg', description: \"Outputs the Minimum, Maximum, and Average values of all the (non null) Numeric inputs. The number of inputs and their values can be modified from settings.\" },\n        \"avg\": { title: 'Average', description: \"Outputs the Average, Count, and Sum values of all the (non null) Numeric inputs. The number of inputs and their values can be modified from settings.\" },\n        \"min\": { title: 'Min', description: \"Outputs the Minimum value of all the (non null) Numeric inputs. The number of inputs and their values can be modified from settings.\" },\n        \"max\": { title: 'Max', description: \"Outputs the Maximum value of all the (non null) Numeric inputs. The number of inputs and their values can be modified from settings.\" },\n        \"sum\": { title: 'Sum', description: \"Outputs the Sum of all the (non null) Numeric inputs. The number of inputs and their values can be modified from settings.\" },\n        \"median\": { title: 'Median', description: \"Outputs the Median value of all the (non null) Numeric inputs. The number of inputs and their values can be modified from settings.\" },\n        \"range\": { title: 'Range', description: \"Outputs the Range value (max-min) of all the (non null) Numeric inputs. The number of inputs and their values can be modified from settings.\" },\n        \"rank\": { title: 'Rank (Highest)', description: \"Outputs the ranked highest (max to min), or ranked lowest (min to max) of all the (non null) Numeric inputs. The number of inputs and the number of outputs can be modified from settings.\" },\n        \"stats-all\": { title: 'All Stats', description: \"Outputs the Maximum, Minimum, Range, Sum, Mean, Median, Modes, Variance, Standard Deviation, Mean Absolute Deviation, and Z Score values of all the (non null) Numeric inputs. The number of inputs and their values can be modified from settings.\" },\n    },\n    \"streams\": {\n        \"stream-average\": { title: 'Stream Average', description: \"'output' is the average of all received Numeric 'input' value.  'output' is reset when 'reset' transitions from 'false' to 'true'.\" },\n        \"stream-highest\": { title: 'Stream Highest', description: \"‘output’ is the highest received Numeric ‘input’ value. ‘output’ is reset when ‘reset’ transitions from ‘false’ to ‘true’.\" },\n        \"stream-lowest\": { title: 'Stream Lowest', description: \"'output' is the lowest received Numeric 'input' value.  'output' is reset when 'reset' transitions from 'false' to 'true'.\" },\n        \"stream-sum\": { title: 'Stream Sum', description: \"output’ is the sum of all received Numeric ‘input’ value. ‘output’ is reset to 0 when ‘reset’ transitions from ‘false’ to ‘true’.\" },\n        \"stream-merge\": { title: 'Stream Merge', description: \"This node merges multiple inputs into a single stream/output. Any new ‘input’ (‘in #’) value will be passed to ‘output’. The number of inputs can be modified from settings.\" },\n        \"gate\": { title: 'Message Gate', description: \"This node can allow(gate open) or block(gate close) the transfer of the ‘input’ to ‘output’. When ‘open’ is ‘true’, ‘input’ is passed to ‘output’. When ‘open’ is ‘false’, ‘output’ will maintain its last value. If ‘Send null when closed’ setting is ticked, ‘output’ will be ‘null’ when ‘open’ is ‘false’.\" },\n        \"stack\": { title: 'Stack', description: \"‘input’ values are stored in a list. Stored ‘input’ values are passed to ‘output’ one by one each time ‘trigger’ transitions from ‘false’ to ‘true’. ‘input’ values are passed to ‘output’ in a last-in, first-out order. Stored ‘input’ values are deleted when ‘clear’ transitions from ‘false’ to ‘true’. ‘count’ is the number of stored ‘input’ values.\" },\n        \"queue\": { title: 'Queue', description: \"‘input’ values are stored in a list. Stored ‘input’ values are passed to ‘output’ one by one each time ‘trigger’ transitions from ‘false’ to ‘true’. ‘input’ values are passed to ‘output’ in a first-in, first-out order. Stored ‘input’ values are deleted when ‘clear’ transitions from ‘false’ to ‘true’. ‘count’ is the number of stored ‘input’ values.\" },\n        \"stream-delay\": { title: 'Stream Delay', description: \"‘input’ values are passed to ‘output’ after a ‘delay’ period. Each ‘input’ value is delayed by the same ‘delay’ period. ‘delay’ units can be configured from settings. Maximum ‘delay’ setting is 587 hours.\" },\n        \"stream-delay-meter\": { title: 'Stream Delay meter', description: \"This node measures the delay between the incoming events. Any value sent to ‘input’ (excluding null) will be accepted. ‘ms’ output is the time between the lastest ‘input’, and the previous ‘input’. ‘ms’ is reset when ‘reset’ transitions from ‘false’ to ‘true’. ‘ms’ output is in millis.\" },\n        \"frequency-meter\": { title: 'Frequency meter', description: \"This node measures the frequency of the incoming ‘input’ events. Any value sent to ‘input’ (excluding null) will be accepted. ‘events/sec’ output is the average rate received ‘input’ values. ‘events/sec’ is reset when ‘reset’ transitions from ‘false’ to ‘true’.\" },\n        \"flatline\": { title: 'Flatline', description: \"This node checks to see if the input has not changed for the 'interval' period.\" },\n\n    },\n    \"string\": {\n        \"string-acronyms\": { title: 'String Case Acronyms', description: \"This node will upper case any common HVAC Acronyms, For example it will Upper Fcu to FCU\" },\n        \"string-compare\": { title: 'String Compare', description: \"This node provides several functions to compare 2 String inputs, with a Boolean ‘output’. Available comparison functions are: Equals, Includes, Starts With, and Ends With. The comparison function is selected from settings.\" },\n        \"cut-substring\": { title: 'Substring Cut', description: \"This node outputs a portion of a String ‘input’ defined by the Numeric ‘start’ and ‘length’ parameters. String ‘output’ is the portion of ‘input’ starting at index (position) ‘start’ and continating the next ‘length’ value of characters. ‘start’ value of 0 is the beggining of the string. If a negative ‘start’ value is given, the substring will be selected from the end of the ‘input’ string (eg. -1 is the end of the ‘input’; -2 is the second to last character of the ‘input’, …).\" },\n        \"string-join\": { title: 'String Join', description: \"This node takes String inputs and concatenates/joins them to produce a String ‘output’. The number of inputs can be modified from settings.\" },\n        \"string-length\": { title: 'String Length', description: \"‘output’ is the number of characters in the given String ‘input’ value.\" },\n        \"string-index-of\": { title: 'String Index Of', description: \"This node takes String ‘input’ and ‘searchFor’; Numeric ‘output’ is the index(position) of the first instance of ‘searchFor’ in ‘input’. Index of 0 is the begginning of the ‘input’ string.\" },\n        \"char-at-index\": { title: 'Char at Index', description: \"‘output’ is the character at the Numeric ‘index’ (position) of String ‘input’. The first character of the String ‘input’ is ‘index’ 0. If ‘index’ is negative, characters will be selected from the end of the ‘input’ string (eg. -1 is the last character; -2 is the second to last character). ‘output’ will be ‘null’ on an invalid ‘index’.\" },\n        \"string-split\": { title: 'String Split', description: \"Portions of the String ‘input’ are sent to the String ‘output’ sequentially when ‘next’ trasitions from ‘false’ to ‘true’; these ‘output’ strings are portions of the ‘input’ string split by the String ‘separator’ value. The Numeric ‘left’ outputs the number of ‘output’ strings remaining to be sent. When ‘start’ transitions from ‘false’ to ‘true’, the ‘output’ string will go back to the first portion of the ‘input’ string.\" },\n        \"string-case\": { title: 'String Case (Lower)', description: \"‘output’ is the ‘input’ string with all characters changed to either upper or lower case. Upper or Lower case can be selected from settings.\" },\n        \"char-to-ascii\": { title: 'Char to ASCII Code', description: \"‘output’ is the ASCII code of the first character of a given String ‘input’ value.\" },\n        \"ascii-to-char\": { title: 'ASCII Code to Char', description: \"‘output’ is the character of the given Numeric ASCII code ‘input’ value.\" },\n        \"string-buffer\": { title: 'String Buffer', description: \"\" },\n    },\n    \"switch\": {\n        \"bool-switch\": { title: 'Boolean Switch', description: \"Boolean ‘switch’ passes corresponding Boolean input to ‘output’. If ‘switch’ is ‘true’, Boolean ‘inTrue’ value will be passed to ‘output’ ‘inTrue’ and ‘inFalse’ values can be set in settings.\" },\n        \"num-switch\": { title: 'Numeric Switch', description: \"Boolean ‘switch’ passes corresponding Numeric input to ‘output’. If ‘switch’ is ‘true’, Numeric ‘inTrue’ value will be passed to ‘output’ ‘inTrue’ and ‘inFalse’ values can be set in settings.\" },\n        \"string-switch\": { title: 'String Switch', description: \"Boolean ‘switch’ passes corresponding String input to ‘output’. If ‘switch’ is ‘true’, String ‘inTrue’ value will be passed to ‘output’ ‘inTrue’ and ‘inFalse’ values can be set in settings.\" },\n        \"bool-select\": { title: 'Boolean Select', description: \"Numeric integer ‘select’ passes corresponding Boolean input to ‘output’. If ‘select’ is 2, ‘in 2’ will be passed to ‘output’ (likewise for other integer ‘select’ values). If the ‘select’ value does not have a corresponding ‘in #’ value, ‘output’ value will be ‘null’. The number of inputs and their values can be modified from settings.\" },\n        \"num-select\": { title: 'Numeric Select', description: \"Numeric integer ‘select’ passes corresponding Numeric input to ‘output’. If ‘select’ is 2, ‘in 2’ will be passed to ‘output’ (likewise for other integer ‘select’ values). If the ‘select’ value does not have a corresponding ‘in #’ value, ‘output’ value will be ‘null’. The number of inputs and their values can be modified from settings.\" },\n        \"string-select\": { title: 'String Select', description: \"Numeric integer ‘select’ passes corresponding String input to ‘output’. If ‘select’ is 2, ‘in 2’ will be passed to ‘output’ (likewise for other integer ‘select’ values). If the ‘select’ value does not have a corresponding ‘in #’ value, ‘output’ value will be ‘null’. The number of inputs and their values can be modified from settings.\" },\n        \"bool-output-select\": { title: 'Boolean Output Select', description: \"Numeric integer ‘select’ passes Boolean ‘input’ to the corresponding Boolean ‘output’. If ‘select’ is 2, ‘input’ will be passed to ‘out 2’ (likewise for other integer ‘select’ values). If the ‘select’ value does not have a corresponding ‘out #’ value, no values will be passed. The number of outputs can be modified from settings.\" },\n        \"num-output-select\": { title: 'Numeric Output Select', description: \"Numeric integer ‘select’ passes Numeric ‘input’ to the corresponding Numeric ‘output’. If ‘select’ is 2, ‘input’ will be passed to ‘out 2’ (likewise for other integer ‘select’ values). If the ‘select’ value does not have a corresponding ‘out #’ value, no values will be passed. The number of outputs can be modified from settings.\" },\n        \"string-output-select\": { title: 'String Output Select', description: \"Numeric integer ‘select’ passes String ‘input’ to the corresponding String ‘output’. If ‘select’ is 2, ‘input’ will be passed to ‘out 2’ (likewise for other integer ‘select’ values). If the ‘select’ value does not have a corresponding ‘out #’ value, no values will be passed. The number of outputs can be modified from settings.\" },\n    },\n    \"system\": {\n        \"host-info\": { title: 'Host Info', description: \"This node outputs various linux system information. More Info: https://docs.nube-iiot.com/en/nodes/home#host-info\" },\n        \"platform\": { title: 'Platform', description: \"This node provides a node to read the settings for the Wires instance.\" },\n        \"system-info\": { title: 'System Info ', description: \"This node outputs various linux system information. Once a system property has been selected from settings, a ‘false’ to ‘true’ transition on the ‘trigger’ input will update the ‘output’. ‘error’ will display error information if the request is not successful.\" },\n        \"beep\": { title: 'Beep', description: \"This node plays a default system sound on the server (not in the browser) when ‘trigger’ transitions from ‘false’ to ‘true’.\" },\n        \"execute-cmd\": { title: 'Execute Command', description: \"This node triggers commands to be run on the linux host. The string input ‘command input’ will be run when ‘trigger’ transitions from ‘false’ to ‘true’. NOTE: ONLY USE THIS NODE IF YOU KNOW EXACTLY WHAT YOU ARE DOING. SYSTEM COMMANDS CAN CHANGE SYSTEM CONFIGURATION WHICH CANNOT BE FIXED FROM WITHIN WIRES. YOU COULD BREAK WIRES, THE CONTROLLER, OR YOUR PC.\" },\n        \"flow-export\": { title: 'Flow Export', description: \"A node to export the wires flow to JSON when trigger values gets changed to true from different state\" },\n        \"network-interface-edge-28\": { title: 'Network Interface EdgeIO-28', description: \"This node is used to configure the network (IP) interface for edge28 controllers. Changes made to settings will only be saved if ‘Save changes on save’ is toggled ON. In some cases a reboot will be required to save the changes, if ‘Reboot’ is toggled ON, then clicking ‘save’ will reboot the controller. NOTE: Making changes on a remote device could cause the device to become inaccessible.\" },\n        \"network-interfaces\": { title: 'Network Interfaces', description: \"This node is used to configure the network (IP) interfaces for the device. Changes made to settings will only be saved if ‘Save changes on save’ is toggled ON. In some cases a reboot will be required to save the changes, if ‘Reboot’ is toggled ON, then clicking ‘save’ will reboot the controller. NOTE: Making changes on a remote device could cause the device to become inaccessible.\" },\n        \"system-build-version\": { title: 'Build Versions', description: \"A node for return the build versions of wires and nodejs\" },\n        \"file\": { title: \"File\", description: \"This node can read and write any file on the disk. Send the file name to the input named File Name. The path can be omitted. With logic inputs named Read, Write, Clear you can perform the requested operation. The input named Text set a text value to be written to the file. The contents of the file will be sent to the output.\" },\n        \"json-file\": { title: \"Json File\", description: \"This node can read and write Json file on the disk. Send the file name To the input named File Name. The path can be omitted. With logic inputs named Read, Write, Delete File you can perform the requested operation. Specify the key that you want to read/write. The value that you want to write, send to Value input. Read value will be sent to the output.\" },\n    },\n    \"time\": {\n        \"conversion\": { title: 'Time Conversion (min)', description: \"This node converts between Time units Days(‘day’), Hours(‘hour’), Minutes(‘min’), Seconds(‘sec’), and Milliseconds(‘milli’). Input type can be selected from settings. Outputs will change based on selected input type. The number of decimal places that output values have can be set from the ‘Precision’ setting.\" },\n        \"conversion-plus\": { title: 'Time Conversion Json', description: \"This node will let you convert a timestamp or unix (epoch) timestamp into date and time parts\" },\n        \"timezone-conversion\": { title: 'Timezone Conversion', description: \"The is node is used to convert two timestamps\" },\n        \"clock\": { title: 'Clock', description: \"Outputs the System Time in various forms. Standard outputs are: Time(‘timeString’) Hours(‘hour’), Minutes(‘min’), and Seconds(‘sec’). There are also Advanced outputs which can be enabled from settings. The Advanced outputs are: Milliseconds(millis), Time String including timezone (‘longString’), Timezone Offset from UTC(‘TZOffset’), and Unix Timestamp (‘epoch’). ‘interval’ is the output update frequency. ‘interval’ units can be configured from settings. Maximum ‘interval’ setting is 587 hours.\" },\n        \"date\": { title: 'Date', description: \"Outputs various date information based on the system time. String ‘dateString’ is the current date. String ‘dayString’ is the current day of the week. Numeric ‘dayOfWeek’ is an integer between 0 and 6 corresponding to Sunday(0) through Saturday(6). Numeric ‘date’ is and integer of the current date. Numeric ‘month’ is an integer of the current month Jan(0) - Dec(12). Numeric ‘year’ is an integer of the current year.\" },\n        \"date-difference\": { title: 'Date Difference', description: \"The is node is used to compare the difference between two timestamps\" },\n        \"stopwatch\": { title: 'Stopwatch', description: \"This node converts between Time units Days(‘day’), Hours(‘hour’), Minutes(‘min’), Seconds(‘sec’), and Milliseconds(‘milli’). Input type can be selected from settings. Outputs will change based on selected input type. The number of decimal places that output values have can be set from the ‘Precision’ setting. ‘interval’ units can be configured from settings. Maximum ‘interval’ setting is 587 hours.\" },\n        \"cron-interval\": { title: 'Cron Interval', description: \"This node triggers ‘output’ to transition from ‘false’ to ‘true’ for 500 milliseconds at a selected times/intervals, configured in settings. ‘info’ will show information about the status of the node. ‘cronExpression’ represents the configured scheduled timings in Cron notation. ‘cronDescription’ represents the configured scheduled timings in plain english. ‘nextExecution’ is a String output representing the datetime that the next ‘message’ will be sent from ‘output’. For more information on Cron Expressions see: (https://www.freeformatter.com/cron-expression-generator-quartz.html)\" },\n        \"cron-weekly\": { title: 'Cron Weekly', description: \"This node triggers ‘output’ to transition from ‘false’ to ‘true’ for 500 milliseconds at a configured time on each selected day. Days and Times are set in settings. ‘info’ will show information about the status of the node. ‘cronExpression’ represents the configured scheduled timings in Cron notation. ‘cronDescription’ represents the configured scheduled timings in plain english. ‘nextExecution’ is a String output representing the datetime that the next ‘message’ will be sent from ‘output’. For more information on Cron Expressions see: (https://www.freeformatter.com/cron-expression-generator-quartz.html)\" },\n        \"cron-expression\": { title: 'Cron Expression', description: \"This node triggers ‘output’ to transition from ‘false’ to ‘true’ for 500 milliseconds at times triggered by the ‘input’ CRON expression. ‘info’ will show information about the status of the node. ‘cronDescription’ represents the configured scheduled timings in plain english. ‘nextExecution’ is a String output representing the datetime that the next ‘message’ will be sent from ‘output’. For more information on Cron Expressions see: (https://www.freeformatter.com/cron-expression-generator-quartz.html)\" },\n        \"timestamp-generator\": { title: 'Timestamp Generator', description: \"The is node is used to generate a timestamps\" },\n        \"rate-limit\": { title: \"Rate Limit\", description: \"\" },\n    },\n    \"trigger\": {\n        \"change-of-value\": { title: 'Change Of Value', description: \"when ‘input’ changes value, output becomes ‘true’ for ‘interval’ duration, then ‘output’ changes back to ‘false’. For Numeric ‘input’ values, the change of value must be greater than the ‘threshold’ value to trigger the output.\" },\n        \"random\": { title: 'Random', description: \"When ‘trigger’ transitions from ‘false’ to ‘true’, a random number between ‘min’ and ‘max’ values is produced at ‘output’. The number of decimal places that ‘output’ values have can be set from settings.\" },\n        \"inject\": { title: 'Inject', description: \"While ‘enable’ is ‘true’, ‘output’ will send ‘message’ value when ‘trigger’ transitions from ‘false’ to 'true\" },\n        \"interval-inject\": { title: 'Interval Inject', description: \"While ‘enable’ is ‘true’, ‘output’ will send ‘message’ value at every ‘interval’ period. When ‘enable’ is ‘false’, ‘output’ will be ‘null’. ‘interval’ units can be configured from settings. Maximum ‘interval’ setting is 587 hours.\" },\n        \"iterator\": { title: 'Iterator', description: \"This node generates a sequence of ‘true’ messages at ‘output’. If the ‘Generate False’ setting is ticked (default), then a ‘false’ message will be sent between each ‘true’ at ‘output’. The number of ‘true’ messages sent will be equal to ‘iterations’ value; these values are sent over the ‘interval’ duration (unless interrupted by ‘stop’ inputs). For example, if ‘interval’ is set to 5 (seconds) and ‘iterations’ is set to 5, a ‘true’ message will be sent from ‘output’ every 1000 millis. If 'stop’ input is ‘true’ then the next ‘true’ value will not be sent from ‘output’ until ‘stop’ is ‘false’ again. ‘interval’ units can be configured from settings. Maximum ‘interval’ setting is 587 hours.\" },\n    },\n    \"widget\": {\n        \"schedule-afterhours-off\": { title: 'Schedule-Afterhours-Off Widget', description: 'This node works with a multi-select cloud dashboard widget to perform the logic to output ‘enable’ and ‘remaining runtime’. Widget Example: {“new”:false,“widgetType”:“MultiSwitch”,“dataSource”:“Ditto”,“tableSelectionMode”:“Tabular”,“cellWidthAuto”:true,“numCharts”:1,“timeSeriesData”:true,“valuePrecision”:3,“trimTableHeaders”:0,“enableTooltip”:true,“enableLegend”:true,“enableZoomSlider”:true,“syncTime”:60,“chartSettings”:[{“xAxisSplits”:3,“yAxisSplits”:5}],“graphType”:“LineChart”,“fontSize”:35,“statusImageName”:“Light”,“trueStatus”:1,“falseStatus”:0,“priority”:16,“sliderMin”:10,“sliderMax”:30,“sliderStep”:0.1,“min”:0,“max”:100,“gaugeSplits”:6,“maximum”:0,“unit”:“°C”,“steps”:0,“reverseGradient”:true,“lowerBound”:0,“upperBound”:100,“cellWidth”:150,“tickCount”:100,“theme”:“nube”,“titleColor”:\"#333333\",“gateway”:\"/api/ditto\",“query”:\"/api/2/things/com.nubeio:97768707-4a17-4d36-baa5-e1f95cbd74d4/features/points/properties/CHAPEL_Mode\",“units”:\"%\",“title”:“AC Control”,“containerHeight”:150,“icon”:“None”,“topicIcon”:“None”,“subTopicIcon”:“None”,“layouts”:{“lg”:{“w”:6,“h”:4,“x”:0,“y”:7,“moved”:false,“static”:false},“md”:{“x”:0,“y”:144,“w”:6,“h”:8},“sm”:{“x”:0,“y”:104,“w”:6,“h”:8},“xs”:{“x”:0,“y”:8,“w”:4,“h”:8},“xxs”:{“x”:0,“y”:8,“w”:2,“h”:8}},“numButtons”:3,“buttonSettings”:[{“name”:“SCHEDULE”,“value”:“SCHEDULE”},{“name”:“AFTERHOURS”,“value”:“AFTERHOURS”},{“name”:“OFF”,“value”:“OFF”}],“dataType”:“Global”,“enableBackground”:false,“isSelect”:false,“fontWeight”:“bold”,“fontColor”:\"\",“overriddenFields”:[],“isTransparent”:false,“isSelectedDitto”:true,“showValue”:true,“dataEditorCode”:\"\"}' },\n        \"schedule-prestart-fixed\": { title: 'Schedule Prestart Fixed', description: \"This node provides a pre-start function based on fixed settings. Conditions are evaluated every 30 seconds.\" },\n    },\n    \"unknown\": {\n        \"unknown\" : {title: \"Unknown\", description: \"Fallback node, this node need to be replace by another node\"}\n    },\n};\n","/**\n * Created by Derwish (derwish.pro@gmail.com) on 04.07.2016.\n * License: http://www.gnu.org/licenses/gpl-3.0.txt\n */\nimport { get, merge } from 'lodash';\nimport { Colors, create } from 'logplease';\nimport * as moment from 'moment';\nimport { BackendLinkVisitor } from '../shared/link-result-visitor';\nimport { ERROR, NODE_IO_VALUES, NOTIFICATION } from '../shared/websocket-events';\nimport { ErrorHandler } from '../utils/decorators';\nimport { isEmpty, isNotNull, isNull, mapToObjectSameKey } from '../utils/helper';\nimport { IdGenerator } from '../utils/id-generator';\nimport { UNKNOWN_NODE } from './constants';\nimport { Container } from './container';\nimport { createNodeDbHelper } from './node-db-helper';\nimport { NodeHookHelper } from './node-hook';\nimport { IContainer, IFolderNode, INode, SerializedNode, Side } from './node-interface';\nimport { convertType, InputSetting, NodeInput, NodeOutput, NodeSetting, Type } from './node-io';\nimport { compareNodeIO, createLinkHandler, Link } from './node-link';\nimport { Shape2D } from './node-presenter';\nimport { NodeTypeRegistry } from './node-type-registry';\nimport { Deserializable, SerializableHelper } from './serializable';\nimport Utils from './utils';\n\nconst logger = create('node', { color: Colors.Magenta });\nconst doNothing = () => {\n};\n\nexport interface ContextMenuOption {\n  title: string;\n\n  onClick();\n}\n\nexport enum BROADCAST {\n  UPDATE_SETTINGS,\n  UPDATE_OUTPUTS,\n  UPDATE_TITLE,\n  UPDATE_VALUE,\n  UPDATE_STATE,\n  UPDATE_NAME,\n  UPDATE_PROPERTIES,\n}\n\nexport enum NodeState {\n  NORMAL   = 'normal', // the node default colour\n  INFO     = 'info',\n  WARNING  = 'warning',\n  ERROR    = 'error', // when user added something that they shouldn't have\n  DISABLED = 'disabled', // when a network is disabled\n  ONLINE   = 'online', // when a device is online\n  OFFLINE  = 'offline', // when a device is offline\n}\n\nexport interface NodeSettingConfig {\n  groups?: Array<{\n    [name: string]: {\n      weight?: number;\n    };\n  }>;\n  conditions?: {\n    [name: string]: (setting: any) => boolean;\n  };\n}\n\nexport class Node implements INode, Deserializable<SerializedNode> {\n\n  id: string | number;\n  cid: string | number;\n  name: string;\n  type: string;\n  pos: [number, number] = [100, 100];\n  size: [number, number];\n  inputs: { [id: number]: NodeInput };\n  outputs: { [id: number]: NodeOutput };\n  settings: { [name: string]: NodeSetting } = {};\n  properties?: any = {};\n  flags: {\n    skip_title_render?: true;\n    unsafe_execution?: false;\n    collapsed?: boolean;\n    clip_area?: boolean;\n  } = {};\n\n  container: Container;\n  side: Side;\n  title: string;\n  category: string;\n  description: string;\n  data?: any;\n  MIN_WIDTH = 100;\n  settingConfigs: NodeSettingConfig = {};\n  contextMenu: { [name: string]: ContextMenuOption } = {};\n  settingsHeaderComponent?: any; // vue.js component definition\n  ignore_remove: boolean;\n  removable: boolean;\n  movable: boolean;\n  clonable: boolean = true;\n\n  mouseOver: boolean;\n  selected: boolean;\n\n  color: string;\n  bgcolor: string;\n  boxcolor: string;\n  headerColor: string;\n  shape: string;\n  onSerialize: Function;\n  bgImage: HTMLImageElement;\n  bgImageUrl: string;\n\n  isUpdated: boolean;\n  isRecentlyActive: boolean;\n\n  isDashboardNode?: boolean;\n\n  //you can set this setting for prevent input flooding!\n  UPDATE_INPUTS_INTERVAL?: number;\n  updateInputsLastTime?: number;\n\n  //you can set this setting for prevent execute flooding!\n  EXECUTE_INTERVAL?: number;\n  executeLastTime?: number;\n\n  showIcon: boolean = true;\n  iconImage: HTMLImageElement;\n  iconImageUrl: string;\n  icon: string;\n\n  nodeState: NodeState;\n\n  // Lifecycle Hooks: TODO write somewhere on README\n  // ===============================================\n  // setup()            : gets invoked when new node will be created, before setting up any settings and properties\n  //                      for writing your own custom logic for node creation\n  // init(properties)   : gets invoked when new node will be created after `setup` for doing modifying node dynamically,\n  //                      static settings and properties fields gets inserted before this method\n  // onCreated()        : gets invoked when new node will be created after `init(properties)`,\n  //                      after `init(properties)` we save the re-sets the settings values\n  // onAdded()          : gets invoked every time when node added to container (created or restored from the database)\n  // onRemoved()        : Invoked when node removed from container, it can be both Promise return or normal return\n  // onDbReaded()       : Invoked when db read and all nodes added to containers (after all nodes onAdded invoked)\n\n  // onDrawBackground\n  // onDrawForeground\n  //\n  // //if returns false the incoming connection will be canceled\n  // onConnectInput\n  // onInputAdded\n  // onOutputAdded\n  // onGetInputs\n  // onGetOutputs\n  // onInputRemoved\n  // onOutputRemoved\n  // getValueFromSettings(slot, labelFromData)\n  // getInputToSettingsMap\n  //\n  // onMouseDown\n  // onMouseUp\n  // onMouseEnter\n  // onMouseMove\n  // onMouseLeave\n  // onDblClick\n  // onDropFile\n  // onDropItem\n  // onKeyDown\n  // onKeyUp\n  //\n  // onSelected\n  // onDeselected\n  //\n  // onGetMessageToServerSide\n  // onGetMessageToEditorSide\n  //\n  // onRunContainer\n  // onStopContainer\n  // onExecute\n  // onInputUpdated\n  //\n  // onBeforeSettingsChange(newSettings, newName)\n  // onAfterSettingsChange(oldSettings, oldName)\n\n  // getMenuOptions\n  // getExtraMenuOptions\n\n  //onDashboardGetRequest\n  //onDashboardPostRequest\n  //onEditorApiGetRequest\n  //onEditorApiPostRequest\n\n  constructor() {\n    this.type = '';//trick to use isNode isContainerNode\n    this.id = IdGenerator.UNINITIALIZED;\n    this.cid = IdGenerator.UNINITIALIZED;\n  }\n\n  onAfterSettingsChange(oldSettings, oldName, oldIcon?) {\n  }\n\n  onAdded() {\n  }\n\n  afterAdded() {\n    this.size = Shape2D.isDisplayable(this.size) ? this.size : this.computeSize();\n  }\n\n  onRemoved() {\n  }\n\n  beforeRemoveNode() {\n    Object.entries(this.inputs ?? {})\n          .filter(([_, input]) => isNotNull(input.link))\n          .forEach(([i, _]) => this.disconnectInputLink(+i));\n    Object.entries(this.outputs ?? {})\n          .filter(([_, output]) => isEmpty(output.links))\n          .forEach(([o, _]) => this.disconnectOutputLinks(+o));\n  }\n\n  afterRemoveNode() {\n    // remove from renderer\n    if (this.container?.renderers) {\n      for (let i = 0; i < this.container.renderers.length; ++i) {\n        let renderer = this.container.renderers[i];\n        if (renderer.selected_nodes[this.id]) delete renderer.selected_nodes[this.id];\n        if (renderer.node_dragged == this) renderer.node_dragged = null;\n      }\n    }\n  }\n\n  serialize(): SerializedNode {\n    let n: SerializedNode = {\n      cid: this.container?.id ?? this.cid,\n      id: this.id,\n      type: this.type,\n      pos: this.pos,\n      name: this.name,\n      size: this.size,\n      icon: this.icon,\n      inputs: SerializableHelper.serialize(this.inputs),\n      outputs: SerializableHelper.serialize(this.outputs),\n      settings: SerializableHelper.serialize(this.settings),\n      properties: SerializableHelper.serialize<object>(this.properties),\n      flags: SerializableHelper.serialize<object>(this.flags),\n    };\n    if (this.onSerialize) this.onSerialize(n);\n    return n;\n  }\n\n  @ErrorHandler\n  deserialize(serializedNode: SerializedNode, isNew?: boolean): Node {\n    function doMerge<T>(o1: { [p: string]: T }, o2: { [p: string]: T }, shouldMerge: boolean): { [p: string]: T } {\n      const serialized = mapToObjectSameKey(o1, (_, i) => SerializableHelper.serialize<T>(i));\n      return shouldMerge ? merge({}, serialized, o2) : serialized;\n    }\n\n    let node_class = NodeTypeRegistry.instance().get(serializedNode.type);\n    if (!node_class) {\n      this.debugWarn(`Node class of type [${serializedNode.type}] is not registered. Fallback to 'unknown'`);\n      node_class = NodeTypeRegistry.instance().get(UNKNOWN_NODE);\n    }\n    let node: Node = new node_class();\n    node.category = node_class.category;\n    NodeHookHelper.execute(node, 'setup');\n    NodeHookHelper.execute(node, 'init', node);\n    node.id = serializedNode.id ?? node.id;\n    node.cid = serializedNode.cid ?? node.cid;\n    node.type = serializedNode.type ?? node.type;\n    node.name = serializedNode.name;\n    node.pos = serializedNode.pos;\n    node.icon = serializedNode.icon ?? node.icon;\n    node.flags = !isNew ? merge(node.flags, serializedNode.flags) : node.flags;\n    node.inputs = mapToObjectSameKey(doMerge(node.inputs, serializedNode.inputs, !isNew),\n                                     (_, i) => NodeInput.create(i));\n    node.outputs = mapToObjectSameKey(doMerge(node.outputs, serializedNode.outputs, !isNew),\n                                      (_, o) => NodeOutput.create(o));\n    node.settings = mapToObjectSameKey(doMerge(node.settings, serializedNode.settings, !isNew), (k, s) => {\n      const setting = node.settings[k];\n      return NodeSetting.create({ ...s, validation: setting?.validation, toJSON: setting?.toJSON });\n    });\n    node.properties = !isNew ? merge(node.properties, serializedNode.properties) : node.properties;\n    node.size = serializedNode.size ?? this.computeSize(true);\n    return node;\n  }\n\n  getParent(): IContainer {\n    return this.container;\n  }\n\n  getParentNode(): IFolderNode {\n    return this.getParent()?.nodeItself();\n  }\n\n  /**\n   * Serialize and stringify\n   * @returns {string} json\n   */\n  toString(): string {\n    return JSON.stringify(this.serialize());\n  }\n\n  /**\n   * Get the title string\n   */\n  getTitle(): string {\n    return this.title;\n  }\n\n  getName(): string {\n    return this.name;\n  }\n\n  /***\n   * Gets array of all input values, but omitting undefined/null values\n   */\n  getDefinedInputValues() {\n    return Object.keys(this.inputs)\n                 .map(key => this.inputs[key].data)\n                 .filter(v => v != null);\n  }\n\n  /**\n   * Sets the output data according to the transform function\n   * @param callback function\n   */\n  emitTransformedInput(callback) {\n    let val = this.getInputData(0);\n    if (val != null) {\n      this.setOutputData(0, callback(val));\n    } else {\n      this.setOutputData(0, null);\n    }\n  }\n\n  /**\n   * @deprecated Use {@link NodeDbHelper#update} via {@link createNodeDbHelper}\n   */\n  updateNodeInput() {\n    createNodeDbHelper().update(this, ['inputs']);\n  }\n\n  /**\n   * @deprecated Use {@link NodeDbHelper#update} via {@link createNodeDbHelper}\n   */\n  updateNodeOutput() {\n    createNodeDbHelper().update(this, ['outputs']);\n  }\n\n  /**\n   * @deprecated Use {@link NodeDbHelper#update} via {@link createNodeDbHelper}\n   */\n  persistProperties(saveSettings = false, saveProperties = false, saveInputs = false, saveOutputs = false) {\n    const p = { 'settings': saveSettings, 'properties': saveProperties, 'inputs': saveInputs, 'outputs': saveOutputs };\n    let props = Object.entries(p)\n                      .filter(([_, v]) => v === true).map(([k, _]) => k);\n    createNodeDbHelper().update(this, props);\n  }\n\n  /**\n   * @deprecated Use {@link NodeDbHelper#update} via {@link createNodeDbHelper}\n   */\n  persistConfiguration(callback: () => void = doNothing) {\n    createNodeDbHelper().update(this, ['settings', 'properties']);\n  }\n\n  /**\n   * @deprecated Use {@link NodeDbHelper#update} via {@link createNodeDbHelper}\n   */\n  updateNodeInputOutput() {\n    createNodeDbHelper().update(this, ['inputs', 'outputs']);\n  }\n\n  /**\n   * Sets the output data\n   * @param output_id slotId id\n   * @param data slotId data\n   * @param only_if_new\n   */\n  setOutputData(output_id: number, data: any, only_if_new = false): void {\n    if (!this.outputs[output_id]) return;\n\n    if (data === undefined) return;\n    if (only_if_new && this.outputs[output_id].data === data) return;\n\n    this.outputs[output_id].updated = true; // it makes our update flag  is true // so when we want to make onInputUpdated() to trigger, we need to set this one as true\n    //so there will be two cases when out onInputUpdated() doesn't get triggered:\n    // 1. Falls multiple values in between 100ms so we will get only the last on value\n    // 2. If only_if_new = true and we want to trigger onInputUpdated() even when we have no change value\n    if (!this.isRecentlyActive) this.isRecentlyActive = true;\n\n    this.dispatch(output_id, data);\n    this.outputs[output_id].data = data;\n  }\n\n  /**\n   * Retrieves the input data (data traveling through the connection) from one slotId\n   * @param slotId slot id for input\n   * @returns data or if it is not connected returns undefined\n   */\n  getInputData(slotId: number | string): any {\n    try {\n      const input = this.inputs[slotId];\n      const iSetting = input?.setting;\n      let data = input?.data;\n      if (iSetting?.exist &&\n          (isNull(input.link) || !Utils.hasValidInput(data, iSetting?.nullable) || input.type === Type.DROPDOWN)) {\n        // It removes extracts the ${name} from: `[${name$}] (${value})`;\n        const settingName: string = this.inputs[slotId].name.match(/\\[(.*?)\\]/)[1];\n        const setting: NodeSetting = this.settings[settingName];\n        if (input.type === Type.DROPDOWN) {\n          // input as default setting value if input doesn't match\n          if (!setting.config.items.map(x => x.value).includes(data)) data = setting.value;\n        } else {\n          data = Utils.parseValue(setting.value, input.type);\n        }\n      }\n      return data;\n    } catch (err) {\n      this.debugErr(`Get input data! Error: ${err.stack ?? err}`);\n    }\n  }\n\n  /**\n   * Returns info about an input connection (which node, type, etc)\n   * @param slot slot id\n   * @returns {Object} object or null\n   */\n  getInputInfo(slot: number): any {\n    if (!this.inputs) return null;\n\n    return this.inputs[slot];\n  }\n\n  /**\n   * Add a new output slot to use in this node\n   * @param name\n   * @param type string defining the output type (\"vec3\",\"number\",...)\n   * @param id {number} output id number if you want to enter manual id\n   * @param extra_info this can be used to have special properties of an output (label, special color, position, etc)\n   */\n\n  addOutput(name?: string, type?: Type, id: number = undefined, extra_info?: any): number {\n    id = this.getFreeOutputId(id);\n    name = name || 'out ' + (id + 1);\n\n    let output: NodeOutput = NodeOutput.create({ name: name, type: type, links: null });\n    if (extra_info) for (let i in extra_info) output[i] = extra_info[i];\n\n    if (!this.outputs) this.outputs = {};\n\n    this.outputs[id] = output;\n    if (this['onOutputAdded']) this['onOutputAdded'](output);\n    this.size = this.computeSize();\n\n    return id;\n  }\n\n  getFreeOutputId(id = undefined): number {\n    if (!this.outputs) {\n      this.outputs = {};\n    }\n    if (id !== undefined && !this.outputs[id]) {\n      return id;\n    }\n\n    for (let i = 0; i < 1000; i++) {\n      if (!this.outputs[i]) return i;\n    }\n  }\n\n  /**\n   * Remove an existing output slot\n   * @param id slot id\n   */\n  removeOutput(id: number): void {\n    this.disconnectOutputLinks(id);\n    delete this.outputs[id];\n    this.size = this.computeSize();\n    if (this['onOutputRemoved']) this['onOutputRemoved'](id);\n  }\n\n  /**\n   * Add a new input slot to use in this node\n   * @param name {string}\n   * @param type {Type} defining the input type (\"vec3\",\"number\",...), it its a generic one use 0\n   * @param setting {InputSetting} set setting exist or not and whether to ignore null data or not from the connected slot\n   * @param id {number} input id number if you want to enter manual id\n   * @param extra_info {any} this can be used to have special properties of an input (label, color, position, etc)\n   */\n  addInput(\n    name?: string,\n    type?: Type,\n    setting: InputSetting = { exist: false, nullable: false, hidden: false },\n    id: number            = undefined,\n    extra_info?: any,\n  ): number {\n    id = this.getFreeInputId(id);\n    name = name || 'in ' + (id + 1);\n    let input: NodeInput = NodeInput.create({ name, type, setting, ...extra_info });\n    // if (extra_info) {\n    //   input = { ...input, ...extra_info };\n    // }\n\n    if (!this.inputs) this.inputs = {};\n    this.inputs[id] = input;\n    this.size = this.computeSize();\n    if (this['onInputAdded']) this['onInputAdded'](input);\n    return id;\n  }\n\n  /**\n   * @param name {string} name of the input and setting which will be bind each other input: [name], setting: name\n   * @param type {InputType} type of input\n   * @param defaultValue {string} default value for the setting\n   * @param description {string} description for the setting\n   * @param nullable {boolean} whether we need to include null input or not?\n   * If nullable === false, and input === null: it will search value form setting\n   * @param config {object} when TYPE = DROPDOWN, it's needed\n   * @param extra_info {any} anything we want to add on input\n   */\n  addInputWithSettings(\n    name: string,\n    type: Type,\n    defaultValue: any,\n    description: string = name,\n    nullable: boolean   = true,\n    config?: object,\n    extra_info?: any,\n  ): void {\n    const setting: InputSetting = { exist: true, nullable, hidden: false };\n    this.addInput(`[${name}]`, type, setting, extra_info);\n    this.settings[name] = NodeSetting.create({ description, value: defaultValue, type: convertType(type), config });\n  }\n\n  addInputAtPosition(\n    position: number,\n    name?: string,\n    type?: Type,\n    setting: InputSetting = { exist: false, nullable: false, hidden: false },\n    extra_info: any       = {},\n  ): number {\n    if (!this.inputs) this.inputs = {};\n    const inputsCount = this.getInputsCount();\n    if (position >= inputsCount) {\n      return this.addInput(name, type, setting, extra_info);\n    }\n    const myID = this.id;\n    for (let i = inputsCount; i > position; i--) {\n      this.inputs[i] = this.inputs[i - 1];\n      const source = Link.create(this.inputs[i].link);\n      if (source) {\n        const target = Link.create({ nodeId: myID, slot: i - 1 });\n        const outputNode: Node = this.container.nodeRegistry().get(source.nodeId);\n        const linksArray = outputNode.outputs[source.ioId].links;\n        const replaceLinkIndex = linksArray.map(l => Link.create(l)).findIndex(io => compareNodeIO(io, target));\n        if (replaceLinkIndex != -1) linksArray.splice(replaceLinkIndex, 1, target);\n        outputNode.updateNodeOutput();\n      }\n    }\n    let input: NodeInput = { name, type, setting, ...extra_info };\n    this.inputs[position] = input;\n    this.size = this.computeSize();\n    if (this['onInputAdded']) this['onInputAdded'](input);\n    return position;\n  }\n\n  getFreeInputId(id = undefined): number {\n    if (!this.inputs) {\n      this.inputs = {};\n    }\n    if (id !== undefined && !this.inputs[id]) {\n      return id;\n    }\n\n    for (let i = 0; i < 1000; i++) {\n      if (!this.inputs[i]) return i;\n    }\n  }\n\n  hideInput(immediateDirtyCanvas: boolean = true, ...ids: (number | string)[]): void {\n    for (let id of ids) {\n      this.disconnectInputLink(null, id);\n      this.inputs[id].setting.hidden = true;\n    }\n    this.redrawNode(immediateDirtyCanvas);\n  }\n\n  showInput(immediateDirtyCanvas: boolean = true, ...ids: (number | string)[]): void {\n    for (let id of ids) {\n      this.inputs[id].setting.hidden = false;\n    }\n    this.redrawNode(immediateDirtyCanvas);\n  }\n\n  redrawNode(immediateDirtyCanvas: boolean = true) {\n    if (immediateDirtyCanvas) {\n      this.size = this.computeSize();\n      this.setDirtyCanvas(true, true);\n    }\n  }\n\n  /**\n   * Remove an existing input slot\n   * @method removeInput\n   * @param id\n   */\n  removeInput(id: number): void {\n    this.disconnectInputLink(id);\n    delete this.inputs[id];\n    this.size = this.computeSize();\n    if (this['onInputRemoved']) this['onInputRemoved'](id);\n  }\n\n  /**\n   * Remove an existing input slot and moves other inputs and links to maintain input numbering\n   * @method removeInput\n   * @param slot Input slot\n   */\n  removeInputAtPosition(slot: number): void {\n    this.disconnectInputLink(slot);\n    const inputsCount = this.getInputsCount();\n    //console.log('THIS.ID', this.id)\n    //console.log('THIS.INPUTS BEFORE', this.inputs)\n    const myID = this.id;\n    for (let i = slot; i < inputsCount - 1; i++) {\n      this.inputs[i] = this.inputs[i + 1];\n      //console.log('THIS.INPUTS MID', this.inputs)\n      const target = Link.create({ nodeId: myID, slot: i + 1 });\n      const source = Link.create(this.inputs[i].link);\n      if (source) {\n        const outputNode: Node = this.container.nodeRegistry().get(source.nodeId);\n        const linksArray = outputNode.outputs[source.ioId].links;\n        //console.log('linksArray', linksArray)\n        const replaceLinkIndex = linksArray.map(l => Link.create(l)).findIndex(link => compareNodeIO(link, target));\n        if (replaceLinkIndex != -1) linksArray.splice(replaceLinkIndex, 1, target);\n        outputNode.updateNodeOutput();\n        //console.log('linksArray AFTER', linksArray)\n        //console.log('THIS.INPUTS AFTER', outputNode.outputs[`${this.inputs[i].link.target_slot}`].links)\n      }\n    }\n    delete this.inputs[inputsCount - 1];\n    this.size = this.computeSize();\n    if (this['onInputRemoved']) this['onInputRemoved'](slot);\n  }\n\n  getInputsCount(): number {\n    return this.inputs ? Object.keys(this.inputs).length : 0;\n  }\n\n  getOutputsCount(): number {\n    return this.outputs ? Object.keys(this.outputs).length : 0;\n  }\n\n  /*\n  addInputAtPosition(\n    position: number,\n    name?: string,\n    type?: Type,\n    setting: InputSetting = { exist: false, nullable: false },\n    extra_info: any = {},\n  ): number {\n    if (!this.inputs) this.inputs = {};\n    const inputsCount = this.getInputsCount();\n    if (position >= inputsCount) return this.addInput(name, type, setting, extra_info);\n    else {\n      const myID = this.id;\n      for (let i = inputsCount; i > position; i--) {\n        this.inputs[i] = this.inputs[i - 1];\n        if (this.inputs[i].hasOwnProperty('link')) {\n          const outputNode: Node = this.container._nodes[`${this.inputs[i].link.target_node_id}`];\n          let linksArray = outputNode.outputs[`${this.inputs[i].link.target_slot}`].links;\n          const replaceLinkIndex = linksArray.findIndex(link => {\n            return link.target_node_id == myID && link.target_slot == i - 1;\n          });\n          if (replaceLinkIndex != -1) linksArray.splice(replaceLinkIndex, 1, { target_node_id: myID, target_slot: i });\n          outputNode.updateNodeOutput();\n        }\n      }\n      let input: NodeInput = { name, type, setting, ...extra_info };\n      this.inputs[position] = input;\n      this.size = this.computeSize();\n      if (this['onInputAdded']) this['onInputAdded'](input);\n      return position;\n    }\n    this.updateNodeInput();\n  }\n  */\n\n  // TODO: Edit nodes which is using these functions\n  changeInputsCount(target_count: number, type?: Type) {\n    let current_count = this.getInputsCount();\n    let diff = target_count - current_count;\n\n    //add\n    if (diff > 0) for (let i = 0; i < diff; i++) this.addInput(null, type);\n\n    //remove\n    if (diff < 0) {\n      let ids = Object.keys(this.inputs);\n      for (let i = 0; i > diff; i--) {\n        let id = ids[ids.length + i - 1];\n        this.removeInput(+id);\n      }\n    }\n  }\n\n  changeOutputsCount(target_count: number, type?: Type) {\n    let current_count = this.getOutputsCount();\n    let diff = target_count - current_count;\n\n    //add\n    if (diff > 0) for (let i = 0; i < diff; i++) this.addOutput(null, type);\n\n    //remove\n    if (diff < 0) {\n      let ids = Object.keys(this.outputs);\n      for (let i = 0; i > diff; i--) {\n        let id = ids[ids.length + i - 1];\n        this.removeOutput(+id);\n      }\n    }\n  }\n\n  getLastInputIndex(): number {\n    return this.inputs ? Object.values(this.inputs).filter(value => !value.setting?.hidden).length : 0;\n  }\n\n  getLastOutputIndex(): number {\n    return this.outputs ? Object.values(this.outputs).length : 0;\n  }\n\n  computeHeight(): number {\n    let rows = Math.max(this.getLastInputIndex() + this.getLastOutputIndex(), 1);\n    // MAGIC number `15` and `6`\n    return rows * 15 + 6;\n  }\n\n  /**\n   * Computes the size of a node according to its inputs and output slots\n   * @param changeWidth If true will compute width based on title, max width of names and max width of lables\n   * @returns {[number, number]} the total size\n   */\n  computeSize(changeWidth = false): [number, number] {\n    let size: [number, number] = [0, 0];\n    size[1] = this.computeHeight();\n\n    if (!changeWidth && this.size != undefined) {\n      size[0] = this.size[0];\n      return size;\n    }\n\n    let font_size = 14;\n    let title_width = compute_text_size(this.title);\n    let maxLabelWidth = 0;\n    let maxNameWidth = 0;\n\n    if (this.inputs) {\n      for (let i in this.inputs) {\n        let input = this.inputs[i];\n        let label = input.label ?? '';\n        let name = input.name ?? '';\n        let labelWidth = compute_text_size(label);\n        let nameWidth = compute_text_size(name);\n        if (maxLabelWidth < labelWidth) maxLabelWidth = labelWidth;\n        if (maxNameWidth < nameWidth) maxNameWidth = nameWidth;\n      }\n    }\n\n    if (this.outputs) {\n      for (let o in this.outputs) {\n        let output = this.outputs[o];\n        let label = output.label ?? '';\n        let name = output.name ?? '';\n        let labelWidth = compute_text_size(label);\n        let nameWidth = compute_text_size(name);\n        if (maxLabelWidth < labelWidth) maxLabelWidth = labelWidth;\n        if (maxNameWidth < nameWidth) maxNameWidth = nameWidth;\n      }\n    }\n\n    if (maxLabelWidth == 0) maxLabelWidth = maxNameWidth;\n    size[0] = Math.max(maxLabelWidth + maxNameWidth + 10, title_width);\n    size[0] = Math.max(size[0], this.MIN_WIDTH);\n\n    function compute_text_size(text) {\n      if (!text) return 0;\n      return font_size * text.length * 0.6;\n    }\n\n    return size;\n  }\n\n  calculateMinWidth(...width: Array<number>): number {\n    return Math.max(this.MIN_WIDTH, ...width);\n  }\n\n  /**\n   * Disconnect output slot connect nodes links\n   * @param {number} slot whose links should be disconnected\n   * @returns {boolean} true if disconnected successfully\n   */\n  disconnectOutputLinks(slot: number | string) {\n    const nodeIO = Link.create({ nodeId: this.id, slot: +slot });\n    const registry = this.getParent().nodeRegistry().containerRegistry;\n    return new BackendLinkVisitor(registry).visit(createLinkHandler(registry).disconnectOutput(this.cid, nodeIO));\n  }\n\n  /**\n   * Disconnect input slot connected node link\n   * @param {number} input_slot current input slot\n   * @param {number} input_id whose link should be disconnected\n   * @returns {boolean} true if disconnected successfully\n   */\n  disconnectInputLink(input_slot: number, input_id?: number | string) {\n    const nodeIO = Link.create({ nodeId: this.id, ioId: input_id, slot: input_slot });\n    const registry = this.getParent().nodeRegistry().containerRegistry;\n    return new BackendLinkVisitor(registry).visit(createLinkHandler(registry).disconnectInput(this.cid, nodeIO));\n  }\n\n  /* Forces to redraw or the main renderer (Node) or the bg renderer (links) */\n  setDirtyCanvas(dirty_foreground: boolean, dirty_background?: boolean): void {\n    if (!this.container) return;\n    this.container.sendActionToRenderer('setDirty', [dirty_foreground, dirty_background]);\n  }\n\n  /**\n   * Collapse the node to make it smaller on the renderer\n   **/\n  collapse(): void {\n    this.flags.collapsed = !this.flags?.collapsed;\n    this.setDirtyCanvas(true, true);\n  }\n\n  /**\n   * Print debug message to console\n   * @param message\n   */\n  debug(message: any): void {\n    logger.debug(this.getReadableId() + ' ' + message);\n  }\n\n  /**\n   * Print debug message to console\n   * @param message\n   */\n  debugInfo(message: any): void {\n    logger.info(this.getReadableId() + ' ' + message);\n  }\n\n  /**\n   * Print error message to console\n   * @param message\n   * @param module\n   */\n  debugWarn(message: any, module?: string): void {\n    logger.warn(this.getReadableId() + ' ' + message);\n  }\n\n  /**\n   * Print error message to console\n   * @param message\n   * @param module\n   */\n  debugErr(message: any, module?: string): void {\n    logger.error(this.getReadableId() + ' ' + message);\n  }\n\n  getReadableId(): string {\n    if (this.container) {\n      return `[${this.type}][${this.container.id}/${this.id}]`;\n    } else {\n      return `[${this.type}][-/${this.id}]`;\n    }\n  }\n\n  sendMessageToServerSide(message: any) {\n    if (this.side === Side.server) {\n      logger.warn(`Node ${this.getReadableId()} is trying to send message from server side to server side`);\n    } else {\n      this.container.client_socket.emit('nodeMessageToServerSide', {\n        id: this.id,\n        cid: this.container.id,\n        message: message,\n      });\n    }\n  }\n\n  sendMessageToEditorSide(message: any, onlyConnectedUsers = true) {\n    let m = { id: this.id, cid: this.container.id, message };\n\n    if (this.side == Side.editor) {\n      logger.warn(`Node ${this.getReadableId()} is trying to send message from editor side to editor side`);\n    } else if (this.side === Side.server) {\n      let socket = this.container.server_editor_socket;\n\n      if (onlyConnectedUsers) {\n        socket.in('' + this.container.id).emit('nodeMessageToEditorSide', m);\n      } else {\n        socket.emit('nodeMessageToEditorSide', m);\n      }\n    } else {\n      this.container.client_socket.emit('nodeMessageToEditorSide', m);\n    }\n  }\n\n  sendAddInputToEditorSide(name?: string, type?: string, extra_info?: any) {\n    let m = {\n      id: this.id,\n      cid: this.container.id,\n      input: {\n        name: name,\n        type: type,\n        extra_info: extra_info,\n      },\n    };\n\n    if (this.side === Side.editor) {\n      logger.warn('Node ' + this.getReadableId() + ' is trying to send message from editor side to editor side');\n    } else if (this.side === Side.server) {\n      let socket = this.container.server_editor_socket;\n      socket.emit('node-add-input', m);\n    } else {\n      this.container.client_socket.emit('node-add-input', m);\n    }\n  }\n\n  sendAddOutputToEditorSide(name?: string, type?: string, extra_info?: any) {\n    let m = {\n      id: this.id,\n      cid: this.container.id,\n      output: {\n        name: name,\n        type: type,\n        extra_info: extra_info,\n      },\n    };\n\n    if (this.side === Side.editor) {\n      logger.warn('Node ' + this.getReadableId() + ' is trying to send message from editor side to editor side');\n    } else if (this.side === Side.server) {\n      let socket = this.container.server_editor_socket;\n      socket.emit('node-add-output', m);\n    } else {\n      this.container.client_socket.emit('node-add-output', m);\n    }\n  }\n\n  sendRemoveInputToEditorSide(id: number) {\n    let m = {\n      id: this.id,\n      cid: this.container.id,\n      input: id,\n    };\n\n    if (this.side === Side.editor) {\n      logger.warn('Node ' + this.getReadableId() + ' is trying to send message from editor side to editor side');\n    } else if (this.side === Side.server) {\n      let socket = this.container.server_editor_socket;\n      socket.emit('node-remove-input', m);\n    } else {\n      this.container.client_socket.emit('node-remove-input', m);\n    }\n  }\n\n  sendRemoveOutputToEditorSide(id: number) {\n    let m = {\n      id: this.id,\n      cid: this.container.id,\n      output: id,\n    };\n\n    if (this.side === Side.editor) {\n      logger.warn('Node ' + this.getReadableId() + ' is trying to send message from editor side to editor side');\n    } else if (this.side === Side.server) {\n      let socket = this.container.server_editor_socket;\n      socket.emit('node-remove-output', m);\n    } else {\n      this.container.client_socket.emit('node-remove-output', m);\n    }\n  }\n\n  sendIOValuesToEditor() {\n    let inputs_values = [];\n    let outputs_values = [];\n\n    if (this.inputs) {\n      for (let i in this.inputs) {\n        const data = this.inputs[i].data;\n        inputs_values.push({ nodeId: this.id, inputId: i, data: data });\n      }\n    }\n\n    if (this.outputs) {\n      for (let o in this.outputs) {\n        const data = this.outputs[o].data;\n        outputs_values.push({ nodeId: this.id, outputId: o, data: data });\n      }\n    }\n\n    const slots_values = { cid: this.container.id, inputs: inputs_values, outputs: outputs_values };\n\n    this.container.server_editor_socket.in('' + this.container.id).emit(NODE_IO_VALUES, slots_values);\n  }\n\n  updateInputsLabels() {\n    if (this.inputs) {\n      for (let i in this.inputs) {\n        let input = this.inputs[i];\n        input.label = '';\n      }\n      this.setDirtyCanvas(true, true);\n    }\n  }\n\n  updateOutputsLabels() {\n    if (this.outputs) {\n      for (let o in this.outputs) {\n        let output = this.outputs[o];\n        output.label = '';\n      }\n      this.setDirtyCanvas(true, true);\n    }\n  }\n\n  broadcastSettingsToClients(onlyConnectedUsers = true) {\n    this.sendMessageToEditorSide({ action: BROADCAST.UPDATE_SETTINGS, payload: this.settings }, onlyConnectedUsers);\n  }\n\n  broadcastPropertiesToClients(onlyConnectedUsers = true) {\n    this.sendMessageToEditorSide({ action: BROADCAST.UPDATE_PROPERTIES, payload: this.properties }, onlyConnectedUsers);\n  }\n\n  broadcastOutputsToClients(onlyConnectedUsers = true) {\n    this.sendMessageToEditorSide({ action: BROADCAST.UPDATE_OUTPUTS, payload: this.outputs }, onlyConnectedUsers);\n  }\n\n  broadcastNodeStateToClients(onlyConnectedUsers = true) {\n    this.sendMessageToEditorSide({ action: BROADCAST.UPDATE_STATE, payload: this.nodeState }, onlyConnectedUsers);\n  }\n\n  broadcastTitleToClients(onlyConnectedUsers = true) {\n    this.sendMessageToEditorSide({ action: BROADCAST.UPDATE_TITLE, payload: this.title }, onlyConnectedUsers);\n  }\n\n  broadcastNameToClients(onlyConnectedUsers = true) {\n    this.sendMessageToEditorSide({ action: BROADCAST.UPDATE_NAME, payload: this.name }, onlyConnectedUsers);\n  }\n\n  broadcastValToClients(key: string, val: any, onlyConnectedUsers = true) {\n    this.sendMessageToEditorSide({ action: BROADCAST.UPDATE_VALUE, key: key, payload: val }, onlyConnectedUsers);\n  }\n\n  onGetMessageToEditorSide({ action, payload, key }) {\n    switch (action) {\n      case BROADCAST.UPDATE_VALUE:\n        this.settings[key].value = payload;\n        return;\n      case BROADCAST.UPDATE_SETTINGS:\n        this.settings = payload;\n        return;\n      case BROADCAST.UPDATE_PROPERTIES:\n        this.properties = payload;\n        return;\n      case BROADCAST.UPDATE_OUTPUTS:\n        this.outputs = payload;\n        break;\n      case BROADCAST.UPDATE_TITLE:\n        this.title = payload;\n        this.size = this.computeSize();\n        break;\n      case BROADCAST.UPDATE_STATE:\n        this.nodeState = payload;\n        break;\n      case BROADCAST.UPDATE_NAME:\n        this.name = payload;\n        break;\n      default:\n        this.debugErr(`Received unknown editor action ${action} with payload ${JSON.stringify(payload)}`);\n        break;\n    }\n  }\n\n  setSettingsConfig(config: NodeSettingConfig) {\n    this.settingConfigs = config;\n  }\n\n  formattedExecutionTime(): string {\n    return moment(this.executeLastTime).format('YYYY-MM-DDTHH:MM:ss');\n  }\n\n  setNodeState(state: NodeState) {\n    this.nodeState = state;\n    if (this.side == Side.server) {\n      this.broadcastNodeStateToClients();\n    }\n  }\n\n  /**\n   * Replaces setting with old setting and restores validations.\n   *\n   * @param inputSettings Updated settings that should replace existing\n   */\n  settingsWithValidation(inputSettings: { [name: string]: NodeSetting }) {\n    const outputSettings = inputSettings;\n\n    // repopulate validation\n    let node_class = NodeTypeRegistry.instance().get(this.type);\n    let tempNode: Node = new node_class(this.container, this.id, this.properties);\n\n    const settings = { ...tempNode.settings };\n\n    Object.keys(outputSettings).forEach(key => {\n      outputSettings[key].validation = settings[key] ? settings[key].validation : null;\n    });\n    return outputSettings;\n  }\n\n  displayError(e: any, message: string = '') {\n    this.container.server_editor_socket.emit(ERROR, `${message} ${this.extractErrorMessage(e)}`);\n  }\n\n  displayMessage(message: string) {\n    this.container.server_editor_socket.emit(NOTIFICATION, message);\n  }\n\n  convertInput = (input: any, dataType: Type, decimals: number = 3) => {\n    const inputDataType = typeof input;\n    if (dataType === Type.NUMBER) {\n      input = Number((isNaN(input) ? 0 : Number(input)).toFixed(decimals));\n    } else if (dataType === Type.BOOLEAN) {\n      if (inputDataType === 'boolean') {\n        input = Number(input);\n      } else {\n        input = input === 1 || input === 'true' ? 1 : 0;\n      }\n    } else if (dataType === Type.STRING && inputDataType !== 'string') {\n      input = JSON.stringify(input);\n    }\n    return input;\n  };\n\n  private dispatch(output_id: number, data: any) {\n    if (output_id === 0) {\n      const { PubSubHelpers } = require('../pub-sub/PubSubHelpers');\n      PubSubHelpers.dispatch(this, data);\n    }\n  }\n\n  private extractErrorMessage(e: any) {\n    return get(e, 'response.data.message', get(e, 'message', e));\n  }\n}\n","import { Enumify } from 'enumify';\nimport { isFunction, isNotNull } from '../utils/helper';\nimport { BaseIdGenerator } from '../utils/id-generator';\nimport { NodeIO, SerializedNodeInput, SerializedNodeOutput, SerializedNodeSetting } from './node-io';\nimport { Registry } from './registry';\nimport { Serializable } from './serializable';\n\nexport class Side extends Enumify {\n\n  static server = new Side('SERVER');\n  static editor = new Side('EDITOR');\n  static dashboard = new Side('DASHBOARD');\n  static _ = Side.closeEnum();\n\n  private readonly name: string;\n\n  private constructor(name: string) {\n    super();\n    this.name = name;\n  }\n\n  toString(): string {\n    return this.name;\n  }\n}\n\n/**\n * Represents node in serialized mode to persist in database or json data in import/export\n */\nexport interface SerializedNode {\n  id: string | number;\n  cid: string | number;\n  name: string;\n  type: string;\n  pos: [number, number];\n  size?: [number, number];\n  inputs?: { [id: number]: SerializedNodeInput };\n  outputs?: { [id: number]: SerializedNodeOutput };\n  properties?: any;\n  settings?: { [name: string]: SerializedNodeSetting };\n  flags?: any;\n  icon?: string;\n\n}\n\nexport interface INode extends SerializedNode, Serializable<SerializedNode> {\n  /**\n   * Parent container\n   */\n  //TODO: rename to `parent`\n  container: IContainer;\n  side: Side;\n  title: string;\n  category: string;\n  inputs?: { [id: number]: SerializedNodeInput & NodeIO };\n  outputs?: { [id: number]: SerializedNodeOutput & NodeIO };\n\n  isUpdated?: boolean;\n\n  /**\n   * Gets parent container\n   * @see INode#container\n   * @return {IContainer} parent container\n   */\n  getParent(): IContainer;\n\n  /**\n   * Gets node that represents to {@link INode#container}\n   * @see IContainer#nodeItself\n   * @return {IFolderNode} `null` if parent container is root container, otherwise folder node that represents itself\n   */\n  getParentNode(): IFolderNode;\n}\n\n/**\n * Represents folder node in serialized mode to persist in database or json data in import/export\n */\nexport interface SerializedFolderNode extends SerializedNode {\n\n  /**\n   * Represents itself container that contains other nodes\n   */\n  sub_container: SerializedContainer;\n\n}\n\nexport interface IFolderNode extends SerializedFolderNode, INode, Serializable<SerializedFolderNode> {\n\n  /**\n   * @see SerializedFolderNode#sub_container\n   */\n  sub_container: IContainer;\n  inputs?: { [id: number]: SerializedNodeInput & NodeIO };\n  outputs?: { [id: number]: SerializedNodeOutput & NodeIO };\n\n  serialize(): SerializedFolderNode;\n}\n\n/**\n * Represents container in serialized mode to persist in database or json data in import/export\n */\nexport interface SerializedContainer {\n  id: string | number;\n  name?: string;\n  config?: any;\n  serializedNodes?: SerializedNode[];\n}\n\nexport interface IContainer extends SerializedContainer, Serializable<SerializedContainer> {\n\n  side: Side;\n\n  /**\n   * Gets a node that represents itself.\n   * @return {IFolderNode} `null` if this container is root container, otherwise folder node that represents itself\n   */\n  nodeItself(): IFolderNode;\n\n  nodeRegistry(): SubNodeRegistryMetadata;\n}\n\nexport const isNode = (node: any): boolean => {\n  return isNotNull(node) && typeof node === 'object' && 'id' in node && 'cid' in node && 'type' in node;\n};\n\nexport const isFolderNode = (node: any): boolean => {\n  return isNode(node) && 'sub_container' in node;\n};\n\nexport const isSerializedContainer = (container: any): boolean => {\n  return isNotNull(container) && !isNode(container) && typeof container === 'object' && 'id' in container;\n};\n\nexport const isContainer = (container: any): boolean => {\n  return isSerializedContainer(container) && isFunction(container['nodeRegistry']);\n};\n\nexport interface GeneratedKeyRegistry<T> extends Registry<T> {\n\n  readonly idGenerator: BaseIdGenerator;\n\n}\n\nexport interface ContainerRegistryMetadata extends GeneratedKeyRegistry<IContainer> {\n\n  /**\n   * Register new container\n   * @param {IContainer} container\n   * @param force if `false` and container id is already existed, new container id will be generated then reassigned\n   * to given container\n   * @return {IContainer} the registered container, never null\n   * @throws RegistryError if given container is null\n   */\n  register(container: IContainer, force?: boolean): IContainer;\n\n  /**\n   * Get container\n   * @param {number | string} id\n   * @returns {SerializedContainer} `null|undefined` if not found\n   */\n  get(id: number | string): IContainer;\n\n  has(id: number | string): boolean;\n\n  remove(id: number | string): IContainer;\n\n  rootContainer(): IContainer;\n}\n\nexport interface GlobalNodeRegistryMetadata extends Registry<INode> {\n\n  register(container: INode, force?: boolean): INode;\n\n  remove(id: number | string | INode): INode;\n\n}\n\n/**\n * Represents sub node registry in each container\n */\nexport interface SubNodeRegistryMetadata extends GeneratedKeyRegistry<INode> {\n\n  globalNodeRegistry: GlobalNodeRegistryMetadata;\n  containerRegistry: ContainerRegistryMetadata;\n\n  parent(): IContainer;\n\n  /**\n   * Returns a sub node by given id\n   * @param node\n   * @return {INode} sub node or null if not found\n   */\n  get(node: number | string | INode): INode;\n\n  /**\n   *\n   * @param {INode} node\n   * @param {boolean} force? Force register\n   * @param {string} key? node key\n   * @param {boolean} isCaching? only caching without calling to backend or database\n   * @return {Promise<INode>}\n   */\n  register(node: INode, force?: boolean, key?: string, isCaching?: boolean): Promise<INode>;\n\n  /**\n   * Removes a node from the container\n   * @param node the instance of the node or node id\n   * @param {boolean} isCaching? only caching without calling to backend or database\n   */\n  remove(node: INode | number | string, isCaching?: boolean): Promise<INode>;\n\n}\n\n","\nimport { isNull } from '../utils/helper';\n\nexport default class Utils {\n  static operatorsBoolName = [\n    '==',\n    '!=',\n    '<',\n    '<=',\n    '>',\n    '>=',\n    // 'between',\n    // 'contains',\n    // 'is true',\n    // 'is false',\n    // 'null',\n    // 'not null',\n  ];\n\n  static operatorsMathName = ['+', '-', '/', '*', 'min', 'max'];\n\n  static operatorsBool = {\n    eq: function(a, b) {\n      return a == b;\n    },\n    neq: function(a, b) {\n      return a != b;\n    },\n    lt: function(a, b) {\n      return a < b;\n    },\n    lte: function(a, b) {\n      return a <= b;\n    },\n    gt: function(a, b) {\n      return a > b;\n    },\n    gte: function(a, b) {\n      return a >= b;\n    },\n    btwn: function(a, b, c) {\n      return (a >= b && a <= c) || (a <= b && a >= c);\n    },\n    contains: function(a, b) {\n      return (a + '').indexOf(b) != -1;\n    },\n    regex: function(a, b, c, d) {\n      return (a + '').match(new RegExp(b, d ? 'i' : ''));\n    },\n    true: function(a) {\n      return a === true;\n    },\n    false: function(a) {\n      return a === false;\n    },\n    null: function(a) {\n      return typeof a == 'undefined' || a === null;\n    },\n    notNull: function(a) {\n      return typeof a != 'undefined' && a !== null;\n    },\n    empty: function(a) {\n      if (typeof a === 'string' || Array.isArray(a) || Buffer.isBuffer(a)) {\n        return a.length === 0;\n      } else if (typeof a === 'object' && a !== null) {\n        return Object.keys(a).length === 0;\n      }\n      return false;\n    },\n    notEmpty: function(a) {\n      if (typeof a === 'string' || Array.isArray(a) || Buffer.isBuffer(a)) {\n        return a.length !== 0;\n      } else if (typeof a === 'object' && a !== null) {\n        return Object.keys(a).length !== 0;\n      }\n      return false;\n    },\n  };\n\n  static operatorsStatName = [\n    'max',\n    'min',\n    'range',\n    'midRange',\n    'sum',\n    'mean',\n    'median',\n    'variance',\n    'standardDeviation',\n    'meanAbsoluteDeviation',\n  ];\n\n  static stat = {\n    max: function(array) {\n      return Math.max.apply(null, array);\n    },\n\n    min: function(array) {\n      return Math.min.apply(null, array);\n    },\n\n    range: function(array) {\n      return Utils.stat.max(array) - Utils.stat.min(array);\n    },\n\n    midRange: function(array) {\n      return Utils.stat.range(array) / 2;\n    },\n\n    sum: function(array) {\n      let num = 0;\n      for (let i = 0, l = array.length; i < l; i++) num += array[i];\n      return num;\n    },\n\n    mean: function(array) {\n      return Utils.stat.sum(array) / array.length;\n    },\n\n    median: function(array) {\n      array.sort(function(a, b) {\n        return a - b;\n      });\n      const mid = array.length / 2;\n      return mid % 1 ? array[mid - 0.5] : (array[mid - 1] + array[mid]) / 2;\n    },\n\n    modes: function(array) {\n      if (!array.length) return [];\n      let modeMap = {},\n        maxCount = 0,\n        modes = [];\n\n      array.forEach(function(val) {\n        if (!modeMap[val]) modeMap[val] = 1;\n        else modeMap[val]++;\n\n        if (modeMap[val] > maxCount) {\n          modes = [val];\n          maxCount = modeMap[val];\n        } else if (modeMap[val] === maxCount) {\n          modes.push(val);\n          maxCount = modeMap[val];\n        }\n      });\n      return modes;\n    },\n\n    variance: function(array) {\n      const mean = Utils.stat.mean(array);\n      return Utils.stat.mean(\n        array.map(function(num) {\n          return Math.pow(num - mean, 2);\n        }),\n      );\n    },\n\n    standardDeviation: function(array) {\n      return Math.sqrt(Utils.stat.variance(array));\n    },\n\n    meanAbsoluteDeviation: function(array) {\n      const mean = Utils.stat.mean(array);\n      return Utils.stat.mean(\n        array.map(function(num) {\n          return Math.abs(num - mean);\n        }),\n      );\n    },\n\n    zScores: function(array) {\n      const mean = Utils.stat.mean(array);\n      const standardDeviation = Utils.stat.standardDeviation(array);\n      return array.map(function(num) {\n        return (num - mean) / standardDeviation;\n      });\n    },\n  };\n\n  /**\n   * @param schema {string} http or https\n   * @param host {string}\n   * @param port {number}\n   * @returns {string}\n   */\n  static buildUrl = (host: string, port: number, schema: string = 'http') => {\n    return `${schema}://${host}${port ? `:${port}` : ''}`;\n  };\n\n  //makes a timestamp\n  static getTimeStamp() {\n    const now = new Date();\n    return (\n      now.getFullYear() +\n      '-' +\n      (now.getMonth() + 1) +\n      '-' +\n      now.getDate() +\n      ' ' +\n      now.getHours() +\n      ':' +\n      (now.getMinutes() < 10 ? '0' + now.getMinutes() : now.getMinutes() + ':' + '00')\n    );\n  }\n\n  /***\n   * Builds node input data into an array\n   * @param array\n   */\n  static sum = array => array.reduce((cv, pv) => cv + pv, 0);\n\n  /**\n   * Creates a copy of the provided value, excluding non-serializable values\n   */\n  static onlySerializable(value: any): any {\n    return JSON.parse(JSON.stringify(value));\n  }\n\n  /***\n   * Clone object\n   * @param obj\n   * @param target\n   * @returns {any}\n   */\n  static cloneObject(obj: any, target?: any): any {\n    if (obj == null) return null;\n    let r = JSON.parse(JSON.stringify(obj));\n    if (!target) return r;\n\n    for (let i in r) target[i] = r[i];\n    return target;\n  }\n\n\n  /**\n   * @param val {any} value to be parsed\n   * @param type {string} type need to parsed\n   * Three state:\n   * 1. undefined: when we don't value input connected\n   * 2. null: connected but have no value (for text-box '' is treated as null)\n   * 3. Real value\n   */\n  static parseValue(val: any, type: string): any {\n    const typeofVal: string = typeof val;\n\n    if (val === null && type === 'string' && typeofVal !== 'string') return '';\n    if (val == null) return val; // undefined or null\n\n    if (type === 'number' && typeofVal !== 'number') {\n      if (typeofVal === 'boolean') return val ? 1 : 0;\n      return isNaN(parseFloat(val)) ? null : parseFloat(val); // non-parsable val as null\n    } else if (type === 'string' && typeofVal !== 'string') {\n      return JSON.stringify(val);\n    } else if (type === 'boolean' && typeofVal !== 'boolean') {\n      return isNull(val) || val === '' ? null : /true|1/gi.test(val);\n    } else if (type === 'json') {\n      const originalVal = val;\n      val = {};\n      if (typeofVal === 'string') {\n        try {\n          val = JSON.parse(originalVal);\n        } catch (e) {}\n      } else if (typeofVal === 'object') {\n        try {\n          val = JSON.parse(JSON.stringify(originalVal));\n        } catch (e) {}\n      }\n    }\n    return val;\n  }\n\n  static formatValue(val: any): string {\n    if (val == null) return '';\n    return this.formatAsPerValueType(val);\n  }\n\n  static formatNodeInOut(val: any): string {\n    if (val === null) return 'null';\n    if (val === '') return 'null'; // display '' as 'null' since we are treating text-box '' as null\n    if (val === undefined) return undefined;\n    return this.formatAsPerValueType(val);\n  }\n\n  private static formatAsPerValueType(val: any): string {\n    if (typeof val === 'boolean') {\n      val = val ? 'true' : 'false';\n    } else if (typeof val === 'number') {\n      val = parseFloat(val.toFixed(3)).toString();\n    } else if (typeof val === 'object') {\n      try {\n        JSON.parse(JSON.stringify(val));\n      } catch (e) {\n        return '[object]';\n      }\n      val = JSON.stringify(val);\n    }\n    return val;\n  }\n\n  static hasInput(data): boolean {\n    return data !== undefined;\n  }\n\n  static hasValidInput(data, nullable): boolean {\n    if (nullable) {\n      return data !== undefined;\n    }\n    return data != null && data !== ''; // `null`, `undefined` and string null i.ie `''` are needed to be checked\n  }\n\n  /**\n   * Get current time\n   * @returns {number}\n   */\n  static getTime(): number {\n    return typeof performance != 'undefined' ? performance.now() : Date.now();\n  }\n\n  static toFixedNumber(value: number, digits: number) {\n    let pow = Math.pow(10, digits);\n    return +(Math.round(value * pow) / pow);\n  }\n\n  /**\n   * @Deprecated: Use MathUtils::clamp\n   */\n  static clamp = function(value: number, min: number, max: number): number {\n    return Math.min(Math.max(value, min), max);\n  };\n\n  static remap = function(value: number, inMin: number, inMax: number, outMin: number, outMax: number): number {\n    value = Number(value);\n    inMin = Number(inMin);\n    inMax = Number(inMax);\n    outMin = Number(outMin);\n    outMax = Number(outMax);\n    if (value > inMax) value = inMax;\n    else if (value < inMin) value = inMin;\n    return ((value - inMin) / (inMax - inMin)) * (outMax - outMin) + outMin;\n  };\n\n  static renameKey = (old_key: string, new_key: string) => (instance: object) => {\n    if (old_key === new_key) return instance;\n    const cloned = {\n      ...instance,\n      [new_key]: instance[old_key],\n    };\n    delete cloned[old_key];\n    return cloned;\n  };\n\n  // Shade, Blend and Convert a Web Color\n  static pSBC = (percentageChange, fromColor, toColor: string = undefined, useLinear = false) => {\n    let r,\n      g,\n      b,\n      a,\n      P,\n      f,\n      t,\n      h,\n      i = parseInt,\n      m = Math.round,\n      isToColorString = typeof toColor == 'string';\n    if (\n      typeof percentageChange != 'number' ||\n      percentageChange < -1 ||\n      percentageChange > 1 ||\n      typeof fromColor != 'string' ||\n      (fromColor[0] != 'r' && fromColor[0] != '#') ||\n      (toColor && !isToColorString)\n    )\n      return null;\n    const pSBCr = d => {\n      let n = d.length,\n        x = { r: 0, g: 0, b: 0, a: 0 };\n      if (n > 9) {\n        ([r, g, b, a] = d = d.split(',')), (n = d.length);\n        if (n < 3 || n > 4) return null;\n        (x.r = i(r[3] == 'a' ? r.slice(5) : r.slice(4))), (x.g = i(g)), (x.b = i(b)), (x.a = a ? parseFloat(a) : -1);\n      } else {\n        if (n == 8 || n == 6 || n < 4) return null;\n        if (n < 6) d = '#' + d[1] + d[1] + d[2] + d[2] + d[3] + d[3] + (n > 4 ? d[4] + d[4] : '');\n        d = i(d.slice(1), 16);\n        if (n == 9 || n == 5)\n          (x.r = (d >> 24) & 255), (x.g = (d >> 16) & 255), (x.b = (d >> 8) & 255), (x.a = m((d & 255) / 0.255) / 1000);\n        else (x.r = d >> 16), (x.g = (d >> 8) & 255), (x.b = d & 255), (x.a = -1);\n      }\n      return x;\n    };\n    (h = fromColor.length > 9),\n      (h = isToColorString ? (toColor.length > 9 ? true : toColor == 'c' ? !h : false) : h),\n      (f = pSBCr(fromColor)),\n      (P = percentageChange < 0),\n      (t =\n        toColor && toColor != 'c'\n          ? pSBCr(toColor)\n          : P\n          ? { r: 0, g: 0, b: 0, a: -1 }\n          : { r: 255, g: 255, b: 255, a: -1 }),\n      (percentageChange = P ? percentageChange * -1 : percentageChange),\n      (P = 1 - percentageChange);\n    if (!f || !t) return null;\n    if (useLinear)\n      (r = m(P * f.r + percentageChange * t.r)),\n        (g = m(P * f.g + percentageChange * t.g)),\n        (b = m(P * f.b + percentageChange * t.b));\n    else\n      (r = m((P * f.r ** 2 + percentageChange * t.r ** 2) ** 0.5)),\n        (g = m((P * f.g ** 2 + percentageChange * t.g ** 2) ** 0.5)),\n        (b = m((P * f.b ** 2 + percentageChange * t.b ** 2) ** 0.5));\n    (a = f.a), (t = t.a), (f = a >= 0 || t >= 0), (a = f ? (a < 0 ? t : t < 0 ? a : a * P + t * percentageChange) : 0);\n    if (h) return 'rgb' + (f ? 'a(' : '(') + r + ',' + g + ',' + b + (f ? ',' + m(a * 1000) / 1000 : '') + ')';\n    else\n      return (\n        '#' +\n        (4294967296 + r * 16777216 + g * 65536 + b * 256 + (f ? m(a * 255) : 0))\n          .toString(16)\n          .slice(1, f ? undefined : -2)\n      );\n  };\n\n  static formatAndTrimValue(val: any): string {\n    const typeofVal = typeof val;\n    if (val != null && (typeofVal === 'string' || typeofVal === 'object')) {\n      if (typeofVal === 'object') {\n        val = JSON.stringify(val);\n      }\n      if (val.length > 30) val = val.substr(0, 30) + '...';\n      return val;\n    }\n    return val;\n  }\n\n  static copyToClipboard(text): boolean {\n    const textarea = document.createElement('textarea');\n    textarea.textContent = text;\n    textarea.style.position = 'fixed'; // Prevent scrolling to bottom of page in Microsoft Edge.\n    document.body.appendChild(textarea);\n    textarea.select();\n    try {\n      return document.execCommand('copy'); // Security exception may be thrown by some browsers.\n    } catch (ex) {\n      return false;\n    } finally {\n      document.body.removeChild(textarea);\n    }\n  }\n\n  static download(filename, text) {\n    const element = document.createElement('a');\n    element.setAttribute('href', 'data:text/plain;charset=utf-8,' + encodeURIComponent(text));\n    element.setAttribute('download', filename);\n\n    element.style.display = 'none';\n    document.body.appendChild(element);\n\n    element.click();\n\n    document.body.removeChild(element);\n  }\n\n  static WEEKDAYS = [null, 'monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday', 'sunday'];\n\n  static getISOday(day: string) {\n    return Utils.WEEKDAYS.indexOf(day.toLowerCase());\n  }\n\n  static sleep = (ms: number) => new Promise(resolve => setTimeout(resolve, ms));\n}\n","export type Constructor<T = {}> = new (...args: any[]) => T;\n\n// export class EnumHelper {\n//   private constructor() {\n//   }\n//\n//   static toOpts = <E extends typeof Enumify>(enumType: E, convert: (e: E) => string): { text: string; value: any; }[] => {\n//     return enumType.enumKeys.map(k => {\n//       return { text: convert(enumType.enumValueOf(k) as E), value: k };\n//     });\n//   };\n//\n// }\n\nexport const isNull = (value: any): boolean => value == null; // undefined or null\n\nexport const isNotNull = (value: any): boolean => !isNull(value);\n\nexport const isJSON = (value: any): boolean => isNotNull(value) && (typeof value === 'object' || Array.isArray(value));\n\nexport const isString = (value: any): boolean => {\n  return typeof value === 'string' || value instanceof String;\n};\n\nexport const isGreaterThanZero = (v: any): boolean => {\n  return isNumeric(v) && +v > 0;\n};\n\nexport const isEmpty = (value: any): boolean => {\n  if (isNull(value)) {\n    return true;\n  }\n  if (value instanceof Array) {\n    return value.length === 0;\n  }\n  if (value instanceof Object) {\n    return Object.keys(value).length === 0;\n  }\n  if (value instanceof String) {\n    return value.trim() === '';\n  }\n  return value.toString().trim() === '';\n};\n\nexport const toLowerSnakeCase = (label: string): string => {\n  return isNull(label)\n         ? null\n         : label\n           .toString()\n           .toLowerCase()\n           .replace(/-+\\s+/g, '_');\n};\n\nexport function parseBool(str) {\n  if (str.length == null) {\n    return str == 1;\n  } else {\n    return str == 'true';\n  }\n}\n\nexport const isFunction = (func: any): boolean => func && {}.toString.call(func) === '[object Function]';\n\nexport const isNumeric = (n): boolean => !isNaN(parseFloat(n)) && isFinite(n);\n\nexport const convertToNumber = (value: any, strict: boolean = false): number => {\n  if (isNull(value)) {\n    return null;\n  }\n  let inString = value.toString();\n  let n = +inString;\n  if (isNumeric(n) && !/^\\s*$/.test(inString)) {\n    return n;\n  }\n  if (strict) {\n    throw new Error('Invalid number');\n  }\n  return null;\n};\n\nexport const Generator = {\n  map: (generator, mapper: Function) =>\n    function* (...args) {\n      for (const x of generator(...args)) yield mapper(x);\n    },\n  filter: (generator, filter: Function) =>\n    function* (...args) {\n      for (const x of generator(...args)) if (filter(x)) yield x;\n    },\n};\n\nexport const range = function* (from: number, to: number, step: number = 1) {\n  let i      = 0,\n      length = ~~((to - from) / step) + 1;\n  while (i < length) yield from + i++ * step;\n};\n\nexport const union = (...collections): Set<any> => collections.reduce((c, l) => new Set([...c, ...l]), new Set());\n\nexport const unionToArray = (...collections): Array<any> => [...union(...collections)];\n\nexport const mapToObject = <V1, V2>(obj: { [key: string]: V1 }, keyMapper: (k, v: V1) => any,\n                                    valMapper: (k, v: V1) => V2): { [key: string]: V2 } => {\n  return obj ? Object.keys(obj).reduce((r, k) => ({ ...r, ['' + keyMapper(k, obj[k])]: valMapper(k, obj[k]) }), {})\n             : {};\n};\n\nexport const mapToObjectSameKey = <V1, V2>(obj: { [key: string]: V1 },\n                                           valMapper: (k, v: V1) => V2): { [key: string]: V2 } => {\n  return mapToObject(obj, (k, _) => k, valMapper);\n};\n\nexport const arrayToObject = <T, V>(arr: Array<T>, keyMapper: (o: T, idx?: number) => any,\n                                    valMapper: (o: T, idx?: number) => V): { [k: string]: V } => {\n  return arr.reduce((obj, o, idx) => ((obj['' + keyMapper(o, idx)] = valMapper(o, idx)), obj), {});\n};\n\nexport const groupBy = <T, V>(arr: Array<T>, keyMapper: (o: T, idx?: number) => any,\n                              accumulator: (o: T, key?: string, idx?: number) => V[]): { [key: string]: V[] } => {\n  return arr.reduce((obj: { [key: string]: V[] }, o, idx) => {\n    const key = '' + keyMapper(o, idx);\n    obj[key] = [...(obj[key] ?? []), ...accumulator(o, key, idx)];\n    return obj;\n  }, {});\n};\n\nexport const objectOf = <V>(k: string | number, v: V): {} => {\n  const o = {};\n  o[k] = v;\n  return o;\n};\n","import * as moment from 'moment-timezone';\n\nexport enum TIME_TYPE {\n  DAYS = 'days',\n  HOURS = 'hours',\n  MINUTES = 'minutes',\n  SECONDS = 'seconds',\n  MILLISECONDS = 'milliseconds',\n}\n\nexport default class TimeUtils {\n  /**\n   * convert ms to days, hours, min, sec, ms\n   * @returns {number}\n   * @param timeType\n   * @param timeOut\n   */\n  static timeConvert(timeOut: number, timeType: string): number {\n    // calculate time in milliseconds\n    switch (timeType) {\n      case TIME_TYPE.DAYS:\n        return timeOut * 24 * 60 * 60 * 1000;\n      case TIME_TYPE.HOURS:\n        return timeOut * 60 * 60 * 1000;\n      case TIME_TYPE.MINUTES:\n        return timeOut * 60 * 1000;\n      case TIME_TYPE.SECONDS:\n        return timeOut * 1000;\n      case TIME_TYPE.MILLISECONDS:\n        return timeOut;\n      default:\n        return -1;\n    }\n  }\n\n  /**\n   * Round the time to the nearest min\n   * For example if interval is 15min then it will convert value on pattern 1:00, 1:15, 1:30\n   * @param interval\n   * @param momentValue\n   */\n  static nearestFutureMinutes(interval, momentValue: moment.Moment): moment.Moment {\n    const roundedMinutes = Math.ceil(momentValue.minute() / interval) * interval;\n    return momentValue\n      .clone()\n      .minute(roundedMinutes)\n      .second(0)\n      .millisecond(0);\n  }\n\n  /**\n   * Converts time duration into a human readable string formats\n   * @param timeInMs {number} a valid numeric number\n   * @param format {number} formats are as follows:\n   * Case 1: ${DD}:${HH}:${mm}:${ss}:${sss} with pad start 0\n   * Case 2: DD${DD}:HH${HH}:MM${mm}:SS${ss}:MS${sss} no pad start\n   * Case 3: DD${DD}:HH${HH}:MM${mm}:SS${ss}:MS${sss} with pad start 0\n   * Case 4: D${DD}:H${HH}:M${mm}:S${ss}:MS${sss} no pad start\n   * Case 5: D${DD}:H${HH}:M${mm}:S${ss}:MS${sss} with pad start 0\n   * Default: ${DD}:${HH}:${mm}:${s}:${sss}\n   * @param timeType {string} Options: days, hours, minutes, seconds, milliseconds\n   * @returns {string}\n   */\n\n  static timeDisplay(timeInMs: number, format: number = 5, timeType?: string) {\n    let duration = timeInMs;\n    if (timeType && timeType != 'milliseconds') duration = TimeUtils.timeConvert(duration, timeType);\n    const mm = moment.duration(duration);\n\n    switch (format) {\n      case 0:\n        return (\n          mm.days().toString() + ':' + mm.hours() + ':' + mm.minutes() + ':' + mm.seconds() + ':' + mm.milliseconds()\n        );\n      case 1:\n        return (\n          'DD:HH:MM:SS:MS ' +\n          mm.days() +\n          ':' +\n          mm.hours() +\n          ':' +\n          mm.minutes() +\n          ':' +\n          mm.seconds() +\n          ':' +\n          mm.milliseconds()\n        );\n      case 2:\n        return (\n          'DD' +\n          mm.days() +\n          ':' +\n          'HH' +\n          mm.hours() +\n          ':' +\n          'MM' +\n          mm.minutes() +\n          ':' +\n          'SS' +\n          mm.seconds() +\n          ':' +\n          'MS' +\n          mm.milliseconds()\n        );\n      case 3:\n        return (\n          'DD' +\n          mm\n            .days()\n            .toString()\n            .padStart(2, '0') +\n          ':' +\n          'HH' +\n          mm\n            .hours()\n            .toString()\n            .padStart(2, '0') +\n          ':' +\n          'MM' +\n          mm\n            .minutes()\n            .toString()\n            .padStart(2, '0') +\n          ':' +\n          'SS' +\n          mm\n            .seconds()\n            .toString()\n            .padStart(2, '0') +\n          ':' +\n          'MS' +\n          mm\n            .milliseconds()\n            .toString()\n            .padStart(3, '0')\n        );\n      case 4:\n        return (\n          'D' +\n          mm.days() +\n          ':' +\n          'H' +\n          mm.hours() +\n          ':' +\n          'M' +\n          mm.minutes() +\n          ':' +\n          'S' +\n          mm.seconds() +\n          ':' +\n          'MS' +\n          mm.milliseconds()\n        );\n      case 5:\n        return (\n          'D' +\n          mm\n            .days()\n            .toString()\n            .padStart(2, '0') +\n          ':' +\n          'H' +\n          mm\n            .hours()\n            .toString()\n            .padStart(2, '0') +\n          ':' +\n          'M' +\n          mm\n            .minutes()\n            .toString()\n            .padStart(2, '0') +\n          ':' +\n          'S' +\n          mm\n            .seconds()\n            .toString()\n            .padStart(2, '0') +\n          ':' +\n          'MS' +\n          mm\n            .milliseconds()\n            .toString()\n            .padStart(3, '0')\n        );\n      default:\n        return (\n          mm.days().toString() + ':' + mm.hours() + ':' + mm.minutes() + ':' + mm.seconds() + ':' + mm.milliseconds()\n        );\n    }\n  }\n  static timeConvertPlus(d?: any) {\n    try {\n      const monthNames = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\n      const dayNames = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\n\n      let dts = d.toDateString();\n      let e = d.getTime();\n      let mnu = this.pad(d.getMonth() + 1, 2);\n      let mnt = d.getMonth();\n      let mn = monthNames[mnt];\n      let dy = dayNames[d.getDay()];\n      let dt = this.pad(d.getDate(), 2);\n      let yr = d.getFullYear();\n      let hr = d.getHours();\n      let mi = d.getMinutes();\n      let ny = Math.ceil((d - <any>new Date(d.getFullYear(), 0, 1)) / 86400000);\n      let h = this.pad(hr, 2);\n      let m = this.pad(mi, 2);\n      let s = this.pad(d.getSeconds(), 2);\n      let mil = this.pad(d.getMilliseconds(), 3);\n\n      // Get hour in 12hr format\n      let thr = null;\n      if (hr === 0) {\n        thr = 12;\n      } else if (hr > 12) {\n        thr = hr - 12;\n      } else {\n        thr = hr;\n      }\n      thr = '' + thr;\n\n      // Calculate if AM or PM\n      let amp = hr * 60 + mi;\n      if (amp < 720) {\n        amp = 'AM';\n      } else {\n        amp = 'PM';\n      }\n      let hm = h + ':' + m;\n      let hms = h + ':' + m + ':' + s;\n      let ms = m + ':' + s;\n      let date = dts;\n      let yearMonthDay = '' + yr + '-' + mnu + '-' + dt;\n      let year = '' + yr;\n      let month = mn;\n      let monthAsNumber = mnu;\n      let dayAsNumber = dt;\n      let dayOfYearNumber = '' + ny;\n      let day = dy;\n      let hourAsAmPm = thr;\n      let hour = h;\n      let timeHourMin = hm;\n      let time = hms;\n      let minute = m;\n      let minutesSeconds = ms;\n      let seconds = s;\n      let milliseconds = mil;\n      let epoch = '' + e;\n      let rawDate = d;\n      let pmOrAm = amp;\n\n      return {\n        date: date,\n        yearMonthDay: yearMonthDay,\n        year: year,\n        month: month,\n        monthAsNumber: monthAsNumber,\n        dayAsNumber: dayAsNumber,\n        dayOfYearNumber: dayOfYearNumber,\n        day: day,\n        pmOrAm: pmOrAm,\n        hourAsAmPm: hourAsAmPm,\n        hour: hour,\n        timeHourMin: timeHourMin,\n        time: time,\n        minute: minute,\n        minutesSeconds: minutesSeconds,\n        seconds: seconds,\n        milliseconds: milliseconds,\n        epoch: epoch,\n        rawDate: rawDate,\n      };\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  private static pad(num: string, size: number) {\n    let s = num + '';\n    while (s.length < size) s = '0' + s;\n    return s;\n  }\n}\n","import { Node} from './node';\nimport { convertType, InputSetting, NodeInput, NodeOutput, NodeSetting, SettingType, Type } from './node-io';\nimport Utils from './utils';\n\nexport class FlexibleNode extends Node {\n  nullableInputs: boolean = true;\n  dynamicInputsExist: boolean = true;\n  dynamicOutputsExist: boolean = false;\n  dynamicSettingsExist: boolean = true;\n  /**\n   * You can override this field if you have different setting name than `inputs` for reading inputs counts\n   * @returns {string} field name\n   */\n  dynamicInputsField: string = 'inputs';\n  /**\n   * You can override this field if you have different setting name than `outputs` for reading inputs counts\n   * @returns {string} field name\n   */\n  dynamicOutputsField: string = 'outputs';\n  /**\n   * For name convention on output\n   * Example:\n   * 0 for in1, in2, ...\n   * 1 for select, in1, in2, ...\n   * 2 for select, enable, in1, in2, ...\n   */\n  dynamicInputStartPosition: number = 0;\n  /**\n   * Dynamic input start name\n   * Example (for in):\n   * `[in 1]`, `[in 2]` will be inputs name\n   * `in1`, `in2` will be settings keys and `in 1` and `in 2` will be settings description\n   */\n  dynamicInputsStartName: string = 'in';\n  dynamicOutputsStartName: string = 'out';\n  dynamicInputsType: Type = Type.ANY;\n  dynamicOutputsType: Type = Type.ANY;\n  dynamicMinInputs: number = 2;\n  dynamicMaxInputs: number = 100;\n  dynamicMinOutputs: number = 2;\n  dynamicMaxOutputs: number = 100;\n  dynamicDefaultInputs: number = 2;\n  dynamicDefaultOutputs: number = 2;\n\n  constructor() {\n    super();\n  }\n\n  setup() {\n    if (this.dynamicInputsExist) {\n      this.settings['inputs'] = NodeSetting.create({\n        description: 'Inputs count',\n        value: this.dynamicDefaultInputs,\n        type: SettingType.NUMBER,\n      });\n    }\n    if (this.dynamicOutputsExist) {\n      this.settings['outputs'] = NodeSetting.create({\n        description: 'Outputs count',\n        value: this.dynamicDefaultOutputs,\n        type: SettingType.NUMBER,\n      });\n    }\n  }\n\n  /**\n   * It invokes right after finishing the constructor call\n   */\n  init() {\n    if (this.dynamicInputsExist) {\n      this.changeDynamicInputsAndSettings(false);\n    }\n    if (this.dynamicOutputsExist) {\n      this.addDynamicOutputsOnRange(false);\n    }\n  }\n\n  onAfterSettingsChange() {\n    if (this.dynamicInputsExist) {\n      this.changeDynamicInputsAndSettings();\n    }\n    if (this.dynamicOutputsExist) {\n      this.addDynamicOutputsOnRange();\n    }\n  }\n\n  /**\n   * Adds inputs dynamically as per the settings['inputs'] value\n   */\n  addDynamicInputsOnRange = (save: boolean = true): void => {\n    const count = this.dynamicInputsCount();\n    const targetCount = Utils.clamp(count, this.dynamicMinInputs, this.dynamicMaxInputs);\n    const currentCount = this.getInputsCount() - this.dynamicInputStartPosition;\n    const addedInputsCount = targetCount - currentCount;\n\n    if (addedInputsCount > 0) {\n      // add\n      for (let i = 0; i < addedInputsCount; i++) this.addInputWithName();\n    } else if (addedInputsCount < 0) {\n      // remove\n      const inputCount = this.getInputsCount();\n      for (let i = inputCount; i > inputCount + addedInputsCount; i--) {\n        this.removeInput(i - 1);\n      }\n    }\n    save && this.updateNodeInput();\n  };\n\n  /**\n   * Adds outputs dynamically as per the settings['outputs'] value\n   */\n  addDynamicOutputsOnRange = (save: boolean = true): void => {\n    const count = this.dynamicOutputsCount();\n    const targetCount = Utils.clamp(count, this.dynamicMinOutputs, this.dynamicMaxOutputs);\n    const currentCount = this.getOutputsCount();\n    const addedOutputsCount = targetCount - currentCount;\n\n    if (addedOutputsCount > 0) {\n      // add\n      for (let i = 0; i < addedOutputsCount; i++) this.addOutputWithName();\n    } else if (addedOutputsCount < 0) {\n      // remove\n      const inputCount = this.getOutputsCount();\n      for (let i = inputCount; i > inputCount + addedOutputsCount; i--) {\n        this.removeOutput(i - 1);\n      }\n    }\n    save && this.updateNodeOutput();\n  };\n\n  settingWiseDynamicInputsAndSettingsUpdate = (save: boolean = true) => {\n    const startingCount = this.getInputsCount();\n    this.addDynamicInputsOnRange(save);\n    const targetCount = this.getInputsCount();\n    this.addDynamicSettings(startingCount, targetCount);\n  };\n\n  settingWiseDynamicInputsAndSettingsUpdateForBoolean = (save: boolean = true) => {\n    this.dynamicInputsType = Type.BOOLEAN; // if not assigned\n    const startingCount = this.getInputsCount();\n    this.addDynamicInputsOnRange(save);\n    const targetCount = this.getInputsCount();\n    const name = this.dynamicInputsStartName;\n    for (let i = startingCount; i < targetCount; i++) {\n      if (!this.settings[`${name} ${this.dynamicIndex(i)}`]) {\n        this.settings[`${name} ${this.dynamicIndex(i)}`] = NodeSetting.create({\n          description: `${name} ${this.dynamicIndex(i)}`,\n          type: SettingType.DROPDOWN,\n          config: {\n            items: [\n              { value: false, text: 'false' },\n              { value: true, text: 'true' },\n              { value: null, text: 'null' },\n            ],\n          },\n          value: null,\n        });\n      }\n    }\n    for (let i = targetCount; i < startingCount; i++) {\n      delete this.settings[`${name} ${this.dynamicIndex(i)}`];\n    }\n  };\n\n  private changeDynamicInputsAndSettings(save: boolean = true) {\n    if (this.dynamicSettingsExist) {\n      if (this.dynamicInputsType === Type.BOOLEAN) {\n        this.settingWiseDynamicInputsAndSettingsUpdateForBoolean(save);\n      } else {\n        this.settingWiseDynamicInputsAndSettingsUpdate(save);\n      }\n    } else {\n      this.addDynamicInputsOnRange(save);\n    }\n  }\n\n  /**\n   * To read total number of inputs for dynamic input update\n   * @returns {number} total dynamic input count\n   */\n  public dynamicInputsCount = (): number => this.settings[this.dynamicInputsField].value;\n\n  public dynamicOutputsCount = (): number => this.settings[this.dynamicOutputsField].value;\n\n  private getInputSetting() {\n    return {\n      exist: this.dynamicSettingsExist,\n      nullable: this.nullableInputs,\n      hidden: false,\n    };\n  }\n\n  private addInputWithName = (): void => {\n    let id = this.getFreeInputId();\n    let setting: InputSetting = this.getInputSetting();\n    let name = `${this.dynamicInputsStartName} ${id + 1 - this.dynamicInputStartPosition}`;\n    if (this.dynamicSettingsExist) {\n      name = `[${name}]`;\n    }\n    let input: NodeInput = NodeInput.create({ name, type: this.dynamicInputsType, setting });\n    if (!this.inputs) this.inputs = {};\n    this.inputs[id] = input;\n    if (this['onInputAdded']) this['onInputAdded'](input);\n  };\n\n  private addOutputWithName = (): void => {\n    let id = this.getFreeOutputId();\n    let name = `${this.dynamicOutputsStartName} ${id + 1}`;\n    let output: NodeOutput = NodeOutput.create({ name: name, type: this.dynamicOutputsType });\n    if (!this.outputs) this.outputs = {};\n    this.outputs[id] = output;\n    if (this['onOutputAdded']) this['onOutputAdded'](output);\n  };\n\n  /**\n   * Adds settings text fields dynamically as per starting count\n   */\n  private addDynamicSettings = (startingCount, targetCount) => {\n    // We are treating '' as null, if we store null value on string type it will create issue on everywhere.\n    // For example: null + 'ability' = 'ability'\n    const value = SettingType.STRING ? '' : null;\n    const name: string = this.dynamicInputsStartName;\n    const type: SettingType = convertType(this.dynamicInputsType);\n    for (let i = startingCount; i < targetCount; i++) {\n      if (!this.settings[`${name} ${this.dynamicIndex(i)}`]) {\n        this.settings[`${name} ${this.dynamicIndex(i)}`] = NodeSetting.create({\n          description: `${name} ${this.dynamicIndex(i)}`,\n          value,\n          type: type,\n        });\n      }\n    }\n    for (let i = targetCount; i < startingCount; i++) {\n      delete this.settings[`${name} ${this.dynamicIndex(i)}`];\n    }\n  };\n\n  private dynamicIndex = (id): number => id + 1 - this.dynamicInputStartPosition;\n}\n","import { Colors, create } from 'logplease';\n\nexport const db_logger = create('database', { color: Colors.Blue });\nexport const registry_logger = create('registry', { color: Colors.Blue });\nexport const reliability_logger = create('reliability', { color: Colors.Red });\nexport const node_service_logger = create('node-service', { color: Colors.Cyan });\nexport const server_logger = create('server', { color: Colors.Yellow });\nexport const heartbeat_logger = create('heartbeat', { color: Colors.Yellow });\n","const env = process?.env;\n\nconst config = {\n  rubix: {\n    version: '1.7.9-823c641',\n    buildNb: '',\n  },\n  secretKey: env?.SECRET_KEY || '',\n  port: parseInt(env?.PORT ?? '1313'),\n  dataDir: env?.DATA_DIR,\n  loopInterval: parseInt(env?.LOOP_INTERVAL ?? '100'),\n  backendSync: {\n    enabled: /true|1/i.test(env?.BACKEND_ENABLED ?? 'false'),\n    baseUrl: env?.BACKEND_API ?? '',\n    nodeRefreshIntervalSeconds: parseInt(env?.NODE_DISTANCE ?? '60'),\n    pointRefreshIntervalSeconds: parseInt(env?.NODE_REFRESH_INTERVAL_SEC ?? '60'),\n    nodeDistance: parseInt(env?.POINT_REFRESH_INTERVAL_SEC ?? '60'),\n  },\n  database: {\n    compactionInterval: 30,\n  },\n  bsa: {\n    baseURL: env?.BSA_BASEURL ?? '',\n    username: env?.BSA_USERNAME ?? '',\n    password: env?.BSA_PASSWORD ?? '',\n    paths: {\n      measurement: {\n        path: env?.BSA_PATHS_MEASUREMENT_PATH ?? '',\n        accept: env?.BSA_PATHS_MEASUREMENT_ACCEPT ?? '',\n      },\n      alarm: {\n        path: env?.BSA_PATHS_ALARM_PATH ?? '',\n        accept: env?.BSA_PATHS_ALARM_ACCEPT ?? '',\n        contentType: env?.BSA_PATHS_ALARM_CONTENTTYPE ?? '',\n      },\n      device: {\n        path: env?.BSA_PATHS_DEVICE_PATH ?? '',\n      },\n    },\n  },\n  ditto: {\n    baseURL: env?.DITTO_BASEURL ?? '',\n    username: env?.DITTO_USERNAME ?? '',\n    password: env?.DITTO_PASSWORD ?? '',\n  },\n  pg: {\n    baseURL: env?.PG_BASEURL ?? '',\n  },\n  influxDb: {\n    protocol: env?.INFLUX_DB_PROTOCOL ?? 'http',\n    host: env?.INFLUX_DB_HOST ?? '',\n    port: env?.INFLUX_DB_PORT ?? '',\n    databaseName: env?.INFLUX_DB_DB_NAME ?? '',\n    username: env?.INFLUX_DB_USERNAME ?? '',\n    password: env?.INFLUX_DB_PASSWORD ?? '',\n  },\n  influxDb2: {\n    protocol: env?.INFLUX_DB_2_PROTOCOL ?? 'http',\n    url: env?.INFLUX_DB_2_URL ?? '',\n    token: env?.INFLUX_DB_2_TOKEN ?? '',\n    bucket: env?.INFLUX_DB_2_BUCKET ?? '',\n    org: env?.INFLUX_DB_2_ORG ?? '',\n    username: env?.INFLUX_DB_2_USERNAME ?? '',\n    password: env?.INFLUX_DB_2_PASSWORD ?? '',\n  },\n  edge28: {\n    baseURL: env?.EDGE_28_BASEURL ?? '',\n    port: parseInt(env?.EDGE_28_PORT ?? '5000'),\n    apiVer: env?.EDGE_28_API_VER ?? '',\n  },\n  mqtt: {\n    protocol: env?.MQTT_PROTOCOL ?? 'mqtt',\n    host: env?.MQTT_HOST ?? '',\n    port: parseInt(env?.MQTT_PORT ?? '1883'),\n    username: env?.MQTT_USERNAME ?? '',\n    password: env?.MQTT_PASSWORD ?? '',\n  },\n};\n\nexport const RUBIX_VERSION: string = `v${config.rubix.version}${config.rubix.buildNb && `-${config.rubix.buildNb}`}`;\nexport default config;\n","module.exports = require(\"logplease\");","export const EDGES_PARENT_CONTAINER_TYPE = 'IoT/edges-container';\nexport const MODULES_PARENT_CONTAINER_TYPE = 'IoT/modules-container';\nexport const SERVICES_PARENT_CONTAINER_TYPE = 'IoT/services-container';\nexport const EDGE_CONTAINER_TYPE = 'IoT/edge';\nexport const NETWORK_CONTAINER_TYPE = 'IoT/network';\nexport const DEVICE_CONTAINER_TYPE = 'IoT/device';\nexport const GROUP_CONTAINER_TYPE = 'IoT/group';\nexport const POINT_NODE_TYPE = 'IoT/point';\nexport const SERVICE_NODE_TYPE = 'IoT/service';\nexport const MODULE_NODE_TYPE = 'IoT/module';\n\nexport const IOT_TYPES = [\n  EDGES_PARENT_CONTAINER_TYPE,\n  MODULES_PARENT_CONTAINER_TYPE,\n  SERVICES_PARENT_CONTAINER_TYPE,\n  EDGE_CONTAINER_TYPE,\n  NETWORK_CONTAINER_TYPE,\n  DEVICE_CONTAINER_TYPE,\n  GROUP_CONTAINER_TYPE,\n  POINT_NODE_TYPE,\n  SERVICE_NODE_TYPE,\n  MODULE_NODE_TYPE,\n];\n\nexport const MODBUS_RTU_NETWORK = 'protocols/modbus/modbus-rtu-network';\nexport const MODBUS_RTU_DEVICE = 'protocols/modbus/modbus-rtu-device';\nexport const MODBUS_RTU_POINT = 'protocols/modbus/modbus-rtu-point';\nexport const BACNET_NETWORK = 'protocols/bacnet/bacnet-network';\nexport const BACNET_DEVICE = 'protocols/bacnet/bacnet-device';\nexport const BACNET_POINT = 'protocols/bacnet/bacnet-point';\nexport const EDGE_28_NETWORK = 'protocols/nube/edge-28-network';\nexport const EDGE_28_INPUT = 'protocols/nube/edge-28-input';\nexport const EDGE_28_OUTPUT = 'protocols/nube/edge-28-output';\n\nexport const MQTT_NETWORK = 'protocols/mqtt/mqtt-network';\nexport const MQTT_POINT_WRITE = 'protocols/mqtt/mqtt-point-write';\nexport const MQTT_POINT_READ = 'protocols/mqtt/mqtt-point-read';\nexport const UNKNOWN_NODE = 'unknown/unknown';\n","import { v4 } from 'slugid';\nimport { isNotNull, isNumeric } from './helper';\n\nexport abstract class BaseIdGenerator {\n  static readonly UNINITIALIZED = -1;\n  static readonly ROOT = 0;\n\n  static createNodeId(cId: number | string, nId: any) {\n    if (isNotNull(cId)) {\n      if (isNumeric(nId)) {\n        return `c${cId}n${nId}`;\n      } else {\n        return nId;\n      }\n    }\n    return null;\n  }\n\n  abstract genNodeId(cid?: string | number, id?: string | number);\n\n  abstract genContainerId(cid?: string | number);\n\n  shouldGenerateCid(id: string | number): boolean {\n    return id === BaseIdGenerator.ROOT || id === BaseIdGenerator.UNINITIALIZED;\n  }\n\n  shouldGenerateNid(cid: string | number, id: string | number): boolean {\n    return this.shouldGenerateCid(id);\n  }\n}\n\nexport class NoChangeId extends BaseIdGenerator {\n\n  genContainerId(cid?: string | number) {\n    return cid ?? BaseIdGenerator.UNINITIALIZED;\n  }\n\n  genNodeId(cid?: string | number, id?: string | number) {\n    return id ?? BaseIdGenerator.UNINITIALIZED;\n  }\n\n}\n\n/**\n * ID generator\n */\nexport class IdGenerator extends BaseIdGenerator {\n\n  private static _instance: IdGenerator;\n\n  private constructor() {\n    super();\n  }\n\n  public static instance(): IdGenerator {\n    if (!IdGenerator._instance) {\n      IdGenerator._instance = new IdGenerator();\n    }\n\n    return IdGenerator._instance;\n  }\n\n  genContainerId(cid?: string | number) {\n    return v4();\n  }\n\n  genNodeId(cid?: string | number, id?: string | number) {\n    return v4();\n  }\n\n}\n","import { unionToArray } from '../utils/helper';\nimport { UNKNOWN_NODE } from './constants';\nimport { Node } from './node';\nimport { AbstractRegistry } from './registry';\n\nexport class NodeTypeRegistry extends AbstractRegistry<any> {\n  private static _instance: NodeTypeRegistry;\n\n  private constructor() {\n    super();\n  }\n\n  public static instance(): NodeTypeRegistry {\n    if (!NodeTypeRegistry._instance) {\n      NodeTypeRegistry._instance = new NodeTypeRegistry();\n    }\n    return NodeTypeRegistry._instance;\n  }\n\n  /**\n   * Register a node class so it can be listed when the user wants to create a new one\n   * @param type name of the node and path\n   * @param node_class class containing the structure of a node\n   * @param parentContainerNodeType some menus should be shown only if parentContainerNodeType is there\n   * @param show_in_menu\n   * @param recursive same container node inside the parent container node\n   * @param alwaysInsideContainer\n   */\n  static registerNodeType(type: string, node_class: any, parentContainerNodeType: string = null,\n                          show_in_menu: boolean                                          = true,\n                          recursive: boolean                                             = false,\n                          alwaysInsideContainer: boolean                                 = false): void {\n    if (!(node_class.prototype instanceof Node)) {\n      throw `Can't register node of type [${type}]. Class must inherit Node base class!`;\n    }\n    node_class.type = type;\n    node_class.category = type.substr(0, type.lastIndexOf('/'));\n    node_class.node_name = type.substr(type.lastIndexOf('/') + 1, type.length);\n    node_class.show_in_menu = show_in_menu;\n    node_class.parentContainerNodeType = parentContainerNodeType;\n    node_class.recursive = recursive;\n    node_class.onlyInsideContainer = alwaysInsideContainer;\n    //TODO should make node_type object\n    let node: Node = new node_class();\n    node_class.icon = node.iconImageUrl;\n    node_class.color = node.headerColor;\n    node_class.title = node.title || node.type;\n    NodeTypeRegistry.instance().register(node_class, true, type);\n  }\n\n  /**\n   * Verify node type in registry. If it is not existed, then fallback to {@link UNKNOWN_NODE}\n   *\n   * @returns {string} Node Type id, never null\n   */\n  lookupNodeType(type: string): string {\n    return this.has(type) ? type : UNKNOWN_NODE;\n  }\n\n  /**\n   * Returns a list of node types matching one category\n   * @param category category name\n   * @returns {Array} array with all the node classes\n   */\n  getNodeTypesInCategory(category: string): Array<any> {\n    return Object.values(this._registry).filter(n => n.category == (category || null));\n  }\n\n  nodeIsInCategory(category: string) {\n    return n => n.category == (category || null);\n  }\n\n  /**\n   * Returns a list with all the node type categories\n   * @returns {Array} array with all the names of the categories\n   */\n  getNodeTypesCategories(): Array<any> {\n    return unionToArray(Object.values(this._registry)\n                              .filter(n => !!n.category && n.show_in_menu)\n                              .map(n => n.category));\n  }\n\n  protected enableDebug(): boolean {\n    return false;\n  }\n\n  protected createKey(obj: any): string | number {\n    return undefined;\n  }\n}\n","module.exports = require(\"moment-timezone\");","module.exports = require(\"axios\");","module.exports = require(\"lodash\");","import { ErrorHandler } from '../utils/decorators';\nimport { IOT_TYPES } from './constants';\nimport { Container, reassignContainer } from './container';\nimport { Node } from './node';\nimport { NODE_INFO } from './node-info';\nimport {\n  ContainerRegistryMetadata,\n  GlobalNodeRegistryMetadata,\n  IFolderNode,\n  SerializedFolderNode,\n} from './node-interface';\nimport { NodeSetting, SettingType } from './node-io';\nimport { Deserializable } from './serializable';\n\n/**\n * Container: special node that contains a container of other nodes\n */\nexport class ContainerNode extends Node implements IFolderNode, Deserializable<SerializedFolderNode> {\n\n  private static NAME: string = 'Folder';\n  sub_container: Container;\n  /**\n   * List of node type identifiers that can be created in specifically in this container node, but are not normally\n   * listed in the menu\n   */\n  extra_node_types: string[];\n\n  constructor() {\n    super();\n    this.title = NODE_INFO.container.folder.title;\n    this.description = NODE_INFO.container.folder.description;\n    this.settings['name'] = NodeSetting.create({ description: 'Folder name', type: SettingType.STRING });\n    this.sub_container = <Container>{};\n  }\n\n  static create(folderNode: SerializedFolderNode, isNew: boolean, containerRegistry?: ContainerRegistryMetadata,\n                globalRegistry?: GlobalNodeRegistryMetadata) {\n    return new ContainerNode().deserialize(folderNode, isNew, containerRegistry, globalRegistry);\n  }\n\n  shouldRejectNodeType(type: string): boolean {\n    return IOT_TYPES.includes(type); // IoT nodes can only be created in special container nodes\n  }\n\n  onCreated() {\n  }\n\n  onAdded() {\n    this.applyTitle();\n    super.onAdded();\n  }\n\n  afterAdded() {\n    super.afterAdded();\n  }\n\n  onAfterSettingsChange(oldSettings, oldName?: any) {\n    this.applyTitle();\n  }\n\n  onRemoved() {\n  }\n\n  serialize(): SerializedFolderNode {\n    return { ...super.serialize(), sub_container: this.sub_container?.serialize() };\n  }\n\n  @ErrorHandler\n  deserialize(serializedObj: SerializedFolderNode, isNew?: boolean, containerRegistry?: ContainerRegistryMetadata,\n              globalRegistry?: GlobalNodeRegistryMetadata): ContainerNode {\n    return reassignContainer(<ContainerNode>super.deserialize(serializedObj, isNew), serializedObj.sub_container,\n                             containerRegistry, globalRegistry);\n  }\n\n  getExtraMenuOptions(renderer, editor) {\n    let that = this;\n    return [\n      {\n        content: 'Open',\n        callback: function () {\n          editor.openContainer(that.sub_container.id);\n        },\n      },\n      null, //null for horizontal line\n    ];\n  }\n\n  onExecute() {\n    if (this.isUpdated) this.isRecentlyActive = true;\n    this.sub_container.runStep();\n  }\n\n  protected applyTitle() {\n    this.settings['name'].value = this.settings.name?.value ?? `${ContainerNode.NAME} ${this.sub_container.id}`;\n    this.title = this.title === ContainerNode.NAME ? this.settings['name'].value : this.title;\n    this.sub_container.name = this.title;\n  }\n\n}\n","import { Colors, create } from 'logplease';\nimport { LinkResult } from '../shared/link-result';\nimport {\n  ContainerRegistryValidator,\n  IContainerRegistryValidator,\n  INodeRegistryValidator,\n  NodeRegistryValidator,\n} from '../shared/validator';\nimport { NotFoundError } from '../utils/errors';\nimport { groupBy, isEmpty, isNull } from '../utils/helper';\nimport { IdGenerator } from '../utils/id-generator';\nimport { Node } from './node';\nimport { createNodeDbHelper, NodeDbHelper } from './node-db-helper';\nimport { ContainerRegistryMetadata, IContainer, INode } from './node-interface';\nimport { IOType } from './node-io';\nimport { Deserializable, Serializable } from './serializable';\n\nconst logger = create('node-link', { color: Colors.Magenta });\n\ntype LinkAction = 'Connecting' | 'Connected' | 'Disconnecting' | 'Disconnected' | 'Moving' | 'Moved';\n\n/**\n * Represents simplest node io information\n */\nexport interface SlimNodeIO {\n  nodeId: string | number;\n  slot: number;\n  ioId?: string | number;\n}\n\nexport interface NodeLink {\n  /**\n   * Current container id\n   */\n  readonly cid: string;\n  /**\n   * Represents to a specific node output.\n   * @see SlimNodeIO\n   */\n  readonly source: SlimNodeIO;\n  /**\n   * Represents to one or many node inputs\n   * @see SlimNodeIO\n   */\n  targets: SlimNodeIO[];\n\n}\n\n/**\n * Represents for the bidirectional node link that guards for per input is connecting to only one another node output\n */\nexport interface BiNodeLink {\n  /**\n   * Current container id\n   */\n  readonly cid: string;\n\n  add(...nodeLinks: NodeLink[]): BiNodeLink;\n\n  optimize(): NodeLink[];\n}\n\nexport const createNodeLink = (cid: string | number, source: SlimNodeIO, ...targets: SlimNodeIO[]): NodeLink => {\n  return { cid: cid + '', source, targets };\n};\n\nexport const createBiNodeLink = (cid: string | number): BiNodeLink => {\n  return new DefaultBiNodeLink(cid + '');\n};\n\nexport const nodeIOtoMsg = (type: IOType, cid: string | number, ...nodeIO: SlimNodeIO[]): string => {\n  const msg = nodeIO.map(io => `node '${IdGenerator.createNodeId(cid, io.nodeId)}'-${type} '${io.ioId}'`).join(',');\n  return isEmpty(msg) ? msg : `[${msg}]`;\n};\n\nexport const slimIOtoKey = (io: SlimNodeIO): string => {\n  return io.nodeId + '/' + (io.ioId ?? io.slot);\n};\n\nexport const compareNodeIO = (io1: SlimNodeIO, io2: SlimNodeIO): boolean => {\n  if (isNull(io1) || isNull(io2)) {\n    return false;\n  }\n  return slimIOtoKey(io1) === slimIOtoKey(io2);\n};\n\nclass DefaultBiNodeLink implements BiNodeLink {\n  readonly cid: string;\n  private readonly _bySource: { [sKey: string]: { source: SlimNodeIO, targets: { [tKey: string]: SlimNodeIO } } };\n  private readonly _byTarget: { [tKey: string]: string };\n\n  constructor(cid: string) {\n    this.cid = cid;\n    this._bySource = {};\n    this._byTarget = {};\n  }\n\n  add(...nodeLinks: NodeLink[]): BiNodeLink {\n    nodeLinks.filter(nl => nl.cid + '' === this.cid)\n             .forEach(nl => {\n               const sKey = slimIOtoKey(nl.source);\n               this._bySource[sKey] = this._bySource[sKey] ?? { source: nl.source, targets: {} };\n               nl.targets.forEach(io => {\n                 const tKey = slimIOtoKey(io);\n                 if (isNull(this._byTarget[tKey])) {\n                   this._bySource[sKey].targets[tKey] = io;\n                   this._byTarget[tKey] = sKey;\n                 }\n               });\n             });\n    return this;\n  }\n\n  optimize(): NodeLink[] {\n    return Object.values(this._bySource)\n                 .map(v => createNodeLink(this.cid, v.source, ...Object.values(v.targets)));\n  }\n\n}\n\n/**\n * It is for legacy code. Should migrate later\n */\nexport interface LegacyLink {\n  target_node_id: string | number;\n  target_slot: number;\n  target_input_id?: string | number;\n}\n\nexport class Link implements SlimNodeIO, Serializable<SlimNodeIO>, Deserializable<LegacyLink | SlimNodeIO> {\n\n  nodeId: string;\n  slot: number;\n  ioId?: string;\n\n  constructor();\n  constructor(nodeId: string | number, slot: number);\n  constructor(nodeId: string | number, slot: number, ioId: string | number);\n  constructor(nodeId?: string | number, slot?: number, ioId?: string | number) {\n    this.nodeId = nodeId + '';\n    this.slot = slot;\n    this.ioId = (ioId ?? slot) + '';\n  }\n\n  static create(object: SlimNodeIO | Link | LegacyLink | { target_node_id: string | number, target_slot: number, target_input_id?: number }): Link {\n    if (isNull(object)) {\n      return null;\n    }\n    return new Link().deserialize(object);\n  }\n\n  serialize(): SlimNodeIO {\n    return { ...this };\n  }\n\n  deserialize(obj: LegacyLink | SlimNodeIO): Link {\n    return new Link((<SlimNodeIO>obj).nodeId ?? (<LegacyLink>obj).target_node_id,\n                    (<SlimNodeIO>obj).slot ?? (<LegacyLink>obj).target_slot,\n                    (<SlimNodeIO>obj).ioId ?? (<LegacyLink>obj).target_input_id);\n  }\n}\n\nexport interface NodeLinkHandler {\n\n  /**\n   * Create new link between source node to one or many nodes\n   * @param {NodeLink} nodeLink\n   * @return {LinkResult}\n   */\n  create(nodeLink: NodeLink): LinkResult;\n\n  /**\n   * Create new link between source node to one or many nodes\n   * @param {NodeLink} nodeLink\n   * @param {boolean} lenient if true, if node link targets has any invalid, it will skip to create link. Otherwise,\n   * error will be thrown\n   * @return {LinkResult}\n   */\n  create(nodeLink: NodeLink, lenient?: boolean): LinkResult;\n\n  /**\n   * Batch create multiple links between source node to one or many nodes.\n   *\n   * This method will optimize node-link to ensure each input node will have only one link to another one.\n   *\n   * @param {NodeLink} nodeLinks given node links\n   * @return {LinkResult}\n   */\n  batchCreate(...nodeLinks: NodeLink[]): LinkResult;\n\n  remove(nodeLink: NodeLink): LinkResult;\n\n  remove(nodeLink: NodeLink, lenient?: boolean): LinkResult;\n\n  move(type: IOType, fromNodeLink: NodeLink, toAnother: SlimNodeIO): LinkResult;\n\n  disconnectInput(cid: string | number, slimIO: SlimNodeIO): LinkResult;\n\n  disconnectOutput(cid: string | number, slimIO: SlimNodeIO): LinkResult;\n\n}\n\n/**\n * @deprecated Use {@link NodeLinkHandler}\n */\nexport interface LegacyLinkHandler {\n  readonly node: Node;\n\n  /**\n   * Recompute Input links\n   * @param {INode} node\n   */\n  recomputeInputLinks(node?: INode);\n\n  /**\n   * Recompute Output links\n   * @param {INode} node?\n   */\n  recomputeOutputLinks(node?: INode);\n\n}\n\n/**\n * @deprecated Use {@link createLinkHandler}\n */\nexport const createLegacyLinkHandler = (node: Node, dbHelper?: NodeDbHelper): LegacyLinkHandler => {\n  return new DefaultLinkHandler(node, dbHelper ?? createNodeDbHelper());\n};\n\nclass DefaultLinkHandler implements LegacyLinkHandler {\n  readonly node: Node;\n  private readonly dbHelper: NodeDbHelper;\n\n  constructor(node: Node, dbHelper: NodeDbHelper) {\n    this.node = node;\n    this.dbHelper = dbHelper;\n  }\n\n  recomputeInputLinks(n?: INode) {\n    let node = n ?? this.node;\n    let slot = -1;\n    for (const [inputId, input] of Object.entries(node.inputs)) {\n      if (input.setting.hidden) {\n        continue;\n      }\n      slot++;\n      if (isNull(input.link)) {\n        continue;\n      }\n      let link = input.link;\n      let targetNode = node.container.nodeRegistry().get(link.nodeId);\n      if (isNull(targetNode)) {\n        continue;\n      }\n      let outputId = link.ioId;\n      let outputSlot = link.slot;\n      let output = targetNode.outputs[outputId ?? outputSlot];\n      if (isNull(output) || isNull(output.links)) {\n        continue;\n      }\n      let number = output.links.findIndex(l => compareNodeIO(l, { nodeId: node.id, ioId: +inputId, slot }));\n      if (number === -1) {\n        continue;\n      }\n      output.links.splice(number, 1, new Link(node.id, slot, inputId));\n      this.dbHelper.update(<Node>targetNode, ['outputs']);\n    }\n    this.dbHelper.update(<Node>node, ['inputs']);\n  }\n\n  recomputeOutputLinks(n?: INode) {\n    let node = n ?? this.node;\n    let slot = -1;\n    Object.entries(node.outputs).forEach(([oId, output]) => {\n      slot++;\n      if (isEmpty(output.links)) {\n        return;\n      }\n      output.links.forEach(link => {\n        let target = node.container.nodeRegistry().get(link.nodeId);\n        const iId = link.ioId ?? link.slot;\n        if (isNull(target) || isNull(target.inputs[iId])) {\n          return;\n        }\n        target.inputs[iId].link = new Link(node.id, slot, oId);\n        this.dbHelper.update(<Node>target, ['inputs']);\n      });\n    });\n    this.dbHelper.update(<Node>node, ['outputs']);\n  }\n\n}\n\nexport const createLinkHandler = (registry: ContainerRegistryMetadata, validator?: IContainerRegistryValidator,\n                                  nodeValidator?: INodeRegistryValidator, lenient?: boolean): NodeLinkHandler => {\n  return new DefaultNodeLinkHandler(registry, validator, nodeValidator, lenient);\n};\n\nclass DefaultNodeLinkHandler implements NodeLinkHandler {\n\n  protected readonly validator: IContainerRegistryValidator;\n  protected readonly nodeValidator: INodeRegistryValidator;\n  protected readonly globalStrict: boolean;\n\n  constructor(registry: ContainerRegistryMetadata, validator?: IContainerRegistryValidator,\n              nodeValidator?: INodeRegistryValidator, lenient: boolean = false) {\n    this.validator = validator ?? new ContainerRegistryValidator(registry);\n    this.nodeValidator = nodeValidator ?? new NodeRegistryValidator();\n    this.globalStrict = !lenient;\n  }\n\n  private static msg(cId: number | string, bT: IOType, base: SlimNodeIO, rT?: IOType,\n                     ...references: SlimNodeIO[]): [string, string] {\n    return [nodeIOtoMsg(bT, cId, base), nodeIOtoMsg(rT, cId, ...references)];\n  }\n\n  private static statement(action: LinkAction, len: number | 'all', msg: [string, string],\n                           direction: 'from' | 'to' = 'from') {\n    const first = direction === 'from' ? `from ${msg[0]}` : `to ${msg[0]}`;\n    const next = isEmpty(msg[1]) ? '' : `${direction === 'from' ? 'to' : 'from'} ${msg[1]}`;\n    const last = action.includes('ing') ? '...' : '';\n    return `${action} ${len} link(s) ${first} ${next}${last}`;\n  }\n\n  create(nodeLink: NodeLink, lenient?: boolean): LinkResult {\n    const optimized = createBiNodeLink(nodeLink.cid).add(nodeLink).optimize()[0];\n    const msg = DefaultNodeLinkHandler.msg(nodeLink.cid, 'output', optimized.source, 'input', ...optimized.targets);\n    logger.info(DefaultNodeLinkHandler.statement('Connecting', optimized.targets.length, msg));\n    const r = this.doCreate(optimized, lenient);\n    r.message = DefaultNodeLinkHandler.statement('Connected', optimized.targets.length, msg);\n    return r;\n  }\n\n  batchCreate(...nodeLinks: NodeLink[]): LinkResult {\n    return Object.entries(groupBy(nodeLinks, nl => nl.cid, nl => [nl]))\n                 .map(([k, v]) => createBiNodeLink(k).add(...v))\n                 .flatMap(bi => bi.optimize())\n                 .reduce((r, nl) => r.merge(this.doCreate(nl, true)), new LinkResult());\n  }\n\n  remove(nodeLink: NodeLink, lenient?: boolean): LinkResult {\n    const container = this.validator.validate(nodeLink.cid);\n    const optimized = createBiNodeLink(nodeLink.cid).add(nodeLink).optimize()[0];\n    const msg = DefaultNodeLinkHandler.msg(optimized.cid, 'output', optimized.source, 'input', ...optimized.targets);\n    logger.info(DefaultNodeLinkHandler.statement('Disconnecting', optimized.targets.length, msg));\n    const r = this.doDisconnectOutput(container, optimized.source, !lenient,\n                                      io => optimized.targets.some(v => compareNodeIO(v, io)));\n    r.message = DefaultNodeLinkHandler.statement('Disconnected', optimized.targets.length, msg);\n    return r;\n  }\n\n  move(type: IOType, fromNode: NodeLink, toAnother: SlimNodeIO): LinkResult {\n    let newOne: NodeLink, base: SlimNodeIO;\n    const optimized = createBiNodeLink(fromNode.cid).add(fromNode).optimize()[0];\n    if (type === 'input') {\n      if (optimized.targets.length != 1) {\n        throw new Error(`Cannot move empty or more than one input's link to another node`);\n      }\n      newOne = createNodeLink(optimized.cid, optimized.source, toAnother);\n      base = optimized.targets[0];\n    } else {\n      newOne = createNodeLink(optimized.cid, toAnother, ...optimized.targets);\n      base = optimized.source;\n    }\n    const msg = DefaultNodeLinkHandler.msg(optimized.cid, type, base, type, toAnother);\n    logger.info(DefaultNodeLinkHandler.statement('Moving', optimized.targets.length, msg));\n    const r = this.remove(optimized, true).merge(this.doCreate(newOne, true, ...optimized.targets));\n    r.message = DefaultNodeLinkHandler.statement('Moved', optimized.targets.length, msg);\n    return r;\n  }\n\n  disconnectInput(cid: string | number, slimIO: SlimNodeIO): LinkResult {\n    const msg = DefaultNodeLinkHandler.msg(cid, 'input', slimIO);\n    logger.info(DefaultNodeLinkHandler.statement('Disconnecting', 'all', msg, 'to'));\n    return this.doDisconnectInput(this.validator.validate(cid), slimIO, false);\n  }\n\n  disconnectOutput(cid: string | number, slimIO: SlimNodeIO): LinkResult {\n    const msg = DefaultNodeLinkHandler.msg(cid, 'output', slimIO);\n    logger.info(DefaultNodeLinkHandler.statement('Disconnecting', 'all', msg));\n    return this.doDisconnectOutput(this.validator.validate(cid), slimIO, false);\n  }\n\n  protected doCreate(nodeLink: NodeLink, lenient?: boolean, ...skipSourceLinks: SlimNodeIO[]): LinkResult {\n    const container = this.validator.validate(nodeLink.cid);\n    const source = this.validateSource(container, nodeLink.source, this.globalStrict);\n    if (isNull(source.io)) {\n      return new LinkResult();\n    }\n    return nodeLink.targets\n                   .map(target => this.doConnect(container, source, target, !lenient, skipSourceLinks))\n                   .reduce((prev, current) => prev.merge(current), new LinkResult());\n  }\n\n  protected validateTarget(container: IContainer, current: SlimNodeIO,\n                           strict: boolean): { io: SlimNodeIO, link: SlimNodeIO } {\n    const n = this.nodeValidator.validate(current.nodeId, container, strict);\n    const inputId = current.ioId ?? current.slot;\n    const input = isNull(n) ? null : n.inputs[inputId];\n    const isUnlinkable = isNull(input) || input.setting.hidden;\n    if (strict && isUnlinkable) {\n      throw new NotFoundError(`Not found input id ${inputId} in ` +\n                              `node ${IdGenerator.createNodeId(container.id, current.nodeId)}`);\n    }\n    return { io: isUnlinkable ? null : current, link: isUnlinkable ? null : Link.create(input.link) };\n  }\n\n  protected validateSource(container: IContainer, current: SlimNodeIO,\n                           strict: boolean): { io: SlimNodeIO, links: SlimNodeIO[] } {\n    const n = this.nodeValidator.validate(current.nodeId, container, strict);\n    const outputId = current.ioId ?? current.slot;\n    const output = isNull(n) ? null : n.outputs[outputId];\n    if (strict && isNull(output)) {\n      throw new NotFoundError(`Not found output id ${outputId} in ` +\n                              `node ${IdGenerator.createNodeId(container.id, current.nodeId)}`);\n    }\n    return { io: isNull(output) ? null : current, links: (output?.links ?? []).map(link => Link.create(link)) };\n  }\n\n  private doConnect(container: IContainer, source: { io: SlimNodeIO; links: SlimNodeIO[] }, target: SlimNodeIO,\n                    strict: boolean, skipSourceLinks: SlimNodeIO[]): LinkResult {\n    const msg = DefaultNodeLinkHandler.msg(container.id, 'output', source.io, 'input', target);\n    logger.debug(DefaultNodeLinkHandler.statement('Connecting', 1, msg));\n    const r = this.doDisconnectInput(container, target, strict, skipSourceLinks);\n    if (r.hasInput(container.id, target.nodeId, target.ioId)) {\n      logger.debug(DefaultNodeLinkHandler.statement('Connected', 1, msg));\n      const skip = isEmpty(skipSourceLinks) ? [target] : [...skipSourceLinks, target];\n      const links = source.links.filter(io1 => !skip.some(io2 => compareNodeIO(io1, io2)));\n      return r.push(container.id, target.nodeId, 'input', target.ioId, source.io)\n              .push(container.id, source.io.nodeId, 'output', source.io.ioId, ...[...links, target]);\n    }\n    return r;\n  }\n\n  private doDisconnectInput(container: IContainer, target: SlimNodeIO, strict: boolean,\n                            skipSourceLinks?: SlimNodeIO[]): LinkResult {\n    const targetIO = this.validateTarget(container, target, strict);\n    if (isNull(targetIO.io)) {\n      return new LinkResult();\n    }\n    const r = new LinkResult().push(container.id, target.nodeId, 'input', target.ioId);\n    if (isNull(targetIO.link)) {\n      return r;\n    }\n    const updated = this.validateSource(container, targetIO.link, false).links\n                        .filter(link => !compareNodeIO(link, target));\n    const links = isEmpty(skipSourceLinks) ? updated :\n                  updated.filter(io1 => !skipSourceLinks.some(io2 => compareNodeIO(io1, io2)));\n    logger.debug(DefaultNodeLinkHandler.statement('Disconnected', links.length,\n                                                  DefaultNodeLinkHandler.msg(container.id, 'input', target), 'to'));\n    return r.push(container.id, targetIO.link.nodeId, 'output', targetIO.link.ioId, ...links);\n  }\n\n  private doDisconnectOutput(container: IContainer, source: SlimNodeIO, strict: boolean,\n                             filter: (io: SlimNodeIO) => boolean = _ => true): LinkResult {\n    const sourceIO = this.validateSource(container, source, strict);\n    const result = new LinkResult().push(container.id, source.nodeId, 'output', source.ioId);\n    sourceIO.links\n            .filter(io => compareNodeIO(this.validateTarget(container, io, false).link, source))\n            .forEach(io => {\n              if (filter(io)) {\n                result.push(container.id, io.nodeId, 'input', io.ioId);\n              } else {\n                result.push(container.id, source.nodeId, 'output', source.ioId, io);\n              }\n            });\n    logger.debug(DefaultNodeLinkHandler.statement('Disconnected', sourceIO.links.length,\n                                                  DefaultNodeLinkHandler.msg(container.id, 'output', source)));\n    return result;\n  }\n}\n","import { isFunction } from './helper';\nimport { reliability_logger } from './loggers';\n\nconst logger = reliability_logger;\n\n//TODO: should be notify in frontend instead of using `alert`\nfunction logError(error, ...args: any[]) {\n  logger.error(error);\n  if (typeof alert !== 'undefined') {\n    alert(error.toString());\n  }\n}\n\nexport const ErrorHandler = (target: any, propertyKey: string, descriptor: any) => {\n  const fn = descriptor.value!;\n  descriptor.value = function DescriptorValue(...args: any[]) {\n    try {\n      return fn.apply(this, args);\n    } catch (error) {\n      logError(error, args);\n    }\n  };\n  return descriptor;\n};\n\nexport const ErrorCallbackHandler = (errHandler: Function) => {\n  return (target: any, propertyKey: string, descriptor: any) => {\n    const fn = descriptor.value!;\n    descriptor.value = function DescriptorValue(...args: any[]) {\n      try {\n        return fn.apply(this, args);\n      } catch (error) {\n        logError(error, args);\n        if (isFunction(errHandler)) {\n          return errHandler(error, args);\n        }\n      }\n    };\n    return descriptor;\n  };\n};\n\nexport const AsyncErrorHandler = {};\n","import { AsyncDbHelper, Database } from '../database/database';\nimport { isEmpty, isNumeric } from '../utils/helper';\nimport { IdGenerator } from '../utils/id-generator';\nimport { db_logger as logger } from '../utils/loggers';\nimport { Node } from './node';\nimport { INode, SerializedNode, Side } from './node-interface';\nimport { SerializableHelper } from './serializable';\n\nexport interface NodeDbHelper {\n\n  listByIds(database: Database, ids: string[]): Promise<SerializedNode[]>;\n\n  /**\n   * Query Nodes in container by container id\n   * @param {Database} database\n   * @param {number} cid Container id\n   * @return {Promise<SerializedNode[]>}\n   */\n  listByContainer(database: Database, cid: string | number): Promise<SerializedNode[]>;\n\n  /**\n   * Async update node properties\n   * @param {Database} database\n   * @param {SerializedNode | INode | Node} node\n   * @param {string} props node properties, If not provided, whole node will be serialized then updated\n   * @return {Promise<void>}\n   */\n  updateAsync(database: Database, node: SerializedNode | INode | Node, ...props: string[]): Promise<void>;\n\n  /**\n   * Persist node in database by UPDATE operation based on properties\n   * @deprecated should use {@link NodeDbHelper#updateAsync}\n   * @param {Node} node\n   * @param {string[]} props node properties, If not provided, whole node will be serialized then updated\n   */\n  update(node: Node, props: string[]): void;\n\n  /**\n   * Insert new node\n   * @param {Database} database\n   * @param {SerializedNode} node\n   * @return {Promise<SerializedNode>}\n   */\n  insert(database: Database, node: SerializedNode | INode | Node): Promise<SerializedNode>;\n\n  delete(database: Database, node: SerializedNode): Promise<void>;\n\n  batchInsert(database: Database, nodes: (SerializedNode | INode | Node)[]): Promise<SerializedNode[]>;\n\n  batchDeleteByIds(database: Database, ids: string[]): Promise<number>;\n\n}\n\nexport const createNodeDbHelper = (): NodeDbHelper => {\n  return new DefaultNodeDbHelper();\n};\n\nclass DefaultNodeDbHelper implements NodeDbHelper {\n\n  listByIds(database: Database, ids: string[]): Promise<SerializedNode[]> {\n    logger.debug(`Query nodes by ids: [${ids}]...`);\n    if (database) {\n      return AsyncDbHelper.oneArgs(database, database.listNodes, { _id: { $in: ids } });\n    }\n    return Promise.resolve([]);\n  }\n\n  listByContainer(database: Database, cid: string | number): Promise<SerializedNode[]> {\n    if (database) {\n      logger.debug(`Query nodes in container id '${cid}'...`);\n      const query = isNumeric(cid) ? { $in: [+cid, cid + ''] } : cid;\n      return AsyncDbHelper.oneArgs(database, database.listNodes, { cid: query });\n    }\n    return Promise.resolve([]);\n  }\n\n  /**\n   * Persist node in database by UPDATE operation based on properties\n   * @param {Node} node\n   * @param props node properties, If not provided, whole node will be serialized then updated\n   */\n  update(node: Node, props: string[]): void {\n    if (node.side === Side.server && node.container.db) {\n      let data = isEmpty(props) ? node.serialize()\n                                : props.reduce((o, p) => ((o[p] = SerializableHelper.serialize(node[p])), o), {});\n      node.container.db.updateNode(node.id, node.container.id, { $set: data });\n    }\n  }\n\n  updateAsync(database: Database, node: SerializedNode | INode | Node, ...props: string[]): Promise<void> {\n    if (database) {\n      const msg = isEmpty(props) ? `whole node` : `[${props}] of node`;\n      logger.debug(`Updating ${msg} '${IdGenerator.createNodeId(node.cid, node.id)}'...`);\n      const data = isEmpty(props) ? SerializableHelper.serialize(node)\n                                  : props.reduce((o, p) => ((o[p] = SerializableHelper.serialize(node[p])), o), {});\n      return AsyncDbHelper.threeArgs(database, database.updateNode, node.id, node.cid, { $set: data });\n    }\n    return Promise.resolve();\n  }\n\n  insert(database: Database, node: SerializedNode): Promise<SerializedNode> {\n    if (database) {\n      logger.debug(`Inserting node '${IdGenerator.createNodeId(node.cid, node.id)}' into database...`);\n      return AsyncDbHelper.oneArgs(database, database.addNode, SerializableHelper.serialize(node));\n    }\n    return Promise.resolve(node);\n  }\n\n  batchInsert(database: Database, nodes: (SerializedNode | INode | Node)[]): Promise<SerializedNode[]> {\n    if (database) {\n      logger.debug(`Inserting ${nodes.length} nodes into database...`);\n      return AsyncDbHelper.oneArgs<SerializedNode[]>(database, database.batchInsertNodes,\n                                                     nodes.map(n => SerializableHelper.serialize(n)))\n                          .then(insertedNodes => {\n                            logger.debug(`Inserted ${insertedNodes.length} nodes in database`);\n                            return insertedNodes;\n                          });\n    }\n    return Promise.resolve(nodes);\n  }\n\n  batchDeleteByIds(database: Database, ids: string[]): Promise<number> {\n    if (database) {\n      logger.debug(`Deleting node ids: [${ids}] in database...`);\n      return AsyncDbHelper.oneArgs<number>(database, database.batchDeleteNodes, { _id: { $in: ids } })\n                          .then(total => {\n                            logger.debug(`Deleted ${total} nodes in database`);\n                            return total;\n                          });\n    }\n    return Promise.resolve(0);\n  }\n\n  delete(database: Database, node: SerializedNode): Promise<void> {\n    if (database) {\n      logger.debug(`Deleting node '${IdGenerator.createNodeId(node.cid, node.id)}' in database...`);\n      return AsyncDbHelper.twoArgs(database, database.removeNode, node.id, node.cid);\n    }\n    return Promise.resolve();\n  }\n}\n\n","module.exports = require(\"express\");","module.exports = require(\"child_process\");","export class NotFoundError extends Error {\n}\n\nexport class RegistryError<T> extends Error {\n  item: T;\n\n  constructor(message: string, item?: T) {\n    super(message);\n    this.item = item;\n  }\n\n  // toString() {\n  //   return `${this.message}`;\n  // }\n}\n\nexport class RegistryItemExistedError<T> extends RegistryError<T> {\n\n}\n","/**\n * <b>Serializable</b> is a marker interface for translating a data structure or object state into a format that can be\n * stored * or transmitted and reconstructed later.\n */\nimport { ErrorCallbackHandler } from '../utils/decorators';\nimport { isFunction, isNull, mapToObjectSameKey } from '../utils/helper';\n\nexport interface Serializable<T> {\n\n  serialize(): T;\n\n}\n\nexport interface IDeserializable<T, R> {\n\n  deserialize(serializedObj: T): R;\n\n}\n\nexport interface Deserializable<T> extends IDeserializable<T, Deserializable<T>> {\n  /**\n   * Deserialize from serialized object\n   * @param {T} serializedObj serialized object\n   * @return {Deserializable<T>} new instance object\n   */\n  deserialize(serializedObj: T): Deserializable<T>;\n}\n\nexport class SerializableHelper {\n  static serialize<T>(obj: Serializable<T> | any): T {\n    if (isNull(obj)) {\n      return null;\n    }\n    return isFunction(obj['serialize']) ? obj.serialize() : new SerializedObject(obj).serialize();\n  }\n}\n\nclass SerializedObject implements Serializable<object> {\n  obj: any;\n\n  constructor(obj: any) {\n    this.obj = obj;\n  }\n\n  @ErrorCallbackHandler(_ => null)\n  serialize(): object {\n    if (this.obj instanceof Array) {\n      return this.obj.map(o => SerializableHelper.serialize(o));\n    }\n    if (this.obj instanceof Object) {\n      return mapToObjectSameKey(this.obj, (_, v) => SerializableHelper.serialize(v));\n    }\n    return JSON.parse(JSON.stringify(this.obj));\n  }\n}\n","import config from '../../config';\n\nconst logger = require('logplease').create('cryto-utils', { color: 3 });\n\nconst CryptoJS = require('crypto-js');\n\nexport default class CryptoUtils {\n  static encrypt = text => {\n    if (text) {\n      return CryptoJS.AES.encrypt(text, config.secretKey).toString();\n    } else {\n      logger.error('Your text to encrypt is empty');\n    }\n  };\n\n  static decrypt = cipherText => {\n    if (cipherText) {\n      return CryptoJS.AES.decrypt(cipherText, config.secretKey).toString(CryptoJS.enc.Utf8);\n    } else {\n      logger.error('Your text to decrypt is empty');\n    }\n  };\n}\n","/**\n * Created by Derwish (derwish.pro@gmail.com) on 02.03.2017.\n * License: http://www.gnu.org/licenses/gpl-3.0.txt\n */\n\nimport Debounce from 'lodash-decorators/debounce';\nimport { Node } from '../../node';\nimport { Side } from '../../node-interface';\nimport { NodeSetting, SettingType } from '../../node-io';\n\nexport class UiNode extends Node {\n  titlePrefix: string; // title on ui panel\n  defaultTitle: string;\n  template: string;\n  uiElementType: string;\n  uiPanelValue;\n\n  // onGetMessageToDashboardSide\n  // onDashboardElementGetNodeState - this will override default logic in dashboard-server-socket\n  // onDashboardElementSetNodeState - this will override default logic in dashboard-server-socket\n\n  constructor(defaultTitle: string, uiElementType: string, properties: any) {\n    super();\n    this.name = properties && properties.name;\n    this.titlePrefix = defaultTitle;\n    this.defaultTitle = defaultTitle;\n    this.uiElementType = uiElementType;\n    this.isDashboardNode = true;\n    this.settings['title'] = NodeSetting.create({\n      description: 'Title',\n      value: this.titlePrefix,\n      type: SettingType.STRING,\n    });\n    this.settings['ui-panel'] = NodeSetting.create({ description: 'Ui Panel Name', type: SettingType.STRING });\n  }\n\n  init() {\n    if (this.settings['ui-panel']) {\n      this.uiPanelValue = this.settings['ui-panel'] && this.settings['ui-panel'].value;\n    }\n  }\n\n  onCreated() {\n    this.settings['ui-panel'].value = this.uiPanelValue || this.container.name;\n    if (this.side == Side.server) {\n      this.container.dashboard.onNodeChangePanelOrTitle(\n        this,\n        this.settings['ui-panel'].value,\n        this.settings['title'].value,\n      );\n    }\n  }\n\n  onAdded() {\n    this.changeTitle(this.settings['title'].value);\n  }\n\n  onBeforeSettingsChange(newSettings, newName) {\n    if (this.side == Side.server) {\n      this.name = newName;\n      this.container.dashboard.onNodeChangePanelOrTitle(\n        this,\n        newSettings['ui-panel'].value,\n        newSettings['title'].value,\n      );\n    }\n    this.changeTitle(newSettings['title'].value);\n  }\n\n  changeTitle(title: string) {\n    if (this.defaultTitle === title) this.title = title;\n    else this.title = this.defaultTitle + ': ' + title;\n  }\n\n  onRemoved() {\n    if (this.side == Side.server) this.container.dashboard.onNodeRemoved(this);\n  }\n\n  setState(state: any, sendToDashboard = true) {\n    this.properties['state'] = state;\n\n    // if called from constructor\n    if (this.container == null) return;\n\n    if (sendToDashboard) {\n      let m = { id: this.id, cid: this.container.id, state: state };\n      if (this.side == Side.server) {\n        // send state to all clients in the room\n        let socket = this.container.server_dashboard_socket;\n        let panelName = this.settings['ui-panel'].value;\n        socket.in('' + panelName).emit('dashboardElementGetNodeState', m);\n      }\n    }\n\n    this.storeInDatabase();\n  }\n\n  @Debounce(1000)\n  storeInDatabase() {\n    if (this.container && this.container.db) {\n      this.container.db.updateNode(this.id, this.container.id, {\n        $set: { properties: this.properties },\n      });\n    }\n  }\n\n  sendMessageToDashboardSide(mess: any) {\n    let m = { id: this.id, cid: this.container.id, message: mess };\n    if (this.side == Side.server) {\n      let socket = this.container.server_dashboard_socket;\n      let panelName = this.settings['ui-panel'].value;\n      socket.in('' + panelName).emit('nodeMessageToDashboardSide', m);\n    } else {\n      this.container.client_socket.emit('nodeMessageToDashboardSide', m);\n    }\n  }\n\n  getState() {\n    return this.properties['state'];\n  }\n}\n","module.exports = require(\"node-bacnet\");","import { FlexibleNode } from '../../flexible-node';\nimport { Type } from '../../node-io';\n\nexport default abstract class Statistics extends FlexibleNode {\n  protected constructor() {\n    super();\n    this.dynamicInputsType = Type.NUMBER;\n  }\n\n  onAdded() {\n    this.size = this.computeSize();\n    this.onInputUpdated();\n  }\n\n  onInputUpdated() {}\n\n  /**\n   * Get array of all input values or setting values where values are defined\n   */\n  getDefinedInputsOrSettingsValues() {\n    const output = [];\n    for (let i = 0; i < this.getInputsCount(); i++) {\n      const input = this.getInputData(i);\n      if (input != null) {\n        output.push(input);\n      }\n    }\n    return output;\n  }\n}\n","import { RegistryError } from '../utils/errors';\nimport { isNull } from '../utils/helper';\nimport { BaseIdGenerator, IdGenerator } from '../utils/id-generator';\nimport { Container, ContainerRegistry } from './container';\nimport { Node } from './node';\nimport { NodeFactory } from './node-factory';\nimport {\n  ContainerRegistryMetadata,\n  GlobalNodeRegistryMetadata,\n  IContainer,\n  IFolderNode,\n  INode,\n  isFolderNode,\n  isNode,\n  SerializedNode,\n  SubNodeRegistryMetadata,\n} from './node-interface';\nimport { AbstractRegistry, RegistryResult } from './registry';\n\nexport class DefaultGlobalNodeRegistry<N extends INode> extends AbstractRegistry<N>\n  implements GlobalNodeRegistryMetadata {\n\n  protected constructor() {\n    super();\n  }\n\n  register(obj: N, force?: boolean, key?: string): N {\n    return <N>super.register(obj, force, key);\n  }\n\n  get(key: number | string | N): N {\n    return super.get(isNode(key) ? this.createKey(<N>key) : key);\n  }\n\n  remove(key: number | string | N): N {\n    return <N>super.remove(isNode(key) ? this.createKey(<N>key) : key);\n  }\n\n  protected createKey(node: N): string | number {\n    return IdGenerator.createNodeId(node.cid, node.id);\n  }\n\n  protected itemName(): string {\n    return 'Global Node';\n  }\n}\n\nexport class GlobalNodeRegistry extends DefaultGlobalNodeRegistry<Node> {\n  private static _instance: GlobalNodeRegistry;\n\n  private constructor() {\n    super();\n  }\n\n  public static instance(): GlobalNodeRegistry {\n    if (!GlobalNodeRegistry._instance) {\n      GlobalNodeRegistry._instance = new GlobalNodeRegistry();\n    }\n    return GlobalNodeRegistry._instance;\n  }\n\n}\n\nexport class NodeRegistryHelper {\n\n  static register(parent: IContainer, nodes: SerializedNode[], containerRegistry: ContainerRegistryMetadata,\n                  isCaching?: boolean): Promise<RegistryResult<Node>> {\n    return Promise.allSettled(nodes.map(n => NodeFactory.create(n, !isCaching, containerRegistry))\n                                   .map(n => NodeRegistryHelper.registerNode(containerRegistry, n, isCaching)))\n                  .then(results => results.reduce((r, i) => NodeRegistryHelper.accumulate(r, i),\n                                                  new RegistryResult<Node>()));\n  }\n\n  static unregister(parent: IContainer, nodes: (number | string | SerializedNode | INode)[],\n                    containerRegistry: ContainerRegistryMetadata,\n                    isCaching?: boolean): Promise<RegistryResult<Node>> {\n    return Promise.allSettled(NodeFactory.standardize(parent, nodes)\n                                         .map(n => NodeRegistryHelper.unregisterNode(containerRegistry, n, isCaching)))\n                  .then(results => results.reduce((r, i) => NodeRegistryHelper.accumulate(r, i),\n                                                  new RegistryResult<Node>()));\n  }\n\n  private static registerNode(registry: ContainerRegistryMetadata, node: Node, isCaching: boolean): Promise<Node> {\n    const parent = registry.get(node.cid);\n    if (isNull(parent)) {\n      const nodeId = IdGenerator.createNodeId(node.cid, node.id);\n      return Promise.reject(new RegistryError(`Not found parent container of node '${nodeId}'`, node));\n    }\n    if (isFolderNode(node)) {\n      registry.register((<IFolderNode><unknown>node).sub_container, true);\n    }\n    return <Promise<Node>>parent.nodeRegistry().register(node, true, null, isCaching);\n  }\n\n  private static unregisterNode(registry: ContainerRegistryMetadata, node: INode, isCaching: boolean): Promise<Node> {\n    const parent = registry.get(node.cid);\n    if (isNull(parent)) {\n      const nodeId = IdGenerator.createNodeId(node.cid, node.id);\n      return Promise.reject(new RegistryError(`Not found parent container of node '${nodeId}'`, node));\n    }\n    return <Promise<Node>>parent.nodeRegistry().remove(node, isCaching);\n  }\n\n  private static accumulate(result: RegistryResult<Node>,\n                            item: PromiseFulfilledResult<Node> | PromiseRejectedResult) {\n    if (item.status === 'rejected') {\n      if (item.reason instanceof RegistryError) {\n        result.errors.push(item.reason);\n      } else {\n        const err = new RegistryError<any>(item.reason instanceof Error ? item.reason.message : item.reason);\n        err.stack = item.reason instanceof Error ? item.reason.stack : null;\n        result.errors.push(err);\n      }\n      result.errors.push(item.reason instanceof RegistryError ? item.reason : new RegistryError(item.reason));\n    } else {\n      result.objects.push(item.value);\n    }\n    return result;\n  }\n\n}\n\nexport class DefaultContainerRegistry<T extends IContainer> extends AbstractRegistry<T>\n  implements ContainerRegistryMetadata {\n\n  readonly idGenerator: BaseIdGenerator;\n\n  protected constructor(idGenerator: BaseIdGenerator) {\n    super();\n    this.idGenerator = idGenerator;\n  }\n\n  register(container: T, force?: boolean): T {\n    const c = this.optimizeBeforeRegister(this.validate(container, force, null), force);\n    return <T>this.doRegister(this.createKey(c), c, force);\n  }\n\n  remove(id: number | string): T {\n    return <T>super.remove(id);\n  }\n\n  clear() {\n    super.clear();\n  }\n\n  rootContainer(): IContainer {\n    return this.get(IdGenerator.ROOT);\n  }\n\n  protected itemName(): string {\n    return 'Container';\n  }\n\n  protected optimizeBeforeRegister(container: T, force: boolean): T {\n    if ((this.rootContainer() && this.idGenerator.shouldGenerateCid(container.id)) ||\n        (this.has(container.id) && !force)) {\n      container.id = this.idGenerator.genContainerId(container.id);\n    }\n    if (this.rootContainer()) {\n      container.side = this.rootContainer().side;\n    }\n    return super.optimizeBeforeRegister(container, force);\n  }\n\n  protected createKey(container: T): string | number {\n    return container.id;\n  }\n}\n\nexport class DefaultSubNodeRegistry<T extends INode> extends AbstractRegistry<T> implements SubNodeRegistryMetadata {\n\n  readonly globalNodeRegistry: GlobalNodeRegistryMetadata;\n  readonly containerRegistry: ContainerRegistryMetadata;\n  readonly idGenerator: BaseIdGenerator;\n  protected readonly _parent: IContainer;\n\n  constructor(parent: IContainer, containerRegistry?: ContainerRegistryMetadata,\n              globalNodeRegistry?: GlobalNodeRegistryMetadata) {\n    super();\n    this._parent = parent;\n    this.globalNodeRegistry = globalNodeRegistry ?? GlobalNodeRegistry.instance();\n    this.containerRegistry = containerRegistry ?? ContainerRegistry.instance();\n    this.idGenerator = this.containerRegistry.idGenerator;\n  }\n\n  parent(): IContainer {\n    return this._parent;\n  }\n\n  register(node: T, force?: boolean, key?: string, isCaching?: boolean): Promise<T> {\n    return Promise.resolve(this.optimizeBeforeRegister(this.validate(node, force, key), force))\n                  .then(node => this.doRegister(this.createKey(node), node, force, isCaching));\n  }\n\n  remove(node: T | number | string, isCaching?: boolean): Promise<T> {\n    let n = this.globalNodeRegistry.remove(isNode(node) ? <INode>node : <string>node);\n    if (isFolderNode(n)) {\n      this.containerRegistry.remove((<IFolderNode>n).sub_container.id);\n    }\n    return <Promise<T>>Promise.resolve(super.remove(n.id));\n  }\n\n  get(id: number | string | T): T {\n    return super.get((<T>id)?.id ?? id);\n  }\n\n  protected itemName(): string {\n    return `Node in Container '${this._parent.id}'`;\n  }\n\n  protected optimizeBeforeRegister(node: T, force: boolean): T {\n    if (this.has(node.id) && !force || this.idGenerator.shouldGenerateNid(node.cid, node.id)) {\n      node.id = this.idGenerator.genNodeId(node.cid, node.id);\n    }\n    node.container = this.parent();\n    node.cid = this.parent().id;\n    node.side = this.parent().side;\n    node.title = node.title ?? node.type;\n    if (isFolderNode(node)) {\n      const cNode = <IFolderNode><unknown>node;\n      cNode.sub_container = this.containerRegistry.register(cNode.sub_container, force);\n    }\n    return super.optimizeBeforeRegister(node, force);\n  }\n\n  protected doRegister(k: string | number, node: T, force: boolean = false, isCaching?: boolean): Promise<T> {\n    this.globalNodeRegistry.register(<INode>node, force);\n    return Promise.resolve(super.doRegister(k, node, force));\n  }\n\n  protected createKey(node: T): string | number {\n    return node.id;\n  }\n}\n","//FOR node before v12.9.0\nif (typeof Promise.allSettled !== 'function') {\n  //@ts-ignore\n  Promise.allSettled = function (promises) {\n    return Promise.all(promises.map(p => Promise.resolve(p)\n                                                .then(val => ({ status: 'fulfilled', value: val }),\n                                                      err => ({ status: 'rejected', reason: err }))));\n  };\n}\n\nif (Array.prototype.flatMap === undefined) {\n  const concat = (x, y) => x.concat(y);\n  const flatMap = (f, xs) => xs.map(f).reduce(concat, []);\n  Array.prototype.flatMap = function (f) {\n    return flatMap(f, this);\n  };\n}\n\n// source map for node typescript debug\nrequire('source-map-support').install();\nimport { Colors, create, Logger } from 'logplease';\n// @formatter:off\n//MUST UP\nconst logger = create('app', { color: Colors.Green });\nconst path = require('path');\nconst process = require('process');\nconst argv = require('minimist')(process.argv.slice(2));\nconst dataDir = process.env['DATA_DIR'] || argv['datadir'] || './db';\nconst envFile = argv['envFile'] || '.env';\nconst envFileAbsPath = path.isAbsolute(envFile) ? envFile : path.resolve(process.cwd(), envFile);\nprocess.env['DATA_DIR'] = path.isAbsolute(dataDir) ? dataDir : path.resolve(process.cwd(), dataDir);\nrequire('dotenv').config({ path: envFileAbsPath });\n(<any>global).__rootdirname = path.resolve(__dirname);\n\n//---------------------------------------------\n\n//MUST DOWN\nimport { Backend } from './backend/backend';\nimport conf from './config';\nimport * as config from './config.json';\nimport { AsyncDbHelper, Database } from './database/database';\nimport { Container, ContainerRegistry } from './nodes/container';\nimport { Node } from './nodes/node';\nimport { NodeHookHelper } from './nodes/node-hook';\nimport { SerializedNode, Side } from './nodes/node-interface';\nimport { NodeRegistryHelper } from './nodes/node-registry';\nimport { NodeTypeRegistry } from './nodes/node-type-registry';\nimport { RegistryResult } from './nodes/registry';\nimport { Dashboard } from './server/dashboard';\nimport { Server } from './server/server';\nimport { NodeTree } from './server/service/NodeETLService';\nimport { isEmpty } from './utils/helper';\nimport { NoChangeId } from './utils/id-generator';\n// @formatter:on\n\n\nexport class App {\n  db: Database;\n  readonly dashboard: Dashboard;\n  readonly server: Server;\n  private readonly logger: Logger;\n\n  constructor() {\n    this.logger = create('app', { color: Colors.Green });\n    this.logger.info('----------------------------- Rubix Wires -----------------------------');\n    this.logger.info(`Process Dir       : '${process.cwd()}'`);\n    this.logger.info(`Working Dir       : '${(<any>global).__rootdirname}'`);\n    this.logger.info(`Data Dir          : '${process.env.DATA_DIR}'`);\n    this.logger.info(`Environment       : '${process.env.NODE_ENV || 'development'}'`);\n    this.logger.info(`Environment file  : '${envFileAbsPath}'`);\n    this.logger.info('-----------------------------------------------------------------------');\n    this.registerNodeTypes();\n    this.server = new Server((<any>global).__rootdirname, conf.port, conf.loopInterval);\n    this.dashboard = new Dashboard(this.server.dashboardSocket);\n    Promise.resolve(ContainerRegistry.instance().register(Container.initRoot(Side.server), true))\n           .then(rootContainer => this.start(rootContainer))\n           .then(_ => this.logger.info(`Rubix Wires is ready`));\n  }\n\n  private start(rootContainer: Container) {\n    return this.connectDatabase()\n               .then(db => (this.db = db))\n               .then(db => db.asyncLoadDatabase(conf.dataDir, conf.database.compactionInterval * 1000).then(_ => db))\n               .then(db => this.onDatabaseReady(rootContainer, db))\n               .catch(err => this.onDatabaseError(rootContainer, err));\n  }\n\n  private registerNodeTypes() {\n    require('./nodes/nodes/index');\n    this.logger.info(`Registered ${NodeTypeRegistry.instance().size()} nodes types`);\n  }\n\n  private connectDatabase(): Promise<Database> {\n    this.logger.info(`Loading database...`);\n    if (!config.dataBase.enable) {\n      return Promise.reject(new Error('Not enabled database'));\n    }\n    if (!config.dataBase.useInternalDb) {\n      return Promise.reject(new Error('Unsupported external database'));\n    }\n    return Promise.resolve(require('./database/neDbDatabase').db);\n\n  }\n\n  private startBackend() {\n    new Backend(this.db, conf.backendSync).start();\n  }\n\n  private onDatabaseReady(rootContainer: Container, db: Database): Promise<any> {\n    return Promise.resolve(this.configApp(rootContainer, this.server, this.dashboard, db))\n                  .then(_ => AsyncDbHelper.noArgs<SerializedNode[]>(db, db.getNodes))\n                  .then(nodes => new NodeTree(rootContainer.id, new NoChangeId()).compute(nodes).flatten())\n                  .then(nodes => this.registerNodes(rootContainer, nodes))\n                  .then(_ => this.dashboard.loadFromDatabase(db))\n                  .then(_ => this.startBackend())\n                  .then(_ => rootContainer.run(conf.loopInterval));\n  }\n\n  private registerNodes(rootContainer: Container, nodes: SerializedNode[]): Promise<RegistryResult<Node>> {\n    return NodeRegistryHelper.register(rootContainer, nodes, ContainerRegistry.instance(), true)\n                             .then(r => {\n                               logger.info(`Imported ${ContainerRegistry.instance().size() - 1} containers, ` +\n                                           `${r.objects.length}/${nodes.length} nodes successfully from database`);\n                               if (!isEmpty(r.errors)) {\n                                 logger.warn(`Import failed: [${r.errors.join('\\n')}]`);\n                               }\n                               return r;\n                             })\n                             .then(r => {\n                               r.objects.forEach(node => NodeHookHelper.execute(node, 'onDbReaded') ?? node);\n                               return r;\n                             });\n  }\n\n  private onDatabaseError(rootContainer: Container, err: Error) {\n    if (err.message === 'Not enabled database') {\n      //TODO is it need? Should remove it\n      this.logger.warn(`Database is not enabled, rubix-wires is running on memory...`);\n      rootContainer.run(conf.loopInterval);\n      return;\n    }\n    this.logger.error(`Unable to bootstrap application. Failed at: ${err.stack ?? err}`);\n    process.exit(99);\n  }\n\n  private configApp(rootContainer: Container, server: Server, dashboard: Dashboard, db: Database): Container {\n    this.logger.info(`Setup root container...`);\n    rootContainer.dashboard = dashboard;\n    rootContainer.server_editor_socket = server.editorSocket.io;\n    rootContainer.server_dashboard_socket = server.dashboardSocket.io;\n    rootContainer.db = db;\n    return rootContainer;\n  }\n}\n\nconst app = new App();\nexport default app;\n","export const ERROR = 'error';\nexport const NOTIFICATION = 'notification';\nexport const PACK_UP_NODES = 'pack-up-nodes';\nexport const IMPORT_NODES = 'import-nodes';\nexport const EXPORT_NODES = 'export-nodes';\nexport const CLONE_NODES = 'clone-nodes';\nexport const REMOVE_NODES = 'remove-nodes';\nexport const CREATE_NODE = 'create-node';\nexport const CREATE_LINK = 'create-link';\nexport const REMOVE_LINK = 'remove-link';\nexport const MOVE_LINK = 'move-link';\nexport const UPDATE_NODE_SETTING = 'update-node-settings';\nexport const ADD_NODE_INPUT = 'add-node-input';\nexport const ADD_NODE_OUTPUT = 'add-node-output';\nexport const REMOVE_NODE_INPUT = 'remove-node-input';\nexport const REMOVE_NODE_OUTPUT = 'remove-node-output';\nexport const NODE_IO_VALUES = 'nodes-io-values';\n","import { reassignContainer } from './container';\nimport { Node } from './node';\nimport {\n  ContainerRegistryMetadata,\n  GlobalNodeRegistryMetadata,\n  IContainer,\n  IFolderNode,\n  INode,\n  isFolderNode,\n  isNode,\n  SerializedFolderNode,\n  SerializedNode,\n} from './node-interface';\nimport { NodeTypeRegistry } from './node-type-registry';\n\nexport class NodeFactory {\n\n  static create(serializedNode: SerializedNode, isNew: boolean = true, containerRegistry?: ContainerRegistryMetadata,\n                globalRegistry?: GlobalNodeRegistryMetadata): Node {\n    if (isFolderNode(serializedNode)) {\n      const { ContainerNode } = require('./container-node');\n      return ContainerNode.create(<SerializedFolderNode>serializedNode, isNew, containerRegistry, globalRegistry);\n    }\n    const node = new Node().deserialize(serializedNode, isNew);\n    if (isFolderNode(node)) {\n      return <Node><unknown>reassignContainer(<IFolderNode><unknown>node, (<IFolderNode>serializedNode).sub_container,\n                                              containerRegistry, globalRegistry);\n    }\n    return node;\n  }\n\n  static createTempNode(type: string, position: [number, number]): Node {\n    const node_class = NodeTypeRegistry.instance().get(type);\n    if (node_class) {\n      const node: Node = new node_class();\n      node.type = type;\n      node.pos = position;\n      node.size = node.computeSize(true);\n      return node;\n    } else {\n      throw `Can't create node of type [${type}]. Make sure it is registered through registerNodeType`;\n    }\n  }\n\n  static toSimpleNode<T extends SerializedNode>(cid: number | string, id: number | string): T {\n    return <T>{ id: id, cid: cid, type: '' };\n  }\n\n  static standardize(parent: IContainer, nodes: (number | string | SerializedNode | INode)[]): INode[] {\n    return nodes.map(n => {\n      const nn: INode = isNode(n) ? <INode>n : NodeFactory.toSimpleNode(parent.id, <string>n);\n      nn.container = nn.container ?? parent;\n      return nn;\n    });\n  }\n\n}\n","module.exports = require(\"fs\");","import { exec } from 'child_process';\nconst os = require('os');\nconst si = require('systeminformation');\nconst pkg = require('../../../package.json');\n\nexport default class OsUtils {\n  /**\n   * Runs a system command\n   * @param command {string} system command. Example 'sudo reboot'\n   * @param options {string} system command options\n   * @returns {Promise}\n   *\n   */\n\n  static execute(command, options) {\n    return new Promise((resolve, reject) => {\n      exec(command, options, (err, stdout, stderr) => {\n        if (err) {\n          reject(err);\n          return;\n        } else {\n          resolve({\n            stdout: stdout,\n            stderr: stderr,\n          });\n        }\n      });\n    });\n  }\n\n  /**\n   * Returns hostname\n   */\n  static hostName() {\n    return new Promise<any>((resolve, reject) => {\n      try {\n        resolve(os.hostname());\n      } catch (e) {\n        reject('Unknown');\n      }\n    });\n  }\n\n  /**\n   * Returns Current Wires Version\n   */\n  static getCurrentWiresVersion() {\n    return new Promise<any>((resolve, reject) => {\n      try {\n        resolve(pkg.version);\n      } catch (e) {\n        reject('Unknown');\n      }\n    });\n  }\n\n  /**\n   * Returns host cpu temp\n   * main: main temperature (avg)\n   * cores: array of temperatures\n   * max: max temperature\n   */\n  static cpuTemperature() {\n    return new Promise<any>((resolve, reject) => {\n      try {\n        resolve(si.cpuTemperature());\n      } catch (e) {\n        reject('Unknown');\n      }\n    });\n  }\n\n  /**\n    Returns File System and File System Stats\n    fs: name of file system\n    type: type of file system\n    size: sizes in bytes\n    used: used in bytes\n    use: used in %\n    mount: mount point\n   */\n  static fsSize() {\n    return new Promise<any>((resolve, reject) => {\n      try {\n        resolve(si.fsSize());\n      } catch (e) {\n        reject('Unknown');\n      }\n    });\n  }\n\n  /**\n    Returns host system info\n   */\n  static systemInfo() {\n    return new Promise<any>((resolve, reject) => {\n      try {\n        // define all values, you want to get back\n        const valueObject = {\n          cpu: '*',\n          osInfo: 'platform, release',\n          system: 'model, manufacturer',\n        };\n        resolve(si.get(valueObject));\n      } catch (e) {\n        reject('Unknown');\n      }\n    });\n  }\n\n\n  /**\n  Check if host is a BBBB\n */\n  static systemModelBBB() {\n    return new Promise<any>((resolve, reject) => {\n      let host = \"GENERIC AM33XX (FLATTENED DEVICE TREE)\"\n      OsUtils.systemInfo()\n        .then(e => {\n          if (e.system.model === host) {\n            resolve(true)\n          } else resolve(false)\n        }).catch(err => {\n          reject(false)\n        })\n    });\n  }\n\n  /**\n  Check if host is a Rubix Compute\n  */\n  static systemModelRubixCompute() {\n    return new Promise<any>((resolve, reject) => {\n      let host = \"BCM2835\"\n      OsUtils.systemInfo()\n        .then(e => {\n          if (e.system.model === host) {\n            resolve(true)\n          } else resolve(false)\n        }).catch(err => {\n          reject(false)\n        })\n    });\n  }\n\n  /**\n    Returns host time\n    current: local (server) time\n    uptime: uptime in number of seconds\n    timezone: e.g. GMT+0200\n    timezoneName: e.g. CEST\n   */\n  static systemTime() {\n    return new Promise<any>((resolve, reject) => {\n      try {\n        resolve(si.time());\n      } catch (e) {\n        reject('Unknown');\n      }\n    });\n  }\n\n  /**\n    Returns host memory\n    total: total memory in bytes\n    free: not used in bytes\n    used: used (incl. buffers/cache)\n    active: used actively (excl. buffers/cache)\n    available: potentially available (total - active)\n    buffers: used by buffers\n    cached: used by cache\n    slab: used by slab\n    buffcache: used by buffers+cache\n    swaptotal: swap total\n    swapused: swap used\n    swapfree: swap free\n   */\n  static systemMem() {\n    return new Promise<any>((resolve, reject) => {\n      try {\n        resolve(si.mem());\n      } catch (e) {\n        reject('Unknown');\n      }\n    });\n  }\n\n\n  static systemAll() {\n    return new Promise<any>(async (resolve, reject) => {\n      let all = []\n      await OsUtils.systemInfo().then(e => {\n        console.log(' systemInfo', e)\n        all.push({ systemInfo: e })\n      }).catch(err => {\n        console.log('ERROR systemInfo', err)\n      })\n      await OsUtils.systemTime().then(e => {\n        console.log(' systemTime', e)\n        all.push({ systemTime: e })\n      }).catch(err => {\n        console.log('ERROR systemTime', err)\n      })\n      await OsUtils.fsSize().then(e => {\n        console.log(' fsSize', e)\n        all.push({ fsSize: e })\n      }).catch(err => {\n        console.log('ERROR fsSize', err)\n      })\n      await OsUtils.cpuTemperature().then(e => {\n        console.log(' cpuTemperature', e)\n        all.push({ cpuTemperature: e })\n      }).catch(err => {\n        console.log('ERROR cpuTemperature', err)\n      })\n      await OsUtils.hostName().then(e => {\n        console.log(' hostName', e)\n        all.push({ hostName: e })\n      }).catch(err => {\n        console.log('ERROR hostName', err)\n      })\n      await OsUtils.getCurrentWiresVersion().then(e => {\n        console.log(' getCurrentWiresVersion', e)\n        all.push({ getCurrentWiresVersion: e })\n      }).catch(err => {\n        console.log('ERROR getCurrentWiresVersion', err)\n      })\n      resolve(all)\n\n    });\n  }\n\n\n}\n","import * as NeDBDataStore from 'nedb';\nimport { db_logger as logger } from '../../utils/loggers';\n\nexport default interface BaseDatabase {\n  asyncLoadDatabase(dataPath: string, cleanUpInterval?: any): Promise<any>;\n}\n\nexport abstract class AbstractDatabase implements BaseDatabase {\n\n  protected db: NeDBDataStore;\n\n  asyncLoadDatabase(dataPath: string, cleanUpInterval?: any): Promise<any> {\n    const dbPath = `${dataPath}/${this.dbName()}.db`;\n    logger.info(`Loading database '${this.dbName()}' from '${dbPath}'...`);\n    this.db = new NeDBDataStore({ filename: `${dbPath}` });\n    this.db.persistence.setAutocompactionInterval(cleanUpInterval);\n    return this.load();\n  };\n\n  protected abstract dbName(): string;\n\n  protected load(): Promise<any> {\n    return new Promise<any>((resolve, reject) => {\n      this.db.loadDatabase(err => {\n        if (err) {\n          logger.error(`Failed when loading database ${this.dbName()}: ${err.stack}`);\n          reject(err);\n        }\n        return resolve();\n      });\n    });\n  };\n}\n","module.exports = require(\"moment\");","import {\n  ContainerRegistryMetadata,\n  IContainer,\n  INode,\n  isSerializedContainer,\n  SerializedContainer,\n} from '../nodes/node-interface';\nimport { NotFoundError } from '../utils/errors';\nimport { isNull } from '../utils/helper';\n\nconst Joi = require('@hapi/joi');\n\nexport class NodeValidator {\n  static NodeArrayValidator() {\n    return Joi.array().items(Joi.object().keys({ type: Joi.string().required() }));\n  }\n}\n\nexport interface IContainerRegistryValidator {\n\n  validate(cid: number | string | SerializedContainer | IContainer, strict?: boolean): IContainer;\n\n}\n\nexport interface INodeRegistryValidator {\n\n  validate(node: number | string | INode, container: IContainer, strict?: boolean): INode;\n\n}\n\nexport class NodeRegistryValidator implements INodeRegistryValidator {\n\n  validate(node: number | string | INode, container: IContainer, strict: boolean = true): INode {\n    const n = container.nodeRegistry().get(node);\n    if (isNull(n) && strict) {\n      throw new NotFoundError(`Not found node id ${node} in container ${container.id}`);\n    }\n    return n;\n  }\n\n}\n\nexport class ContainerRegistryValidator implements IContainerRegistryValidator {\n\n  private readonly registry: ContainerRegistryMetadata;\n\n  constructor(registry: ContainerRegistryMetadata) {\n    this.registry = registry;\n  }\n\n  static mustExisted = (cid: number | string | SerializedContainer | IContainer,\n                        registry: ContainerRegistryMetadata): Promise<IContainer> => {\n    return Promise.resolve(() => new ContainerRegistryValidator(registry).validate(cid)).then(f => f());\n  };\n\n  validate(cid: number | string | SerializedContainer | IContainer, strict: boolean = true): IContainer {\n    const container = this.registry.get(isSerializedContainer(cid) ? (<SerializedContainer>cid).id : cid + '');\n    if (isNull(container) && strict) {\n      throw new NotFoundError(`Not found container id ${cid}`);\n    }\n    return container;\n  }\n\n}\n\nexport class ListValidator {\n\n  static notEmpty = <T>(items: T[], msg: string): Promise<T[]> => {\n    if (items.length > 0) {\n      return Promise.resolve(items);\n    }\n    return Promise.reject(msg);\n  };\n\n}\n","/**\n * Used to chain asynchronous executions and to coordinate them from various class instances while limiting parallelism.\n *\n * Example use case: Executing HTTP requests while limiting number of simultaneous request.\n */\nexport class PromiseActor {\n  private stack: Promise<any> = Promise.resolve(null);\n\n  /**\n   * Append an asynchronous computation to the stack. The computation function will be called when all previously chained\n   * computations have completed, and must this return a promise to indicate its completion. The next computation will\n   * only be executed once the promise completes.\n   *\n   * Returns a promise that will complete when the provided computation has been called and completed.\n   */\n  process<T>(f: () => Promise<T>): Promise<T> {\n    const callback = () => f(); // hide previous computation from f(x)\n    this.stack = this.stack.then(callback, error => {\n      console.log(error);\n      return callback(); // process next\n    });\n    return Promise.resolve(this.stack); // defensive copy of promise\n  }\n}\n\nexport const singleton = new PromiseActor();","import * as fs from 'fs';\nimport * as path from 'path';\n\nexport default class FileUtils {\n  /**\n   * Runs a current dir\n   * @returns {string}\n   */\n  static getDir(): string {\n    return path.dirname(__filename);\n  }\n\n\n\n  /**\n   * Runs all files under a dir\n   * @param dirPath\n   * @returns {string}\n   */\n  static getAllFiles(dirPath): any {\n    if (dirPath === null) return;\n    return new Promise((resolve, reject) => {\n      fs.readdir(dirPath, (err, files) => {\n        if (err) {\n          reject(err);\n        }\n        let obj = [];\n        files.forEach(file => {\n          obj.push(file);\n        });\n        resolve(obj);\n        return obj;\n      });\n    });\n  }\n\n  /**\n   * Checks if a file exists\n   * @param fileName\n   * @returns {boolean}\n   */\n  static checkFileExists(fileName): boolean {\n    return fs.existsSync(fileName);\n  }\n\n\n  /**\n   * create file if doesn't exist\n   * @param fileName\n   * @returns {any}\n   */\n  // create file if doesn't exist\n  static createFile(fileName) {\n    return new Promise((resolve, reject) => {\n      fs.open(fileName, 'r', (err, fd) => {\n        if (err) {\n          fs.writeFile(fileName, '', err => {\n            if (err) {\n              reject(err);\n            }\n            let msg = 'The file was created!';\n            resolve(msg);\n          });\n        } else {\n          let msg = 'The file exists!';\n          resolve(msg);\n        }\n      });\n    });\n  }\n\n  /**\n   * create directory if doesn't exist\n   * @param directoryPath\n   * @returns {string}\n   */\n  static createDirectory(directoryPath) {\n    const directory = path.normalize(directoryPath);\n\n    return new Promise((resolve, reject) => {\n      fs.stat(directory, error => {\n        if (error) {\n          if (error.code === 'ENOENT') {\n            fs.mkdir(directory, error => {\n              if (error) {\n                reject(error);\n              } else {\n                resolve(directory);\n              }\n            });\n          } else {\n            reject(error);\n          }\n        } else {\n          resolve(directory);\n        }\n      });\n    });\n  }\n\n  /**\n   * create folder if doesn't exist\n   * @param dirPath\n   * @returns {any}\n   */\n  static ensureDirSync(dirPath) {\n    try {\n      return fs.mkdirSync(dirPath);\n    } catch (err) {\n      if (err.code !== 'EEXIST') throw err;\n    }\n  }\n\n  /**\n   * Read content from the filePath\n   * @param filePath {string}\n   */\n  static readFile(filePath: string): Promise<any> {\n    return new Promise((resolve, reject) => {\n      fs.readFile(filePath, (err, buff) => {\n        if (err) {\n          reject(err);\n        }\n        resolve(buff);\n      });\n    });\n  }\n\n  static async checkForOldDirectory(filePath): Promise<boolean> {\n    try {\n      const fileContent = await FileUtils.readFile(filePath);\n      if (fileContent) Boolean(fileContent.toString());\n      else return false;\n    } catch (e) {\n      return false;\n    }\n  }\n\n  /**\n   * read text and return json out\n   * @param fileName\n   * @returns {any}\n   */\n  static async readFileReturnJson(fileName: string) {\n    //if (!this.checkFileExists(fileName)) return;\n    return new Promise((resolve, reject) => {\n      fs.readFile(fileName, (err, data) => {\n        let obj = [];\n        if (err) {\n          reject(err);\n        }\n        data\n          .toString()\n          .split('\\n')\n          .forEach(function (line, index, arr) {\n            if (line.length === 0) {\n              return;\n            }\n            obj.push(line);\n          });\n        let objStringify = JSON.stringify(obj);\n        let json = JSON.parse(objStringify);\n        resolve(json);\n      });\n    });\n  }\n\n  /**\n   * append File\n   * @param fileName\n   * @param input\n   * @returns {any}\n   */\n  static async appendFile(fileName: string, input: string) {\n    //if (!this.checkFileExists(fileName)) return;\n    return new Promise((resolve, reject) => {\n      let msg = 'The file ' + fileName + ' was saved!';\n      let errorMsg = 'Cant read file. File name is not defined';\n      fs.appendFile(fileName, input, err => {\n        if (err) {\n          reject(err);\n        }\n        resolve(msg);\n      });\n    });\n  }\n\n  /**\n   * writeFile\n   * @param fileName\n   * @param input\n   * @returns {any}\n   */\n  static async writeFile(fileName: string, input: string) {\n    //if (!this.checkFileExists(fileName)) return false;\n    return new Promise((resolve, reject) => {\n      let msg = 'The file ' + fileName + ' was saved!';\n      let errorMsg = 'Cant read file. File name is not defined';\n      fs.writeFile(fileName, input, err => {\n        if (err) {\n          reject(err);\n        }\n        resolve(msg);\n      });\n    });\n  }\n\n\n\n  /**\n   * delete multiple files !!! Not tested well\n   * @param files\n   * @param callback\n   * @returns {any}\n   */\n  static deleteFiles(files, callback) {\n    let i = files.length;\n    files.forEach(function (filepath) {\n      console.log(filepath)\n      if (FileUtils.checkFileExists(filepath)) {\n        fs.unlink(filepath, function (err) {\n          i--;\n          if (err) {\n            callback(err);\n            return;\n          } else if (i <= 0) {\n            callback(null);\n          }\n        });\n      } else {\n        callback(true);\n        console.log(11111)\n        console.log(filepath)\n      }\n    });\n  }\n\n\n}\n","import * as fs from 'fs';\nimport config from '../../config';\nimport FileUtils from '../../nodes/utils/file-utils';\nimport { db_logger as logger } from '../../utils/loggers';\n\nconst file = `${config.dataDir}/platform.db`;\nconst ipDb = `${config.dataDir}/ip.db`;\n\nexport default class PlatformDataSource {\n\n  static getPlatform(): Promise<any> {\n    return new Promise((resolve, reject) => {\n      FileUtils.createFile(file).then(() => {\n        fs.readFile(file, { encoding: 'utf-8' }, (err, data) => {\n          if (err) {\n            reject(err);\n            logger.error(err.message);\n          } else {\n            const obj = data ? JSON.parse(data) : {};\n            resolve(obj);\n          }\n        });\n      });\n    });\n  }\n\n  static updatePlatform(data: any): Promise<any> {\n    return new Promise((resolve, reject) => {\n      FileUtils.createFile(file).then(() => {\n        const json = JSON.stringify(data);\n        fs.writeFile(file, json, 'utf-8', err => {\n          if (err) {\n            reject(err);\n            logger.error(err.message);\n          } else {\n            resolve(json);\n          }\n        });\n      });\n    });\n  }\n\n  static getEth(): Promise<any> {\n    return new Promise((resolve, reject) => {\n      FileUtils.createFile(ipDb).then(() => {\n        fs.readFile(ipDb, { encoding: 'utf-8' }, (err, data) => {\n          if (err) {\n            reject(err);\n            logger.error(err.stack ?? err.message);\n          } else {\n            const obj = data ? JSON.parse(data) : {};\n            resolve(obj);\n          }\n        });\n      });\n    });\n  }\n\n  static updateEth(data: any): Promise<any> {\n    return new Promise((resolve, reject) => {\n      FileUtils.createFile(ipDb).then(() => {\n        let json = JSON.stringify(data);\n        fs.writeFile(ipDb, json, 'utf-8', err => {\n          if (err) {\n            reject(err);\n            logger.error(err.stack ?? err.message);\n          } else {\n            resolve(json);\n          }\n        });\n      });\n    });\n  }\n}\n\n","import config from '../../../../config';\n\nconst edgeApi = config.edge28;\nexport const SEND_PAYLOAD_TO_CHILD = 'SEND_PAYLOAD_TO_CHILD';\nexport const ADD_POINT = 'ADD_POINT';\nexport const REMOVE_POINT = 'REMOVE_POINT';\n\nexport const edgeIp: string = edgeApi.baseURL;\nexport const edgePort: number = edgeApi.port;\nexport const edgeApiVer: string = edgeApi.apiVer;\n","import { ConnectionOutput } from '../../nodes/nodes/protocols/connection-node-mixin';\nimport { convertToNumber, isNotNull, isNull, range } from '../../utils/helper';\nimport { EventData } from '../../utils/pattern';\n\nexport interface Model {\n}\n\nexport interface HasIdentifier extends Model {\n  /**\n   * Gets model identifier\n   * @returns {string} identifier\n   */\n  identifier(): string;\n}\n\nexport interface PointValue {\n  presentValue: any;\n  priority: number;\n  priorityArray: { [k: number]: any };\n\n  /**\n   * Check point value is reset state\n   * @return {boolean} true if this instance has `present value` and `priority` are `null` at same time\n   */\n  isResetState(): boolean;\n\n  /**\n   * Compare this instance with another point value to identify a change\n   * @param {PointValue} prev another point value\n   * @return {PointValue} change of value. It might `null` if no change.\n   */\n  changedOfValue(prev: PointValue): PointValue;\n\n  /**\n   * Merge this instance from another point value within highest priority computation\n   * @param {PointValue} prev another point value\n   * @return {PointValue} new non-null point value\n   */\n  merge(prev: PointValue): PointValue;\n}\n\n/**\n * Define point model as input\n */\nexport interface PointModel extends HasIdentifier {\n\n  enabled: boolean;\n\n  pointValue: PointValue;\n\n  /**\n   * Compare another Point to detect might change only value\n   * @param point Another Point\n   */\n  mightOnlyValueChanged(point: PointModel): boolean;\n\n  /**\n   * Check another Point is same identifier or not\n   */\n  equals(point: PointModel): boolean;\n\n}\n\nexport interface PointOutput<T extends PointModel> extends Model, EventData {\n\n  connStatus: ConnectionOutput;\n  point: T;\n\n}\n\nexport class PointValueCreator {\n  private constructor() {\n  }\n\n  /**\n   * Init Point Value without auto correct highest value based on given inputs\n   * @param {number} presentValue Point present value\n   * @param {number} priority Point priority\n   * @param {object | []} priorityArray priority array in JSON or array\n   * @returns {PointValue}\n   */\n  static init = (presentValue: any, priority?: number, priorityArray?: { [k: number]: any } | []): PointValue => {\n    if (priority && (priority < 1 || priority > 16)) {\n      throw new Error('Priority must be in range [1, 16]');\n    }\n    let pv = new DefaultPointValue();\n    pv.presentValue = presentValue ?? null;\n    pv.priority = priority === undefined ? 16 : priority;\n    pv.priorityArray = PointValueCreator.normalizePriorityArray(priorityArray);\n    return pv;\n  };\n\n  /**\n   * Init Point Value without auto correct highest value based on priority array\n   * @param priorityArray priority array object or array with 16 item\n   * @return {PointValue}\n   */\n  static by = (priorityArray?: { [k: number]: any } | []): PointValue => {\n    let pa = PointValueCreator.normalizePriorityArray(priorityArray);\n    let highestValue = Object.entries(pa).find(pa => pa[1]) ?? [16, null];\n    return PointValueCreator.init(convertToNumber(highestValue[1]), convertToNumber(highestValue[0]), pa);\n  };\n\n  /**\n   * Create PointValue based on given inputs then auto correct `highest value`\n   * @param {any} presentValue\n   * @param {number} priority\n   * @param {object | []} priorityArray priority array in JSON or array\n   * @returns {PointValue}\n   */\n  static create = (presentValue: any, priority?: number,\n                   priorityArray?: { [k: number]: any } | []): PointValue => {\n    let pv = PointValueCreator.init(presentValue, priority, priorityArray);\n    if (pv.isResetState()) {\n      return pv;\n    }\n    let highestValue = Object.entries(pv.priorityArray).find(pa => pa[1]) ?? [16, null];\n    pv.priorityArray[pv.priority] = pv.presentValue;\n    if (highestValue && convertToNumber(highestValue[0]) === pv.priority && pv.presentValue === null) {\n      highestValue = Object.entries(pv.priorityArray).find(([_, v]) => isNotNull(v));\n    }\n    if (highestValue && (pv.priority > convertToNumber(highestValue[0]) || pv.presentValue === null)) {\n      pv.priority = convertToNumber(highestValue[0]);\n      pv.presentValue = highestValue[1];\n    }\n    return pv;\n  };\n\n  private static createPriorityArray = () => {\n    return Array.from(range(1, 16)).reduce((o, k) => ((o[k] = null), o), {});\n  };\n\n  private static normalizePriorityArray = (priorityArray: { [p: number]: any } | []): { [k: number]: any } => {\n    if (!priorityArray) {\n      return PointValueCreator.createPriorityArray();\n    }\n    if (priorityArray instanceof Array) {\n      let len = (priorityArray as Array<any>).length;\n      if (len === 0) {\n        return PointValueCreator.createPriorityArray();\n      }\n      if (len !== 16) {\n        throw new Error('Invalid priority array');\n      }\n      return priorityArray.reduce((o, k, i) => ((o[i + 1] = convertToNumber(k)), o), {});\n    }\n    if (typeof priorityArray !== 'object') {\n      throw new Error('Invalid priority array');\n    }\n    let pa = PointValueCreator.createPriorityArray();\n    for (let key in pa) {\n      if (priorityArray.hasOwnProperty(key)) {\n        pa[key] = convertToNumber(priorityArray[key]);\n      }\n    }\n    return pa;\n  };\n}\n\nclass DefaultPointValue implements PointValue {\n  presentValue: any;\n  priority: number;\n  priorityArray: { [p: number]: any };\n\n  isResetState(): boolean {\n    return isNull(this.presentValue) && isNull(this.priority);\n  }\n\n  changedOfValue(prev: PointValue): PointValue {\n    if (!prev) {\n      return this;\n    }\n    if (this.presentValue !== prev.presentValue || this.priority !== prev.priority) {\n      return this;\n    }\n    let pv = new DefaultPointValue();\n    for (const priority in this.priorityArray) {\n      if (this.priorityArray[priority] !== prev.priorityArray[priority]) {\n        pv.priority = convertToNumber(priority);\n        pv.presentValue = this.priorityArray[priority];\n        pv.priorityArray = this.priorityArray;\n        return pv;\n      }\n    }\n    return null;\n  }\n\n  merge(prev: PointValue): PointValue {\n    if (!prev || !prev.priorityArray) {\n      return PointValueCreator.create(this.presentValue, this.priority, this.priorityArray);\n    }\n    if (this.isResetState()) {\n      return PointValueCreator.create(null, 16);\n    }\n    let arr = {};\n    for (const priority in this.priorityArray) {\n      arr[priority] = isNull(this.priorityArray[priority]) && isNotNull(prev.priorityArray[priority])\n                      ? prev.priorityArray[priority] : this.priorityArray[priority];\n    }\n    return PointValueCreator.create(this.presentValue, this.priority, arr);\n  }\n}\n","module.exports = require(\"enumify\");","import { ErrorHandler } from '../utils/decorators';\nimport { isFunction } from '../utils/helper';\nimport { Node } from './node';\n\n//TODO must remove by event lifecycle\nexport class NodeHookHelper {\n\n  @ErrorHandler\n  static execute(node: Node, funcName: string, ...args): Node {\n    if (isFunction(node[funcName])) {\n      node[funcName](args);\n    }\n    return node;\n  }\n}\n","import { RegistryError, RegistryItemExistedError } from '../utils/errors';\nimport { isNotNull, isNull } from '../utils/helper';\nimport { registry_logger } from '../utils/loggers';\n\nconst logger = registry_logger;\n\nexport interface Registry<T> {\n\n  register(obj: T, force?: boolean, key?: string): Promise<T> | T;\n\n  list(): T[];\n\n  size(): number;\n\n  get(key: any): T;\n\n  has(key: any): boolean;\n\n  remove(key: any): T | Promise<T>;\n\n  clear(): void;\n}\n\nexport abstract class AbstractRegistry<T> implements Registry<T> {\n\n  protected _registry: { [key: string]: T };\n\n  protected constructor() {\n    this._registry = {};\n  }\n\n  get(key: any): T {\n    return this._registry[key];\n  }\n\n  has(key: any): boolean {\n    return isNotNull(this.get(key));\n  }\n\n  list(): T[] {\n    return Object.values(this._registry);\n  }\n\n  register(obj: T, force?: boolean, key?: string): Promise<T> | T {\n    const o = this.optimizeBeforeRegister(this.validate(obj, force, key), force);\n    return this.doRegister(key ?? this.createKey(o), o, force);\n  }\n\n  remove(key: any): T | Promise<T> {\n    if (this.enableDebug()) {\n      logger.debug(`Removing ${this.itemName()} by key='${key}'...`);\n    }\n    let obj = this.get(key);\n    delete this._registry[key];\n    return obj;\n  }\n\n  size(): number {\n    return Object.keys(this._registry).length;\n  }\n\n  clear(): void {\n    this._registry = {};\n  }\n\n  protected abstract createKey(obj: T): string | number;\n\n  protected itemName(): string {\n    return 'Item';\n  }\n\n  protected enableDebug(): boolean {\n    return true;\n  }\n\n  protected itemNullable(): boolean {\n    return false;\n  }\n\n  protected optimizeBeforeRegister(obj: T, force: boolean): T {\n    return obj;\n  }\n\n  protected validate(obj: T, force: boolean, key: string): T {\n    if (isNull(obj) && !this.itemNullable()) {\n      throw new RegistryError(`Given ${this.itemName()} is null or undefined`);\n    }\n    return obj;\n  }\n\n  protected doRegister(k: string | number, o: T, force: boolean): Promise<T> | T {\n    if (!force && this.has(k)) {\n      throw new RegistryItemExistedError<T>(`${this.itemName()} with key ${k} is already existed`);\n    }\n    if (this.enableDebug()) {\n      logger.debug(`Registering ${this.itemName()} by key='${k}' and force=${force}...`);\n    }\n    this._registry[k] = o;\n    return o;\n  }\n}\n\nexport class RegistryResult<T> {\n  objects: T[];\n  errors: RegistryError<T>[];\n\n  constructor(objects?: T[], errors?: RegistryError<T>[]) {\n    this.objects = objects ?? [];\n    this.errors = errors ?? [];\n  }\n\n}\n","import { Node } from '../nodes/node';\nimport { Side } from '../nodes/node-interface';\nimport { DispatchNode } from './DispatchNode';\nimport { UNKNOWN_POINT_NAME } from './IPubSub';\nimport { pubSubSingleton } from './PubSub';\n\nexport class PubSubHelpers {\n  static logger = require('logplease').create('pub-sub', { color: 4 });\n\n  static map(that: Node) {\n    if (that.side === Side.server && !(that instanceof DispatchNode)) {\n      const point = PubSubHelpers.getPoint(that);\n      PubSubHelpers.logger.info(`Mapping protocol: ${that.category} having point: ${point}`);\n      pubSubSingleton.addPoint(that.category, point, PubSubHelpers.getDisplayPointName(that), false);\n    }\n  }\n\n  static unMap(that: Node) {\n    if (that.side === Side.server && !(that instanceof DispatchNode)) {\n      const point = PubSubHelpers.getPoint(that);\n      PubSubHelpers.logger.info(`Un-mapping protocol: ${that.category} having point: ${point}`);\n      pubSubSingleton.removePoint(that.category, point);\n    }\n  }\n\n  static renameFunction(that: Node) {\n    if (that.side === Side.server && !(that instanceof DispatchNode)) {\n      const point: string = PubSubHelpers.getPoint(that);\n      PubSubHelpers.logger.info(`Renaming protocol: ${that.category} having point: ${point}`);\n      pubSubSingleton.renamePoint(that.category, point, PubSubHelpers.getDisplayPointName(that));\n    }\n  }\n\n  static dispatch(that: Node, value: any) {\n    if (that.side === Side.server && !(that instanceof DispatchNode)) {\n      const point = PubSubHelpers.getPoint(that);\n      // logger.info(`Dispatching: ${that.protocol} having point: ${point}`);\n      pubSubSingleton.dispatch(that.category, point, value);\n    }\n  }\n\n  static connect(that: DispatchNode) {\n    if (that.side === Side.server && that instanceof DispatchNode) {\n      const protocol: string = that.getSelectedProtocol();\n      const point: string = that.getSelectedPoint();\n      const pointName: string = that.getSelectedPointName();\n      PubSubHelpers.logger.info(`Subscribing protocol: ${protocol} having point: ${point}`);\n      pubSubSingleton.connect(protocol, point, pointName, that);\n    }\n  }\n\n  static disconnect(that: DispatchNode) {\n    if (that.side === Side.server && that instanceof DispatchNode) {\n      const protocol: string = that.getSelectedProtocol();\n      const point: string = that.getSelectedPoint();\n      PubSubHelpers.logger.info(`Un-subscribing protocol: ${protocol} having point: ${point}`);\n      pubSubSingleton.disconnect(protocol, point, that);\n    }\n  }\n\n  static getPoint(that) {\n    const { cid, id } = that;\n    return `${cid}/${id}`;\n  }\n\n  private static getDisplayPointName(that: Node) {\n    let names: string[] = [];\n    let parentNode = that.getParentNode();\n    while (parentNode) {\n      names.push(parentNode.title);\n      parentNode = parentNode.getParentNode();\n    }\n    names = names.reverse();\n    names.push(that.name || that.title || UNKNOWN_POINT_NAME);\n    return names.join('/');\n  }\n}\n","// colours\n// https://material.io/design/material-studies/rally.html#\n// https://storage.googleapis.com/spec-host/mio-staging%2Fmio-design%2F1576174064000%2Fassets%2F17gZmwIGdzlDr-Hl2jTu2SSgc_ATBGaPt%2Fcasestudies-rally-color-palettes.png\n\nlet purpleNum: string = '#262B2F';\nlet purpleLightNum: string = '#262B2F';\nlet greenLightBool: string = '#262B2F';\nlet greenBool: string = '#262B2F';\nlet greyString: string = '#262B2F';\nlet turquoiseFunction: string = '#262B2F';\nlet greyMath: string = '#262B2F';\nlet greyTime: string = '#262B2F';\n// let purpleNum :string = '#00B400'\n\nexport default class Icons {\n  //UI\n\n  //Point images/logos/nube-frog.png\n  static frog: string = '/images/logos/iot-lora-alliance-logo.png';\n  static aiIcon: string = '/images/node-editor/icons/points/ai.svg';\n  static aiColour: string = purpleNum;\n\n  // main\n  static uiMainIcon: string = '/images/node-editor/icons/logic-bool/and2.svg';\n  static uiMainColour: string = purpleNum;\n\n  // logic\n  static logicMainColour: string = greenLightBool;\n\n  static logicAndIcon: string = '/images/node-editor/icons/logic-bool/and2.svg';\n  static logicOrIcon: string = '/images/node-editor/icons/logic-bool/or.svg';\n  static logicNotIcon: string = '/images/node-editor/icons/logic-bool/not.svg';\n\n  static compareGreaterIcon: string = '/images/node-editor/icons/logic-compare/greater-than-equal-solid.svg';\n\n  // Numbers\n\n  // Math\n  static mathMainColour: string = purpleLightNum;\n  static mathMainIcon: string = '/images/node-editor/icons/math-arithmetic/plus-solid.svg';\n\n  static mathAddIcon: string = '/images/node-editor/icons/math-arithmetic/plus-solid.svg';\n  static mathSubIcon: string = '/images/node-editor/icons/math-arithmetic/minus-solid.svg';\n  static mathDivideIcon: string = '/images/node-editor/icons/math-arithmetic/divide-solid.svg';\n  static mathTimesIcon: string = '/images/node-editor/icons/math-arithmetic/times-solid.svg';\n\n  // Bool\n\n  // Time\n\n  // edge\n  // static logicNotIcon: string = '/images/node-editor/icons/logic-bool/not.svg';\n  static edgeNetwork: string = '/images/node-editor/icons/logic-bool/not.svg';\n\n}\n","import { isEqual, merge } from 'lodash';\nimport { Entry } from '../../../../backend/entry';\nimport { singleton as actor } from '../../../../promise-actor';\nimport { ContainerRegistry } from '../../../container';\nimport { Node } from '../../../node';\nimport { Side } from '../../../node-interface';\nimport { NodeSetting, SettingType } from '../../../node-io';\nimport EntryNode from './entry-node';\n\nexport default abstract class Mixin<T extends Entry> extends Node implements EntryNode<T> {\n  properties: {\n    entry: T;\n    is_protected: boolean;\n  };\n  settingFields: {};\n\n  abstract namePrefix(): string;\n\n  abstract updateEntry(body: T): Promise<any>;\n\n  abstract deleteEntry(): Promise<any>;\n\n  abstract createEntry(): Promise<T>;\n\n  abstract syncWithBackend(): void;\n\n  abstract entryFactory(): T;\n\n  entry() {\n    return this.properties.entry;\n  }\n\n  entryId() {\n    return this.entry() && this.entry().entryId();\n  }\n\n  applyEntry(entry: T) {\n    this.properties.entry = Object.assign(this.entryFactory(), entry); // ensures correct inheritance\n    this.title = this.namePrefix() + ' ' + this.properties.entry.label();\n    this.size = this.computeSize();\n    if (this.settings['name']) {\n      this.settings['name'].value = this.entryId();\n    }\n    merge(this.settings, this.createSettingForm(entry));\n    this.broadcastSettingsToClients();\n    this.broadcastTitleToClients();\n  }\n\n  createSettingForm(entry: T): { [name: string]: NodeSetting } {\n    return Object.keys(this.settingFields)\n                 .map(key => ({\n                   [key]: NodeSetting.create({\n                                               description: key,\n                                               value      : entry ? entry[key] : null,\n                                               type       : this.settingFields[key],\n                                             }),\n                 }))\n                 .reduce(merge);\n  }\n\n  deactivate() {\n    this.properties.entry = null;\n  }\n\n  onCreated() {\n    if (this.entry()) {\n      this.applyEntry(this.entry());\n    } else {\n      if (this.side !== Side.server) return;\n      actor.process(() =>\n                      this.createEntry()\n                          .then(entry => this.applyEntry(entry))\n                          .catch(e => {\n                            this.displayError(e, 'Entry not created.');\n                            console.log(e);\n                            // self-destruct\n                            this.deactivate();\n                            //TODO not yet send to client\n                            return this.container.nodeRegistry().remove(this);\n                          }),\n      );\n    }\n  }\n\n  onAdded() {\n    if (this.entry()) {\n      this.applyEntry(this.entry());\n    }\n  }\n\n  onAfterSettingsChange() {\n    if (this.side !== Side.server) return;\n    const update: T = <any>{};\n    const current: T = <any>{};\n    Object.keys(this.settingFields)\n          .filter(key => this.settingFields[key] !== SettingType.READONLY)\n          .forEach(key => {\n            update[key] = this.settings[key].value;\n            current[key] = this.entry() && this.entry()[key];\n          });\n    // update remotely if there are any changes\n    if (!isEqual(current, update)) {\n      actor.process(() =>\n                      this.updateEntry(update).catch(e => this.displayError(e, 'Unable to update entry remotely.')),\n      );\n    }\n  }\n\n  onRemoved() {\n    if (this.side !== Side.server || !this.entry()) return Promise.resolve();\n    return actor.process(() =>\n                           this.deleteEntry().catch(e => {\n                             this.displayError(e, 'Failed to remove entry from backend.');\n                             console.log(e);\n                           }),\n    );\n  }\n\n  findFreeIdentifier(): Promise<string> {\n    return this.getTakenIdentifiers().then(takenIdentifiers => {\n      for (let i = 1; ; i += 1) {\n        const identifier = this.makeIdentifier(i);\n        if (!takenIdentifiers.includes(identifier)) return identifier;\n      }\n    });\n  }\n\n  getTakenIdentifiers(): Promise<string[]> {\n    const globalSiblings = <EntryNode<T>[]>ContainerRegistry.instance().rootContainer().getNodesByClass(this.constructor, true);\n    return Promise.resolve(globalSiblings.filter(n => n.entry()).map(v => v.entry().identifier()));\n  }\n\n  makeIdentifier(n: number): string {\n    return `WIRES_${this.namePrefix().toUpperCase()}_${n}`;\n  }\n}\n","import PlatformDataSource from '../../../database/datasource/PlatformDataSource';\nexport default class SystemUtils {\n  static getDeviceID(self): Promise<string> {\n    return new Promise((resolve, reject) => {\n      if (self?.container?.db) {\n        self.container.db.getNodeType('system/platform', (err, docs) => {\n          if (!err) {\n            if (docs?.length && docs[0]?.properties?.deviceID) {\n              resolve(docs[0].properties.deviceID.trim());\n            } else {\n              reject('No deviceID');\n            }\n          } else {\n            console.log(err);\n            reject(err);\n          }\n        });\n      } else {\n        reject('No DB');\n      }\n    });\n  }\n\n  static getClientID(self): Promise<string> {\n    return new Promise((resolve, reject) => {\n      if (self?.container?.db) {\n        self.container.db.getNodeType('system/platform', (err, docs) => {\n          if (!err) {\n            if (docs?.length && docs[0]?.settings?.['client-id']?.value) {\n              resolve(docs[0].settings['client-id'].value.trim());\n            } else {\n              reject('No clientId');\n            }\n          } else {\n            console.log(err);\n            reject(err);\n          }\n        });\n      } else {\n        reject('No DB');\n      }\n    });\n  }\n\n  static getDeviceIdDb(): Promise<string> {\n    return new Promise((resolve, reject) => {\n      PlatformDataSource.getPlatform().then(e => {\n        if(e){\n          resolve(e.deviceID); //deviceID\n        }\n      }).catch(err => {\n        reject('No deviceID');\n      })\n    });\n  }\n\n  static getClientIdDb(): Promise<string> {\n    return new Promise((resolve, reject) => {\n      PlatformDataSource.getPlatform().then(e => {\n        if(e){\n          resolve(e.clientId); //clientId\n        }\n      }).catch(err => {\n        reject('No clientId');\n      })\n    });\n  }\n\n}\n","import axios from 'axios';\nimport { IPoint } from 'influx';\nimport * as moment from 'moment-timezone';\nimport config from '../../../config';\nimport { Node } from '../../node';\nimport { Side } from '../../node-interface';\nimport { NodeSetting, SettingType, Type } from '../../node-io';\nimport Utils from '../../utils';\nimport SettingUtils from '../../utils/setting-utils';\nimport TimeUtils, { TIME_TYPE } from '../../utils/time-utils';\nimport SystemUtils from '../system/system-utils';\n\nconst Influx = require('influx');\n\nenum HistoryMode {\n  COV = 0,\n  PERIODIC = 1,\n  TRIGGER_ONLY = 2,\n}\n\nenum DataBaseType {\n  POSTGRES = 0,\n  InfluxDB = 1,\n}\n\nexport default class HistoryBase extends Node {\n  // dynamically calculate position when starting\n  histTriggerInput: number;\n  clearStoredHisInput: number;\n  tableNameInput: number;\n  pointNameInput: number;\n  histErrorOutput: number;\n  storedHistCountOutput: number;\n  lastHistExportOutput: number;\n  // configurable parameters from each extended node for extracting values to store on DB\n  valueInput: number;\n  takeValueFromInput: boolean;\n  // extra parameter for nodes\n  interval: number = -1;\n  timeoutFunc: any;\n  dynamicInputStartPosition: number = 2;\n  alarmCount: number = 0;\n  tagCount: number = 0;\n  lastTrigger: boolean = false;\n\n  addHistoryConfiguration() {\n    this.addInput('histTrigger', Type.BOOLEAN);\n    this.addInput('clearStoredHis', Type.BOOLEAN);\n    this.addOutput('histError', Type.ANY);\n    this.addOutput('storedHistCount', Type.NUMBER);\n    this.addOutput('lastHistExport', Type.STRING);\n\n    /**\n     * History settings\n     */\n    this.settings['history_group'] = NodeSetting.create({\n      description: 'History Settings',\n      value: '',\n      type: SettingType.GROUP,\n    });\n    this.settings['databaseType'] = NodeSetting.create({\n      description: 'Database Type',\n      type: SettingType.DROPDOWN,\n      config: {\n        items: [\n          { value: DataBaseType.POSTGRES, text: 'Postgres' },\n          { value: DataBaseType.InfluxDB, text: 'InfluxDB' },\n        ],\n      },\n      value: DataBaseType.POSTGRES,\n    });\n    this.settings['enable'] = NodeSetting.create({\n      description: 'History Enable',\n      value: false,\n      type: SettingType.BOOLEAN,\n    });\n\n    // THESE SETTINGS FOR INFLUX HISTORY STORAGE -----------------\n    this.settings['tableName'] = NodeSetting.create({\n      description: 'Measurement Name',\n      value: '',\n      type: SettingType.STRING,\n    });\n    // END OF INFLUX SPECIFIC SETTINGS ---------------------------\n\n    this.addInputWithSettings('pointName', Type.STRING, '', 'Point Name');\n    this.settings['historyMode'] = NodeSetting.create({\n      description: 'History Logging Mode',\n      type: SettingType.DROPDOWN,\n      config: {\n        items: [\n          { value: HistoryMode.COV, text: 'Change Of Value (COV)' },\n          { value: HistoryMode.PERIODIC, text: 'Periodic' },\n          { value: HistoryMode.TRIGGER_ONLY, text: 'Trigger Only' },\n        ],\n      },\n      value: HistoryMode.COV,\n    });\n    this.settings['dataType'] = NodeSetting.create({\n      description: 'Data type for storing',\n      type: SettingType.DROPDOWN,\n      config: {\n        items: [\n          { value: Type.NUMBER, text: 'Number' },\n          { value: Type.BOOLEAN, text: 'Boolean' },\n          { value: Type.STRING, text: 'String' },\n        ],\n      },\n      value: Type.NUMBER,\n    });\n    this.settings['threshold'] = NodeSetting.create({\n      description: 'COV Threshold',\n      value: 0,\n      type: SettingType.NUMBER,\n    });\n    this.settings['period'] = NodeSetting.create({\n      description: 'Logging Interval',\n      value: 15,\n      type: SettingType.NUMBER,\n    });\n    this.settings['periodUnits'] = NodeSetting.create({\n      description: 'Units',\n      type: SettingType.DROPDOWN,\n      config: {\n        items: [\n          { value: TIME_TYPE.MILLISECONDS, text: 'Milliseconds' },\n          { value: TIME_TYPE.SECONDS, text: 'Seconds' },\n          { value: TIME_TYPE.MINUTES, text: 'Minutes' },\n          { value: TIME_TYPE.HOURS, text: 'Hours' },\n        ],\n      },\n      value: TIME_TYPE.MINUTES,\n    });\n    this.settings['storage-limit'] = NodeSetting.create({\n      description: 'Local Storage Limit (Max 50)',\n      value: 25,\n      type: SettingType.NUMBER,\n    });\n    this.settings['minuteRoundValue'] = NodeSetting.create({\n      description: 'Round minutes up in increments of',\n      value: 0,\n      type: SettingType.NUMBER,\n    });\n    this.settings['decimals'] = NodeSetting.create({\n      description: 'Decimal Places (Limit 5)',\n      value: 3,\n      type: SettingType.NUMBER,\n    });\n    this.settings['timeAsString'] = NodeSetting.create({\n      description: 'Display Timestamp as',\n      type: SettingType.DROPDOWN,\n      config: {\n        items: [\n          { value: false, text: 'Numeric' },\n          { value: true, text: 'String' },\n        ],\n      },\n      value: true,\n    });\n\n    /**\n     * Alarm settings\n     */\n    this.settings['alarm_group'] = NodeSetting.create({\n      description: 'Alarm Settings',\n      value: '',\n      type: SettingType.GROUP,\n    });\n    this.settings['alarms_count'] = NodeSetting.create({\n      description: 'Alarms Count (Max 10)',\n      value: 0,\n      type: SettingType.NUMBER,\n    });\n\n    /**\n     * Tag settings\n     */\n    this.settings['tags_group'] = NodeSetting.create({\n      description: 'Tag Settings',\n      value: '',\n      type: SettingType.GROUP,\n    });\n    this.settings['tags_count'] = NodeSetting.create({\n      description: 'Tag Count (Max 10)',\n      value: 0,\n      type: SettingType.NUMBER,\n    });\n    this.properties['obj'] = [];\n  }\n\n  setup() {\n    this.addHistoryConfiguration();\n  }\n\n  init(properties) {\n    this.historyFunctionsForAfterSettingsChange(properties['settings'], false);\n    this.lastTrigger = false;\n  }\n\n  /**\n   * When databaseType is selected as POSTGRES it needs to have an extra input tableName\n   * @param settings {object} settings configuration\n   */\n  private changeInputDynamically(settings) {\n    this.assignInputsOutputs();\n    if (this.tableNameInput === -1 && settings['databaseType'].value === DataBaseType.InfluxDB) {\n      if (this.pointNameInput) this.removeInput(this.pointNameInput);\n      this.addInput('[tableName]', Type.STRING, { exist: true, nullable: false, hidden: false });\n      this.addInput('[pointName]', Type.STRING, { exist: true, nullable: false, hidden: false });\n    } else if (this.tableNameInput !== -1 && settings['databaseType'].value === DataBaseType.POSTGRES) {\n      if (this.pointNameInput) this.removeInput(this.pointNameInput);\n      this.removeInput(this.tableNameInput);\n      this.addInput('[pointName]', Type.STRING, { exist: true, nullable: false, hidden: false });\n    }\n  }\n\n  onAdded() {\n    this.assignInputsOutputs();\n    this.resetOutputs();\n    this.doPeriodicHistoryFunctions();\n  }\n\n  async onInputUpdated() {\n    if (this.getInputData(this.clearStoredHisInput)) {\n      this.properties['obj'] = [];\n      this.updateHistoryCountOutput();\n    }\n    await this.doNonPeriodicHistoryFunctions();\n  }\n\n  async onAfterSettingsChange() {\n    this.historyFunctionsForAfterSettingsChange();\n    await this.doNonPeriodicHistoryFunctions();\n    this.doPeriodicHistoryFunctions();\n  }\n\n  onRemoved() {\n    clearInterval(this.timeoutFunc);\n  }\n\n  assignInputsOutputs() {\n    this.tableNameInput = -1;\n    this.pointNameInput = -1;\n    for (let input in this.inputs) {\n      if (this.inputs.hasOwnProperty(input)) {\n        if (this.inputs[input].name == 'histTrigger') this.histTriggerInput = Number(input);\n        if (this.inputs[input].name == 'clearStoredHis') this.clearStoredHisInput = Number(input);\n        if (this.inputs[input].name == '[tableName]') this.tableNameInput = Number(input);\n        if (this.inputs[input].name == '[pointName]') this.pointNameInput = Number(input);\n      }\n    }\n\n    for (let output in this.outputs) {\n      if (this.outputs.hasOwnProperty(output)) {\n        if (this.outputs[output].name == 'histError') this.histErrorOutput = Number(output);\n        else if (this.outputs[output].name == 'storedHistCount') this.storedHistCountOutput = Number(output);\n        else if (this.outputs[output].name == 'lastHistExport') this.lastHistExportOutput = Number(output);\n      }\n    }\n  }\n\n  addHistorySettingsConfig(valueInput: number = 0, takeValueFromInput: boolean = true) {\n    if (!this.settingConfigs.hasOwnProperty('groups') || !this.settingConfigs.hasOwnProperty('conditions')) {\n      this.setSettingsConfig({\n        groups: this.settingConfigs['groups'] || [],\n        conditions: this.settingConfigs['conditions'] || {},\n      });\n    }\n    this.settingConfigs.groups.push({ period: { weight: 2 }, periodUnits: {} });\n    this.settingConfigs.conditions['tableName'] = setting => {\n      return setting['databaseType'].value === DataBaseType.InfluxDB;\n    };\n    this.settingConfigs.conditions['threshold'] = setting => {\n      return setting['historyMode'].value === HistoryMode.COV;\n    };\n    this.settingConfigs.conditions['period'] = setting => {\n      return setting['historyMode'].value === HistoryMode.PERIODIC;\n    };\n    this.settingConfigs.conditions['periodUnits'] = setting => {\n      return setting['historyMode'].value === HistoryMode.PERIODIC;\n    };\n    this.settingConfigs.conditions['alarms_count'] = setting => {\n      return setting['databaseType'].value === DataBaseType.InfluxDB;\n    };\n    this.settingConfigs.conditions['tags_count'] = setting => {\n      return setting['databaseType'].value === DataBaseType.InfluxDB;\n    };\n\n    this.valueInput = valueInput;\n    this.takeValueFromInput = takeValueFromInput;\n  }\n\n  resetOutputs() {\n    this.updateHistoryCountOutput();\n  }\n\n  async doNonPeriodicHistoryFunctions() {\n    if (this.side !== Side.server) return;\n    if (!this.settings['enable'].value) return;\n    let input = null;\n    if (this.takeValueFromInput) {\n      input = this.getInputData(this.valueInput);\n    } else {\n      input = this.outputs[this.valueInput].data;\n    }\n\n    if (this.checkTriggered()) {\n      await this.storeLogEntry(input);\n    } else if (this.checkCOV(input)) {\n      await this.storeLogEntry(input);\n    }\n\n    if (this.properties['obj'].length > 0) await this.trySendStoredData();\n  }\n\n  async trySendStoredData() {\n    let decimals = this.settings['decimals'].value;\n    decimals = Utils.clamp(decimals, 0, 5);\n\n    const points: IPoint[] = [];\n    this.properties['obj'].forEach(log => {\n      const dataType = this.settings['dataType'].value;\n      log.payload = this.convertInput(log.payload, dataType, decimals);\n\n      const tagList = {};\n      tagList['point'] = this.getInputData(this.pointNameInput) || 'undefined';\n      Object.keys(log).map(key => {\n        if (key !== 'payload' && key !== 'timestamp' && key !== 'tags') {\n          tagList[key] = log[key];\n        }\n      });\n      for (let i = 0; i < 10; i++) {\n        tagList['tag' + (i + 1)] = log['tags'][i] || null;\n      }\n      points.push({\n        measurement: this.getInputData(this.tableNameInput),\n        fields: { val: log.payload },\n        timestamp: moment(log.timestamp).valueOf() * 1000000, // it only supports unix nano seconds dates\n        tags: tagList,\n      });\n    });\n\n    //////////////////////////////////////////////////////////////////////////\n    // This section should be replaced with the history storage mode of choice.\n    let errorFlag = false;\n    if (this.settings['databaseType'].value === DataBaseType.POSTGRES) {\n      // For Multiple points in 1 push\n      let clientIdFromPlat;\n      let deviceIdFromPlat;\n      try {\n        clientIdFromPlat = await SystemUtils.getClientIdDb();\n      } catch (e) {\n        clientIdFromPlat = 'unknownClientID';\n      }\n      try {\n        deviceIdFromPlat = await SystemUtils.getDeviceIdDb();\n      } catch (e) {\n        deviceIdFromPlat = 'unknownDeviceID';\n      }\n      const multiPointPost = points.map(point => ({\n        deviceid: deviceIdFromPlat,\n        clientid: clientIdFromPlat,\n        val: point.fields.val,\n        point: point.tags.point,\n        ts: moment(Number(point.timestamp) / 1000000).toISOString(), // we can do better than this\n      }));\n\n      const that = this;\n      const pgUrl = config.pg.baseURL;\n      try {\n        await axios({\n          method: 'post',\n          url: pgUrl,\n          data: multiPointPost,\n        });\n      } catch (error) {\n        this.setOutputData(that.histErrorOutput, String(error));\n        errorFlag = true;\n      }\n    } else if (DataBaseType.InfluxDB === DataBaseType.InfluxDB) {\n      const writeOptions = {};\n\n      const { protocol, host, port, databaseName, username, password } = config.influxDb;\n      const client = new Influx.InfluxDB({\n        host,\n        port,\n        protocol: protocol === 'https' ? 'https' : 'http',\n        database: databaseName,\n        username,\n        password,\n      });\n      try {\n        await client.writePoints(points, writeOptions);\n      } catch (err) {\n        this.setOutputData(this.histErrorOutput, String(err));\n        this.debugErr(err);\n        errorFlag = true;\n      }\n    }\n    /////////////////////////////////////////////////////////////\n\n    if (!errorFlag) {\n      this.properties['obj'] = [];\n      this.setOutputData(this.histErrorOutput, '');\n      this.settings['timeAsString'].value\n        ? this.setOutputData(this.lastHistExportOutput, moment().format(), true)\n        : this.setOutputData(this.lastHistExportOutput, moment().valueOf(), true);\n      this.updateHistoryCountOutput();\n    }\n  }\n\n  /**\n   * After settings changes this method needs to call\n   * @param configSettings {object}, if we want to set different settings name in input\n   * @param save {boolean}, need to persist the changes or not; when save = false, it needs to save later\n   */\n  historyFunctionsForAfterSettingsChange(configSettings = null, save: boolean = true) {\n    this.changeInputDynamically(configSettings || this.settings);\n    this.assignInputsOutputs();\n    if (this.settings['databaseType'].value === DataBaseType.POSTGRES) {\n      this.settings['alarms_count'].value = 0;\n      this.settings['tags_count'].value = 0;\n    }\n    this.dynamicInputStartPosition = this.pointNameInput + 1;\n    this.changeAlarmsCount(this.settings['alarms_count'].value);\n    this.renameAlarmInputs(configSettings);\n    this.changeTagsCount(this.settings['tags_count'].value);\n    if (save) {\n      this.persistProperties(true, false, true, false);\n    }\n  }\n\n  async storeLogEntry(input) {\n    if (input == null) return;\n    // cap the amount of data that can be stored\n    const storageLimit = Utils.clamp(this.settings['storage-limit'].value, 0, 50);\n    const minuteRound = Utils.clamp(this.settings['minuteRoundValue'].value, 0, 60);\n    const now = minuteRound ? TimeUtils.nearestFutureMinutes(minuteRound, moment()) : moment();\n    // object data\n    const msg = {\n      payload: input,\n      timestamp: now.toISOString(),\n    };\n    // add alarm values\n    for (let i = this.dynamicInputStartPosition; i < this.dynamicInputStartPosition + this.alarmCount; i++) {\n      let alarmNum = i - this.dynamicInputStartPosition + 1;\n      let alarmName = this.settings['alarm' + alarmNum].value || 'alarm' + alarmNum;\n      msg[alarmName] = this.getInputData(i) || 'null';\n    }\n    // add tags\n    const tags = [];\n    let j = 1;\n    while (j <= this.tagCount) {\n      if (this.settings['tag' + j].value) tags.push(this.settings['tag' + j].value);\n      j++;\n    }\n    msg['tags'] = tags;\n\n    // build an object\n    this.properties['obj'].push(msg);\n    while (this.properties['obj'].length > storageLimit) {\n      this.properties['obj'].shift();\n    }\n    this.properties['lastHistoryValue'] = input;\n    this.persistProperties(false, true, false, false);\n    this.updateHistoryCountOutput();\n  }\n\n  checkTriggered() {\n    const trigger = this.getInputData(this.histTriggerInput) || false;\n    const result = this.inputs[this.histTriggerInput].updated && trigger && !this.lastTrigger;\n    this.lastTrigger = trigger;\n    return result;\n  }\n\n  checkCOV(input) {\n    if (this.settings['historyMode'].value === HistoryMode.COV) {\n      const threshold = this.settings['threshold'].value;\n      if (!isNaN(input) && !isNaN(this.properties['lastHistoryValue'])) {\n        return Math.abs(Number(input) - Number(this.properties['lastHistoryValue'])) >= threshold;\n      } else {\n        return input !== this.properties['lastHistoryValue'];\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Sets values in periodic period when HistoryMode is `PERIODIC`\n   */\n  doPeriodicHistoryFunctions() {\n    if (this.side !== Side.server) return;\n    const enable = this.settings['enable'].value;\n    const isPeriodic = this.settings['historyMode'].value === HistoryMode.PERIODIC;\n    if (!enable || !isPeriodic) {\n      if (this.timeoutFunc) {\n        this.interval = -1;\n        clearInterval(this.timeoutFunc);\n        this.debugInfo('Clearing Periodic interval data insertion...');\n      }\n    }\n    if (enable && isPeriodic) {\n      const interval = TimeUtils.timeConvert(this.settings['period'].value, this.settings['periodUnits'].value);\n      if (this.interval !== interval) {\n        clearInterval(this.timeoutFunc);\n        this.timeoutFunc = setInterval(async () => {\n          let input = null;\n          if (this.takeValueFromInput) input = this.getInputData(this.valueInput);\n          else input = this.outputs[this.valueInput].data;\n          await this.storeLogEntry(input);\n          if (this.properties['obj'].length > 0) await this.trySendStoredData();\n        }, interval);\n        this.interval = interval;\n        this.debugInfo(`Setting Periodic Period of: ${interval} ms`);\n      }\n    }\n  }\n\n  changeAlarmsCount(targetCount) {\n    targetCount = Utils.clamp(targetCount, 0, 10);\n    this.settings['alarms_count'].value = targetCount;\n    let diff = targetCount - this.alarmCount;\n    if (diff == 0) return;\n\n    // add inputs\n    this.changeInputsCount(targetCount + this.dynamicInputStartPosition, Type.STRING);\n\n    // change settings for topics\n    const alarmsToAdd = {};\n    if (diff > 0) {\n      for (let i = this.alarmCount + 1; i <= targetCount; i++) {\n        alarmsToAdd['alarm' + i] = {\n          description: 'Alarm ' + i,\n          value: '',\n          type: SettingType.STRING,\n        };\n      }\n      // for making things consistent on UI settings side\n      this.settings = SettingUtils.insertIntoObjectAtPosition(\n        this.settings,\n        alarmsToAdd,\n        this.alarmCount == 0 ? 'alarms_count' : 'alarm' + this.alarmCount,\n      );\n    } else if (diff < 0) {\n      for (let i = this.alarmCount; i > targetCount; i--) {\n        delete this.settings['alarm' + i];\n      }\n    }\n    this.alarmCount = targetCount;\n  }\n\n  renameAlarmInputs(configSettings) {\n    for (let i = 1; i <= this.alarmCount; i++) {\n      let alarm = this.settings['alarm' + i].value;\n      if (!alarm && configSettings) {\n        alarm = (configSettings['alarm' + i] && configSettings['alarm' + i].value) || '';\n      }\n      if (alarm.length > 20) alarm = '...' + alarm.substr(alarm.length - 20, 20);\n      this.inputs[this.dynamicInputStartPosition + i - 1].name = 'alarm' + i + ' | ' + alarm;\n    }\n  }\n\n  changeTagsCount(targetCount) {\n    targetCount = Utils.clamp(targetCount, 0, 10);\n    this.settings['tags_count'].value = targetCount;\n    let diff = targetCount - this.tagCount;\n    if (diff == 0) return;\n\n    // change settings for topics\n    const tagsToAdd = {};\n    if (diff > 0) {\n      for (let i = this.tagCount + 1; i <= targetCount; i++) {\n        tagsToAdd['tag' + i] = {\n          description: 'Tag ' + i,\n          value: '',\n          type: SettingType.STRING,\n        };\n      }\n      // for making things consistent on UI settings side\n      this.settings = SettingUtils.insertIntoObjectAtPosition(\n        this.settings,\n        tagsToAdd,\n        this.tagCount === 0 ? 'tags_count' : 'tag' + this.tagCount,\n      );\n    } else if (diff < 0) {\n      for (let i = this.tagCount; i > targetCount; i--) {\n        delete this.settings['tag' + i];\n      }\n    }\n    this.tagCount = targetCount;\n  }\n\n  updateHistoryCountOutput() {\n    this.setOutputData(this.storedHistCountOutput, (this.properties['obj'] && this.properties['obj'].length) || 0);\n  }\n}\n","module.exports = require(\"jsonata\");","import axios from 'axios';\nimport { Colors, create } from 'logplease';\nimport Utils from '../../../utils';\nimport { ADD_POINT, REMOVE_POINT, SEND_PAYLOAD_TO_CHILD } from './edge-constant';\n\nconst logger = create('edge-utils', { color: Colors.Grey });\n\nexport default class Edge28Utils {\n  static sendPayloadToChild(childNode, payload) {\n    if (childNode && childNode['subscribe']) {\n      childNode['subscribe'](this.createMessage(SEND_PAYLOAD_TO_CHILD, payload));\n    } else {\n      logger.error('Child Node is not available on sendPayloadToChild');\n    }\n  }\n\n  static addPoint(parentNode, payload) {\n    if (parentNode && parentNode['subscribe']) {\n      parentNode['subscribe'](this.createMessage(ADD_POINT, payload));\n    } else {\n      logger.error('Parent Node is not available on addPoint');\n    }\n  }\n\n  static removePoint(parentNode, payload) {\n    if (parentNode && parentNode['subscribe']) {\n      parentNode['subscribe'](this.createMessage(REMOVE_POINT, payload));\n    } else {\n      logger.error('Parent Node is not available on removePoint');\n    }\n  }\n\n  private static createMessage(action, payload = null) {\n    return { action, payload };\n  }\n\n  static async writePointValue(\n    host: string,\n    port: number,\n    apiVer: string,\n    pointType: string,\n    pointId: string,\n    val: number,\n    priority: number,\n  ): Promise<any> {\n    const url = `${Utils.buildUrl(host, port)}/api/${apiVer}/write/${pointType}/${pointId}/${val}/${priority}`;\n    const pointValue = await axios.get(url);\n    return pointValue.data;\n  }\n}\n","export const GET_BACNET_CLIENT = 'GET_BACNET_CLIENT';\nexport const GET_NETWORK_NODE = 'GET_NETWORK_NODE';\nexport const GET_POINTS = 'GET_POINTS';\nexport const GET_PRESENT_VALUE = 'GET_PRESENT_VALUE';\nexport const SEND_PAYLOAD_TO_CHILD = 'SEND_PAYLOAD_TO_CHILD';\nexport const SEND_POINT_VALUE = 'SEND_POINT_VALUE';\nexport const ADD_POINT = 'ADD_POINT';\nexport const REMOVE_POINT = 'REMOVE_POINT';\nexport const ADD_DEVICE = 'ADD_DEVICE';\nexport const REMOVE_DEVICE = 'REMOVE_DEVICE'; \nexport const WRITE_PRESENT_VALUE = 'WRITE_PRESENT_VALUE'; \n","import { Colors, create } from 'logplease';\nimport { PointModel, PointOutput, PointValue, PointValueCreator } from '../../../../backend/models/point-model';\nimport { ErrorHandler } from '../../../../utils/decorators';\nimport { Constructor, isEmpty, isFunction, range } from '../../../../utils/helper';\nimport { IMessageSubscriber, Observer } from '../../../../utils/pattern';\nimport { Node, NodeSettingConfig } from '../../../node';\nimport { Side } from '../../../node-interface';\nimport { InputSetting, NodeInput, NodeSetting, SettingType, Type } from '../../../node-io';\nimport { createLegacyLinkHandler } from '../../../node-link';\nimport { NodeInputEvaluation } from '../../node-mixin';\nimport { InputMethod } from './point-node-utils';\n\nconst logger = create('observer', { color: Colors.Yellow });\n\n/**\n * The logical handler manages data point state that can be changed by UI or external system.\n *\n * It is business logic that separated to UI component to easy extendable and testable\n */\nexport interface DataPointFlowHandler<T extends PointModel> extends IMessageSubscriber {\n\n  /**\n   * Init point data by setting object model\n   * @param settings Node Settings\n   * @return point data\n   */\n  initializePointBySettingObject(settings?: { [name: string]: NodeSetting }): T;\n\n  /**\n   * Init point data by each setting input\n   * @param settings Node Settings\n   * @return point data\n   */\n  initializePointBySettingInput(settings?: { [name: string]: NodeSetting }): T;\n\n  /**\n   * Compare previous point and current point then transfer COV to server/client\n   * @param current current point data\n   * @param prev previous point data\n   * @return the updated point with COV\n   */\n  handleOnUpdate(current: T, prev?: T): T;\n\n  /**\n   * Listen a changes from external system\n   * @param incomingMessage point data\n   * @return {any}\n   */\n  onReceiveMessage(incomingMessage: any): void;\n\n  /**\n   * Notify COV to observers\n   * @param point point data\n   * @param observers list of observer that watch an output change\n   */\n  notifyOutput(point: T, observers: Observer<PointOutput<T>>[]): void;\n\n}\n\n/**\n * Defines list observers that watch an output change on point\n */\nexport interface HasPointOutputObservers<T extends PointModel> {\n\n  pointObservers(): Observer<PointOutput<T>>[];\n\n}\n\nexport class MockHasPointOutputObservers<T extends PointModel> implements HasPointOutputObservers<T> {\n  private static readonly MOCK = new MockHasPointOutputObservers();\n\n  static cast(object: any) {\n    if (isEmpty(object)) {\n      return MockHasPointOutputObservers.MOCK;\n    }\n    if (isFunction(object['pointObservers'])) {\n      return object;\n    }\n    return MockHasPointOutputObservers.MOCK;\n  }\n\n  pointObservers(): Observer<PointOutput<T>>[] {\n    return [];\n  }\n\n  private MockHasPointOutputObservers() {\n  }\n}\n\n/**\n * Defines object must apply DataPointFlowHandler\n */\nexport interface HasDataPointFlowHandler<T extends PointModel> {\n\n  flowHandler(): DataPointFlowHandler<T>;\n\n}\n\n/**\n * Defines self observer to update Node Output by point data\n */\nexport class PointOutputObserver<T extends PointModel> implements Observer<PointOutput<T>> {\n\n  node: Node;\n  outputSlots: { output: number, priority: number, priorityArray: number };\n\n  constructor(node: Node, outputSlots: { output: number, priority: number, priorityArray: number }) {\n    this.node = node;\n    this.outputSlots = outputSlots;\n  }\n\n  update(data: PointOutput<T>): void {\n    logger.debug(\n      `Node ${this.node.getReadableId()} receives point: ${data.point.identifier()} - ${data.connStatus.status.label}`);\n    this.node.setOutputData(this.outputSlots.output, data.point?.pointValue?.presentValue);\n    this.node.setOutputData(this.outputSlots.priority, data.point?.pointValue?.priority);\n    this.node.setOutputData(this.outputSlots.priorityArray, data.point?.pointValue?.priorityArray);\n  }\n}\n\nexport abstract class CentralizedPointOutputObserver<T extends PointModel> implements Observer<PointOutput<T>> {\n\n  protected node: Node;\n  protected outputSlot: number;\n\n  constructor(node: Node, outputSlot: number) {\n    this.node = node;\n    this.outputSlot = outputSlot;\n  }\n\n  update(data: PointOutput<T>): void {\n    logger.debug(\n      `Node ${this.node.getReadableId()} receives point: ${data.point.identifier()} - ${data.connStatus.status.label}`);\n    this.node.setOutputData(this.outputSlot,\n                            { ...(this.node.outputs[this.outputSlot]?.data ?? {}), ...this.convert(data) });\n  }\n\n  protected abstract convert(data: PointOutput<T>): object;\n}\n\n/**\n * Define mixin to implement common point data workflow\n * @param {TBase} Base\n * @return {PointNodeMixinBase}\n * @constructor\n */\nexport function PointNodeMixin<TBase extends Constructor<Node>, T extends PointModel>(Base: TBase) {\n  abstract class PointNodeMixinBase extends Base\n    implements NodeInputEvaluation, HasPointOutputObservers<T>, HasDataPointFlowHandler<T> {\n    private readonly _iPresentValue = 'present-value';\n    private readonly _iPriority = 'point-priority';\n    private readonly _iPriorityArrayLot = 'inputPriorityArray';\n    private readonly _iPriorityArrayJson = 'priority-array';\n    private readonly _sInputGroup = 'inputGroup';\n    private readonly _sInputMethod = 'inputMethod';\n    private readonly _sDecimal = 'decimals';\n    private readonly _oOut = 'out';\n    private readonly _oPriority = 'priority';\n    private readonly _oPriorityArray = 'priority-array';\n\n    abstract flowHandler(): DataPointFlowHandler<T>;\n\n    onAdded(): void {\n      if (this.side !== Side.server) {\n        return;\n      }\n      let current = this.flowHandler().initializePointBySettingObject();\n      this.flowHandler().notifyOutput(this.flowHandler().handleOnUpdate(current), this.pointObservers());\n      this.updateTitle();\n    }\n\n    onAfterSettingsChange(oldSettings, oldName?): void {\n      this.handleDynamicInput(oldSettings);\n      if (this.side !== Side.server) {\n        return;\n      }\n      let prev = this.flowHandler().initializePointBySettingObject(oldSettings);\n      let current = this.flowHandler().initializePointBySettingInput();\n      this.flowHandler().notifyOutput(this.flowHandler().handleOnUpdate(current, prev), this.pointObservers());\n      this.updateTitle();\n    }\n\n    onInputUpdated(): void {\n      if (this.side !== Side.server) {\n        return;\n      }\n      let prev = this.flowHandler().initializePointBySettingObject();\n      this.reEvaluateSettingByInput(this.inputs, this.settings);\n      let current = this.flowHandler().initializePointBySettingInput();\n      this.flowHandler().notifyOutput(this.flowHandler().handleOnUpdate(current, prev), this.pointObservers());\n      this.updateTitle();\n    }\n\n    @ErrorHandler\n    reEvaluateSettingByInput(inputs: { [p: number]: NodeInput }, settings: { [p: string]: NodeSetting }): void {\n      if (isFunction(super['reEvaluateSettingByInput'])) {\n        super['reEvaluateSettingByInput'](inputs, settings);\n      }\n      let inputMethod = InputMethod.enumValueOf(this.settings[this._sInputMethod].value);\n      let pv: PointValue;\n      if (inputMethod === InputMethod.VALUE_PRIORITY) {\n        let presentValue = this.inputs[this.valueInputIdx()].updated\n                           ? this.inputs[this.valueInputIdx()].data\n                           : this.settings[this._iPresentValue].value;\n        let priority = this.inputs[this.priorityInputIdx()].updated\n                       ? this.inputs[this.priorityInputIdx()].data\n                       : this.settings[this._iPriority].value;\n        pv = PointValueCreator.init(presentValue, priority);\n        this.settings[this._iPresentValue].value = pv.presentValue;\n        this.settings[this._iPriority].value = pv.priority;\n      }\n      if (inputMethod === InputMethod.PRIORITY_ARRAY_LOT) {\n        let startIdx = this.priorityArrayInputIdx();\n        pv = PointValueCreator.by(Array.from(range(startIdx + 1, startIdx + 16)).map(i => this.inputs[i].data));\n        this.settings[this._iPriorityArrayLot].value = pv.priorityArray;\n      }\n      if (inputMethod === InputMethod.PRIORITY_ARRAY_JSON) {\n        pv = PointValueCreator.by(this.inputs[this.priorityArrayInputIdx()].data);\n        this.settings[this._iPriorityArrayJson].value = pv.priorityArray;\n      }\n    }\n\n    pointObservers(): Observer<PointOutput<T>>[] {\n      return [new PointOutputObserver<T>(this, {\n        output       : this.valueOutputIdx(),\n        priority     : this.priorityOutputIdx(),\n        priorityArray: this.priorityArrayOutputIdx(),\n      })];\n    }\n\n    protected abstract modelSettingKey(): string;\n\n    protected abstract valueInputIdx(): number;\n\n    protected abstract valueOutputIdx(): number;\n\n    protected abstract computeTitle(): string;\n\n    protected priorityInputIdx(): number {\n      return this.valueInputIdx() + 1;\n    }\n\n    protected priorityArrayInputIdx(): number {\n      return this.priorityInputIdx() + 1;\n    }\n\n    protected priorityOutputIdx(): number {\n      return this.valueOutputIdx() + 1;\n    }\n\n    protected priorityArrayOutputIdx(): number {\n      return this.priorityOutputIdx() + 1;\n    }\n\n    protected presentValueType(): Type {\n      return Type.NUMBER;\n    }\n\n    /**\n     * Add required properties in {@link NodeSetting}, {@link NodeInput} and {@link NodeOutput}\n     * @returns Setting configuration\n     */\n    protected mixinPointValueInputOutput(): NodeSettingConfig {\n      this.addOutput(this._oOut, Type.NUMBER);\n      this.addOutput(this._oPriority, Type.NUMBER);\n      this.addOutput(this._oPriorityArray, Type.JSON);\n\n      this.settings[this.modelSettingKey()] = NodeSetting.create({ description: '', value: null });\n      this.settings[this._iPriorityArrayLot] = NodeSetting.create({ description: '', value: null });\n      this.settings[this._sInputGroup] = NodeSetting.create({ description: 'Input Settings', value: '', type: SettingType.GROUP });\n      this.settings[this._sDecimal] = NodeSetting.create({ description: 'Decimal Places (Limit 5)', value: 3, type: SettingType.NUMBER });\n      this.settings[this._sInputMethod] = NodeSetting.create({\n        description: 'Input Method',\n        type       : SettingType.DROPDOWN,\n        config     : { items: InputMethod.items() },\n        value      : InputMethod.VALUE_PRIORITY.enumKey,\n      });\n      this.addInputWithSettings(this._iPresentValue, this.presentValueType(), null, 'Present Value');\n      this.addInputWithSettings(this._iPriority, Type.NUMBER, 16, 'Point Priority');\n      this.addInputWithSettings(this._iPriorityArrayJson, Type.JSON, null, 'Priority Array in JSON or Array');\n      this.inputs[this.priorityArrayInputIdx()].setting.hidden = true;\n      let cfg = {};\n      for (let value of range(1, 16)) {\n        this.settings[`in${value}`] = NodeSetting.create({ description: `in${value}`, type: SettingType.BOOLEAN, value: false });\n        this.addInput(`[in${value}]`, Type.NUMBER, { exist: false, nullable: true, hidden: true } as InputSetting);\n        cfg[`in${value}`] = () => InputMethod.PRIORITY_ARRAY_LOT.enumKey === this.settings[this._sInputMethod].value;\n      }\n      cfg[this.modelSettingKey()] = () => false;\n      cfg[this._iPresentValue] = () => InputMethod.VALUE_PRIORITY.enumKey === this.settings[this._sInputMethod].value;\n      cfg[this._iPriority] = () => InputMethod.VALUE_PRIORITY.enumKey === this.settings[this._sInputMethod].value;\n      cfg[this._iPriorityArrayLot] = () => false;\n      cfg[this._iPriorityArrayJson] = () => false;\n      return { conditions: cfg };\n    }\n\n    protected updateTitle(): void {\n      this.title = this.computeTitle();\n      this.broadcastSettingsToClients();\n    }\n\n    protected createPointValue(st: { [name: string]: NodeSetting }): PointValue {\n      let inputMethod = InputMethod.enumValueOf(st['inputMethod'].value);\n      let pv: PointValue;\n      let cur: PointValue = this.settings[this.modelSettingKey()]?.value?.pointValue;\n      if (inputMethod === InputMethod.VALUE_PRIORITY) {\n        pv = PointValueCreator.create(st[this._iPresentValue].value, st[this._iPriority].value, cur?.priorityArray);\n      }\n      if (inputMethod === InputMethod.PRIORITY_ARRAY_LOT) {\n        pv = PointValueCreator.by(st[this._iPriorityArrayLot].value);\n      }\n      if (inputMethod === InputMethod.PRIORITY_ARRAY_JSON) {\n        pv = PointValueCreator.by(st[this._iPriorityArrayJson].value);\n      }\n      return pv.merge(cur);\n    }\n\n    private handleDynamicInput(oldSettings: { [name: string]: NodeSetting }) {\n      let oldInputMethod = InputMethod.enumValueOf(oldSettings ? oldSettings[this._sInputMethod]?.value : null);\n      let newInputMethod = InputMethod.enumValueOf(this.settings[this._sInputMethod].value);\n      if (oldInputMethod && oldInputMethod === newInputMethod && newInputMethod !== InputMethod.PRIORITY_ARRAY_LOT) {\n        return;\n      }\n      if (newInputMethod === InputMethod.VALUE_PRIORITY) {\n        this.hideInput(false, ...range(this.priorityArrayInputIdx(), this.priorityArrayInputIdx() + 16));\n        this.showInput(false, this.valueInputIdx(), this.priorityInputIdx());\n      }\n      if (newInputMethod === InputMethod.PRIORITY_ARRAY_LOT) {\n        let hidden = [this.valueInputIdx(), this.priorityInputIdx(), this.priorityArrayInputIdx()];\n        let show = [];\n        for (let idx of range(this.priorityArrayInputIdx() + 1, this.priorityArrayInputIdx() + 16)) {\n          this.settings[`in${idx - this.priorityArrayInputIdx()}`].value ? show.push(idx) : hidden.push(idx);\n        }\n        this.hideInput(false, ...hidden);\n        this.showInput(false, ...show);\n      }\n      if (newInputMethod === InputMethod.PRIORITY_ARRAY_JSON) {\n        this.hideInput(\n          false,\n          this.valueInputIdx(),\n          this.priorityInputIdx(),\n          ...range(this.priorityArrayInputIdx() + 1, this.priorityArrayInputIdx() + 16),\n        );\n        this.showInput(false, this.priorityArrayInputIdx());\n      }\n      createLegacyLinkHandler(this).recomputeInputLinks();\n    }\n  }\n\n  return PointNodeMixinBase;\n}\n","import { isEmpty, isFunction } from './helper';\n\nexport interface NodeStoreItem {\n  identifier: string;\n  nodeId: string;\n  enabled: boolean;\n  callback?: Function;\n  prev?: NodeStoreItem;\n  data?: any;\n  lenient?: boolean;\n}\n\nexport interface ICentralizedListener {\n\n  listen({ action, payload }: { action: string; payload: NodeStoreItem }): any;\n\n}\n\n/**\n * To guard some error import without parent\n */\nexport class MockCentralizedListener implements ICentralizedListener {\n\n  static readonly LISTENER = new MockCentralizedListener();\n\n  static cast(object: any) {\n    if (isEmpty(object)){\n      return MockCentralizedListener.LISTENER;\n    }\n    if (isFunction(object['listen'])){\n      return object;\n    }\n    return MockCentralizedListener.LISTENER;\n  }\n\n  listen({ action, payload }: { action: string; payload: NodeStoreItem }): any {\n    throw new Error(`Not found handler or parent to process action ${action}`);\n  }\n\n  private MockCentralizedListener() {\n  }\n}\n\nexport interface HasCentralizedListener {\n\n  listener(): ICentralizedListener;\n\n}\n\n/**\n * Represents for observer to listen change from {@link Observable}\n */\nexport interface Observer<D extends EventData> {\n\n  /**\n   * Do update from receive information\n   * @param {EventData} data Event data\n   * @param {string} eventSourceId? event source\n   */\n  update(data: D, eventSourceId?: string): void;\n\n}\n\nexport interface Observable<D extends EventData> {\n\n  /**\n   * Defines list of observer\n   * @return {Observer<D>[]} observers\n   * @see Observer\n   */\n  observers(): Observer<D>[];\n\n  /**\n   * Notify to observers the changed of data\n   * @param {D} data Event data\n   * @param {string} eventSourceId\n   * @see observers\n   */\n  notify(data: D, eventSourceId?: string): void;\n\n}\n\nexport interface EventData {\n\n}\n\nexport class DefaultObservable<D extends EventData> implements Observable<D> {\n\n  list: Observer<D>[];\n\n  constructor(list: Observer<D>[]) {\n    this.list = list;\n  }\n\n  observers(): Observer<D>[] {\n    return this.list;\n  }\n\n  notify(data: D, eventSourceId?: string): void {\n    this.observers()?.forEach(observer => observer.update(data, eventSourceId));\n  }\n}\n\nexport interface IMessageConverter {\n  /**\n   * Convert outcome data before using\n   * @param outcomeData\n   * @returns {string} message in string\n   */\n  onConvertMessage(outcomeData: any): string;\n}\n\nexport interface IMessageSubscriber {\n  /**\n   * Handles incoming message from external resource\n   * @param incomingMessage\n   */\n  onReceiveMessage(incomingMessage: any): void;\n}\n","import { Colors, create } from 'logplease';\nimport { ConnectionStatus } from '../../../utils/enums';\nimport { Constructor, isFunction } from '../../../utils/helper';\nimport { IdGenerator } from '../../../utils/id-generator';\nimport { EventData, Observer } from '../../../utils/pattern';\nimport { Node, NodeSettingConfig } from '../../node';\nimport { Type } from '../../node-io';\nimport { AbleEnableNode, HasEnabled } from '../node-mixin';\n\nconst logger = create('observer', { color: Colors.Yellow });\n\nexport class ConnectionOutput implements EventData {\n\n  status: ConnectionStatus;\n  error?: string;\n\n  constructor(status: ConnectionStatus, error?: string) {\n    this.status = status;\n    this.error = error;\n  }\n\n}\n\nexport interface ExternalConnectionNode extends HasEnabled {\n\n  isConnConnected(): boolean;\n\n  getConnectionStatus(): ConnectionStatus;\n\n  statusObserver(): Observer<ConnectionOutput>;\n\n}\n\nexport interface DependantConnectionNode extends ExternalConnectionNode {\n\n  parentConnectionNode(): ExternalConnectionNode;\n\n}\n\nexport class ConnectionOutputObserver implements Observer<ConnectionOutput> {\n\n  node: Node;\n  outputSlots: { status: number, error: number };\n\n  constructor(node: Node, outputSlots: { status: number, error: number }) {\n    this.node = node;\n    this.outputSlots = outputSlots;\n  }\n\n  update(data: ConnectionOutput, eventSourceId?: string): void {\n    let current = ConnectionStatus.lookupByLabel(this.node.outputs[this.outputSlots.status].data);\n    let nodeId = IdGenerator.createNodeId(this.node.cid, this.node.id);\n    let itselfConnected = isFunction(this.node['isConnConnected']) ? this.node['isConnConnected']() : true;\n    if (eventSourceId && nodeId !== eventSourceId && (current?.isError() || !itselfConnected)) {\n      return;\n    }\n    logger.debug(`Node ${this.node.getReadableId()} receives connection status '${data.status.label}' ` +\n                 `from source id '${eventSourceId ?? nodeId}'`);\n    this.node.setOutputData(this.outputSlots.status, data.status.label);\n    this.node.setOutputData(this.outputSlots.error, data.error ?? '');\n  }\n\n}\n\nexport function ExternalConnectionNodeMixin<TBase extends Constructor<Node>>(Base: TBase) {\n  abstract class ExternalConnectionNodeMixinBase extends AbleEnableNode(Base) implements ExternalConnectionNode {\n\n    protected connectionStatus: ConnectionStatus = ConnectionStatus.UNCONNECTED;\n\n    statusObserver(): Observer<ConnectionOutput> {\n      return new ConnectionOutputObserver(this, { status: this.statusOutputIdx(), error: this.errorOutputIdx() });\n    }\n\n    getConnectionStatus(): ConnectionStatus {\n      if (!this.isEnabled()) {\n        return (this.connectionStatus = ConnectionStatus.UNCONNECTED);\n      }\n      if (this.connectionStatus?.isError()) {\n        return this.connectionStatus;\n      }\n      this.connectionStatus = this.isConnConnected() ? ConnectionStatus.CONNECTED : ConnectionStatus.DISCONNECTED;\n      return this.connectionStatus;\n    }\n\n    abstract isConnConnected(): boolean;\n\n    protected abstract statusOutputIdx(): number;\n\n    protected errorOutputIdx(): number {\n      return this.statusOutputIdx() + 1;\n    }\n\n    protected mixinConnectionStatusOutput(): NodeSettingConfig {\n      this.addOutput('status', Type.STRING);\n      this.addOutput('error', Type.STRING);\n      this.setOutputData(this.statusOutputIdx(), this.getConnectionStatus().label);\n      return {};\n    }\n\n  }\n\n  return ExternalConnectionNodeMixinBase;\n}\n\nexport function DependantConnectionNodeMixin<TBase extends Constructor<Node>>(Base: TBase) {\n  abstract class DependantConnectionNodeMixinBase extends ExternalConnectionNodeMixin(Base)\n    implements DependantConnectionNode {\n\n    onAdded(): void {\n      this.executeFunction('onAdded');\n    }\n\n    onAfterSettingsChange(oldSettings, oldName?): void {\n      this.executeFunction('onAfterSettingsChange', oldSettings, oldName);\n    }\n\n    onInputUpdated(): void {\n      this.executeFunction('onInputUpdated');\n    }\n\n    parentConnectionNode(): ExternalConnectionNode {\n      let parentNode = this.getParentNode();\n      if (parentNode && isFunction(parentNode['getConnectionStatus'])) {\n        return <ExternalConnectionNode><unknown>parentNode;\n      }\n      return null;\n    }\n\n    isConnConnected(): boolean {\n      let isParentConnected = this.parentConnectionNode()?.getConnectionStatus().isConnected() ?? false;\n      return this.isEnabled() && isParentConnected;\n    }\n\n    protected handleError(err: Error, func: string): void {\n      this.debug(`Error when executing function ${func} in node ${this.getReadableId()} - ${err.stack}`);\n      this.statusObserver().update(new ConnectionOutput(this.getConnectionStatus(), err.message));\n    }\n\n    protected executeFunction(func: string, ...args) {\n      try {\n        if (super[func] && isFunction(super[func])) {\n          super[func](...args);\n        }\n        this.connectionStatus = null;\n        this.statusObserver().update(new ConnectionOutput(this.getConnectionStatus()));\n      } catch (err) {\n        this.connectionStatus = ConnectionStatus.ERROR;\n        this.handleError(err, func);\n      }\n    }\n  }\n\n  return DependantConnectionNodeMixinBase;\n}\n","module.exports = require(\"mqtt\");","module.exports = require(\"path\");","/**\n * Created by Derwish (derwish.pro@gmail.com) on 16.02.2017.\n * License: http://www.gnu.org/licenses/gpl-3.0.txt\n */\n\nimport AuthUserDatabase from './database/AuthUserDatabase';\nimport DashboardDatabase from './database/DashboardDatabase';\nimport HistorianDatabase from './database/HistorianDatabase';\nimport NodeDatabase from './database/NodeDatabase';\nimport ScheduleDatabase from './database/ScheduleDatabase';\nimport UserDatabase from './database/UserDatabase';\n\nexport interface Database extends AuthUserDatabase, DashboardDatabase, NodeDatabase, ScheduleDatabase,\n                                  HistorianDatabase, UserDatabase {\n}\n\nexport class AsyncDbHelper {\n\n  static noArgs<R>(db: Database, func: Function): Promise<R> {\n    return new Promise<R>((resolve, reject) => func.call(db, this.cbHandler(reject, resolve)));\n  }\n\n  static oneArgs<R>(db: Database, func: Function, param: any): Promise<R> {\n    return new Promise<R>((resolve, reject) => func.call(db, param, this.cbHandler(reject, resolve)));\n  }\n\n  static twoArgs<R>(db: Database, func: Function, param1: any, param2: any): Promise<R> {\n    return new Promise<R>((resolve, reject) => func.call(db, param1, param2, this.cbHandler(reject, resolve)));\n  }\n\n  static threeArgs<R>(db: Database, func: Function, param1: any, param2: any, param3: any): Promise<R> {\n    return new Promise<R>((resolve, reject) => func.call(db, param1, param2, param3, this.cbHandler(reject, resolve)));\n  }\n\n  private static cbHandler<R>(reject: (reason?: any) => void, resolve: (value?: (PromiseLike<R> | R)) => void) {\n    return (err?: Error, result?: R) => {\n      if (err) {\n        reject(err);\n      } else {\n        resolve(result);\n      }\n    };\n  }\n}\n","import {\n  DEVICE_CONTAINER_TYPE,\n  EDGE_CONTAINER_TYPE,\n  GROUP_CONTAINER_TYPE,\n  MODULE_NODE_TYPE,\n  NETWORK_CONTAINER_TYPE,\n  POINT_NODE_TYPE,\n} from '../nodes/constants';\n\nexport interface Entry {\n  entryId(): string;\n\n  identifier(): string;\n\n  nodeType(): string;\n\n  label(): string;\n}\n\nabstract class NormalEntry implements Entry {\n  id: string;\n  code: string;\n  readonly _nodeType: string;\n\n  entryId(): string {\n    return this.id;\n  }\n\n  identifier(): string {\n    return this.code;\n  }\n\n  nodeType(): string {\n    return this._nodeType;\n  }\n\n  label(): string {\n    return this.identifier() || this.entryId();\n  }\n}\n\nexport class Edge extends NormalEntry {\n  customer_code: string;\n  side_code: string;\n  model: string;\n  firmware_version: string;\n  data_version: string;\n  readonly _nodeType = EDGE_CONTAINER_TYPE;\n}\n\nexport class Network extends NormalEntry {\n  protocol: string;\n  state: string;\n  readonly _nodeType = NETWORK_CONTAINER_TYPE;\n}\n\nexport class Device extends NormalEntry {\n  manufacturer: string;\n  protocol: string;\n  state: string;\n  type: string;\n  readonly _nodeType = DEVICE_CONTAINER_TYPE;\n}\n\nexport class Folder extends NormalEntry {\n  name: string;\n  readonly _nodeType = GROUP_CONTAINER_TYPE;\n\n  label(): string {\n    return this.name || super.label();\n  }\n}\n\nexport class Point extends NormalEntry {\n  edge: string;\n  enabled: boolean;\n  kind: string;\n  measure_unit: string;\n  network: string;\n  offset: number;\n  precision: number;\n  protocol: string;\n  type: string;\n  readonly _nodeType = POINT_NODE_TYPE;\n}\n\nexport class Service implements Entry {\n  service_id: string;\n  service_name: string;\n  service_type: string;\n  version: string;\n  published_by: string;\n  state: string;\n  readonly created_at: string;\n  readonly modified_at: string;\n  readonly deploy_id: string;\n  readonly deploy_location: string;\n  readonly _nodeType = MODULE_NODE_TYPE;\n\n  entryId(): string {\n    return this.service_id;\n  }\n\n  identifier(): string {\n    return this.service_name;\n  }\n\n  nodeType(): string {\n    return this._nodeType;\n  }\n\n  label(): string {\n    return `${this.identifier()} ${this.version}` || this.entryId();\n  }\n}\n\nexport class PointData {\n  priority: number;\n  value: number;\n  point: string;\n  priority_values: number[];\n}\n","import { Logger } from 'logplease';\nimport { Database } from '../../database/database';\nimport { ContainerRegistry } from '../../nodes/container';\nimport { createNodeDbHelper, NodeDbHelper } from '../../nodes/node-db-helper';\nimport {\n  ContainerRegistryMetadata,\n  isFolderNode,\n  SerializedFolderNode,\n  SerializedNode,\n} from '../../nodes/node-interface';\nimport { BaseIdGenerator } from '../../utils/id-generator';\nimport { node_service_logger } from '../../utils/loggers';\n\nexport abstract class NodeService {\n\n  protected readonly cRegistry: ContainerRegistryMetadata;\n  protected readonly dbHelper: NodeDbHelper;\n  protected readonly idGenerator: BaseIdGenerator;\n  protected readonly logger: Logger = node_service_logger;\n\n  constructor(cRegistry?: ContainerRegistryMetadata, dbHelper?: NodeDbHelper, idGenerator?: BaseIdGenerator) {\n    this.cRegistry = cRegistry ?? ContainerRegistry.instance();\n    this.idGenerator = idGenerator ?? this.cRegistry.idGenerator;\n    this.dbHelper = dbHelper ?? createNodeDbHelper();\n  }\n\n  protected getNodesInContainer(database: Database, nodes: SerializedNode[]): Promise<SerializedNode[]> {\n    const list = nodes.filter(n => isFolderNode(n))\n                      .map(n => <SerializedFolderNode>n)\n                      .map(n => this.dbHelper.listByContainer(database, n.sub_container.id)\n                                    .then(nodes => this.getNodesInContainer(database, nodes)));\n    return Promise.all([Promise.resolve(nodes), ...list]).then(r => r.flatMap(nodes => nodes));\n  }\n}\n","\n\nimport { exec } from 'child_process';\nimport OsUtils from '../../nodes/utils/os-utils';\nconst network = require('network'); //for getting IPs and gateway address\nconst cp = require('child_process');\nconst set_ip_address = require('set-ip-address'); //for setting IPs\nconst ip = require('ip'); //for checking if IPs are valid\n\nexport default class IpAddressUtils {\n  /**\n   * Get current network info\n   * @returns {object}\n   */\n  static getActiveNetworks() {\n    return new Promise<Array<any>>(resolve => {\n      network.get_interfaces_list(function (err, obj) {\n        if (err) resolve();\n        if (!obj) resolve();\n        resolve(obj);\n      });\n    });\n  }\n\n  /**\n   * Runs a system command\n   * @param iface {string} Name of the physical system interface\n   * @param upDown {string} system command options\n   * @returns {Promise}\n   *\n   */\n\n  static networkUpDown(iface: string, upDown: string) {\n    return new Promise((resolve, reject) => {\n      let command = `sudo ip link set ${iface} ${upDown}`;\n      // let command = 'sudo ip link set' +' '+ iface +' '+upDown\n      exec(command, (err, stdout, stderr) => {\n        if (err) {\n          reject({ err, stderr });\n        } else {\n          resolve(stdout);\n        }\n      });\n    });\n  }\n\n  /** check if new ip is valid\n   * @description Method for checking and build an ip address\n   * @param {string} newIP pass in an ip address\n   * @param {string} netNetmask pass in an ip net mask\n   * @param {string} newGateway pass in an  ip gateway\n   * @param newNameserver\n   * @returns {object} Will return a validIp: true, ipSubnet: '192.168.15.1/24 or if invalid it will return false\n   */\n\n  static checkIpValid(newIP: string, netNetmask: string, newGateway: string, newNameserver: string) {\n    const checkIP = ip.isV4Format(newIP);\n    const checkNetMask = ip.isV4Format(netNetmask);\n    const checkGateway = ip.isV4Format(newGateway);\n    const nameserver = ip.isV4Format(newNameserver);\n\n    if (checkIP && checkNetMask && checkGateway && nameserver) {\n      return true;\n    } else return false;\n  }\n\n  /**\n   * Gets BBB interface details\n   * @returns {Promise}\n   *\n   */\n  static bbbGetInterfaceDetails() {\n    return new Promise((resolve, reject) => {\n      cp.execSync('connmanctl services', (err, stdout, stderr) => {\n        if (err) {\n          reject({ err, stderr });\n        } else {\n          resolve(\n            stdout\n              .toString()\n              .replace(/\\s/g, '')\n              .substring(8),\n          );\n        }\n      });\n    });\n  }\n\n  /**\n   * Set BBB network as DHCP\n   * @returns {Promise}\n   *\n   */\n  static bbbSetIPDHCP(iface) {\n    return new Promise((resolve, reject) => {\n      const setIpDHCP = `sudo connmanctl config ${iface} --ipv4 dhcp`;\n      cp.execSync(setIpDHCP, (err, stdout, stderr) => {\n        if (err) {\n          reject({ err, stderr });\n        } else {\n          resolve(true);\n        }\n      });\n    });\n  }\n\n  /**\n   * Set BBB network as fixed IP\n   * @returns {Promise}\n   *\n   */\n  static bbbSetIPFixed(iface, ipAddress: string, subnetMask: string, gateway: string) {\n    return new Promise((resolve, reject) => {\n      const setIP = `sudo connmanctl config ${iface} --ipv4 manual ${ipAddress} ${subnetMask} ${gateway} --nameservers 8.8.8.8 8.8.4.4`;\n      cp.execSync(setIP, (err, stdout, stderr) => {\n        if (err) {\n          reject({ err, stderr });\n        } else {\n          resolve(true);\n        }\n      });\n    });\n  }\n\n  /**\n   * Set IP for rubix\n   * @returns {Promise}\n   * will modify the /etc/dhcpcd.conf \n   */\n  static updateIpRubixCompute(interface1Eth, dhcp1Eth: boolean, eth1Ip, eth1Sub, eth1Gate, eth1NameServer, interface2Eth, dhcp2Eth: boolean, eth2Ip, eth2Sub, eth2Gate, eth2NameServer) {\n    return new Promise<any>((resolve, reject) => {\n\n      const msgUpdateIp = 'SET: new ip '\n      const msgIncorrectHost = 'ERROR: incorrect host type'\n      const msgFailToUpdate = 'ERROR: invalid ip settings'\n      const host = 'BCM2835'  //PI BCM2835 //aidan's pc 20L5CTO1WW, MS-7A66\n\n      const interfaceEth1 = interface1Eth\n      const dhcpEth1 = dhcp1Eth\n      const ethIp1 = eth1Ip;\n      const ethSub1 = eth1Sub;\n      const ethGate1 = eth1Gate;\n      const ethNameServer1 = eth1NameServer;\n\n      const interfaceEth2 = interface2Eth\n      const dhcpEth2 = dhcp2Eth\n      const ethIp2 = eth2Ip;\n      const ethSub2 = eth2Sub;\n      const ethGate2 = eth2Gate;\n      const ethNameServer2 = eth2NameServer;\n\n      const checkIpValidEth1 = IpAddressUtils.checkIpValid(\n        ethIp1,\n        ethSub1,\n        ethGate1,\n        ethNameServer1,\n      );\n      const checkIpValidEth2 = IpAddressUtils.checkIpValid(\n        ethIp2,\n        ethSub2,\n        ethGate2,\n        ethNameServer2,\n      );\n\n      console.log(interface1Eth, dhcpEth1, eth1Ip, eth1Sub, eth1Gate, eth1NameServer, interface2Eth, dhcpEth2, eth2Ip, eth2Sub, eth2Gate, eth2NameServer, \"checkIpValidEth1=\", checkIpValidEth1, \"checkIpValidEth2=\", checkIpValidEth2)\n      OsUtils.systemInfo()\n        .then(e => {\n          if (e.system.model === host) {\n            if (checkIpValidEth1 && checkIpValidEth2) {\n              //network update\n              let interfacesArray = [];\n              if (dhcpEth1 === true) {\n                //DHCP\n                console.log(\"dhcpEth1 === true\")\n                const eth1 = {\n                  interface: interfaceEth1,\n                  dhcp: true\n                };\n                interfacesArray.push(eth1);\n              }\n              if (dhcpEth2 === true) {\n                //DHCP\n                console.log(\"dhcpEth2 === true\")\n                const eth2 = {\n                  interface: interfaceEth2,\n                  dhcp: true\n                };\n                interfacesArray.push(eth2);\n              }\n\n              if (dhcpEth1 === false) {\n                //Static\n                console.log(\"dhcpEth1 === false\")\n                const subnetMaskLength = ip.subnet(ethIp1, ethSub1);\n                const eth1 = {\n                  interface: interfaceEth1,\n                  ip_address: ethIp1,\n                  prefix: subnetMaskLength.subnetMaskLength,\n                  gateway: ethGate1,\n                  nameservers: [ethNameServer1],\n                };\n                interfacesArray.push(eth1);\n              }\n\n              if (dhcpEth2 === false) {\n                //Static\n                console.log(\"dhcpEth2 === false\")\n                const subnetMaskLength = ip.subnet(ethIp2, ethSub2);\n                const eth2 = {\n                  interface: interfaceEth2,\n                  ip_address: ethIp2,\n                  prefix: subnetMaskLength.subnetMaskLength,\n                  gateway: ethGate2,\n                  nameservers: [ethNameServer2],\n                };\n                interfacesArray.push(eth2);\n              }\n              console.log(`${msgUpdateIp} ${JSON.stringify(interfacesArray)} @ ${interfaceEth1} @ ${interfaceEth2}`)\n              // resolve(`${msgUpdateIp} ${JSON.stringify(interfacesArray)} @ ${interfaceEth1}`)\n              // set new IP\n              set_ip_address.configure(interfacesArray).then((e) => {\n                console.log(`${msgUpdateIp} ${JSON.stringify(interfacesArray)} @ ${interfaceEth1} @ ${interfaceEth2} msg ${e}`)\n                resolve(`${msgUpdateIp} ${JSON.stringify(interfacesArray)} @ ${interfaceEth1} msg ${e}`)\n              });\n\n            } else {\n              console.log(`${msgFailToUpdate} @ ${interfaceEth1}  @ ${interfaceEth2}`)\n              reject(`${msgFailToUpdate} @ ${interfaceEth1}  @ ${interfaceEth2}`)\n            }\n          } else {\n            console.log(`${msgIncorrectHost} ${e.system.model} @ ${interfaceEth1} @ ${interfaceEth2}`)\n            reject(`${msgIncorrectHost} ${e.system.model} @ ${interfaceEth1} @ ${interfaceEth2}`)\n          }\n        }).catch(err => {\n          console.log(`${msgFailToUpdate} @ ${interfaceEth1} @ ${interfaceEth2} ${err}`)\n          reject(`${msgFailToUpdate} @ ${interfaceEth1} @ ${interfaceEth2} ${err}`)\n        });\n    });\n  }\n\n\n\n}\n","import FileUtils from './file-utils';\n\nexport default class UuidUtils {\n  /**\n   * Generates a UUID 28 digit\n   * @returns {string}\n   */\n  static createUUID = (a: string = ''): string =>\n    a\n      ? ((Number(a) ^ (Math.random() * 16)) >> (Number(a) / 4)).toString(16)\n      : `${1e7}-${1e3}-${4e3}-${8e3}-${1e11}`.replace(/[018]/g, UuidUtils.createUUID);\n  /**\n   * Generates a UUID 8 digit\n   * @returns {string}\n   */\n  static create8DigId = (a: string = ''): string =>\n    a\n      ? ((Number(a) ^ (Math.random() * 16)) >> (Number(a) / 4)).toString(16)\n      : `${1e7}`.replace(/[018]/g, UuidUtils.create8DigId);\n\n  /**\n   * Generates a UUID 12 digit\n   * @returns {string}\n   */\n  static create12DigId = (a: string = ''): string =>\n    a\n      ? ((Number(a) ^ (Math.random() * 16)) >> (Number(a) / 4)).toString(16)\n      : `${1e7}-${4e3}`.replace(/[018]/g, UuidUtils.create12DigId);\n\n  static isUUID(data: string): boolean {\n    const dataArray: string[] = data\n      .toString()\n      .trim()\n      .split('-');\n    return dataArray.length >= 1 && dataArray[0].length === 8;\n  }\n\n  static async isUUIDFile(filePath): Promise<boolean> {\n    try {\n      let fileContent = await FileUtils.readFile(filePath);\n      if (fileContent) {\n        return UuidUtils.isUUID(fileContent);\n      } else return false;\n    } catch (e) {\n      return false;\n    }\n  }\n\n  static async makeUUIDFile(dirPath, fileName): Promise<void> {\n    try {\n      await FileUtils.createDirectory(dirPath);\n      await FileUtils.writeFile(`${dirPath}/${fileName}`, UuidUtils.create8DigId());\n    } catch (e) {\n      throw e;\n    }\n  }\n}\n","export default class ModbusByteOrder {\n  private static TYPES = {\n    INT16: 1,\n    UINT16: 2,\n    INT32: 3,\n    UINT32: 4,\n    FLOAT32: 5,\n    INT64: 6,\n    UINT64: 7,\n    DOUBLE64: 8,\n  };\n  private static ENDIAN = {\n    LEB_BEW: 0, //                 // CD AB LE-Byte BE-Word\n    LEB_LEW: 1, //LE byte, LE word // AB CD LE-Byte LE-Word // default\n    BEB_LEW: 2, //BE byte, LE word // BA DC BE-Byte LE-Word // nube RIO device\n    BEB_BEW: 3, //BE byte, BE word // DC BA BE-Byte BE-Word\n  };\n  static readByteOrder = (buffer, offset: number, type: number, endian: number) => {\n    let TYPES = ModbusByteOrder.TYPES;\n    let ENDIAN = ModbusByteOrder.ENDIAN;\n    let buf;\n    let value;\n    try {\n      if (type <= TYPES.UINT16) {\n        buf = buffer.slice(offset, offset + 2);\n      } else if (type <= TYPES.FLOAT32) {\n        buf = buffer.slice(offset, offset + 4);\n      } else {\n        buf = buffer.slice(offset, offset + 8);\n      }\n      if (endian === ENDIAN.BEB_LEW || (type <= TYPES.UINT16 && endian === ENDIAN.BEB_BEW)) {\n        buf.swap16();\n      } else if (type > TYPES.UINT16 && type <= TYPES.FLOAT32 && endian === ENDIAN.BEB_BEW) {\n        buf.swap32();\n      } else if (type >= TYPES.INT64 && endian === ENDIAN.BEB_BEW) {\n        buf.swap64();\n      }\n    } catch (error) {\n      console.log(`buffer readValue issue in modbus-point-methods. Buffer.alloc ${error}`);\n    }\n    try {\n      switch (type) {\n        case TYPES.INT16:\n          value = buf.readInt16LE(value);\n          break;\n        case TYPES.UINT16:\n          value = buf.readUInt16LE(value);\n          break;\n        case TYPES.INT32:\n          value = buf.readInt32LE(value);\n          break;\n        case TYPES.UINT32:\n          value = buf.readUInt32LE(value);\n          break;\n        case TYPES.FLOAT32:\n          value = buf.readFloatLE(value);\n          break;\n        case TYPES.INT64:\n          // value = buf.readBigInt64LE(BigInt(value)); https://github.com/streamich/memfs/issues/275\n          break;\n        case TYPES.UINT64:\n          // value = buf.readBigUInt64LE(BigInt(value));\n          break;\n        case TYPES.DOUBLE64:\n          value = buf.readDoubleLE(value);\n          break;\n      }\n    } catch (error) {\n      console.log(`buffer readValue issue in modbus-point-methods. switch case ${error}`);\n    }\n\n    return value;\n  };\n\n  static writeValue = (value: number, type: number, endian: number) => {\n    let TYPES = ModbusByteOrder.TYPES;\n    let ENDIAN = ModbusByteOrder.ENDIAN;\n    let buf;\n    try {\n      if (type <= TYPES.UINT16) {\n        buf = Buffer.alloc(2);\n      } else if (type <= TYPES.FLOAT32) {\n        buf = Buffer.alloc(4);\n      } else {\n        buf = Buffer.alloc(8);\n      }\n    } catch (error) {\n      console.log(`buffer writeValue issue in modbus-point-methods. Buffer.alloc  ${error}`);\n    }\n    try {\n      switch (type) {\n        case TYPES.INT16:\n          buf.writeInt16LE(value);\n          break;\n        case TYPES.UINT16:\n          buf.writeUInt16LE(value);\n          break;\n        case TYPES.INT32:\n          buf.writeInt32LE(value);\n          break;\n        case TYPES.UINT32:\n          buf.writeUInt32LE(value);\n          break;\n        case TYPES.FLOAT32:\n          buf.writeFloatLE(value);\n          break;\n        case TYPES.INT64:\n          // buf.writeBigInt64LE(BigInt(value)); TODO https://github.com/streamich/memfs/issues/275\n          break;\n        case TYPES.UINT64:\n          // buf.writeBigUInt64LE(BigInt(value));\n          break;\n        case TYPES.DOUBLE64:\n          buf.writeDoubleLE(value);\n          break;\n      }\n    } catch (error) {\n      console.log(`buffer writeValue issue in modbus-point-methods :switch case ${error}`);\n    }\n    try {\n      if (endian === ENDIAN.BEB_LEW || (type <= TYPES.UINT16 && endian === ENDIAN.BEB_BEW)) {\n        buf.swap16();\n      } else if (type > TYPES.UINT16 && type <= TYPES.FLOAT32 && endian === ENDIAN.BEB_BEW) {\n        buf.swap32();\n      } else if (type >= TYPES.INT64 && endian === ENDIAN.BEB_BEW) {\n        buf.swap64();\n      }\n      return buf;\n    } catch (error) {\n      console.log(`buffer writeValue issue in modbus-point-methods :buf.swap() ${error}`);\n    }\n  };\n}\n","import config from '../../../config';\n\nexport const bsaClientConfig = path => {\n  let cfg = config.bsa.paths[path];\n  if (!cfg) {\n    return null;\n  }\n  return {\n    baseURL: config.bsa.baseURL,\n    auth: {\n      username: config.bsa.username,\n      password: config.bsa.password,\n    },\n    url: cfg.path,\n    headers: {\n      'Content-Type': cfg.contentType ?? 'application/json',\n      'Accept': cfg.accept ?? 'application/json',\n    },\n  };\n};\n","module.exports = require(\"influx\");","/*\n * PsychroLib (version 2.4.0) (https://github.com/psychrometrics/psychrolib).\n * Copyright (c) 2018-2020 The PsychroLib Contributors for the current library implementation.\n * Copyright (c) 2017 ASHRAE Handbook — Fundamentals for ASHRAE equations and coefficients.\n * Licensed under the MIT License.\n */\n\nvar psychrolib = function Psychrometrics() {\n  /**\n   * Module overview\n   *  Contains functions for calculating thermodynamic properties of gas-vapor mixtures\n   *  and standard atmosphere suitable for most engineering, physical and meteorological\n   *  applications.\n   *\n   *  Most of the functions are an implementation of the formulae found in the\n   *  2017 ASHRAE Handbook - Fundamentals, in both International System (SI),\n   *  and Imperial (IP) units. Please refer to the information included in\n   *  each function for their respective reference.\n   *\n   * Example (e.g. Node.JS)\n   *  // Import the PsychroLib\n   *  var psychrolib = require('psychrolib.js')\n   *  // Set unit system\n   *  psychrolib.SetUnitSystem(psychrolib.SI)\n   *  // Calculate the dew point temperature for a dry bulb temperature of 25 C and a relative humidity of 80%\n   *  var TDewPoint = psychrolib.GetTDewPointFromRelHum(25.0, 0.80);\n   *  console.log('TDewPoint: %d', TDewPoint);\n   * 21.3094\n   *\n   * Copyright\n   *  - For the current library implementation\n   *     Copyright (c) 2018-2020 The PsychroLib Contributors.\n   *  - For equations and coefficients published ASHRAE Handbook — Fundamentals, Chapter 1\n   *     Copyright (c) 2017 ASHRAE Handbook — Fundamentals (https://www.ashrae.org)\n   *\n   * License\n   *  MIT (https://github.com/psychrometrics/psychrolib/LICENSE.txt)\n   *\n   * Note from the Authors\n   *  We have made every effort to ensure that the code is adequate, however, we make no\n   *  representation with respect to its accuracy. Use at your own risk. Should you notice\n   *  an error, or if you have a suggestion, please notify us through GitHub at\n   *  https://github.com/psychrometrics/psychrolib/issues.\n   */\n\n  // Standard functions\n  var log = Math.log;\n  var exp = Math.exp;\n  var pow = Math.pow;\n  var min = Math.min;\n  var max = Math.max;\n  var abs = Math.abs;\n\n  /******************************************************************************************************\n   * Global constants\n   *****************************************************************************************************/\n\n  var ZERO_FAHRENHEIT_AS_RANKINE = 459.67; // Zero degree Fahrenheit (°F) expressed as degree Rankine (°R).\n  // Reference: ASHRAE Handbook - Fundamentals (2017) ch. 39.\n\n  var ZERO_CELSIUS_AS_KELVIN = 273.15; // Zero degree Celsius (°C) expressed as Kelvin (K).\n  // Reference: ASHRAE Handbook - Fundamentals (2017) ch. 39.\n\n  var R_DA_IP = 53.35; // Universal gas constant for dry air (IP version) in ft lb_Force lb_DryAir⁻¹ R⁻¹.\n  // Reference: ASHRAE Handbook - Fundamentals (2017) ch. 1.\n\n  var R_DA_SI = 287.042; // Universal gas constant for dry air (SI version) in J kg_DryAir⁻¹ K⁻¹.\n  // Reference: ASHRAE Handbook - Fundamentals (2017) ch. 1.\n\n  var INVALID = -99999; // Invalid value (dimensionless).\n\n  var MAX_ITER_COUNT = 100; // Maximum number of iterations before exiting while loops.\n\n  var MIN_HUM_RATIO = 1e-7; // Minimum acceptable humidity ratio used/returned by any functions.\n  // Any value above 0 or below the MIN_HUM_RATIO will be reset to this value.\n\n  var FREEZING_POINT_WATER_IP = 32.0; // Freezing point of water in Fahrenheit.\n\n  var FREEZING_POINT_WATER_SI = 0.0; // Freezing point of water in Celsius.\n\n  var TRIPLE_POINT_WATER_IP = 32.018; // Triple point of water in Fahrenheit.\n\n  var TRIPLE_POINT_WATER_SI = 0.01; // Triple point of water in Celsius.\n\n  /******************************************************************************************************\n   * Helper functions\n   *****************************************************************************************************/\n\n  // Systems of units (IP or SI)\n  var PSYCHROLIB_UNITS = undefined;\n  var PSYCHROLIB_TOLERANCE = undefined;\n\n  this.IP = 1;\n  this.SI = 2;\n\n  // Function to set the system of units\n  // Note: this function *HAS TO BE CALLED* before the library can be used\n  this.SetUnitSystem = function(UnitSystem) {\n    if (UnitSystem != this.IP && UnitSystem != this.SI) {\n      throw new Error('UnitSystem must be IP or SI');\n    }\n    PSYCHROLIB_UNITS = UnitSystem;\n    // Define tolerance of temperature calculations\n    // The tolerance is the same in IP and SI\n    if (PSYCHROLIB_UNITS == this.IP) PSYCHROLIB_TOLERANCE = (0.001 * 9) / 5;\n    else PSYCHROLIB_TOLERANCE = 0.001;\n  };\n\n  // Return system of units in use.\n  this.GetUnitSystem = function() {\n    return PSYCHROLIB_UNITS;\n  };\n\n  // Function to check if the current system of units is SI or IP\n  // The function exits in error if the system of units is undefined\n  this.isIP = function() {\n    if (PSYCHROLIB_UNITS == this.IP) return true;\n    else if (PSYCHROLIB_UNITS == this.SI) return false;\n    else throw new Error('Unit system is not defined');\n  };\n\n  /******************************************************************************************************\n   * Conversion between temperature units\n   *****************************************************************************************************/\n\n  // Utility function to convert temperature to degree Rankine (°R)\n  // given temperature in degree Fahrenheit (°F).\n  // Reference: ASHRAE Handbook - Fundamentals (2017) ch. 1 section 3\n  this.GetTRankineFromTFahrenheit = function(T_F) {\n    return T_F + ZERO_FAHRENHEIT_AS_RANKINE;\n  }; /* exact */\n\n  // Utility function to convert temperature to degree Fahrenheit (°F)\n  // given temperature in degree Rankine (°R).\n  // Reference: ASHRAE Handbook - Fundamentals (2017) ch. 1 section 3\n  this.GetTFahrenheitFromTRankine = function(T_R) {\n    return T_R - ZERO_FAHRENHEIT_AS_RANKINE;\n  }; /* exact */\n\n  // Utility function to convert temperature to Kelvin (K)\n  // given temperature in degree Celsius (°C).\n  // Reference: ASHRAE Handbook - Fundamentals (2017) ch. 1 section 3\n  this.GetTKelvinFromTCelsius = function(T_C) {\n    return T_C + ZERO_CELSIUS_AS_KELVIN;\n  }; /* exact */\n\n  // Utility function to convert temperature to degree Celsius (°C)\n  // given temperature in Kelvin (K).\n  // Reference: ASHRAE Handbook - Fundamentals (2017) ch. 1 section 3\n  this.GetTCelsiusFromTKelvin = function(T_K) {\n    return T_K - ZERO_CELSIUS_AS_KELVIN;\n  }; /* exact */\n\n  // Utility function to convert degree Fahrenheit (°F) to degree Celsius (°C)\n  this.GetTCelsiusFromTFahrenheit = function(T_F) {\n    return (T_F - 32) / 1.8;\n  };\n\n  // Utility function to convert degree Celsius (°C) to degree Fahrenheit  (°F)\n  this.GetTFahrenheitFromTCelsius = function(T_C) {\n    return T_C * 1.8 + 32;\n  };\n\n  this.GetTRankineFromTCelsius = function(T_C) {\n    var T_F = T_C * 1.8 + 32;\n    return T_F + ZERO_FAHRENHEIT_AS_RANKINE;\n  };\n\n  this.GetTKelvinFromTFahrenheit = function(T_F) {\n    var T_C = (T_F - 32) / 1.8;\n    return T_C + ZERO_CELSIUS_AS_KELVIN;\n  };\n\n  this.GetTFahrenheitFromTKelvin = function(T_K) {\n    var T_C = T_K - ZERO_CELSIUS_AS_KELVIN;\n    return T_C * 1.8 + 32;\n  };\n\n  this.GetTRankineFromTKelvin = function(T_K) {\n    var T_C = T_K - ZERO_CELSIUS_AS_KELVIN;\n    var T_F = T_C * 1.8 + 32;\n    return T_F + ZERO_FAHRENHEIT_AS_RANKINE;\n  };\n\n  this.GetTCelsiusFromTRankine = function(T_R) {\n    var T_F = T_R - ZERO_FAHRENHEIT_AS_RANKINE;\n    return (T_F - 32) / 1.8;\n  };\n\n  this.GetTKelvinFromTRankine = function(T_R) {\n    var T_F = T_R - ZERO_FAHRENHEIT_AS_RANKINE;\n    var T_C = (T_F - 32) / 1.8;\n    return T_C + ZERO_CELSIUS_AS_KELVIN;\n  };\n\n  /******************************************************************************************************\n   * Conversions between dew point, wet bulb, and relative humidity\n   *****************************************************************************************************/\n\n  // Return wet-bulb temperature given dry-bulb temperature, dew-point temperature, and pressure.\n  // Reference: ASHRAE Handbook - Fundamentals (2017) ch. 1\n  this.GetTWetBulbFromTDewPoint = function(\n    // (o) Wet bulb temperature in °F [IP] or °C [SI]\n    TDryBulb, // (i) Dry bulb temperature in °F [IP] or °C [SI]\n    TDewPoint, // (i) Dew point temperature in °F [IP] or °C [SI]\n    Pressure, // (i) Atmospheric pressure in Psi [IP] or Pa [SI]\n  ) {\n    var HumRatio;\n\n    if (!(TDewPoint <= TDryBulb))\n      throw new Error('Dew point temperature is above dry bulb temperature');\n\n    HumRatio = this.GetHumRatioFromTDewPoint(TDewPoint, Pressure);\n    return this.GetTWetBulbFromHumRatio(TDryBulb, HumRatio, Pressure);\n  };\n\n  // Return wet-bulb temperature given dry-bulb temperature, relative humidity, and pressure.\n  // Reference: ASHRAE Handbook - Fundamentals (2017) ch. 1\n  this.GetTWetBulbFromRelHum = function(\n    // (o) Wet bulb temperature in °F [IP] or °C [SI]\n    TDryBulb, // (i) Dry bulb temperature in °F [IP] or °C [SI]\n    RelHum, // (i) Relative humidity [0-1]\n    Pressure, // (i) Atmospheric pressure in Psi [IP] or Pa [SI]\n  ) {\n    var HumRatio;\n\n    if (!(RelHum >= 0 && RelHum <= 1)) throw new Error('Relative humidity is outside range [0,1]');\n\n    HumRatio = this.GetHumRatioFromRelHum(TDryBulb, RelHum, Pressure);\n    return this.GetTWetBulbFromHumRatio(TDryBulb, HumRatio, Pressure);\n  };\n\n  // Return relative humidity given dry-bulb temperature and dew-point temperature.\n  // Reference: ASHRAE Handbook - Fundamentals (2017) ch. 1 eqn 22\n  this.GetRelHumFromTDewPoint = function(\n    // (o) Relative humidity [0-1]\n    TDryBulb, // (i) Dry bulb temperature in °F [IP] or °C [SI]\n    TDewPoint, // (i) Dew point temperature in °F [IP] or °C [SI]\n  ) {\n    var VapPres, SatVapPres;\n\n    if (!(TDewPoint <= TDryBulb))\n      throw new Error('Dew point temperature is above dry bulb temperature');\n\n    VapPres = this.GetSatVapPres(TDewPoint);\n    SatVapPres = this.GetSatVapPres(TDryBulb);\n    return VapPres / SatVapPres;\n  };\n\n  // Return relative humidity given dry-bulb temperature, wet bulb temperature and pressure.\n  // Reference: ASHRAE Handbook - Fundamentals (2017) ch. 1\n  this.GetRelHumFromTWetBulb = function(\n    // (o) Relative humidity [0-1]\n    TDryBulb, // (i) Dry bulb temperature in °F [IP] or °C [SI]\n    TWetBulb, // (i) Wet bulb temperature in °F [IP] or °C [SI]\n    Pressure, // (i) Atmospheric pressure in Psi [IP] or Pa [SI]\n  ) {\n    var HumRatio;\n\n    if (!(TWetBulb <= TDryBulb))\n      throw new Error('Wet bulb temperature is above dry bulb temperature');\n\n    HumRatio = this.GetHumRatioFromTWetBulb(TDryBulb, TWetBulb, Pressure);\n    return this.GetRelHumFromHumRatio(TDryBulb, HumRatio, Pressure);\n  };\n\n  // Return dew-point temperature given dry-bulb temperature and relative humidity.\n  // Reference: ASHRAE Handbook - Fundamentals (2017) ch. 1\n  this.GetTDewPointFromRelHum = function(\n    // (o) Dew Point temperature in °F [IP] or °C [SI]\n    TDryBulb, // (i) Dry bulb temperature in °F [IP] or °C [SI]\n    RelHum, // (i) Relative humidity [0-1]\n  ) {\n    var VapPres;\n\n    if (!(RelHum >= 0 && RelHum <= 1)) throw new Error('Relative humidity is outside range [0,1]');\n\n    VapPres = this.GetVapPresFromRelHum(TDryBulb, RelHum);\n    return this.GetTDewPointFromVapPres(TDryBulb, VapPres);\n  };\n\n  // Return dew-point temperature given dry-bulb temperature, wet-bulb temperature, and pressure.\n  // Reference: ASHRAE Handbook - Fundamentals (2017) ch. 1\n  this.GetTDewPointFromTWetBulb = function(\n    // (o) Dew Point temperature in °F [IP] or °C [SI]\n    TDryBulb, // (i) Dry bulb temperature in °F [IP] or °C [SI]\n    TWetBulb, // (i) Wet bulb temperature in °F [IP] or °C [SI]\n    Pressure, // (i) Atmospheric pressure in Psi [IP] or Pa [SI]\n  ) {\n    var HumRatio;\n\n    if (!(TWetBulb <= TDryBulb))\n      throw new Error('Wet bulb temperature is above dry bulb temperature');\n\n    HumRatio = this.GetHumRatioFromTWetBulb(TDryBulb, TWetBulb, Pressure);\n    return this.GetTDewPointFromHumRatio(TDryBulb, HumRatio, Pressure);\n  };\n\n  /******************************************************************************************************\n   * Conversions between dew point, or relative humidity and vapor pressure\n   *****************************************************************************************************/\n\n  // Return partial pressure of water vapor as a function of relative humidity and temperature.\n  // Reference: ASHRAE Handbook - Fundamentals (2017) ch. 1 eqn 12, 22\n  this.GetVapPresFromRelHum = function(\n    // (o) Partial pressure of water vapor in moist air in Psi [IP] or Pa [SI]\n    TDryBulb, // (i) Dry bulb temperature in °F [IP] or °C [SI]\n    RelHum, // (i) Relative humidity [0-1]\n  ) {\n    if (!(RelHum >= 0 && RelHum <= 1)) throw new Error('Relative humidity is outside range [0,1]');\n\n    return RelHum * this.GetSatVapPres(TDryBulb);\n  };\n\n  // Return relative humidity given dry-bulb temperature and vapor pressure.\n  // Reference: ASHRAE Handbook - Fundamentals (2017) ch. 1 eqn 12, 22\n  this.GetRelHumFromVapPres = function(\n    // (o) Relative humidity [0-1]\n    TDryBulb, // (i) Dry bulb temperature in °F [IP] or °C [SI]\n    VapPres, // (i) Partial pressure of water vapor in moist air in Psi [IP] or Pa [SI]\n  ) {\n    if (!(VapPres >= 0))\n      throw new Error('Partial pressure of water vapor in moist air is negative');\n\n    return VapPres / this.GetSatVapPres(TDryBulb);\n  };\n\n  // Helper function returning the derivative of the natural log of the saturation vapor pressure\n  // as a function of dry-bulb temperature.\n  // Reference: ASHRAE Handbook - Fundamentals (2017) ch. 1 eqn. 5 & 6\n  this.dLnPws_ = function(\n    // (o)  Derivative of natural log of vapor pressure of saturated air in Psi [IP] or Pa [SI]\n    TDryBulb, // (i) Dry bulb temperature in °F [IP] or °C [SI]\n  ) {\n    var dLnPws, T;\n\n    if (this.isIP()) {\n      T = this.GetTRankineFromTFahrenheit(TDryBulb);\n\n      if (TDryBulb <= TRIPLE_POINT_WATER_IP)\n        dLnPws =\n          1.0214165e4 / pow(T, 2) -\n          5.3765794e-3 +\n          2 * 1.9202377e-7 * T +\n          3 * 3.5575832e-10 * pow(T, 2) -\n          4 * 9.0344688e-14 * pow(T, 3) +\n          4.1635019 / T;\n      else\n        dLnPws =\n          1.0440397e4 / pow(T, 2) -\n          2.7022355e-2 +\n          2 * 1.289036e-5 * T -\n          3 * 2.4780681e-9 * pow(T, 2) +\n          6.5459673 / T;\n    } else {\n      T = this.GetTKelvinFromTCelsius(TDryBulb);\n\n      if (TDryBulb <= TRIPLE_POINT_WATER_SI)\n        dLnPws =\n          5.6745359e3 / pow(T, 2) -\n          9.677843e-3 +\n          2 * 6.2215701e-7 * T +\n          3 * 2.0747825e-9 * pow(T, 2) -\n          4 * 9.484024e-13 * pow(T, 3) +\n          4.1635019 / T;\n      else\n        dLnPws =\n          5.8002206e3 / pow(T, 2) -\n          4.8640239e-2 +\n          2 * 4.1764768e-5 * T -\n          3 * 1.4452093e-8 * pow(T, 2) +\n          6.5459673 / T;\n    }\n\n    return dLnPws;\n  };\n\n  // Return dew-point temperature given dry-bulb temperature and vapor pressure.\n  // Reference: ASHRAE Handbook - Fundamentals (2017) ch. 1 eqn. 5 and 6\n  // Notes: the dew point temperature is solved by inverting the equation giving water vapor pressure\n  // at saturation from temperature rather than using the regressions provided\n  // by ASHRAE (eqn. 37 and 38) which are much less accurate and have a\n  // narrower range of validity.\n  // The Newton-Raphson (NR) method is used on the logarithm of water vapour\n  // pressure as a function of temperature, which is a very smooth function\n  // Convergence is usually achieved in 3 to 5 iterations.\n  // TDryBulb is not really needed here, just used for convenience.\n  this.GetTDewPointFromVapPres = function(\n    // (o) Dew Point temperature in °F [IP] or °C [SI]\n    TDryBulb, // (i) Dry bulb temperature in °F [IP] or °C [SI]\n    VapPres, // (i) Partial pressure of water vapor in moist air in Psi [IP] or Pa [SI]\n  ) {\n    // Bounds function of the system of units\n    var BOUNDS; // Domain of validity of the equations\n\n    if (this.isIP()) {\n      BOUNDS = [-148, 392]; // Domain of validity of the equations\n    } else {\n      BOUNDS = [-100, 200]; // Domain of validity of the equations\n    }\n\n    // Bounds outside which a solution cannot be found\n    if (VapPres < this.GetSatVapPres(BOUNDS[0]) || VapPres > this.GetSatVapPres(BOUNDS[1]))\n      throw new Error('Partial pressure of water vapor is outside range of validity of equations');\n\n    // We use NR to approximate the solution.\n    // First guess\n    var TDewPoint = TDryBulb; // Calculated value of dew point temperatures, solved for iteratively in °F [IP] or °C [SI]\n    var lnVP = log(VapPres); // Natural logarithm of partial pressure of water vapor pressure in moist air\n\n    var TDewPoint_iter; // Value of TDewPoint used in NR calculation\n    var lnVP_iter; // Value of log of vapor water pressure used in NR calculation\n    var index = 1;\n    do {\n      // Current point\n      TDewPoint_iter = TDewPoint;\n      lnVP_iter = log(this.GetSatVapPres(TDewPoint_iter));\n\n      // Derivative of function, calculated analytically\n      var d_lnVP = this.dLnPws_(TDewPoint_iter);\n\n      // New estimate, bounded by domain of validity of eqn. 5 and 6\n      TDewPoint = TDewPoint_iter - (lnVP_iter - lnVP) / d_lnVP;\n      TDewPoint = max(TDewPoint, BOUNDS[0]);\n      TDewPoint = min(TDewPoint, BOUNDS[1]);\n\n      if (index > MAX_ITER_COUNT)\n        throw new Error('Convergence not reached in GetTDewPointFromVapPres. Stopping.');\n\n      index++;\n    } while (abs(TDewPoint - TDewPoint_iter) > PSYCHROLIB_TOLERANCE);\n    return min(TDewPoint, TDryBulb);\n  };\n\n  // Return vapor pressure given dew point temperature.\n  // Reference: ASHRAE Handbook - Fundamentals (2017) ch. 1 eqn. 36\n  this.GetVapPresFromTDewPoint = function(\n    // (o) Partial pressure of water vapor in moist air in Psi [IP] or Pa [SI]\n    TDewPoint, // (i) Dew point temperature in °F [IP] or °C [SI]\n  ) {\n    return this.GetSatVapPres(TDewPoint);\n  };\n\n  /******************************************************************************************************\n   * Conversions from wet-bulb temperature, dew-point temperature, or relative humidity to humidity ratio\n   *****************************************************************************************************/\n\n  // Return wet-bulb temperature given dry-bulb temperature, humidity ratio, and pressure.\n  // Reference: ASHRAE Handbook - Fundamentals (2017) ch. 1 eqn 33 and 35 solved for Tstar\n  this.GetTWetBulbFromHumRatio = function(\n    // (o) Wet bulb temperature in °F [IP] or °C [SI]\n    TDryBulb, // (i) Dry bulb temperature in °F [IP] or °C [SI]\n    HumRatio, // (i) Humidity ratio in lb_H₂O lb_Air⁻¹ [IP] or kg_H₂O kg_Air⁻¹ [SI]\n    Pressure, // (i) Atmospheric pressure in Psi [IP] or Pa [SI]\n  ) {\n    // Declarations\n    var Wstar;\n    var TDewPoint, TWetBulb, TWetBulbSup, TWetBulbInf, BoundedHumRatio;\n    var index = 1;\n\n    if (!(HumRatio >= 0)) throw new Error('Humidity ratio is negative');\n    BoundedHumRatio = max(HumRatio, MIN_HUM_RATIO);\n\n    TDewPoint = this.GetTDewPointFromHumRatio(TDryBulb, BoundedHumRatio, Pressure);\n\n    // Initial guesses\n    TWetBulbSup = TDryBulb;\n    TWetBulbInf = TDewPoint;\n    TWetBulb = (TWetBulbInf + TWetBulbSup) / 2;\n\n    // Bisection loop\n    while (TWetBulbSup - TWetBulbInf > PSYCHROLIB_TOLERANCE) {\n      // Compute humidity ratio at temperature Tstar\n      Wstar = this.GetHumRatioFromTWetBulb(TDryBulb, TWetBulb, Pressure);\n\n      // Get new bounds\n      if (Wstar > BoundedHumRatio) TWetBulbSup = TWetBulb;\n      else TWetBulbInf = TWetBulb;\n\n      // New guess of wet bulb temperature\n      TWetBulb = (TWetBulbSup + TWetBulbInf) / 2;\n\n      if (index > MAX_ITER_COUNT)\n        throw new Error('Convergence not reached in GetTWetBulbFromHumRatio. Stopping.');\n\n      index++;\n    }\n\n    return TWetBulb;\n  };\n\n  // Return humidity ratio given dry-bulb temperature, wet-bulb temperature, and pressure.\n  // Reference: ASHRAE Handbook - Fundamentals (2017) ch. 1 eqn 33 and 35\n  this.GetHumRatioFromTWetBulb = function(\n    // (o) Humidity Ratio in lb_H₂O lb_Air⁻¹ [IP] or kg_H₂O kg_Air⁻¹ [SI]\n    TDryBulb, // (i) Dry bulb temperature in °F [IP] or °C [SI]\n    TWetBulb, // (i) Wet bulb temperature in °F [IP] or °C [SI]\n    Pressure, // (i) Atmospheric pressure in Psi [IP] or Pa [SI]\n  ) {\n    var Wsstar;\n    var HumRatio = INVALID;\n\n    if (!(TWetBulb <= TDryBulb))\n      throw new Error('Wet bulb temperature is above dry bulb temperature');\n\n    Wsstar = this.GetSatHumRatio(TWetBulb, Pressure);\n\n    if (this.isIP()) {\n      if (TWetBulb >= FREEZING_POINT_WATER_IP)\n        HumRatio =\n          ((1093 - 0.556 * TWetBulb) * Wsstar - 0.24 * (TDryBulb - TWetBulb)) /\n          (1093 + 0.444 * TDryBulb - TWetBulb);\n      else\n        HumRatio =\n          ((1220 - 0.04 * TWetBulb) * Wsstar - 0.24 * (TDryBulb - TWetBulb)) /\n          (1220 + 0.444 * TDryBulb - 0.48 * TWetBulb);\n    } else {\n      if (TWetBulb >= FREEZING_POINT_WATER_SI)\n        HumRatio =\n          ((2501 - 2.326 * TWetBulb) * Wsstar - 1.006 * (TDryBulb - TWetBulb)) /\n          (2501 + 1.86 * TDryBulb - 4.186 * TWetBulb);\n      else\n        HumRatio =\n          ((2830 - 0.24 * TWetBulb) * Wsstar - 1.006 * (TDryBulb - TWetBulb)) /\n          (2830 + 1.86 * TDryBulb - 2.1 * TWetBulb);\n    }\n    // Validity check.\n    return max(HumRatio, MIN_HUM_RATIO);\n  };\n\n  // Return humidity ratio given dry-bulb temperature, relative humidity, and pressure.\n  // Reference: ASHRAE Handbook - Fundamentals (2017) ch. 1\n  this.GetHumRatioFromRelHum = function(\n    // (o) Humidity Ratio in lb_H₂O lb_Air⁻¹ [IP] or kg_H₂O kg_Air⁻¹ [SI]\n    TDryBulb, // (i) Dry bulb temperature in °F [IP] or °C [SI]\n    RelHum, // (i) Relative humidity [0-1]\n    Pressure, // (i) Atmospheric pressure in Psi [IP] or Pa [SI]\n  ) {\n    var VapPres;\n\n    if (!(RelHum >= 0 && RelHum <= 1)) throw new Error('Relative humidity is outside range [0,1]');\n\n    VapPres = this.GetVapPresFromRelHum(TDryBulb, RelHum);\n    return this.GetHumRatioFromVapPres(VapPres, Pressure);\n  };\n\n  // Return relative humidity given dry-bulb temperature, humidity ratio, and pressure.\n  // Reference: ASHRAE Handbook - Fundamentals (2017) ch. 1\n  this.GetRelHumFromHumRatio = function(\n    // (o) Relative humidity [0-1]\n    TDryBulb, // (i) Dry bulb temperature in °F [IP] or °C [SI]\n    HumRatio, // (i) Humidity ratio in lb_H₂O lb_Air⁻¹ [IP] or kg_H₂O kg_Air⁻¹ [SI]\n    Pressure, // (i) Atmospheric pressure in Psi [IP] or Pa [SI]\n  ) {\n    var VapPres;\n\n    if (!(HumRatio >= 0)) throw new Error('Humidity ratio is negative');\n\n    VapPres = this.GetVapPresFromHumRatio(HumRatio, Pressure);\n    return this.GetRelHumFromVapPres(TDryBulb, VapPres);\n  };\n\n  // Return humidity ratio given dew-point temperature and pressure.\n  // Reference: ASHRAE Handbook - Fundamentals (2017) ch. 1\n  this.GetHumRatioFromTDewPoint = function(\n    // (o) Humidity Ratio in lb_H₂O lb_Air⁻¹ [IP] or kg_H₂O kg_Air⁻¹ [SI]\n    TDewPoint, // (i) Dew point temperature in °F [IP] or °C [SI]\n    Pressure, // (i) Atmospheric pressure in Psi [IP] or Pa [SI]\n  ) {\n    var VapPres;\n\n    VapPres = this.GetSatVapPres(TDewPoint);\n    return this.GetHumRatioFromVapPres(VapPres, Pressure);\n  };\n\n  // Return dew-point temperature given dry-bulb temperature, humidity ratio, and pressure.\n  // Reference: ASHRAE Handbook - Fundamentals (2017) ch. 1\n  this.GetTDewPointFromHumRatio = function(\n    // (o) Dew Point temperature in °F [IP] or °C [SI]\n    TDryBulb, // (i) Dry bulb temperature in °F [IP] or °C [SI]\n    HumRatio, // (i) Humidity ratio in lb_H₂O lb_Air⁻¹ [IP] or kg_H₂O kg_Air⁻¹ [SI]\n    Pressure, // (i) Atmospheric pressure in Psi [IP] or Pa [SI]\n  ) {\n    var VapPres;\n\n    if (!(HumRatio >= 0)) throw new Error('Humidity ratio is negative');\n\n    VapPres = this.GetVapPresFromHumRatio(HumRatio, Pressure);\n    return this.GetTDewPointFromVapPres(TDryBulb, VapPres);\n  };\n\n  /******************************************************************************************************\n   * Conversions between humidity ratio and vapor pressure\n   *****************************************************************************************************/\n\n  // Return humidity ratio given water vapor pressure and atmospheric pressure.\n  // Reference: ASHRAE Handbook - Fundamentals (2017) ch. 1 eqn 20\n  this.GetHumRatioFromVapPres = function(\n    // (o) Humidity Ratio in lb_H₂O lb_Air⁻¹ [IP] or kg_H₂O kg_Air⁻¹ [SI]\n    VapPres, // (i) Partial pressure of water vapor in moist air in Psi [IP] or Pa [SI]\n    Pressure, // (i) Atmospheric pressure in Psi [IP] or Pa [SI]\n  ) {\n    var HumRatio;\n\n    if (!(VapPres >= 0))\n      throw new Error('Partial pressure of water vapor in moist air is negative');\n\n    HumRatio = (0.621945 * VapPres) / (Pressure - VapPres);\n\n    // Validity check.\n    return max(HumRatio, MIN_HUM_RATIO);\n  };\n\n  // Return vapor pressure given humidity ratio and pressure.\n  // Reference: ASHRAE Handbook - Fundamentals (2017) ch. 1 eqn 20 solved for pw\n  this.GetVapPresFromHumRatio = function(\n    // (o) Partial pressure of water vapor in moist air in Psi [IP] or Pa [SI]\n    HumRatio, // (i) Humidity ratio in lb_H₂O lb_Air⁻¹ [IP] or kg_H₂O kg_Air⁻¹ [SI]\n    Pressure, // (i) Atmospheric pressure in Psi [IP] or Pa [SI]\n  ) {\n    var VapPres, BoundedHumRatio;\n\n    if (!(HumRatio >= 0)) throw new Error('Humidity ratio is negative');\n    BoundedHumRatio = max(HumRatio, MIN_HUM_RATIO);\n\n    VapPres = (Pressure * BoundedHumRatio) / (0.621945 + BoundedHumRatio);\n    return VapPres;\n  };\n\n  /******************************************************************************************************\n   * Conversions between humidity ratio and specific humidity\n   *****************************************************************************************************/\n\n  // Return the specific humidity from humidity ratio (aka mixing ratio)\n  // Reference: ASHRAE Handbook - Fundamentals (2017) ch. 1 eqn 9b\n  this.GetSpecificHumFromHumRatio = function(\n    // (o) Specific humidity ratio in lb_H₂O lb_Air⁻¹ [IP] or kg_H₂O kg_Air⁻¹ [SI]\n    HumRatio, // (i) Humidity ratio in lb_H₂O lb_Dry_Air⁻¹ [IP] or kg_H₂O kg_Dry_Air⁻¹ [SI]\n  ) {\n    var BoundedHumRatio;\n    if (!(HumRatio >= 0)) throw new Error('Humidity ratio is negative');\n    BoundedHumRatio = max(HumRatio, MIN_HUM_RATIO);\n\n    return BoundedHumRatio / (1.0 + BoundedHumRatio);\n  };\n\n  // Return the humidity ratio (aka mixing ratio) from specific humidity\n  // Reference: ASHRAE Handbook - Fundamentals (2017) ch. 1 eqn 9b (solved for humidity ratio)\n  this.GetHumRatioFromSpecificHum = function(\n    // (o) Humidity ratio in lb_H₂O lb_Dry_Air⁻¹ [IP] or kg_H₂O kg_Dry_Air⁻¹ [SI]\n    SpecificHum, // (i) Specific humidity ratio in lb_H₂O lb_Air⁻¹ [IP] or kg_H₂O kg_Air⁻¹ [SI]\n  ) {\n    var HumRatio;\n\n    if (!(SpecificHum >= 0.0 && SpecificHum < 1.0))\n      throw new Error('Specific humidity is outside range [0, 1[');\n\n    HumRatio = SpecificHum / (1.0 - SpecificHum);\n\n    // Validity check\n    return max(HumRatio, MIN_HUM_RATIO);\n  };\n\n  /******************************************************************************************************\n   * Dry Air Calculations\n   *****************************************************************************************************/\n\n  // Return dry-air enthalpy given dry-bulb temperature.\n  // Reference: ASHRAE Handbook - Fundamentals (2017) ch. 1 eqn. 28\n  this.GetDryAirEnthalpy = function(\n    // (o) Dry air enthalpy in Btu lb⁻¹ [IP] or J kg⁻¹ [SI]\n    TDryBulb, // (i) Dry bulb temperature in °F [IP] or °C [SI]\n  ) {\n    if (this.isIP()) return 0.24 * TDryBulb;\n    else return 1006 * TDryBulb;\n  };\n\n  // Return dry-air density given dry-bulb temperature and pressure.\n  // Reference: ASHRAE Handbook - Fundamentals (2017) ch. 1\n  // Notes: eqn 14 for the perfect gas relationship for dry air.\n  // Eqn 1 for the universal gas constant.\n  // The factor 144 in IP is for the conversion of Psi = lb in⁻² to lb ft⁻².\n  this.GetDryAirDensity = function(\n    // (o) Dry air density in lb ft⁻³ [IP] or kg m⁻³ [SI]\n    TDryBulb, // (i) Dry bulb temperature in °F [IP] or °C [SI]\n    Pressure, // (i) Atmospheric pressure in Psi [IP] or Pa [SI]\n  ) {\n    if (this.isIP()) return (144 * Pressure) / R_DA_IP / this.GetTRankineFromTFahrenheit(TDryBulb);\n    else return Pressure / R_DA_SI / this.GetTKelvinFromTCelsius(TDryBulb);\n  };\n\n  // Return dry-air volume given dry-bulb temperature and pressure.\n  // Reference: ASHRAE Handbook - Fundamentals (2017) ch. 1.\n  // Notes: eqn 14 for the perfect gas relationship for dry air.\n  // Eqn 1 for the universal gas constant.\n  // The factor 144 in IP is for the conversion of Psi = lb in⁻² to lb ft⁻².\n  this.GetDryAirVolume = function(\n    // (o) Dry air volume ft³ lb⁻¹ [IP] or in m³ kg⁻¹ [SI]\n    TDryBulb, // (i) Dry bulb temperature in °F [IP] or °C [SI]\n    Pressure, // (i) Atmospheric pressure in Psi [IP] or Pa [SI]\n  ) {\n    if (this.isIP())\n      return (R_DA_IP * this.GetTRankineFromTFahrenheit(TDryBulb)) / (144 * Pressure);\n    else return (R_DA_SI * this.GetTKelvinFromTCelsius(TDryBulb)) / Pressure;\n  };\n\n  // Return dry bulb temperature from enthalpy and humidity ratio.\n  // Reference: ASHRAE Handbook - Fundamentals (2017) ch. 1 eqn 30.\n  // Notes: based on the `GetMoistAirEnthalpy` function, rearranged for temperature.\n  this.GetTDryBulbFromEnthalpyAndHumRatio = function(\n    // (o) Dry-bulb temperature in °F [IP] or °C [SI]\n    MoistAirEnthalpy, // (i) Moist air enthalpy in Btu lb⁻¹ [IP] or J kg⁻¹\n    HumRatio, // (i) Humidity ratio in lb_H₂O lb_Air⁻¹ [IP] or kg_H₂O kg_Air⁻¹ [SI]\n  ) {\n    var BoundedHumRatio;\n    if (!(HumRatio >= 0)) throw new Error('Humidity ratio is negative');\n    BoundedHumRatio = max(HumRatio, MIN_HUM_RATIO);\n\n    if (this.isIP())\n      return (MoistAirEnthalpy - 1061.0 * BoundedHumRatio) / (0.24 + 0.444 * BoundedHumRatio);\n    else\n      return (\n        (MoistAirEnthalpy / 1000.0 - 2501.0 * BoundedHumRatio) / (1.006 + 1.86 * BoundedHumRatio)\n      );\n  };\n\n  // Return humidity ratio from enthalpy and dry-bulb temperature.\n  // Reference: ASHRAE Handbook - Fundamentals (2017) ch. 1 eqn 30.\n  // Notes: based on the `GetMoistAirEnthalpy` function, rearranged for humidity ratio.\n  this.GetHumRatioFromEnthalpyAndTDryBulb = function(\n    // (o) Humidity ratio in lb_H₂O lb_Air⁻¹ [IP] or kg_H₂O kg_Air⁻\n    MoistAirEnthalpy, // (i) Moist air enthalpy in Btu lb⁻¹ [IP] or J kg⁻¹\n    TDryBulb, // (i) Dry-bulb temperature in °F [IP] or °C [SI]\n  ) {\n    var HumRatio;\n    if (this.isIP()) HumRatio = (MoistAirEnthalpy - 0.24 * TDryBulb) / (1061.0 + 0.444 * TDryBulb);\n    else HumRatio = (MoistAirEnthalpy / 1000.0 - 1.006 * TDryBulb) / (2501.0 + 1.86 * TDryBulb);\n\n    // Validity check.\n    return max(HumRatio, MIN_HUM_RATIO);\n  };\n\n  /******************************************************************************************************\n   * Saturated Air Calculations\n   *****************************************************************************************************/\n\n  // Return saturation vapor pressure given dry-bulb temperature.\n  // Reference: ASHRAE Handbook - Fundamentals (2017) ch. 1 eqn. 5 & 6\n  // Important note: the ASHRAE formulae are defined above and below the freezing point but have\n  // a discontinuity at the freezing point. This is a small inaccuracy on ASHRAE's part: the formulae\n  // should be defined above and below the triple point of water (not the feezing point) in which case\n  // the discontinuity vanishes. It is essential to use the triple point of water otherwise function\n  // GetTDewPointFromVapPres, which inverts the present function, does not converge properly around\n  // the freezing point.\n  this.GetSatVapPres = function(\n    // (o) Vapor Pressure of saturated air in Psi [IP] or Pa [SI]\n    TDryBulb, // (i) Dry bulb temperature in °F [IP] or °C [SI]\n  ) {\n    var LnPws, T;\n\n    if (this.isIP()) {\n      if (!(TDryBulb >= -148 && TDryBulb <= 392))\n        throw new Error('Dry bulb temperature is outside range [-148, 392]');\n\n      T = this.GetTRankineFromTFahrenheit(TDryBulb);\n      if (TDryBulb <= TRIPLE_POINT_WATER_IP)\n        LnPws =\n          -1.0214165e4 / T -\n          4.8932428 -\n          5.3765794e-3 * T +\n          1.9202377e-7 * T * T +\n          3.5575832e-10 * pow(T, 3) -\n          9.0344688e-14 * pow(T, 4) +\n          4.1635019 * log(T);\n      else\n        LnPws =\n          -1.0440397e4 / T -\n          1.129465e1 -\n          2.7022355e-2 * T +\n          1.289036e-5 * T * T -\n          2.4780681e-9 * pow(T, 3) +\n          6.5459673 * log(T);\n    } else {\n      if (!(TDryBulb >= -100 && TDryBulb <= 200))\n        throw new Error('Dry bulb temperature is outside range [-100, 200]');\n\n      T = this.GetTKelvinFromTCelsius(TDryBulb);\n      if (TDryBulb <= TRIPLE_POINT_WATER_SI)\n        LnPws =\n          -5.6745359e3 / T +\n          6.3925247 -\n          9.677843e-3 * T +\n          6.2215701e-7 * T * T +\n          2.0747825e-9 * pow(T, 3) -\n          9.484024e-13 * pow(T, 4) +\n          4.1635019 * log(T);\n      else\n        LnPws =\n          -5.8002206e3 / T +\n          1.3914993 -\n          4.8640239e-2 * T +\n          4.1764768e-5 * T * T -\n          1.4452093e-8 * pow(T, 3) +\n          6.5459673 * log(T);\n    }\n\n    return exp(LnPws);\n  };\n\n  // Return humidity ratio of saturated air given dry-bulb temperature and pressure.\n  // Reference: ASHRAE Handbook - Fundamentals (2017) ch. 1 eqn 36, solved for W\n  this.GetSatHumRatio = function(\n    // (o) Humidity ratio of saturated air in lb_H₂O lb_Air⁻¹ [IP] or kg_H₂O kg_Air⁻¹ [SI]\n    TDryBulb, // (i) Dry bulb temperature in °F [IP] or °C [SI]\n    Pressure, // (i) Atmospheric pressure in Psi [IP] or Pa [SI]\n  ) {\n    var SatVaporPres, SatHumRatio;\n\n    SatVaporPres = this.GetSatVapPres(TDryBulb);\n    SatHumRatio = (0.621945 * SatVaporPres) / (Pressure - SatVaporPres);\n\n    // Validity check.\n    return max(SatHumRatio, MIN_HUM_RATIO);\n  };\n\n  // Return saturated air enthalpy given dry-bulb temperature and pressure.\n  // Reference: ASHRAE Handbook - Fundamentals (2017) ch. 1\n  this.GetSatAirEnthalpy = function(\n    // (o) Saturated air enthalpy in Btu lb⁻¹ [IP] or J kg⁻¹ [SI]\n    TDryBulb, // (i) Dry bulb temperature in °F [IP] or °C [SI]\n    Pressure, // (i) Atmospheric pressure in Psi [IP] or Pa [SI]\n  ) {\n    return this.GetMoistAirEnthalpy(TDryBulb, this.GetSatHumRatio(TDryBulb, Pressure));\n  };\n\n  /******************************************************************************************************\n   * Moist Air Calculations\n   *****************************************************************************************************/\n\n  // Return Vapor pressure deficit given dry-bulb temperature, humidity ratio, and pressure.\n  // Reference: see Oke (1987) eqn. 2.13a\n  this.GetVaporPressureDeficit = function(\n    // (o) Vapor pressure deficit in Psi [IP] or Pa [SI]\n    TDryBulb, // (i) Dry bulb temperature in °F [IP] or °C [SI]\n    HumRatio, // (i) Humidity ratio in lb_H₂O lb_Air⁻¹ [IP] or kg_H₂O kg_Air⁻¹ [SI]\n    Pressure, // (i) Atmospheric pressure in Psi [IP] or Pa [SI]\n  ) {\n    var RelHum;\n\n    if (!(HumRatio >= 0)) throw new Error('Humidity ratio is negative');\n\n    RelHum = this.GetRelHumFromHumRatio(TDryBulb, HumRatio, Pressure);\n    return this.GetSatVapPres(TDryBulb) * (1 - RelHum);\n  };\n\n  // Return the degree of saturation (i.e humidity ratio of the air / humidity ratio of the air at saturation\n  // at the same temperature and pressure) given dry-bulb temperature, humidity ratio, and atmospheric pressure.\n  // Reference: ASHRAE Handbook - Fundamentals (2009) ch. 1 eqn. 12\n  // Notes: the definition is absent from the 2017 Handbook\n  this.GetDegreeOfSaturation = function(\n    // (o) Degree of saturation (unitless)\n    TDryBulb, // (i) Dry bulb temperature in °F [IP] or °C [SI]\n    HumRatio, // (i) Humidity ratio in lb_H₂O lb_Air⁻¹ [IP] or kg_H₂O kg_Air⁻¹ [SI]\n    Pressure, // (i) Atmospheric pressure in Psi [IP] or Pa [SI]\n  ) {\n    var BoundedHumRatio;\n\n    if (!(HumRatio >= 0)) throw new Error('Humidity ratio is negative');\n    BoundedHumRatio = max(HumRatio, MIN_HUM_RATIO);\n\n    return BoundedHumRatio / this.GetSatHumRatio(TDryBulb, Pressure);\n  };\n\n  // Return moist air enthalpy given dry-bulb temperature and humidity ratio.\n  // Reference: ASHRAE Handbook - Fundamentals (2017) ch. 1 eqn. 30\n  this.GetMoistAirEnthalpy = function(\n    // (o) Moist Air Enthalpy in Btu lb⁻¹ [IP] or J kg⁻¹ [SI]\n    TDryBulb, // (i) Dry bulb temperature in °F [IP] or °C [SI]\n    HumRatio, // (i) Humidity ratio in lb_H₂O lb_Air⁻¹ [IP] or kg_H₂O kg_Air⁻¹ [SI]\n  ) {\n    var BoundedHumRatio;\n\n    if (!(HumRatio >= 0)) throw new Error('Humidity ratio is negative');\n    BoundedHumRatio = max(HumRatio, MIN_HUM_RATIO);\n\n    if (this.isIP()) return 0.24 * TDryBulb + BoundedHumRatio * (1061 + 0.444 * TDryBulb);\n    else return (1.006 * TDryBulb + BoundedHumRatio * (2501 + 1.86 * TDryBulb)) * 1000;\n  };\n\n  // Return moist air specific volume given dry-bulb temperature, humidity ratio, and pressure.\n  // Reference: ASHRAE Handbook - Fundamentals (2017) ch. 1 eqn. 26\n  // Notes: in IP units, R_DA_IP / 144 equals 0.370486 which is the coefficient appearing in eqn 26.\n  // The factor 144 is for the conversion of Psi = lb in⁻² to lb ft⁻².\n  this.GetMoistAirVolume = function(\n    // (o) Specific Volume ft³ lb⁻¹ [IP] or in m³ kg⁻¹ [SI]\n    TDryBulb, // (i) Dry bulb temperature in °F [IP] or °C [SI]\n    HumRatio, // (i) Humidity ratio in lb_H₂O lb_Air⁻¹ [IP] or kg_H₂O kg_Air⁻¹ [SI]\n    Pressure, // (i) Atmospheric pressure in Psi [IP] or Pa [SI]\n  ) {\n    var BoundedHumRatio;\n\n    if (!(HumRatio >= 0)) throw new Error('Humidity ratio is negative');\n    BoundedHumRatio = max(HumRatio, MIN_HUM_RATIO);\n\n    if (this.isIP())\n      return (\n        (R_DA_IP * this.GetTRankineFromTFahrenheit(TDryBulb) * (1 + 1.607858 * BoundedHumRatio)) /\n        (144 * Pressure)\n      );\n    else\n      return (\n        (R_DA_SI * this.GetTKelvinFromTCelsius(TDryBulb) * (1 + 1.607858 * BoundedHumRatio)) /\n        Pressure\n      );\n  };\n\n  // Return dry-bulb temperature given moist air specific volume, humidity ratio, and pressure.\n  // Reference:\n  // ASHRAE Handbook - Fundamentals (2017) ch. 1 eqn 26\n  // Notes:\n  // In IP units, R_DA_IP / 144 equals 0.370486 which is the coefficient appearing in eqn 26\n  // The factor 144 is for the conversion of Psi = lb in⁻² to lb ft⁻².\n  // Based on the `GetMoistAirVolume` function, rearranged for dry-bulb temperature.\n  this.GetTDryBulbFromMoistAirVolumeAndHumRatio = function(\n    // (o) Dry-bulb temperature in °F [IP] or °C [SI]\n    MoistAirVolume, // (i) Specific volume of moist air in ft³ lb⁻¹ of dry air [IP] or in m³ kg⁻¹ of dry air [SI]\n    HumRatio, // (i) Humidity ratio in lb_H₂O lb_Air⁻¹ [IP] or kg_H₂O kg_Air⁻¹ [SI]\n    Pressure, // (i) Atmospheric pressure in Psi [IP] or Pa [SI]\n  ) {\n    var BoundedHumRatio;\n\n    if (!(HumRatio >= 0)) throw new Error('Humidity ratio is negative');\n    BoundedHumRatio = max(HumRatio, MIN_HUM_RATIO);\n\n    if (this.isIP())\n      return this.GetTFahrenheitFromTRankine(\n        (MoistAirVolume * (144 * Pressure)) / (R_DA_IP * (1 + 1.607858 * BoundedHumRatio)),\n      );\n    else\n      return this.GetTCelsiusFromTKelvin(\n        (MoistAirVolume * Pressure) / (R_DA_SI * (1 + 1.607858 * BoundedHumRatio)),\n      );\n  };\n\n  // Return moist air density given humidity ratio, dry bulb temperature, and pressure.\n  // Reference: ASHRAE Handbook - Fundamentals (2017) ch. 1 eqn. 11\n  this.GetMoistAirDensity = function(\n    // (o) Moist air density in lb ft⁻³ [IP] or kg m⁻³ [SI]\n    TDryBulb, // (i) Dry bulb temperature in °F [IP] or °C [SI]\n    HumRatio, // (i) Humidity ratio in lb_H₂O lb_Air⁻¹ [IP] or kg_H₂O kg_Air⁻¹ [SI]\n    Pressure, // (i) Atmospheric pressure in Psi [IP] or Pa [SI]\n  ) {\n    var BoundedHumRatio;\n\n    if (!(HumRatio >= 0)) throw new Error('Humidity ratio is negative');\n    BoundedHumRatio = max(HumRatio, MIN_HUM_RATIO);\n\n    return (1 + BoundedHumRatio) / this.GetMoistAirVolume(TDryBulb, BoundedHumRatio, Pressure);\n  };\n\n  /******************************************************************************************************\n   * Standard atmosphere\n   *****************************************************************************************************/\n\n  // Return standard atmosphere barometric pressure, given the elevation (altitude).\n  // Reference: ASHRAE Handbook - Fundamentals (2017) ch. 1 eqn 3\n  this.GetStandardAtmPressure = function(\n    // (o) Standard atmosphere barometric pressure in Psi [IP] or Pa [SI]\n    Altitude, // (i) Altitude in ft [IP] or m [SI]\n  ) {\n    var Pressure;\n\n    if (this.isIP()) Pressure = 14.696 * pow(1 - 6.8754e-6 * Altitude, 5.2559);\n    else Pressure = 101325 * pow(1 - 2.25577e-5 * Altitude, 5.2559);\n    return Pressure;\n  };\n\n  // Return standard atmosphere temperature, given the elevation (altitude).\n  // Reference: ASHRAE Handbook - Fundamentals (2017) ch. 1 eqn 4\n  this.GetStandardAtmTemperature = function(\n    // (o) Standard atmosphere dry bulb temperature in °F [IP] or °C [SI]\n    Altitude, // (i) Altitude in ft [IP] or m [SI]\n  ) {\n    var Temperature;\n    if (this.isIP()) Temperature = 59 - 0.0035662 * Altitude;\n    else Temperature = 15 - 0.0065 * Altitude;\n    return Temperature;\n  };\n\n  // Return sea level pressure given dry-bulb temperature, altitude above sea level and pressure.\n  // Reference: Hess SL, Introduction to theoretical meteorology, Holt Rinehart and Winston, NY 1959,\n  // ch. 6.5; Stull RB, Meteorology for scientists and engineers, 2nd edition,\n  // Brooks/Cole 2000, ch. 1.\n  // Notes: the standard procedure for the US is to use for TDryBulb the average\n  // of the current station temperature and the station temperature from 12 hours ago.\n  this.GetSeaLevelPressure = function(\n    // (o) Sea level barometric pressure in Psi [IP] or Pa [SI]\n    StnPressure, // (i) Observed station pressure in Psi [IP] or Pa [SI]\n    Altitude, // (i) Altitude above sea level in ft [IP] or m [SI]\n    TDryBulb, // (i) Dry bulb temperature ft³ lb⁻¹ [IP] or in m³ kg⁻¹ [SI]\n  ) {\n    var TColumn, H;\n    if (this.isIP()) {\n      // Calculate average temperature in column of air, assuming a lapse rate\n      // of 3.6 °F/1000ft\n      TColumn = TDryBulb + (0.0036 * Altitude) / 2;\n\n      // Determine the scale height\n      H = 53.351 * this.GetTRankineFromTFahrenheit(TColumn);\n    } else {\n      // Calculate average temperature in column of air, assuming a lapse rate\n      // of 6.5 °C/km\n      TColumn = TDryBulb + (0.0065 * Altitude) / 2;\n\n      // Determine the scale height\n      H = (287.055 * this.GetTKelvinFromTCelsius(TColumn)) / 9.807;\n    }\n\n    // Calculate the sea level pressure\n    var SeaLevelPressure = StnPressure * exp(Altitude / H);\n    return SeaLevelPressure;\n  };\n\n  // Return station pressure from sea level pressure\n  // Reference: see 'GetSeaLevelPressure'\n  // Notes: this function is just the inverse of 'GetSeaLevelPressure'.\n  this.GetStationPressure = function(\n    // (o) Station pressure in Psi [IP] or Pa [SI]\n    SeaLevelPressure, // (i) Sea level barometric pressure in Psi [IP] or Pa [SI]\n    Altitude, // (i) Altitude above sea level in ft [IP] or m [SI]\n    TDryBulb, // (i) Dry bulb temperature in °F [IP] or °C [SI]\n  ) {\n    return SeaLevelPressure / this.GetSeaLevelPressure(1, Altitude, TDryBulb);\n  };\n\n  /******************************************************************************************************\n   * Functions to set all psychrometric values\n   *****************************************************************************************************/\n\n  // Utility function to calculate humidity ratio, dew-point temperature, relative humidity,\n  // vapour pressure, moist air enthalpy, moist air volume, and degree of saturation of air given\n  // dry-bulb temperature, wet-bulb temperature, and pressure.\n  this.CalcPsychrometricsFromTWetBulb = function(\n    /**\n     * HumRatio            // (o) Humidity ratio in lb_H₂O lb_Air⁻¹ [IP] or kg_H₂O kg_Air⁻¹ [SI]\n     * TDewPoint           // (o) Dew point temperature in °F [IP] or °C [SI]\n     * RelHum              // (o) Relative humidity [0-1]\n     * VapPres             // (o) Partial pressure of water vapor in moist air in Psi [IP] or Pa [SI]\n     * MoistAirEnthalpy    // (o) Moist air enthalpy in Btu lb⁻¹ [IP] or J kg⁻¹ [SI]\n     * MoistAirVolume      // (o) Specific volume ft³ lb⁻¹ [IP] or in m³ kg⁻¹ [SI]\n     * DegreeOfSaturation  // (o) Degree of saturation [unitless]\n     */\n    TDryBulb, // (i) Dry bulb temperature in °F [IP] or °C [SI]\n    TWetBulb, // (i) Wet bulb temperature in °F [IP] or °C [SI]\n    Pressure, // (i) Atmospheric pressure in Psi [IP] or Pa [SI]\n  ) {\n    var HumRatio = this.GetHumRatioFromTWetBulb(TDryBulb, TWetBulb, Pressure);\n    var TDewPoint = this.GetTDewPointFromHumRatio(TDryBulb, HumRatio, Pressure);\n    var RelHum = this.GetRelHumFromHumRatio(TDryBulb, HumRatio, Pressure);\n    var VapPres = this.GetVapPresFromHumRatio(HumRatio, Pressure);\n    var MoistAirEnthalpy = this.GetMoistAirEnthalpy(TDryBulb, HumRatio);\n    var MoistAirVolume = this.GetMoistAirVolume(TDryBulb, HumRatio, Pressure);\n    var DegreeOfSaturation = this.GetDegreeOfSaturation(TDryBulb, HumRatio, Pressure);\n    return [\n      HumRatio,\n      TDewPoint,\n      RelHum,\n      VapPres,\n      MoistAirEnthalpy,\n      MoistAirVolume,\n      DegreeOfSaturation,\n    ];\n  };\n\n  // Utility function to calculate humidity ratio, wet-bulb temperature, relative humidity,\n  // vapour pressure, moist air enthalpy, moist air volume, and degree of saturation of air given\n  // dry-bulb temperature, dew-point temperature, and pressure.\n  this.CalcPsychrometricsFromTDewPoint = function(\n    /**\n     * HumRatio            // (o) Humidity ratio in lb_H₂O lb_Air⁻¹ [IP] or kg_H₂O kg_Air⁻¹ [SI]\n     * TWetBulb            // (o) Wet bulb temperature in °F [IP] or °C [SI]\n     * RelHum              // (o) Relative humidity [0-1]\n     * VapPres             // (o) Partial pressure of water vapor in moist air in Psi [IP] or Pa [SI]\n     * MoistAirEnthalpy    // (o) Moist air enthalpy in Btu lb⁻¹ [IP] or J kg⁻¹ [SI]\n     * MoistAirVolume      // (o) Specific volume ft³ lb⁻¹ [IP] or in m³ kg⁻¹ [SI]\n     * DegreeOfSaturation  // (o) Degree of saturation [unitless]\n     */\n    TDryBulb, // (i) Dry bulb temperature in °F [IP] or °C [SI]\n    TDewPoint, // (i) Dew point temperature in °F [IP] or °C [SI]\n    Pressure, // (i) Atmospheric pressure in Psi [IP] or Pa [SI]\n  ) {\n    var HumRatio = this.GetHumRatioFromTDewPoint(TDewPoint, Pressure);\n    var TWetBulb = this.GetTWetBulbFromHumRatio(TDryBulb, HumRatio, Pressure);\n    var RelHum = this.GetRelHumFromHumRatio(TDryBulb, HumRatio, Pressure);\n    var VapPres = this.GetVapPresFromHumRatio(HumRatio, Pressure);\n    var MoistAirEnthalpy = this.GetMoistAirEnthalpy(TDryBulb, HumRatio);\n    var MoistAirVolume = this.GetMoistAirVolume(TDryBulb, HumRatio, Pressure);\n    var DegreeOfSaturation = this.GetDegreeOfSaturation(TDryBulb, HumRatio, Pressure);\n    return [\n      HumRatio,\n      TWetBulb,\n      RelHum,\n      VapPres,\n      MoistAirEnthalpy,\n      MoistAirVolume,\n      DegreeOfSaturation,\n    ];\n  };\n\n  // Utility function to calculate humidity ratio, wet-bulb temperature, dew-point temperature,\n  // vapour pressure, moist air enthalpy, moist air volume, and degree of saturation of air given\n  // dry-bulb temperature, relative humidity and pressure.\n  this.CalcPsychrometricsFromRelHum = function(\n    /**\n     * HumRatio            // (o) Partial pressure of water vapor in moist air in Psi [IP] or Pa [SI]\n     * TWetBulb            // (o) Wet bulb temperature in °F [IP] or °C [SI]\n     * TDewPoint           // (o) Dew point temperature in °F [IP] or °C [SI]\n     * VapPres             // (o) Partial pressure of water vapor in moist air [Psi]\n     * MoistAirEnthalpy    // (o) Moist air enthalpy in Btu lb⁻¹ [IP] or J kg⁻¹ [SI]\n     * MoistAirVolume      // (o) Specific volume ft³ lb⁻¹ [IP] or in m³ kg⁻¹ [SI]\n     * DegreeOfSaturation  // (o) Degree of saturation [unitless]\n     */\n    TDryBulb, // (i) Dry bulb temperature in °F [IP] or °C [SI]\n    RelHum, // (i) Relative humidity [0-1]\n    Pressure, // (i) Atmospheric pressure in Psi [IP] or Pa [SI]\n  ) {\n    var HumRatio = this.GetHumRatioFromRelHum(TDryBulb, RelHum, Pressure);\n    var TWetBulb = this.GetTWetBulbFromHumRatio(TDryBulb, HumRatio, Pressure);\n    var TDewPoint = this.GetTDewPointFromHumRatio(TDryBulb, HumRatio, Pressure);\n    var VapPres = this.GetVapPresFromHumRatio(HumRatio, Pressure);\n    var MoistAirEnthalpy = this.GetMoistAirEnthalpy(TDryBulb, HumRatio);\n    var MoistAirVolume = this.GetMoistAirVolume(TDryBulb, HumRatio, Pressure);\n    var DegreeOfSaturation = this.GetDegreeOfSaturation(TDryBulb, HumRatio, Pressure);\n    return [\n      HumRatio,\n      TWetBulb,\n      TDewPoint,\n      VapPres,\n      MoistAirEnthalpy,\n      MoistAirVolume,\n      DegreeOfSaturation,\n    ];\n  };\n};\n\nmodule.exports = psychrolib;\n","export default class BACnetEnumsUnits {\n  static unitCategory = ['Common Metric', 'Common Imperial', 'Electrical', 'Energy', 'Enthalpy', 'Entropy', 'Force', 'Frequency', 'Humidity', 'Length', 'Light', 'Mass', 'Flow', 'Power', 'Pressure', 'Temperature', 'Time', 'Torque', 'Velocity', 'Volume', 'Volumetric Flow', 'Other'].map(\n    point => {\n      return { value: point, text: point };\n    },\n  );\n  static unitType(type: string) {\n    switch (type) {\n      case 'Common Metric':\n        return Object.keys(BACnetEnumsUnits.COMMON_METRIC);\n      case 'Common Imperial':\n        return Object.keys(BACnetEnumsUnits.COMMON_IMPERIAL);\n      case 'Electrical':\n        return Object.keys(BACnetEnumsUnits.Electrical);\n      case 'Energy':\n        return Object.keys(BACnetEnumsUnits.Energy);\n      case 'Enthalpy':\n        return Object.keys(BACnetEnumsUnits.Enthalpy);\n      case 'Entropy':\n        return Object.keys(BACnetEnumsUnits.Entropy);\n      case 'Force':\n        return Object.keys(BACnetEnumsUnits.Force);\n      case 'Frequency':\n        return Object.keys(BACnetEnumsUnits.Frequency);\n      case 'Humidity':\n        return Object.keys(BACnetEnumsUnits.Humidity);\n      case 'Length':\n        return Object.keys(BACnetEnumsUnits.Length);\n      case 'Light':\n        return Object.keys(BACnetEnumsUnits.Light);\n      case 'Mass':\n        return Object.keys(BACnetEnumsUnits.Mass);\n      case 'Flow':\n        return Object.keys(BACnetEnumsUnits.Flow);\n      case 'Power':\n        return Object.keys(BACnetEnumsUnits.Entropy);\n      case 'Pressure':\n        return Object.keys(BACnetEnumsUnits.Pressure);\n      case 'Temperature':\n        return Object.keys(BACnetEnumsUnits.Temperature);\n      case 'Time':\n        return Object.keys(BACnetEnumsUnits.Time);\n      case 'Torque':\n        return Object.keys(BACnetEnumsUnits.Torque);\n      case 'Velocity':\n        return Object.keys(BACnetEnumsUnits.Velocity);\n      case 'Volume':\n        return Object.keys(BACnetEnumsUnits.Volume);\n      case 'Volumetric Flow':\n        return Object.keys(BACnetEnumsUnits.VolumetricFlow);\n      case 'Other':\n        return Object.keys(BACnetEnumsUnits.Other);\n    }\n  }\n\n  static COMMON_METRIC = {\n    NO_UNITS: 95,\n    PERCENT: 98,\n    PERCENT_RELATIVE_HUMIDITY: 29,\n    DEGREES_CELSIUS: 62,\n    KILOPASCALS: 54,\n  };\n\n  static COMMON_IMPERIAL = {\n    NO_UNITS: 95,\n    PERCENT: 98,\n    PERCENT_RELATIVE_HUMIDITY: 29,\n    DEGREES_FAHRENHEIT: 64,\n    POUNDS_FORCE_PER_SQUARE_INCH: 56,\n  };\n\n  static Electrical = {\n    MILLIAMPERES: 2,\n    AMPERES: 3,\n    AMPERES_PER_METER: 167,\n    AMPERES_PER_SQUARE_METER: 168,\n    AMPERE_SQUARE_METERS: 169,\n    DECIBELS: 199,\n    DECIBELS_MILLIVOLT: 200,\n    DECIBELS_VOLT: 201,\n    FARADS: 170,\n    HENRYS: 171,\n    OHMS: 4,\n    OHM_METERS: 172,\n    MILLIOHMS: 145,\n    KILOHMS: 122,\n    MEGOHMS: 123,\n    MICROSIEMENS: 190,\n    MILLISIEMENS: 202,\n    SIEMENS: 173 /* 1 mho equals 1 siemens */,\n    SIEMENS_PER_METER: 174,\n    TESLAS: 175,\n    VOLTS: 5,\n    MILLIVOLTS: 124,\n    KILOVOLTS: 6,\n    MEGAVOLTS: 7,\n    VOLT_AMPERES: 8,\n    KILOVOLT_AMPERES: 9,\n    MEGAVOLT_AMPERES: 10,\n    VOLT_AMPERES_REACTIVE: 11,\n    KILOVOLT_AMPERES_REACTIVE: 12,\n    MEGAVOLT_AMPERES_REACTIVE: 13,\n    VOLTS_PER_DEGREE_KELVIN: 176,\n    VOLTS_PER_METER: 177,\n    DEGREES_PHASE: 14,\n    POWER_FACTOR: 15,\n    WEBERS: 178,\n  };\n\n\n  static Energy = {\n    /* Energy */\n    JOULES: 16,\n    KILOJOULES: 17,\n    KILOJOULES_PER_KILOGRAM: 125,\n    MEGAJOULES: 126,\n    WATT_HOURS: 18,\n    KILOWATT_HOURS: 19,\n    MEGAWATT_HOURS: 146,\n    WATT_HOURS_REACTIVE: 203,\n    KILOWATT_HOURS_REACTIVE: 204,\n    MEGAWATT_HOURS_REACTIVE: 205,\n    BTUS: 20,\n    KILO_BTUS: 147,\n    MEGA_BTUS: 148,\n    THERMS: 21,\n    TON_HOURS: 22,\n  };\n\n  static Enthalpy = {\n    /* Enthalpy */\n    JOULES_PER_KILOGRAM_DRY_AIR: 23,\n    KILOJOULES_PER_KILOGRAM_DRY_AIR: 149,\n    MEGAJOULES_PER_KILOGRAM_DRY_AIR: 150,\n    BTUS_PER_POUND_DRY_AIR: 24,\n    BTUS_PER_POUND: 117,\n  };\n  static Entropy = {\n    /* Entropy */\n    JOULES_PER_DEGREE_KELVIN: 127,\n    KILOJOULES_PER_DEGREE_KELVIN: 151,\n    MEGAJOULES_PER_DEGREE_KELVIN: 152,\n    JOULES_PER_KILOGRAM_DEGREE_KELVIN: 128,\n  };\n  static Force = {\n    /* Force */\n    NEWTON: 153,\n  };\n  static Frequency = {\n    /* Frequency */\n    CYCLES_PER_HOUR: 25,\n    CYCLES_PER_MINUTE: 26,\n    HERTZ: 27,\n    KILOHERTZ: 129,\n    MEGAHERTZ: 130,\n    PER_HOUR: 131,\n  };\n\n  static Humidity = {\n    /* Humidity */\n    GRAMS_OF_WATER_PER_KILOGRAM_DRY_AIR: 28,\n    PERCENT_RELATIVE_HUMIDITY: 29,\n  };\n  static Length = {\n    /* Length */\n    MICROMETERS: 194,\n    MILLIMETERS: 30,\n    CENTIMETERS: 118,\n    KILOMETERS: 193,\n    METERS: 31,\n    INCHES: 32,\n    FEET: 33,\n  };\n  static Light = {\n    /* Light */\n    CANDELAS: 179,\n    CANDELAS_PER_SQUARE_METER: 180,\n    WATTS_PER_SQUARE_FOOT: 34,\n    WATTS_PER_SQUARE_METER: 35,\n    LUMENS: 36,\n    LUXES: 37,\n    FOOT_CANDLES: 38,\n  };\n  static Mass = {\n    /* Mass */\n    MILLIGRAMS: 196,\n    GRAMS: 195,\n    KILOGRAMS: 39,\n    POUNDS_MASS: 40,\n    TONS: 41,\n  };\n  static Flow = {\n    /* Mass Flow */\n    GRAMS_PER_SECOND: 154,\n    GRAMS_PER_MINUTE: 155,\n    KILOGRAMS_PER_SECOND: 42,\n    KILOGRAMS_PER_MINUTE: 43,\n    KILOGRAMS_PER_HOUR: 44,\n    POUNDS_MASS_PER_SECOND: 119,\n    POUNDS_MASS_PER_MINUTE: 45,\n    POUNDS_MASS_PER_HOUR: 46,\n    TONS_PER_HOUR: 156,\n  };\n  static Power = {\n    /* Power */\n    MILLIWATTS: 132,\n    WATTS: 47,\n    KILOWATTS: 48,\n    MEGAWATTS: 49,\n    BTUS_PER_HOUR: 50,\n    KILO_BTUS_PER_HOUR: 157,\n    HORSEPOWER: 51,\n    TONS_REFRIGERATION: 52,\n  };\n  static Pressure = {\n    /* Pressure */\n    PASCALS: 53,\n    HECTOPASCALS: 133,\n    KILOPASCALS: 54,\n    MILLIBARS: 134,\n    BARS: 55,\n    POUNDS_FORCE_PER_SQUARE_INCH: 56,\n    MILLIMETERS_OF_WATER: 206,\n    CENTIMETERS_OF_WATER: 57,\n    INCHES_OF_WATER: 58,\n    MILLIMETERS_OF_MERCURY: 59,\n    CENTIMETERS_OF_MERCURY: 60,\n    INCHES_OF_MERCURY: 61,\n  };\n  static Temperature = {\n    /* Temperature */\n    DEGREES_CELSIUS: 62,\n    DEGREES_KELVIN: 63,\n    DEGREES_KELVIN_PER_HOUR: 181,\n    DEGREES_KELVIN_PER_MINUTE: 182,\n    DEGREES_FAHRENHEIT: 64,\n    DEGREE_DAYS_CELSIUS: 65,\n    DEGREE_DAYS_FAHRENHEIT: 66,\n    DELTA_DEGREES_FAHRENHEIT: 120,\n    DELTA_DEGREES_KELVIN: 121,\n  };\n  static Time = {\n    /* Time */\n    YEARS: 67,\n    MONTHS: 68,\n    WEEKS: 69,\n    DAYS: 70,\n    HOURS: 71,\n    MINUTES: 72,\n    SECONDS: 73,\n    HUNDREDTHS_SECONDS: 158,\n    MILLISECONDS: 159,\n  };\n  static Torque = {\n    /* Torque */\n    NEWTON_METERS: 160,\n  };\n  static Velocity = {\n    /* Velocity */\n    MILLIMETERS_PER_SECOND: 161,\n    MILLIMETERS_PER_MINUTE: 162,\n    METERS_PER_SECOND: 74,\n    METERS_PER_MINUTE: 163,\n    METERS_PER_HOUR: 164,\n    KILOMETERS_PER_HOUR: 75,\n    FEET_PER_SECOND: 76,\n    FEET_PER_MINUTE: 77,\n    MILES_PER_HOUR: 78,\n  };\n  static Volume = {\n    /* Volume */\n    CUBIC_FEET: 79,\n    CUBIC_METERS: 80,\n    IMPERIAL_GALLONS: 81,\n    MILLILITERS: 197,\n    LITERS: 82,\n    US_GALLONS: 83,\n  };\n  static VolumetricFlow = {\n    /* Volumetric Flow */\n    CUBIC_FEET_PER_SECOND: 142,\n    CUBIC_FEET_PER_MINUTE: 84,\n    CUBIC_FEET_PER_HOUR: 191,\n    CUBIC_METERS_PER_SECOND: 85,\n    CUBIC_METERS_PER_MINUTE: 165,\n    CUBIC_METERS_PER_HOUR: 135,\n    IMPERIAL_GALLONS_PER_MINUTE: 86,\n    MILLILITERS_PER_SECOND: 198,\n    LITERS_PER_SECOND: 87,\n    LITERS_PER_MINUTE: 88,\n    LITERS_PER_HOUR: 136,\n    US_GALLONS_PER_MINUTE: 89,\n    US_GALLONS_PER_HOUR: 192,\n  };\n  static Other = {\n    /* Other */\n    DEGREES_ANGULAR: 90,\n    DEGREES_CELSIUS_PER_HOUR: 91,\n    DEGREES_CELSIUS_PER_MINUTE: 92,\n    DEGREES_FAHRENHEIT_PER_HOUR: 93,\n    DEGREES_FAHRENHEIT_PER_MINUTE: 94,\n    JOULE_SECONDS: 183,\n    KILOGRAMS_PER_CUBIC_METER: 186,\n    KW_HOURS_PER_SQUARE_METER: 137,\n    KW_HOURS_PER_SQUARE_FOOT: 138,\n    MEGAJOULES_PER_SQUARE_METER: 139,\n    MEGAJOULES_PER_SQUARE_FOOT: 140,\n    NO_UNITS: 95,\n    NEWTON_SECONDS: 187,\n    NEWTONS_PER_METER: 188,\n    PARTS_PER_MILLION: 96,\n    PARTS_PER_BILLION: 97,\n    PERCENT: 98,\n    PERCENT_OBSCURATION_PER_FOOT: 143,\n    PERCENT_OBSCURATION_PER_METER: 144,\n    PERCENT_PER_SECOND: 99,\n    PER_MINUTE: 100,\n    PER_SECOND: 101,\n    PSI_PER_DEGREE_FAHRENHEIT: 102,\n    RADIANS: 103,\n    RADIANS_PER_SECOND: 184,\n    REVOLUTIONS_PER_MINUTE: 104,\n    SQUARE_METERS_PER_NEWTON: 185,\n    WATTS_PER_METER_PER_DEGREE_KELVIN: 189,\n    WATTS_PER_SQUARE_METER_DEGREE_KELVIN: 141,\n    PER_MILLE: 207,\n    GRAMS_PER_GRAM: 208,\n    KILOGRAMS_PER_KILOGRAM: 209,\n    GRAMS_PER_KILOGRAM: 210,\n    MILLIGRAMS_PER_GRAM: 211,\n    MILLIGRAMS_PER_KILOGRAM: 212,\n    GRAMS_PER_MILLILITER: 213,\n    GRAMS_PER_LITER: 214,\n    MILLIGRAMS_PER_LITER: 215,\n    MICROGRAMS_PER_LITER: 216,\n    GRAMS_PER_CUBIC_METER: 217,\n    MILLIGRAMS_PER_CUBIC_METER: 218,\n    MICROGRAMS_PER_CUBIC_METER: 219,\n    NANOGRAMS_PER_CUBIC_METER: 220,\n    GRAMS_PER_CUBIC_CENTIMETER: 221,\n    BECQUERELS: 222,\n    MEGABECQUERELS: 224,\n    GRAY: 225,\n    MILLIGRAY: 226,\n    MICROGRAY: 227,\n    SIEVERTS: 228,\n    MILLISIEVERTS: 229,\n    MICROSIEVERTS: 230,\n    MICROSIEVERTS_PER_HOUR: 231,\n    DECIBELS_A: 232,\n    NEPHELOMETRIC_TURBIDITY_UNIT: 233,\n    PH: 234,\n    GRAMS_PER_SQUARE_METER: 235,\n    MINUTES_PER_DEGREE_KELVIN: 236,\n  };\n\n}\n\n\n\n    // static BACNET_ENGINEERING_UNITS = {\n    //   /* Area */\n    //   METERS_PER_SECOND_PER_SECOND: 166,\n    //   SQUARE_METERS: 0,\n    //   SQUARE_CENTIMETERS: 116,\n    //   SQUARE_FEET: 1,\n    //   SQUARE_INCHES: 115,\n    //   /* Currency */\n    //   // CURRENCY1: 105,\n    //   // CURRENCY2: 106,\n    //   // CURRENCY3: 107,\n    //   // CURRENCY4: 108,\n    //   // CURRENCY5: 109,\n    //   // CURRENCY6: 110,\n    //   // CURRENCY7: 111,\n    //   // CURRENCY8: 112,\n    //   // CURRENCY9: 113,\n    //   // CURRENCY10: 114,\n\n    //   /* Electrical */\n    //   MILLIAMPERES: 2,\n    //   AMPERES: 3,\n    //   AMPERES_PER_METER: 167,\n    //   AMPERES_PER_SQUARE_METER: 168,\n    //   AMPERE_SQUARE_METERS: 169,\n    //   DECIBELS: 199,\n    //   DECIBELS_MILLIVOLT: 200,\n    //   DECIBELS_VOLT: 201,\n    //   FARADS: 170,\n    //   HENRYS: 171,\n    //   OHMS: 4,\n    //   OHM_METERS: 172,\n    //   MILLIOHMS: 145,\n    //   KILOHMS: 122,\n    //   MEGOHMS: 123,\n    //   MICROSIEMENS: 190,\n    //   MILLISIEMENS: 202,\n    //   SIEMENS: 173 /* 1 mho equals 1 siemens */,\n    //   SIEMENS_PER_METER: 174,\n    //   TESLAS: 175,\n    //   VOLTS: 5,\n    //   MILLIVOLTS: 124,\n    //   KILOVOLTS: 6,\n    //   MEGAVOLTS: 7,\n    //   VOLT_AMPERES: 8,\n    //   KILOVOLT_AMPERES: 9,\n    //   MEGAVOLT_AMPERES: 10,\n    //   VOLT_AMPERES_REACTIVE: 11,\n    //   KILOVOLT_AMPERES_REACTIVE: 12,\n    //   MEGAVOLT_AMPERES_REACTIVE: 13,\n    //   VOLTS_PER_DEGREE_KELVIN: 176,\n    //   VOLTS_PER_METER: 177,\n    //   DEGREES_PHASE: 14,\n    //   POWER_FACTOR: 15,\n    //   WEBERS: 178,\n    //   /* Energy */\n    //   JOULES: 16,\n    //   KILOJOULES: 17,\n    //   KILOJOULES_PER_KILOGRAM: 125,\n    //   MEGAJOULES: 126,\n    //   WATT_HOURS: 18,\n    //   KILOWATT_HOURS: 19,\n    //   MEGAWATT_HOURS: 146,\n    //   WATT_HOURS_REACTIVE: 203,\n    //   KILOWATT_HOURS_REACTIVE: 204,\n    //   MEGAWATT_HOURS_REACTIVE: 205,\n    //   BTUS: 20,\n    //   KILO_BTUS: 147,\n    //   MEGA_BTUS: 148,\n    //   THERMS: 21,\n    //   TON_HOURS: 22,\n    //   /* Enthalpy */\n    //   JOULES_PER_KILOGRAM_DRY_AIR: 23,\n    //   KILOJOULES_PER_KILOGRAM_DRY_AIR: 149,\n    //   MEGAJOULES_PER_KILOGRAM_DRY_AIR: 150,\n    //   BTUS_PER_POUND_DRY_AIR: 24,\n    //   BTUS_PER_POUND: 117,\n    //   /* Entropy */\n    //   JOULES_PER_DEGREE_KELVIN: 127,\n    //   KILOJOULES_PER_DEGREE_KELVIN: 151,\n    //   MEGAJOULES_PER_DEGREE_KELVIN: 152,\n    //   JOULES_PER_KILOGRAM_DEGREE_KELVIN: 128,\n    //   /* Force */\n    //   NEWTON: 153,\n    //   /* Frequency */\n    //   CYCLES_PER_HOUR: 25,\n    //   CYCLES_PER_MINUTE: 26,\n    //   HERTZ: 27,\n    //   KILOHERTZ: 129,\n    //   MEGAHERTZ: 130,\n    //   PER_HOUR: 131,\n    //   /* Humidity */\n    //   GRAMS_OF_WATER_PER_KILOGRAM_DRY_AIR: 28,\n    //   PERCENT_RELATIVE_HUMIDITY: 29,\n    //   /* Length */\n    //   MICROMETERS: 194,\n    //   MILLIMETERS: 30,\n    //   CENTIMETERS: 118,\n    //   KILOMETERS: 193,\n    //   METERS: 31,\n    //   INCHES: 32,\n    //   FEET: 33,\n    //   /* Light */\n    //   CANDELAS: 179,\n    //   CANDELAS_PER_SQUARE_METER: 180,\n    //   WATTS_PER_SQUARE_FOOT: 34,\n    //   WATTS_PER_SQUARE_METER: 35,\n    //   LUMENS: 36,\n    //   LUXES: 37,\n    //   FOOT_CANDLES: 38,\n    //   /* Mass */\n    //   MILLIGRAMS: 196,\n    //   GRAMS: 195,\n    //   KILOGRAMS: 39,\n    //   POUNDS_MASS: 40,\n    //   TONS: 41,\n    //   /* Mass Flow */\n    //   GRAMS_PER_SECOND: 154,\n    //   GRAMS_PER_MINUTE: 155,\n    //   KILOGRAMS_PER_SECOND: 42,\n    //   KILOGRAMS_PER_MINUTE: 43,\n    //   KILOGRAMS_PER_HOUR: 44,\n    //   POUNDS_MASS_PER_SECOND: 119,\n    //   POUNDS_MASS_PER_MINUTE: 45,\n    //   POUNDS_MASS_PER_HOUR: 46,\n    //   TONS_PER_HOUR: 156,\n    //   /* Power */\n    //   MILLIWATTS: 132,\n    //   WATTS: 47,\n    //   KILOWATTS: 48,\n    //   MEGAWATTS: 49,\n    //   BTUS_PER_HOUR: 50,\n    //   KILO_BTUS_PER_HOUR: 157,\n    //   HORSEPOWER: 51,\n    //   TONS_REFRIGERATION: 52,\n    //   /* Pressure */\n    //   PASCALS: 53,\n    //   HECTOPASCALS: 133,\n    //   KILOPASCALS: 54,\n    //   MILLIBARS: 134,\n    //   BARS: 55,\n    //   POUNDS_FORCE_PER_SQUARE_INCH: 56,\n    //   MILLIMETERS_OF_WATER: 206,\n    //   CENTIMETERS_OF_WATER: 57,\n    //   INCHES_OF_WATER: 58,\n    //   MILLIMETERS_OF_MERCURY: 59,\n    //   CENTIMETERS_OF_MERCURY: 60,\n    //   INCHES_OF_MERCURY: 61,\n    //   /* Temperature */\n    //   DEGREES_CELSIUS: 62,\n    //   DEGREES_KELVIN: 63,\n    //   DEGREES_KELVIN_PER_HOUR: 181,\n    //   DEGREES_KELVIN_PER_MINUTE: 182,\n    //   DEGREES_FAHRENHEIT: 64,\n    //   DEGREE_DAYS_CELSIUS: 65,\n    //   DEGREE_DAYS_FAHRENHEIT: 66,\n    //   DELTA_DEGREES_FAHRENHEIT: 120,\n    //   DELTA_DEGREES_KELVIN: 121,\n    //   /* Time */\n    //   YEARS: 67,\n    //   MONTHS: 68,\n    //   WEEKS: 69,\n    //   DAYS: 70,\n    //   HOURS: 71,\n    //   MINUTES: 72,\n    //   SECONDS: 73,\n    //   HUNDREDTHS_SECONDS: 158,\n    //   MILLISECONDS: 159,\n    //   /* Torque */\n    //   NEWTON_METERS: 160,\n    //   /* Velocity */\n    //   MILLIMETERS_PER_SECOND: 161,\n    //   MILLIMETERS_PER_MINUTE: 162,\n    //   METERS_PER_SECOND: 74,\n    //   METERS_PER_MINUTE: 163,\n    //   METERS_PER_HOUR: 164,\n    //   KILOMETERS_PER_HOUR: 75,\n    //   FEET_PER_SECOND: 76,\n    //   FEET_PER_MINUTE: 77,\n    //   MILES_PER_HOUR: 78,\n    //   /* Volume */\n    //   CUBIC_FEET: 79,\n    //   CUBIC_METERS: 80,\n    //   IMPERIAL_GALLONS: 81,\n    //   MILLILITERS: 197,\n    //   LITERS: 82,\n    //   US_GALLONS: 83,\n    //   /* Volumetric Flow */\n    //   CUBIC_FEET_PER_SECOND: 142,\n    //   CUBIC_FEET_PER_MINUTE: 84,\n    //   CUBIC_FEET_PER_HOUR: 191,\n    //   CUBIC_METERS_PER_SECOND: 85,\n    //   CUBIC_METERS_PER_MINUTE: 165,\n    //   CUBIC_METERS_PER_HOUR: 135,\n    //   IMPERIAL_GALLONS_PER_MINUTE: 86,\n    //   MILLILITERS_PER_SECOND: 198,\n    //   LITERS_PER_SECOND: 87,\n    //   LITERS_PER_MINUTE: 88,\n    //   LITERS_PER_HOUR: 136,\n    //   US_GALLONS_PER_MINUTE: 89,\n    //   US_GALLONS_PER_HOUR: 192,\n    //   /* Other */\n    //   DEGREES_ANGULAR: 90,\n    //   DEGREES_CELSIUS_PER_HOUR: 91,\n    //   DEGREES_CELSIUS_PER_MINUTE: 92,\n    //   DEGREES_FAHRENHEIT_PER_HOUR: 93,\n    //   DEGREES_FAHRENHEIT_PER_MINUTE: 94,\n    //   JOULE_SECONDS: 183,\n    //   KILOGRAMS_PER_CUBIC_METER: 186,\n    //   KW_HOURS_PER_SQUARE_METER: 137,\n    //   KW_HOURS_PER_SQUARE_FOOT: 138,\n    //   MEGAJOULES_PER_SQUARE_METER: 139,\n    //   MEGAJOULES_PER_SQUARE_FOOT: 140,\n    //   NO_UNITS: 95,\n    //   NEWTON_SECONDS: 187,\n    //   NEWTONS_PER_METER: 188,\n    //   PARTS_PER_MILLION: 96,\n    //   PARTS_PER_BILLION: 97,\n    //   PERCENT: 98,\n    //   PERCENT_OBSCURATION_PER_FOOT: 143,\n    //   PERCENT_OBSCURATION_PER_METER: 144,\n    //   PERCENT_PER_SECOND: 99,\n    //   PER_MINUTE: 100,\n    //   PER_SECOND: 101,\n    //   PSI_PER_DEGREE_FAHRENHEIT: 102,\n    //   RADIANS: 103,\n    //   RADIANS_PER_SECOND: 184,\n    //   REVOLUTIONS_PER_MINUTE: 104,\n    //   SQUARE_METERS_PER_NEWTON: 185,\n    //   WATTS_PER_METER_PER_DEGREE_KELVIN: 189,\n    //   WATTS_PER_SQUARE_METER_DEGREE_KELVIN: 141,\n    //   PER_MILLE: 207,\n    //   GRAMS_PER_GRAM: 208,\n    //   KILOGRAMS_PER_KILOGRAM: 209,\n    //   GRAMS_PER_KILOGRAM: 210,\n    //   MILLIGRAMS_PER_GRAM: 211,\n    //   MILLIGRAMS_PER_KILOGRAM: 212,\n    //   GRAMS_PER_MILLILITER: 213,\n    //   GRAMS_PER_LITER: 214,\n    //   MILLIGRAMS_PER_LITER: 215,\n    //   MICROGRAMS_PER_LITER: 216,\n    //   GRAMS_PER_CUBIC_METER: 217,\n    //   MILLIGRAMS_PER_CUBIC_METER: 218,\n    //   MICROGRAMS_PER_CUBIC_METER: 219,\n    //   NANOGRAMS_PER_CUBIC_METER: 220,\n    //   GRAMS_PER_CUBIC_CENTIMETER: 221,\n    //   BECQUERELS: 222,\n    //   MEGABECQUERELS: 224,\n    //   GRAY: 225,\n    //   MILLIGRAY: 226,\n    //   MICROGRAY: 227,\n    //   SIEVERTS: 228,\n    //   MILLISIEVERTS: 229,\n    //   MICROSIEVERTS: 230,\n    //   MICROSIEVERTS_PER_HOUR: 231,\n    //   DECIBELS_A: 232,\n    //   NEPHELOMETRIC_TURBIDITY_UNIT: 233,\n    //   PH: 234,\n    //   GRAMS_PER_SQUARE_METER: 235,\n    //   MINUTES_PER_DEGREE_KELVIN: 236,\n    //   /* Enumerated values 0-255 are reserved for definition by ASHRAE. */\n    //   /* Enumerated values 256-65535 may be used by others subject to */\n    //   /* the procedures and constraints described in Clause 23. */\n    //   /* The last enumeration used in this version is 236. */\n    //   // MAX_UNITS: 237,\n    //   /* do the proprietary range inside of enum so that\n    //              compilers will allocate adequate sized datatype for enum\n    //              which is used to store decoding */\n    //   // PROPRIETARY_RANGE_MIN: 256,\n    //   // PROPRIETARY_RANGE_MAX: 65535\n    // };\n","import { Colors, create } from 'logplease';\nimport * as Bacnet from 'node-bacnet';\nimport { PromiseActor } from '../../../../promise-actor';\nimport {\n  ADD_DEVICE,\n  ADD_POINT,\n  GET_BACNET_CLIENT,\n  GET_NETWORK_NODE,\n  GET_POINTS,\n  GET_PRESENT_VALUE,\n  REMOVE_DEVICE,\n  REMOVE_POINT,\n  SEND_PAYLOAD_TO_CHILD,\n  SEND_POINT_VALUE,\n  WRITE_PRESENT_VALUE,\n} from './bacnet-constant';\nimport { DeviceObject } from './interface';\n\nconst logger = create('bacnet-utils', { color: Colors.Grey });\n\nexport const singleton = new PromiseActor();\n\nexport default class BacnetUtils {\n  static getBacnetClient(networkNode): Bacnet {\n    if (networkNode && networkNode['subscribe']) {\n      return networkNode['subscribe'](this.createMessage(GET_BACNET_CLIENT));\n    } else {\n      logger.error('Network Node is not available on getBacnetClient');\n      return null;\n    }\n  }\n\n  static getPoints(deviceNode): Array<DeviceObject> {\n    if (deviceNode && deviceNode['subscribe']) {\n      return deviceNode['subscribe'](this.createMessage(GET_POINTS));\n    } else {\n      logger.error('Device Node is not available on getPoints');\n      return [];\n    }\n  }\n\n  static getPresentValue(deviceNode, payload): Promise<any> {\n    if (deviceNode && deviceNode['subscribe']) {\n      return deviceNode['subscribe'](this.createMessage(GET_PRESENT_VALUE, payload));\n    } else {\n      logger.error('Device Node is not available on getPresentValue');\n      return null;\n    }\n  }\n\n  static writePresentValue(deviceNode, payload) {\n    if (deviceNode && deviceNode['subscribe']) {\n      deviceNode['subscribe'](this.createMessage(WRITE_PRESENT_VALUE, payload));\n    } else {\n      logger.error('Device Node is not available on writePresentValue');\n    }\n  }\n\n  static getNetworkNode(parentNode): any {\n    if (parentNode && parentNode['subscribe']) {\n      return parentNode['subscribe'](this.createMessage(GET_NETWORK_NODE));\n    } else {\n      logger.error('Parent Node is not available on getNetworkNode');\n      return null;\n    }\n  }\n\n  static sendPayloadToChild(childNode, payload) {\n    if (childNode && childNode['subscribe']) {\n      childNode['subscribe'](this.createMessage(SEND_PAYLOAD_TO_CHILD, payload));\n    } else {\n      logger.error('Child Node is not available on sendPayloadToChild');\n    }\n  }\n\n  static sendPointValue(pointNode, payload) {\n    if (pointNode && pointNode['subscribe']) {\n      pointNode['subscribe'](this.createMessage(SEND_POINT_VALUE, payload));\n    } else {\n      logger.error('Point Node is not available on sendPointValue');\n    }\n  }\n\n  static addDevice(networkNode, payload) {\n    if (networkNode && networkNode['subscribe']) {\n      networkNode['subscribe'](this.createMessage(ADD_DEVICE, payload));\n    } else {\n      logger.error('Network Node is not available on addDevice');\n    }\n  }\n\n  static removeDevice(networkNode, payload) {\n    if (networkNode && networkNode['subscribe']) {\n      networkNode['subscribe'](this.createMessage(REMOVE_DEVICE, payload));\n    } else {\n      logger.error('Network Node is not available on removeDevice');\n    }\n  }\n\n  static addPoint(deviceNode, payload) {\n    if (deviceNode && deviceNode['subscribe']) {\n      deviceNode['subscribe'](this.createMessage(ADD_POINT, payload));\n    } else {\n      logger.error('Device Node is not available on addPoint');\n    }\n  }\n\n  static removePoint(deviceNode, payload) {\n    if (deviceNode && deviceNode['subscribe']) {\n      deviceNode['subscribe'](this.createMessage(REMOVE_POINT, payload));\n    } else {\n      logger.error('Device Node is not available on removePoint');\n    }\n  }\n\n  private static createMessage(action, payload = null): any {\n    return { action, payload };\n  }\n}\n","//\n// BACnet device implementation.\n// Utility functions.\n//\n\nconst bacnet = require('node-bacnet');\n\nclass Util {\n  /**\n   * Take an enum group and a value, and return the string text for that enum.\n   *\n   * @example\n   * // Both lines will output `PRESENT_VALUE`\n   * console.log(\n   *   getEnumName(\n   *     bacnet.enum.PropertyIdentifier,\n   *     bacnet.enum.PropertyIdentifier.PRESENT_VALUE\n   *   )\n   * );\n   * console.log(getEnumName(bacnet.enum.PropertyIdentifier, 85));\n   */\n  static getEnumName(group, value) {\n    return Object.keys(group).find(key => group[key] === value) + '(' + value + ')';\n  }\n\n  /**\n   * Helper function for property values.\n   */\n  static getPropName(propertyId) {\n    return Util.getEnumName(bacnet.enum.PropertyIdentifier, propertyId);\n  }\n}\n\nmodule.exports = Util;\n","module.exports = require(\"mqtt-match\");","import { PointOutput } from '../../../../backend/models/point-model';\nimport { IMessageSubscriber, NodeStoreItem, Observer } from '../../../../utils/pattern';\nimport { Container } from '../../../container';\nimport { Side } from '../../../node-interface';\nimport { NodeSetting, SettingType, Type } from '../../../node-io';\nimport { GlobalNodeRegistry } from '../../../node-registry';\nimport CryptoUtils from '../../../utils/crypto-utils';\nimport { ConnectionOutput, DependantConnectionNode } from '../connection-node-mixin';\nimport { CentralizedPointOutputObserver, HasPointOutputObservers } from '../model/point-node';\nimport { ProtocolDeviceNode } from '../ProtocolDeviceNode';\nimport { DefaultMqttClient, MqttClientWrapper } from './core/mqtt-device';\nimport { MQTTMessage, SillyMqttPoint } from './core/mqtt-model';\nimport { MqttPointStoreItem, MqttPublisherStore, MqttSubscriberStore } from './mqtt-client-node-store';\n\nexport const MQTT_CLIENT_NODE = 'protocols/mqtt/mqtt-network';\nexport const REGISTER_MQTT_PUBLISHER = 'REGISTER_MQTT_PUBLISHER';\nexport const UNREGISTER_MQTT_PUBLISHER = 'UNREGISTER_MQTT_PUBLISHER';\nexport const UPDATE_MQTT_PUBLISHER = 'UPDATE_MQTT_PUBLISHER';\nexport const PUBLISH_MQTT_DATA = 'PUBLISH_MQTT_DATA';\nexport const REGISTER_MQTT_SUBSCRIBER = 'REGISTER_MQTT_SUBSCRIBER';\nexport const UPDATE_MQTT_SUBSCRIBER = 'UPDATE_MQTT_SUBSCRIBER';\nexport const UNREGISTER_MQTT_SUBSCRIBER = 'UNREGISTER_MQTT_SUBSCRIBER';\nexport const REGISTER_MQTT_POINT = 'REGISTER_MQTT_POINT';\nexport const UPDATE_MQTT_POINT = 'UPDATE_MQTT_POINT';\nexport const UNREGISTER_MQTT_POINT = 'UNREGISTER_MQTT_POINT';\n\nclass MqttCentralizedPointOutputObserver extends CentralizedPointOutputObserver<SillyMqttPoint> {\n\n  protected convert(data: PointOutput<SillyMqttPoint>): object {\n    let output = {};\n    output[data.point.identifier()] = {\n      publisherTopic : data.point.publishedTopic(),\n      subscriberTopic: data.point.subscribedTopic(),\n      pointValue     : data.point.pointValue,\n      status         : data.connStatus.status.label,\n      error          : data.connStatus.error,\n    };\n    return output;\n  }\n\n}\n\n/**\n * It resolves one mqtt client per host\n */\nclass MqttClientNode extends ProtocolDeviceNode implements HasPointOutputObservers<SillyMqttPoint>, IMessageSubscriber {\n\n  private readonly _oTopicsSlot = 2;\n  private publishers: MqttPublisherStore = new MqttPublisherStore();\n  private subscribers: MqttSubscriberStore = new MqttSubscriberStore();\n  private mqttClient: MqttClientWrapper = null;\n  //TODO: should implement queue properly\n  private retriedItems: { action: string; payload: any }[] = [];\n\n  constructor() {\n    super(`MQTT Network`, 'This node acts as a container for MQTT nodes. ' +\n                          'All MQTT nodes should be added within the MQTT-Network container. ' +\n                          'The MQTT broker details can be configured in settings.');\n    this.mixinEnableInputSetting();\n    this.addInputWithSettings('name', Type.STRING, 'nube-mqtt', 'MQTT Network');\n    this.settings['server'] = NodeSetting.create({ description: 'Broker URL', value: 'localhost', type: SettingType.STRING });\n    this.settings['port'] = NodeSetting.create({ description: 'Broker port', value: 1883, type: SettingType.NUMBER });\n    this.settings['authentication'] = NodeSetting.create({ description: 'Use Authentication', value: false, type: SettingType.BOOLEAN });\n    this.settings['username'] = NodeSetting.create({ description: 'User name', value: '', type: SettingType.STRING });\n    this.settings['password'] = NodeSetting.create({ description: 'Password', value: '', type: SettingType.PASSWORD });\n\n    this.setSettingsConfig({\n                             groups    : [\n                               { server: { weight: 3 }, port: { weight: 1 } },\n                               { enable: {}, authentication: {} },\n                               { username: {}, password: {} },\n                             ],\n                             conditions: {\n                               username: setting => !!setting['authentication'].value,\n                               password: setting => !!setting['authentication'].value,\n                             },\n                           });\n    this.addOutput('topics', Type.JSON);\n  }\n\n  private static createMqttConnectionOptions(settings: { [name: string]: NodeSetting }) {\n    const options: any = { host: settings['server'].value };\n\n    const port = settings['port'].value;\n    const username = settings['username'].value;\n    const password = settings['password'].value;\n\n    if (port != null) options.port = port;\n    if (username != null && username != '') options.username = username;\n    if (password != null && password != '') options.password = CryptoUtils.decrypt(password);\n    return options;\n  }\n\n  pointObservers(): Observer<PointOutput<SillyMqttPoint>>[] {\n    return [new MqttCentralizedPointOutputObserver(this, this._oTopicsSlot)];\n  }\n\n  listen({ action, payload }: { action: string; payload: NodeStoreItem }): any {\n    this.debugInfo(`Handling ${action}:${payload.identifier}...`);\n    switch (action) {\n      case REGISTER_MQTT_POINT:\n        return this.registerMqttPoint(payload);\n      case UPDATE_MQTT_POINT:\n        return this.updateMqttPoint(payload);\n      case UNREGISTER_MQTT_POINT:\n        return this.unregisterMqttPoint(payload);\n      case REGISTER_MQTT_PUBLISHER:\n        return this.publishers.register(payload);\n      case UPDATE_MQTT_PUBLISHER:\n        return this.publishers.update(payload, null, (p, force?: boolean) => this.afterUnregister(p, force));\n      case UNREGISTER_MQTT_PUBLISHER:\n        return this.publishers.unregister(payload, true, p => this.afterUnregister(p, true));\n      case REGISTER_MQTT_SUBSCRIBER:\n        return this.registerMqttSubscriber(payload);\n      case UPDATE_MQTT_SUBSCRIBER:\n        return this.updateMqttSubscriber(payload);\n      case UNREGISTER_MQTT_SUBSCRIBER:\n        return this.unregisterMqttSubscriber(payload);\n      case PUBLISH_MQTT_DATA:\n        return this.publishMqttData(payload);\n      default:\n        this.debugWarn('Request action doesn\\'t match');\n    }\n  }\n\n  connObserverNodes(): Observer<ConnectionOutput>[] {\n    let nodeIds = [...new Set(this.publishers.listNodeIds().concat(this.subscribers.listNodeIds()))];\n    return nodeIds.map(id => GlobalNodeRegistry.instance().get(id))\n                  .filter(n => n)\n                  .map(n => (<DependantConnectionNode><unknown>n).statusObserver());\n  }\n\n  isConnConnected(): boolean {\n    return this.mqttClient?.isConnected();\n  }\n\n  onReceiveMessage(msg: MQTTMessage): void {\n    if (this.side !== Side.server) return;\n    let subscribersByTopic = this.subscribers.lookup(msg.topic);\n    if (!subscribersByTopic) {\n      this.debug(`Not found any subscriber on MQTT topic '${msg.topic}'`);\n      return;\n    }\n    Object.entries(subscribersByTopic).forEach(([nodeId, val]) => {\n      if (!val?.enabled) {\n        return;\n      }\n      let node = GlobalNodeRegistry.instance().get(nodeId);\n      if (!node) {\n        this.debugWarn(`MQTT topic '${msg.topic}' is subscribed by Node ${nodeId} that not found`);\n        return;\n      }\n      try {\n        this.debugInfo(`Dispatch message on MQTT topic '${msg.topic}' to Node Id '${nodeId}'`);\n        val.func(msg.message);\n      } catch (e) {\n        this.debugWarn(`Message on MQTT topic '${msg.topic}' cannot be dispatched due to ${e}`);\n      }\n    });\n  }\n\n  protected createThenStart() {\n    const options = MqttClientNode.createMqttConnectionOptions(this.settings);\n    options.clientId = `mqttjs_wires_cid_${this.container.id}_id${this.id}`;\n    this.mqttClient = DefaultMqttClient.init(\n      options,\n      (client: MqttClientWrapper) => this.retryConnection(client),\n      (client: MqttClientWrapper, msg?: string) => this.updateClientStatus(client, msg),\n      (msg: MQTTMessage) => this.onReceiveMessage(msg),\n    );\n  }\n\n  protected stop(): void {\n    if (this.mqttClient) {\n      this.mqttClient.stop();\n      this.mqttClient = null;\n    }\n  }\n\n  private updateClientStatus(client: MqttClientWrapper, errMsg?: string): void {\n    this.notifyConnStatusOutput(this.getConnectionStatus(), errMsg);\n  }\n\n  private retryConnection(client: MqttClientWrapper): void {\n    this.debugInfo('Retry connection after MQTT client connected...');\n    //TODO dirty fix to avoid infinite loop\n    let count = 0,\n        max   = 500;\n    while (this.retriedItems.length > 0 && count < max) {\n      this.listen(this.retriedItems.shift());\n      count++;\n    }\n    this.updateClientStatus(client);\n  }\n\n  private publishMqttData(payload: NodeStoreItem): any {\n    if (this.side !== Side.server || !payload?.enabled) {\n      return null;\n    }\n    if (!this.isConnConnected()) {\n      payload.lenient = true;\n      this.retriedItems.push({ action: PUBLISH_MQTT_DATA, payload: payload });\n      return null;\n    }\n    let converter = this.publishers.lookup(payload?.identifier)?.func;\n    this.mqttClient.publish(payload?.identifier, converter ? converter(payload?.data) : payload?.data?.toString());\n    return payload?.data;\n  }\n\n  private registerMqttSubscriber(payload: NodeStoreItem) {\n    if (!this.isConnConnected()) {\n      payload.lenient = true;\n      this.retriedItems.push({ action: REGISTER_MQTT_SUBSCRIBER, payload: payload });\n      return;\n    }\n    this.subscribers.register(payload, p => this.mqttClient.subscribe(p?.identifier));\n  }\n\n  private unregisterMqttSubscriber(payload: NodeStoreItem) {\n    if (!this.isConnConnected()) {\n      payload.lenient = true;\n      this.retriedItems.push({ action: UNREGISTER_MQTT_SUBSCRIBER, payload: payload });\n      return;\n    }\n    this.subscribers.unregister(payload, true, p => {\n      this.mqttClientDoUnsubscribe(p);\n      this.afterUnregister(p, true);\n    });\n  }\n\n  private updateMqttSubscriber(payload: NodeStoreItem) {\n    if (!this.isConnConnected()) {\n      payload.lenient = true;\n      this.retriedItems.push({ action: UPDATE_MQTT_SUBSCRIBER, payload: payload });\n      return;\n    }\n    this.subscribers.update(payload, p => this.mqttClient.subscribe(p?.identifier),\n                            (p, force?: boolean) => {\n                              this.mqttClientDoUnsubscribe(p);\n                              this.afterUnregister(p, force);\n                            });\n  }\n\n  private mqttClientDoUnsubscribe(payload: NodeStoreItem) {\n    if (!this.subscribers.has(payload.identifier, (k, v) => v?.enabled)) {\n      this.mqttClient.unsubscribe(payload?.identifier);\n    }\n  }\n\n  private registerMqttPoint(payload: NodeStoreItem) {\n    let item = payload as MqttPointStoreItem;\n    let d = this.listen({ action: REGISTER_MQTT_PUBLISHER, payload: item.toPublisher() });\n    this.listen({ action: REGISTER_MQTT_SUBSCRIBER, payload: item.toSubscriber() });\n    return d;\n  }\n\n  private unregisterMqttPoint(payload: NodeStoreItem) {\n    let item = payload as MqttPointStoreItem;\n    let d = this.listen({ action: UNREGISTER_MQTT_PUBLISHER, payload: item.toPublisher() });\n    this.listen({ action: UNREGISTER_MQTT_SUBSCRIBER, payload: item.toSubscriber() });\n    this.afterUnregister(payload, true);\n    return d;\n  }\n\n  private updateMqttPoint(payload: NodeStoreItem) {\n    let item = payload as MqttPointStoreItem;\n    try {\n      return this.listen({ action: UPDATE_MQTT_PUBLISHER, payload: item.toPublisher() });\n    } finally {\n      this.listen({ action: UPDATE_MQTT_SUBSCRIBER, payload: item.toSubscriber() });\n    }\n  }\n\n  private afterUnregister(payload: NodeStoreItem, force: boolean): void {\n    if (force) {\n      let output = this.outputs[this._oTopicsSlot].data;\n      if (output) {\n        delete output[payload.identifier];\n      }\n      this.setOutputData(this._oTopicsSlot, output);\n    }\n  }\n}\n\nContainer.registerNodeType(MQTT_CLIENT_NODE, MqttClientNode);\n","module.exports = require(\"cron\");","module.exports = require(\"cronstrue\");","import { Database } from '../database/database';\nimport { ContainerRegistry } from '../nodes/container';\nimport { createNodeDbHelper, NodeDbHelper } from '../nodes/node-db-helper';\nimport { ContainerRegistryMetadata, IContainer, INode } from '../nodes/node-interface';\nimport { SlimNodeIO } from '../nodes/node-link';\nimport Utils from '../nodes/utils';\nimport { isFunction, isNotNull, isNull } from '../utils/helper';\nimport { LinkResult } from './link-result';\nimport { ContainerRegistryValidator, IContainerRegistryValidator, NodeRegistryValidator } from './validator';\n\nexport interface LinkInputVisitor {\n  visit(c: IContainer, n: INode, ioKey: string, io: SlimNodeIO): void;\n}\n\nexport interface LinkOutputVisitor {\n  visit(c: IContainer, n: INode, ioKey: string, ios: SlimNodeIO[]): void;\n}\n\nexport interface LinkNodeVisitor<V extends any | Promise<any>> {\n  visit(c: IContainer, n: INode): V;\n}\n\ninterface LinkContainerVisitor {\n  visit(c: IContainer): void;\n}\n\nexport interface LinkResultVisitor<T extends LinkResult | Promise<LinkResult>> {\n\n  readonly registry: ContainerRegistryMetadata;\n\n  inputVisitor(): LinkInputVisitor;\n\n  outputVisitor(): LinkOutputVisitor;\n\n  nodeVisitor(): LinkNodeVisitor<any | Promise<any>>;\n\n  containerVisitor(): LinkContainerVisitor;\n\n  visit(result: LinkResult): T;\n\n}\n\nclass BaseNodeLinkVisitor<V extends any | Promise<any>> implements LinkNodeVisitor<V> {\n\n  private readonly fn: (c: IContainer, n: INode) => V;\n\n  constructor(fn?: (c: IContainer, n: INode) => V) {\n    this.fn = fn;\n  }\n\n  visit(c: IContainer, n: INode): V {\n    n.isUpdated = true;\n    return isFunction(this.fn) ? this.fn(c, n) : null;\n  }\n}\n\nabstract class DefaultLinkVisitor<T extends LinkResult | Promise<LinkResult>> implements LinkResultVisitor<T> {\n\n  readonly registry: ContainerRegistryMetadata;\n  protected readonly validator: IContainerRegistryValidator;\n\n  protected constructor(registry?: ContainerRegistryMetadata) {\n    this.registry = registry ?? ContainerRegistry.instance();\n    this.validator = new ContainerRegistryValidator(this.registry);\n  }\n\n  abstract nodeVisitor(): LinkNodeVisitor<void | Promise<void>>;\n\n  abstract visit(result: LinkResult): T;\n\n  containerVisitor(): LinkContainerVisitor {\n    return new class implements LinkContainerVisitor {\n      visit(c: IContainer): void {\n      }\n    };\n  }\n\n  inputVisitor(): LinkInputVisitor {\n    return new class implements LinkInputVisitor {\n      visit(c: IContainer, n: INode, ioKey: string, io: SlimNodeIO): void {\n        n.inputs[ioKey].link = io;\n        n.inputs[ioKey].updated = true;\n        if (isNotNull(io)) {\n          n.inputs[ioKey].data = Utils.parseValue(c.nodeRegistry().get(io.nodeId)?.outputs[io.ioId]?.data,\n                                                  n.inputs[ioKey].type);\n        }\n      }\n    };\n  }\n\n  outputVisitor(): LinkOutputVisitor {\n    return new class implements LinkOutputVisitor {\n      visit(c: IContainer, n: INode, ioKey: string, ios: SlimNodeIO[]): void {\n        if (isNotNull(n.outputs[ioKey])) {\n          n.outputs[ioKey].links = ios;\n        }\n      }\n    };\n  }\n\n  protected perNode(d: { nid: number | string; inputs: { [p: string]: SlimNodeIO }; outputs: { [p: string]: SlimNodeIO[] } },\n                    c: IContainer): Promise<any> | any {\n    const n = new NodeRegistryValidator().validate(d.nid, c, false);\n    if (isNull(n)) {\n      return;\n    }\n    const inputVisitor = this.inputVisitor();\n    const outputVisitor = this.outputVisitor();\n    Object.keys(d.inputs).forEach(k => inputVisitor.visit(c, n, k, d.inputs[k]));\n    Object.keys(d.outputs).forEach(k => outputVisitor.visit(c, n, k, d.outputs[k]));\n    return this.nodeVisitor().visit(c, n);\n  }\n\n}\n\nexport class BackendLinkVisitor extends DefaultLinkVisitor<Promise<LinkResult>> {\n  private readonly dbHelper: NodeDbHelper;\n  private readonly db: Database;\n\n  constructor(registry?: ContainerRegistryMetadata, dbHelper?: NodeDbHelper) {\n    super(registry);\n    this.dbHelper = dbHelper ?? createNodeDbHelper();\n    this.db = this.registry.rootContainer()['db'];\n  }\n\n  nodeVisitor(): LinkNodeVisitor<Promise<any>> {\n    return new BaseNodeLinkVisitor((c, n) => this.dbHelper.updateAsync(this.db, n, 'inputs', 'outputs'));\n  }\n\n  visit(result: LinkResult): Promise<LinkResult> {\n    return Promise.all(Object.keys(result.result())\n                             .map(cid => this.validator.validate(cid, false))\n                             .filter(c => isNotNull(c))\n                             .map(c => Promise.all(Object.values(result.result()[c.id]).map(d => this.perNode(d, c)))\n                                              .then(_ => this.containerVisitor().visit(c))))\n                  .then(_ => result);\n  }\n\n}\n\nexport class FrontendLinkVisitor extends DefaultLinkVisitor<LinkResult> {\n\n  private readonly fn: (c: IContainer) => void;\n\n  constructor(fn: (c: IContainer) => void, registry?: ContainerRegistryMetadata) {\n    super(registry);\n    this.fn = fn;\n  }\n\n  nodeVisitor(): LinkNodeVisitor<void> {\n    return new BaseNodeLinkVisitor<void>();\n  }\n\n  containerVisitor(): LinkContainerVisitor {\n    const that = this;\n    return new class implements LinkContainerVisitor {\n      visit(c: IContainer): void {\n        that.fn(c);\n      }\n    };\n  }\n\n  visit(result: LinkResult): LinkResult {\n    Object.keys(result.result())\n          .map(cid => this.validator.validate(cid, false))\n          .filter(c => isNotNull(c))\n          .forEach(c => {\n            Object.values(result.result()[c.id]).forEach(d => this.perNode(d, c));\n            this.containerVisitor().visit(c);\n          });\n    return result;\n  }\n\n}\n\n","module.exports = require(\"@hapi/joi\");","import { isEmpty } from '../utils/helper';\n\nexport const TWEAK_POS: [number, number] = [50, -100];\n\nexport class Shape2D {\n\n  static isDisplayable(size: [number, number]) {\n    return !isEmpty(size) && size[0] > 0 && size[1] > 0;\n  }\n\n  /**\n   * Calculate distance\n   * @param pos1\n   * @param pos2\n   * @returns {number}\n   */\n  static distance(pos1: [number, number], pos2: [number, number]): number {\n    const relative = Shape2D.relative(pos1, pos2);\n    return Math.sqrt(Math.pow(relative[0], 2) + Math.pow(relative[1], 2));\n  }\n\n  static relative(pos1: [number, number], pos2: [number, number]): [number, number] {\n    const p1 = Shape2D.guard(pos1);\n    const p2 = Shape2D.guard(pos2);\n    return [p2[0] - p1[0], p2[1] - p1[1]];\n  }\n\n  static bottomRight(size: [number, number], pos: [number, number]): [number, number] {\n    const s = Shape2D.guard(size);\n    const p = Shape2D.guard(pos);\n    return [p[0] + s[0], p[1] + s[1]];\n  }\n\n  static move(relative: [number, number], origin: [number, number]): [number, number];\n  static move(relative: [number, number], origin: [number, number], size: [number, number]): [number, number];\n  static move(relative: [number, number], origin: [number, number], size?: [number, number]): [number, number] {\n    const p1 = Shape2D.bottomRight(size, origin);\n    const p2 = Shape2D.guard(relative);\n    return [p1[0] + p2[0], p1[1] + p2[1]];\n  }\n\n  static avgPos(positions: [number, number][]): [number, number] {\n    return positions.map(pos => Shape2D.guard(pos))\n                    .reduce((avg, pos, _, { length }) => [avg[0] + pos[0] / length, avg[1] + pos[1] / length], [0, 0]);\n  }\n\n  static isInside(size: [number, number], pos: [number, number], eventPos: [number, number]): boolean {\n    const bottomRightPos = this.bottomRight(size, pos);\n    return eventPos[0] >= pos[0] && eventPos[0] <= bottomRightPos[0] &&\n           eventPos[1] >= pos[1] && eventPos[1] <= bottomRightPos[1];\n  }\n\n  static guard(pos: [number, number], fallbackX: number = 0, fallbackY: number = 0): [number, number] {\n    const x = fallbackX ?? 0;\n    const y = fallbackY ?? 0;\n    if (isEmpty(pos)) {\n      return [x, y];\n    }\n    return [pos[0] ?? x, pos[1] ?? y];\n  }\n\n  /**\n   * Compute is shape inside a rectangle\n   * @param x\n   * @param y\n   * @param left\n   * @param top\n   * @param width\n   * @param height\n   * @returns {boolean}\n   */\n  static isInsideRectangle(x: number, y: number, left: number, top: number, width: number, height: number): boolean {\n    return left < x && left + width > x && top < y && top + height > y;\n  }\n\n  /**\n   * Compute is bounding overlap\n   * @param a\n   * @param b\n   * @returns {boolean}\n   */\n  static overlapBounding([aLeft, aBottom, aRight, aTop]: [number, number, number, number],\n                         [bLeft, bBottom, bRight, bTop]: [number, number, number, number]): boolean {\n    return !(aLeft > bRight || aBottom > bTop || aRight < bLeft || aTop < bBottom);\n  }\n\n  /**\n   * Solve quadratic equation\n   * @param a\n   * @param b\n   * @param c\n   * @param d\n   * @returns {x1: number, x2: number, x3: number}\n   */\n  static quadraticEquationSolver(a: number, b: number, c: number, d: number): { x1: number, x2: number, x3: number } {\n    const delta = b * b - 3 * a * c;\n    const k = (9 * a * b * c - 2 * b * b * b - 27 * a * a * d) / (2 * Math.sqrt(Math.pow(Math.abs(delta), 3)));\n    let result;\n    if (delta > 0) {\n      if (Math.abs(k) <= 1) {\n        result = {\n          x1: (2 * Math.sqrt(delta) * Math.cos(Math.acos(k) / 3) - b) / (3 * a),\n          x2: (2 * Math.sqrt(delta) * Math.cos((Math.acos(k) / 3) - (2 * Math.PI) / 3) - b) / (3 * a),\n          x3: (2 * Math.sqrt(delta) * Math.cos((Math.acos(k) / 3) + (2 * Math.PI) / 3) - b) / (3 * a),\n        };\n      }\n      if (Math.abs(k) > 1) {\n        const x = ((Math.sqrt(delta) * Math.abs(k)) / (3 * a * k)) *\n                  (Math.cbrt(Math.abs(k) + Math.sqrt(k * k - 1)) + Math.cbrt(Math.abs(k) - Math.sqrt(k * k - 1))) - b /\n                  (3 * a);\n        result = { x1: x, x2: x, x3: x };\n      }\n    }\n    if (delta === 0) {\n      const x = (-b + Math.cbrt(b * b * b - 27 * a * a * d)) / (3 * a);\n      result = { x1: x, x2: x, x3: x };\n    }\n    if (delta < 0) {\n      const x = (Math.sqrt(Math.abs(delta)) / (3 * a)) *\n                (Math.cbrt(k + Math.sqrt(k * k + 1)) + Math.cbrt(k - Math.sqrt(k * k + 1))) - b / (3 * a);\n      result = { x1: x, x2: x, x3: x };\n    }\n    return result;\n  }\n}\n","import { Node } from '../nodes/node';\nimport { DispatcherRegistry } from './DispatcherRegistry';\nimport { PubSubHelpers } from './PubSubHelpers';\n\nexport abstract class DispatchNode extends Node {\n  /**\n   * `@Dispatch` will call it: for listening dispatched value\n   * @param {any} value - value got from `@Dispatch`\n   */\n  abstract subscribe(value: any): void;\n\n  /**\n   * For listening store protocol, point changes\n   */\n  abstract updateProtocols(): void;\n\n  abstract getSelectedProtocol(): string;\n\n  abstract getSelectedPoint(): string;\n\n  abstract getSelectedPointName(): string;\n\n  onAdded() {\n    super.onAdded();\n    DispatcherRegistry.instance().register(this, true);\n    PubSubHelpers.map(this);\n  }\n\n  onRemoved() {\n    DispatcherRegistry.instance().remove(this);\n    PubSubHelpers.unMap(this);\n  }\n}\n","import { AbstractRegistry } from '../nodes/registry';\nimport { IdGenerator } from '../utils/id-generator';\nimport { DispatchNode } from './DispatchNode';\n\nexport class DispatcherRegistry extends AbstractRegistry<DispatchNode> {\n  private static _instance: DispatcherRegistry;\n\n  private constructor() {\n    super();\n  }\n\n  public static instance(): DispatcherRegistry {\n    if (!DispatcherRegistry._instance) {\n      DispatcherRegistry._instance = new DispatcherRegistry();\n    }\n    return DispatcherRegistry._instance;\n  }\n\n  protected createKey(node: DispatchNode): string | number {\n    return IdGenerator.createNodeId(node.cid, node.id);\n  }\n\n  protected itemName(): string {\n    return 'Dispatcher Node';\n  }\n}\n","import { DispatcherRegistry } from './DispatcherRegistry';\nimport { DispatchNode } from './DispatchNode';\nimport { IPubSub, Store } from './IPubSub';\n\n/**\n * Example:\n * {\n *   \"protocol1\": {\n *     \"points\": {\n *       \"point1\": { msg: <any>, name: 'Point1', listener: [{node: node1, soft: true}, {node: node2, soft: false}, ...]},\n *       \"point2\": { msg: <any> , name: 'Point2', listener: [{node: node1, soft: true}, {node: node2, soft: false}, ...]}\n *     },\n *   },\n *   \"protocol2\": {\n *     \"points\": {\n *       \"point1\": { msg: <any>, name: 'Point1', listener: [{node: node1, soft: true}, {node: node2, soft: false}, ...]},\n *       \"point2\": { msg: <any>, name: 'Point2', listener: [{node: node1, soft: true}, {node: node2, soft: false}, ...]}\n *     },\n *   }\n * }\n */\nclass PubSub implements IPubSub {\n  store: Store = {};\n\n  public getStore(): Store {\n    return this.store;\n  }\n\n  public addPoint(protocol: string, point: string, name: string, soft: boolean): void {\n    if (!this.store[protocol]) {\n      this.store[protocol] = { points: {} };\n    }\n    if (!this.store[protocol].points[point]) {\n      this.store[protocol].points[point] = { msg: {}, name, listeners: [], soft };\n    } else {\n      // Point exist already and soft is true and now it's inserted in real\n      if (this.store[protocol].points[point].soft && !soft) {\n        this.store[protocol].points[point].soft = soft;\n      }\n    }\n    this.updateProtocols();\n  }\n\n  public removePoint(protocol: string, point: string): void {\n    if (this.store[protocol]?.points?.[point]) {\n      delete this.store[protocol].points[point];\n    }\n    if (Object.keys(this.store[protocol]?.points || {})?.length === 0) {\n      delete this.store[protocol];\n    }\n    this.updateProtocols();\n  }\n\n  public renamePoint(protocol: string, point: string, name: string): void {\n    if (this.store?.[protocol]?.points?.[point]) {\n      this.store[protocol].points[point].name = name;\n    }\n    this.updateProtocols();\n  }\n\n  public dispatch(protocol: string, point: string, value: any): void {\n    if (this.store[protocol]?.points?.[point]) {\n      this.store[protocol].points[point].msg = value;\n      this.store[protocol].points[point].listeners.forEach(node => {\n        node.subscribe(value);\n      });\n    }\n  }\n\n  public connect(protocol: string, point: string, name: string, node: DispatchNode): void {\n    // Remove if it's subscribing to any\n    Object.keys(this.store).forEach(protocol => {\n      Object.keys(this.store[protocol].points).forEach(point => {\n        this.store[protocol].points[point].listeners = this.store[protocol].points[point].listeners.filter(\n          n => !(n.cid === node.cid && n.id === node.id),\n        );\n      });\n    });\n    if (!(protocol && point && name)) return;\n    this.addPoint(protocol, point, name, true);\n    this.store[protocol].points[point].listeners.push(node);\n    node.subscribe(this.store[protocol].points[point].msg);\n  }\n\n  public disconnect(protocol: string, point: string, node: DispatchNode): void {\n    if (this.store[protocol]?.points?.[point]) {\n      const storePoint = this.store[protocol].points[point];\n      storePoint.listeners = storePoint.listeners.filter(n => !(n.cid === node.cid && n.id === node.id));\n    }\n  }\n\n  private updateProtocols() {\n    DispatcherRegistry.instance().list().forEach(n => n.updateProtocols());\n  }\n}\n\nexport const pubSubSingleton: IPubSub = new PubSub();\n","import { AxiosResponse, default as axios } from 'axios';\nimport { get } from 'lodash';\nimport config from '../config';\nimport { Entry } from './entry';\n\nexport abstract class Api<T extends Entry> {\n  protected client = axios.create({ baseURL: config.backendSync.baseUrl });\n\n  abstract list(objId?: string): Promise<T[]>;\n\n  abstract get(objId: string): Promise<T[]>;\n\n  abstract create(obj: T, parentId?: string): Promise<any>;\n\n  abstract update(obj: T, objId?: string): Promise<any>;\n\n  abstract delete(objId: string): Promise<any>;\n\n  abstract factoryEntry(): T;\n\n  protected fetchMany(url: string, respKey?: string): Promise<T[]> {\n    return this.client.get(url).then(this.extractData(respKey)).then(this.assignAllTo(() => this.factoryEntry()));\n  }\n\n  protected fetchOne(url: string, respKey?: string) {\n    return this.client.get(url).then(this.extractData(respKey)).then(p => Object.assign(this.factoryEntry(), p));\n  }\n\n  protected newEntry<T>(c: new () => T): T {\n    return new c();\n  }\n\n  protected extractData<T>(path: string = null) {\n    return (response: AxiosResponse<T>) => (path ? get(response.data, path) : response.data);\n  }\n\n  /**\n   * Create a provided class instance using a factory method, for all given elements, and merge each element\n   * into the class instance.\n   *\n   * Higher-order function\n   */\n  protected assignAllTo<T>(factory: () => T) {\n    return (properties: any[]): T[] => properties.map(p => Object.assign(factory(), p));\n  }\n}\n","import { get, isEqual } from 'lodash';\nimport { Api } from '../../../../backend/api';\nimport { Entry } from '../../../../backend/entry';\nimport config from '../../../../config';\nimport { singleton as actor } from '../../../../promise-actor';\nimport { IOT_TYPES } from '../../../constants';\nimport { ContainerNode } from '../../../container-node';\nimport { BROADCAST, Node } from '../../../node';\nimport { NodeFactory } from '../../../node-factory';\nimport { SerializedNode, Side } from '../../../node-interface';\nimport { NodeSetting, SettingType } from '../../../node-io';\nimport EntryNode from './entry-node';\nimport Mixin from './mixin';\n\n/**\n *\n * @param <T> Type of the Entry that this container manages\n */\nexport default abstract class ApiContainerNode<T extends Entry> extends ContainerNode implements EntryNode<T> {\n  extra_node_types = this.childNodeType().filter(v => IOT_TYPES.includes(v));\n  properties: {\n    entry: T;\n    is_protected: boolean;\n  };\n  clonable = false;\n  movable = false;\n  settingFields: {};\n  entry = Mixin.prototype.entry.bind(this);\n  entryId = Mixin.prototype.entryId.bind(this);\n  deactivate = Mixin.prototype.deactivate.bind(this);\n  createSettingForm = Mixin.prototype.createSettingForm.bind(this);\n  getTakenIdentifiers = Mixin.prototype.getTakenIdentifiers.bind(this);\n  makeIdentifier = Mixin.prototype.makeIdentifier.bind(this);\n  findFreeIdentifier = Mixin.prototype.findFreeIdentifier.bind(this);\n  protected api: Api<T>;\n\n  constructor() {\n    super();\n    this.description = 'placeholder'; // FIXME\n    this.api = this.initAPI();\n    this.settings['name'] = NodeSetting.create({\n                                                 description: 'Entry',\n                                                 value: this.title,\n                                                 type: SettingType.READONLY,\n                                               });\n  }\n\n  abstract namePrefix(): string;\n\n  abstract createEntry(): Promise<T>;\n\n  entryFactory(): T {\n    return this.api.factoryEntry();\n  }\n\n  updateEntry(body: T): Promise<any> {\n    return this.api.update(body, this.entryId());\n  }\n\n  deleteEntry(): Promise<any> {\n    return this.api.delete(this.entryId());\n  }\n\n  onAdded() {\n    Mixin.prototype.onAdded.call(this);\n    super.onAdded();\n  }\n\n  applyEntry(entry: T) {\n    Mixin.prototype.applyEntry.call(this, entry);\n    this.applyTitle();\n    this.broadcastTitleToClients();\n  }\n\n  onAfterSettingsChange(old) {\n    Mixin.prototype.onAfterSettingsChange.call(this);\n    super.onAfterSettingsChange(old);\n  }\n\n  onCreated() {\n    super.onCreated();\n    const namePrefix = this.namePrefix();\n    const nameSuffix = this.entry() ? ' ' + this.entryId() : '';\n    this.settings['name'].value = namePrefix + nameSuffix;\n    Mixin.prototype.onCreated.call(this);\n  }\n\n  onRemoved() {\n    Mixin.prototype.onRemoved.call(this);\n  }\n\n  shouldRejectNodeType(type: string): boolean {\n    // reject all IoT nodes as children, except the correct hierarchical child node type. Allow all others\n    return !this.childNodeType().includes(type);\n  }\n\n  syncWithBackend() {\n    if (this.side !== Side.server) return;\n    actor.process(() => this.fetchChildren().then(children => {\n                    const childIds = children.map(v => v.entryId());\n                    const childNodes = this.collectChildNodes(this.sub_container.getNodes()).map(\n                      n => n as EntryNode<Entry>);\n                    const existingChildNodes = childNodes.filter(n => childIds.includes(n.entryId()));\n                    const obsoleteChildNodes = childNodes.filter(\n                      n => !n.properties.is_protected && !childIds.includes(n.entryId()),\n                    );\n                    Promise.all(obsoleteChildNodes.map(n => {\n                      n.deactivate();\n                      //TODO not yet send to client\n                      return n.container.nodeRegistry().remove(n);\n                    })).then(_ => this.processNextChildEntry(children, existingChildNodes));\n                  }),\n    );\n  }\n\n  onGetMessageToEditorSide({ action, payload }) {\n    super.onGetMessageToEditorSide({ action, payload, key: null });\n    if (action === BROADCAST.UPDATE_TITLE) this.applyTitle();\n  }\n\n  protected applyTitle() {\n    super.applyTitle();\n    this.container.runWithEditor(e => {\n      if (get(e, 'renderer.container.id') === this.container.id) {\n        e.emit('rerender-siderbar-containers');\n      }\n    });\n  }\n\n  protected abstract initAPI(): Api<T>;\n\n  protected abstract childNodeType(): string[];\n\n  /**\n   * Fetch all current child entries of the main entry from the remote API\n   */\n  protected abstract fetchChildren(): Promise<Entry[]>;\n\n  /**\n   * When given an array of child-nodes, returns only the nodes that manage child entries of the main entry\n   */\n  protected abstract collectChildNodes(nodes: Node[]): Node[];\n\n  /**\n   * Recursively and asynchronously processes the next of the remaining entries from the remote API\n   */\n  protected processNextChildEntry(remaining: Entry[], childNodes: EntryNode<Entry>[]) {\n    if (!remaining || remaining.length === 0) return;\n    const entry = remaining.pop();\n    let existingNode = childNodes.find(node => node.entryId() === entry.entryId());\n    const callback = () => {\n      if (existingNode instanceof ApiContainerNode) {\n        (<ApiContainerNode<any>>existingNode).syncWithBackend();\n      }\n      this.processNextChildEntry(remaining, childNodes);\n    };\n    if (!existingNode) {\n      // console.log('Creating child node for ' + this.title + ' ' + (entry.entryId() || ''));\n      const maxVerticalPosition = Math.max(100, ...this.sub_container.getNodes(false).map(n => n.pos[1]));\n      const pos: [number, number] = [250, maxVerticalPosition + config.backendSync.nodeDistance];\n      // existingNode is used above! Leave this reassignment:\n      this.sub_container.nodeRegistry()\n          .register(NodeFactory.create(<SerializedNode>{ type: entry.nodeType(), properties: { entry }, pos }, true))\n          .then(n => {\n            existingNode = <EntryNode<Entry>>n;\n            callback();\n          });\n    } else if (!isEqual(existingNode.entry(), entry)) {\n      // console.log('Found existing node with outdated entry, updating...');\n      existingNode.applyEntry(entry);\n      existingNode.persistConfiguration(callback);\n    } else {\n      callback();\n    }\n  }\n}\n","import { Entry } from '../../../../backend/entry';\nimport ApiContainerNode from './api-container-node';\n\n/**\n * Container node that contains a collection of API synced child nodes, but has itself no entity\n * or parent\n */\nexport default abstract class TopLevelApiContainerNode<C extends Entry> extends ApiContainerNode<C> {\n  settingFields = {};\n\n  entryFactory = () => null;\n\n  applyEntry = () => {\n    // Top level container's entry is always 'null'\n    this.title = this.namePrefix();\n    this.sub_container.name = this.title;\n  };\n\n  onAdded = () => {\n    this.ignore_remove = true;\n    this.removable = false;\n    this.movable = false;\n    this.applyEntry();\n    this.syncWithBackend();\n  };\n\n  createEntry = () => Promise.resolve(null);\n\n  updateEntry = (body: any) => Promise.resolve(null);\n\n  deleteEntry = () => Promise.resolve(null);\n\n  namePrefix = () => this.title;\n\n  getTakenIdentifiers = () => Promise.resolve([]);\n\n  makeIdentifier = (n: number): string => null;\n\n  findFreeIdentifier = (): Promise<string> => Promise.resolve(null);\n}\n","module.exports = require(\"lodash-decorators/debounce\");","module.exports = require(\"socket.io\");","import app from '../app';\n\nconst schemaMiddleware = (schema, property) => {\n  return (req, res, next) => {\n    const { error } = schema.validate(req[property]);\n    const valid = error == null;\n    if (valid) {\n      next();\n    } else {\n      const { details } = error;\n      const message = details.map(i => i.message).join(',');\n      res.status(422).json({ error: message });\n    }\n  };\n};\n\nconst isAuthenticated = async (token: string): Promise<boolean> => {\n  try {\n    await app.db.isAuthenticated(token);\n    return true;\n  } catch (e) {\n    return false;\n  }\n};\n\nconst authMiddleware = () => {\n  return async (req, res, next) => {\n    const token = req.headers['token'];\n    if (!token) {\n      res.status(403).json({ error: 'Please provide token' });\n      return;\n    }\n    if (await isAuthenticated(token)) {\n      next();\n    } else {\n      res.status(403).json({ error: 'Please provide valid token' });\n    }\n  };\n};\n\nexport { schemaMiddleware, authMiddleware };\n","import { Response } from 'express';\nimport { NotFoundError } from '../../../utils/errors';\nimport { isNotNull } from '../../../utils/helper';\nimport { reliability_logger } from '../../../utils/loggers';\nimport { EditorServerSocket } from '../../editor-server-socket';\nimport { ApiResult } from '../../../shared/api-result';\n\nexport abstract class ApiHandler {\n  protected readonly editorSocket: EditorServerSocket;\n\n  protected constructor(editorSocket: EditorServerSocket) {\n    this.editorSocket = editorSocket;\n  }\n\n  protected emitSuccess(resp: Response, event: string, result: ApiResult<any>, code: number = 200) {\n    this.editorSocket.io.emit(event, result.result());\n    return resp.status(code).send(result.message);\n  }\n\n  protected emitError(resp: Response, err: Error, event: string, errorFunc?: (e: Error) => number) {\n    reliability_logger.warn(err.stack ?? err.message);\n    return resp.status(err instanceof NotFoundError ? 404 : isNotNull(errorFunc) ? errorFunc(err) : 400)\n               .send(`Can't ${event.toLowerCase()}. Reason: ${err}`);\n  }\n}\n","import { NodeFactory } from '../../nodes/node-factory';\nimport {\n  ContainerRegistryMetadata,\n  IContainer,\n  IFolderNode,\n  INode,\n  isFolderNode,\n  SerializedContainer,\n  SerializedNode,\n} from '../../nodes/node-interface';\nimport { NodeRegistryHelper } from '../../nodes/node-registry';\nimport { CreationResult, initETLResult, RemoveResult } from '../../shared/etl-result';\nimport { ContainerRegistryValidator } from '../../shared/validator';\nimport { isNotNull } from '../../utils/helper';\nimport { IdGenerator } from '../../utils/id-generator';\nimport { NodeService } from './node-service';\n\nexport class NodeCRUDService extends NodeService {\n\n  getNodes(parent: number | string | IContainer, registry?: ContainerRegistryMetadata): Promise<SerializedContainer> {\n    const reg = registry ?? this.cRegistry;\n    const db = reg.rootContainer()['db'];\n    return ContainerRegistryValidator.mustExisted(parent, reg)\n                                     .then(c => this.dbHelper.listByContainer(db, c.id)\n                                                    .then(nodes => this.getNodesInContainer(db, nodes))\n                                                    .then(nodes => <SerializedContainer>{\n                                                      id: c.id,\n                                                      name: c.name,\n                                                      serializedNodes: nodes,\n                                                    }));\n  }\n\n  createNode(parent: number | string | IContainer, node: SerializedNode,\n             registry?: ContainerRegistryMetadata): Promise<CreationResult> {\n    this.logger.info(`Creating new node '${node.type}' in container '${parent}'...`);\n    const reg = registry ?? this.cRegistry;\n    return ContainerRegistryValidator.mustExisted(parent, reg)\n                                     .then(p => p.nodeRegistry().register(NodeFactory.create(node, true, registry)))\n                                     .then(n => new CreationResult(n));\n  }\n\n  removeNodes(parent: number | string | IContainer, nodes: (number | string | SerializedNode | INode)[],\n              recursive: boolean = false, metadata?: ContainerRegistryMetadata): Promise<RemoveResult> {\n    const registry = metadata ?? this.cRegistry;\n    const db = registry.rootContainer()['db'];\n    const v = ContainerRegistryValidator.mustExisted(parent, registry);\n    return v.then(p => {\n      const findNodes = this.findNodes(p, nodes, recursive, registry);\n      return this.dbHelper.batchDeleteByIds(db, findNodes.map(n => IdGenerator.createNodeId(n.cid, n.id)))\n                 .then(_ => NodeRegistryHelper.unregister(p, findNodes, registry, true))\n                 .then(r => initETLResult<RemoveResult>(RemoveResult, p.id, findNodes.length, r));\n    });\n  }\n\n  private findNodes(p: IContainer, nodes: (number | string | SerializedNode | INode)[], recursive: boolean,\n                    registry: ContainerRegistryMetadata): SerializedNode[] {\n    const list = NodeFactory.standardize(p, nodes);\n    if (!recursive) {\n      return list;\n    }\n    return list.flatMap(node => {\n      const n = p.nodeRegistry().get(node);\n      if (isFolderNode(n)) {\n        const container = registry.get((<IFolderNode>n).sub_container.id);\n        if (isNotNull(container)) {\n          return [...this.findNodes(container, container.nodeRegistry().list(), recursive, registry), n];\n        }\n      }\n      return [n ?? node];\n    });\n  }\n}\n","import { Node } from '../nodes/node';\nimport { INode, SerializedNode } from '../nodes/node-interface';\nimport { RegistryResult } from '../nodes/registry';\nimport { SerializableHelper } from '../nodes/serializable';\nimport { RegistryError } from '../utils/errors';\nimport { isEmpty } from '../utils/helper';\nimport { ApiResult } from './api-result';\n\nabstract class ETLResult extends RegistryResult<SerializedNode> {\n  readonly containerId: string | number;\n  readonly total: number;\n  message: string;\n\n  protected constructor(containerId: string | number, total: number, objects: SerializedNode[],\n                        errors: RegistryError<SerializedNode>[]) {\n    super(objects, errors);\n    this.containerId = containerId;\n    this.total = total;\n    this.message = this.genMessage();\n  }\n\n  static init<T extends ETLResult>(className: any, cId: string | number, total: number, result: RegistryResult<Node>,\n                                   args?: {}): T {\n    const nodes = result.objects.map(n => n.serialize());\n    const errors = result.errors.map(e => new RegistryError(e.message, e.item?.serialize()));\n    return new className(cId, total, nodes, errors, args);\n  }\n\n  protected errMsg(): string {\n    return isEmpty(this.errors) ? '' : `Errors: [${this.errors}]`;\n  }\n\n  protected abstract genMessage(): string;\n}\n\nexport class CreationResult implements ApiResult<SerializedNode> {\n  readonly node: SerializedNode;\n  readonly message: string;\n  readonly isDashboardNode: boolean;\n\n  constructor(node: INode) {\n    this.node = SerializableHelper.serialize(node);\n    this.isDashboardNode = (<Node>node)?.isDashboardNode;\n    this.message = `Created node '${(<Node>node)?.getReadableId()}' into container '${node.cid}'.`;\n  }\n\n  result(): SerializedNode {\n    return this.node;\n  }\n\n}\n\nexport class RemoveResult extends ETLResult implements ApiResult<RemoveResult> {\n\n  result(): RemoveResult {\n    return this;\n  }\n\n  protected genMessage(): string {\n    return `Removed ${this.objects.length}/${this.total} nodes into container '${this.containerId}'. ${this.errMsg()}`;\n  }\n\n}\n\nexport class ExportResult extends ETLResult implements ApiResult<ExportResult> {\n  constructor(containerId: string | number, objects: SerializedNode[]) {\n    super(containerId, 0, objects, null);\n  }\n\n  result(): ExportResult {\n    return this;\n  }\n\n  protected genMessage() {\n    return `Exported ${this.objects.length} nodes and sub nodes in container '${this.containerId}'.`;\n  }\n}\n\nexport class ImportResult extends ETLResult implements ApiResult<ImportResult> {\n  result(): ImportResult {\n    return this;\n  }\n\n  protected genMessage() {\n    return `Imported ${this.objects.length}/${this.total} nodes into container '${this.containerId}'. ${this.errMsg()}`;\n  }\n}\n\nexport class CloneResult extends ETLResult implements ApiResult<CloneResult> {\n  result(): CloneResult {\n    return this;\n  }\n\n  protected genMessage() {\n    return `Cloned ${this.objects.length}/${this.total} nodes into container '${this.containerId}'. ${this.errMsg()}`;\n  }\n}\n\nexport class PackResult extends ETLResult\n  implements ApiResult<{ containerId: string | number, objects: SerializedNode[], errors: RegistryError<SerializedNode>[] }> {\n\n  readonly cleanupResult: RemoveResult;\n  private readonly dest: string | number;\n\n  constructor(containerId: string | number, total: number, objects: SerializedNode[],\n              errors: RegistryError<SerializedNode>[],\n              args: { cid: string | number, rr: RemoveResult }) {\n    super(containerId, total, objects, errors);\n    this.dest = args.cid;\n    this.cleanupResult = args.rr;\n    this.message = this.genMessage();\n  }\n\n  result(): { containerId: string | number, objects: SerializedNode[], errors: RegistryError<SerializedNode>[] } {\n    return { containerId: this.containerId, objects: this.objects, errors: this.errors };\n  }\n\n  protected genMessage() {\n    return `Moved ${this.objects.length - 1}/${this.total} nodes ` +\n           `from '${this.containerId}' into container '${this.dest}'. ${this.errMsg()}`;\n  }\n}\n\nexport const initETLResult = <T>(className: any, cid: string | number, total: number, result: RegistryResult<Node>,\n                                 args?: {}): T => {\n  const nodes = result.objects.map(n => SerializableHelper.serialize(n));\n  const errors = result.errors.map(e => new RegistryError(e.message, SerializableHelper.serialize(e.item)));\n  return new className(cid, total, nodes, errors, args);\n};\n","import { Node } from '../../nodes/node';\nimport { NodeFactory } from '../../nodes/node-factory';\nimport {\n  ContainerRegistryMetadata,\n  IContainer,\n  IFolderNode,\n  INode,\n  isFolderNode,\n  SerializedContainer,\n  SerializedFolderNode,\n  SerializedNode,\n} from '../../nodes/node-interface';\nimport { SerializedNodeInput, SerializedNodeOutput } from '../../nodes/node-io';\nimport { createLinkHandler, createNodeLink, Link, NodeLink } from '../../nodes/node-link';\nimport { Shape2D } from '../../nodes/node-presenter';\nimport { NodeRegistryHelper } from '../../nodes/node-registry';\nimport { NodeTypeRegistry } from '../../nodes/node-type-registry';\nimport { CONTAINER_NODE_TYPE } from '../../nodes/nodes/container/folder';\nimport { RegistryResult } from '../../nodes/registry';\nimport { SerializableHelper } from '../../nodes/serializable';\nimport { CloneResult, ExportResult, ImportResult, initETLResult, PackResult } from '../../shared/etl-result';\nimport { LinkResult } from '../../shared/link-result';\nimport {\n  ContainerRegistryValidator,\n  IContainerRegistryValidator,\n  INodeRegistryValidator,\n  ListValidator,\n} from '../../shared/validator';\nimport {\n  arrayToObject,\n  isEmpty,\n  isNotNull,\n  isNull,\n  mapToObjectSameKey,\n  objectOf,\n  unionToArray,\n} from '../../utils/helper';\nimport { BaseIdGenerator, IdGenerator } from '../../utils/id-generator';\nimport { node_service_logger } from '../../utils/loggers';\nimport { NodeService } from './node-service';\nimport { NodeCRUDService } from './NodeCRUDService';\n\n/**\n * Represents for ETL service (Extract - Transform - Load data, a.k.a import/export)\n */\nexport class NodeETLService extends NodeService {\n\n  /**\n   * Pack up nodes to new container under specific one\n   * @param {number} parentId current parent container id\n   * @param {number[]} ids node ids to pack up\n   * @param atPos At position\n   * @param {ContainerRegistryMetadata} metadata container registry\n   * @return {Promise<PackResult>} pack result\n   */\n  packUpNodes(parentId: string | number, ids: (string | number)[], atPos: [number, number],\n              metadata?: ContainerRegistryMetadata): Promise<PackResult> {\n    this.logger.info(`Packing nodes [${ids}] in container '${parentId}' into new container...`);\n    const reg: ContainerRegistryMetadata = metadata ?? this.cRegistry;\n    const v = ContainerRegistryValidator.mustExisted(parentId, reg);\n    return v.then(p => ListValidator.notEmpty(ids, `No node to pack-up`)\n                                    .then(nodeIds => this.doExport(parentId, nodeIds, reg))\n                                    .then(nodes => this.doPackUp(p, atPos, nodes, reg)));\n  }\n\n  /**\n   * Clone nodes to other nodes under specific container\n   * @param {number} parentId current parent container id\n   * @param {number[]} ids node ids to clone\n   * @param {[number, number]} atPos to move\n   * @param {ContainerRegistryMetadata} metadata container registry\n   * @return {Promise<CloneResult>} clone result\n   */\n  cloneNodes(parentId: string | number, ids: number[], atPos: [number, number],\n             metadata?: ContainerRegistryMetadata): Promise<CloneResult> {\n    this.logger.info(`Cloning nodes [${ids}] inside container id '${parentId}'...`);\n    return ListValidator.notEmpty(ids, `No node to clone`)\n                        .then(nodeIds => this.doExport(parentId, nodeIds, metadata))\n                        .then(nodes => this.doImport(nodes, parentId, metadata, atPos))\n                        .then(r => initETLResult<CloneResult>(CloneResult, parentId, ids.length, r));\n  }\n\n  /**\n   * Export nodes and children nodes from specific container\n   * @param {number} parentId\n   * @param {number[]} ids\n   * @param {ContainerRegistryMetadata} metadata\n   * @return {Promise<SerializedNode[]>}\n   */\n  exportNodes(parentId: string | number, ids: number[], metadata?: ContainerRegistryMetadata): Promise<ExportResult> {\n    return ListValidator.notEmpty(ids, `No node to export`)\n                        .then(nodeIds => this.doExport(parentId, nodeIds, metadata))\n                        .then(l => ListValidator.notEmpty<SerializedNode>(l, `Not found any [${ids}] to export`))\n                        .then(nodes => new ExportResult(parentId, nodes));\n  }\n\n  /**\n   * Import nodes into specific container\n   * @param {number} parentId\n   * @param {SerializedNode[]} nodes\n   * @param {[number, number]} atPos\n   * @param {ContainerRegistryMetadata} metadata?\n   * @return {Promise<ImportResult>}\n   */\n  importNodes(parentId: string | number, nodes: SerializedNode[], atPos: [number, number],\n              metadata?: ContainerRegistryMetadata): Promise<ImportResult> {\n    return ListValidator.notEmpty(nodes, `No nodes to import`)\n                        .then(n => this.doImport(n, parentId, metadata, atPos))\n                        .then(r => initETLResult<ImportResult>(ImportResult, parentId, nodes.length, r));\n  }\n\n  private doExport(cid: string | number, ids: (string | number)[],\n                   metadata: ContainerRegistryMetadata): Promise<SerializedNode[]> {\n    this.logger.info(`Exporting [${ids}] nodes in container '${cid}'...`);\n    const registry: ContainerRegistryMetadata = metadata ?? this.cRegistry;\n    const database = registry.rootContainer()['db'];\n    return ContainerRegistryValidator.mustExisted(cid, registry)\n                                     .then(c => unionToArray(ids.map(nid => IdGenerator.createNodeId(c.id, nid))))\n                                     .then(exportIds => this.dbHelper.listByIds(database, exportIds))\n                                     .then(nodes => this.getNodesInContainer(database, nodes));\n  }\n\n  private createFolder(parent: IContainer, registry: ContainerRegistryMetadata,\n                       atPos: [number, number]): IFolderNode {\n    this.logger.info(`Creating new folder node into container id '${parent.id}'...`);\n    const id = this.idGenerator.genNodeId(parent.id, IdGenerator.UNINITIALIZED);\n    const folder = <IFolderNode><unknown>NodeFactory.create(<SerializedFolderNode>{\n      id, cid: parent.id, type: CONTAINER_NODE_TYPE, pos: atPos, sub_container: { id },\n    }, true, registry);\n    folder.container = parent;\n    folder.sub_container = registry.register(folder.sub_container);\n    this.logger.info(`Cached new folder node id '${IdGenerator.createNodeId(parent.id, folder.id)}' ` +\n                     `with container id '${folder.sub_container.id}'`);\n    return folder;\n  }\n\n  private doPackUp(parent: IContainer, atPos: [number, number], nodes: SerializedNode[],\n                   registry: ContainerRegistryMetadata): Promise<PackResult> {\n    const folder = this.createFolder(parent, registry, atPos);\n    const cid = folder.sub_container.id;\n    const ids = nodes.map(n => n.id);\n    this.logger.info(`Analyzing ${ids.length} nodes to move from container '${parent.id}' ` +\n                     `into container id '${cid}'...`);\n    return Promise.resolve(new NodeTree(cid, this.idGenerator, parent.id))\n                  .then(tree => tree.compute(nodes))\n                  .then(tree => this.dbHelper.batchInsert(registry.rootContainer()['db'],\n                                                          [SerializableHelper.serialize(folder), ...tree.flatten()]))\n                  .then(pNodes => new NodeCRUDService().removeNodes(parent, ids).then(rr => ({ nodes: pNodes, rr })))\n                  .then(({ nodes, rr }) => NodeRegistryHelper.register(parent, nodes, registry, true)\n                                                             .then(pr => ({ pr, rr })))\n                  .then(({ pr, rr }) => initETLResult<PackResult>(PackResult, parent.id, ids.length, pr, { cid, rr }));\n  }\n\n  private doImport(nodes: SerializedNode[], parentId: string | number, metadata: ContainerRegistryMetadata,\n                   atPos: [number, number]): Promise<RegistryResult<Node>> {\n    this.logger.info(`Analyzing ${nodes.length} nodes to import into container id '${parentId}'...`);\n    const registry: ContainerRegistryMetadata = metadata ?? this.cRegistry;\n    const db = registry.rootContainer()['db'];\n    return ContainerRegistryValidator.mustExisted(parentId, registry)\n                                     .then(c => Promise.resolve(new NodeTree(c.id, this.idGenerator))\n                                                       .then(tree => tree.compute(nodes, atPos))\n                                                       .then(t => this.dbHelper.batchInsert(db, t.flatten()))\n                                                       .then(n => NodeRegistryHelper.register(c, n, registry, true)));\n  }\n\n}\n\nexport class NodeTree {\n  private readonly destCId: string;\n  private readonly contextCId: string;\n  private readonly idGenerator: BaseIdGenerator;\n  private readonly logger = node_service_logger;\n  private tree: NodeBranch;\n  private outputs: SerializedNode[];\n\n  constructor(destCId: string | number, idGenerator: BaseIdGenerator, contextCId?: string | number) {\n    this.destCId = destCId + '';\n    this.contextCId = isNull(contextCId) ? this.destCId : contextCId + '';\n    this.idGenerator = idGenerator;\n  }\n\n  /**\n   * Build and normalize node tree\n   * @param {SerializedNode[]} nodes the given nodes\n   * @param {[number, number]} atPos position\n   * @return {NodeTree}\n   */\n  compute(nodes: SerializedNode[], atPos?: [number, number]): NodeTree {\n    const { containers, nodeMap } = this.analyze(nodes);\n    if (isEmpty(nodeMap)) {\n      return this;\n    }\n    this.tree = this.build(containers, nodeMap);\n    this.tree = this.tree.normalize(atPos);\n    this.outputs = this.tree.flatten();\n    return this;\n  }\n\n  /**\n   * Returns flatten nodes to insert into database\n   * @return {SerializedNode[]} list serialized node\n   */\n  flatten(): SerializedNode[] {\n    return this.outputs ?? [];\n  }\n\n  private analyze(nodes: SerializedNode[]): { containers: { [cid: string]: SerializedContainer }, nodeMap: { [cid: string]: SerializedNode[] } } {\n    return nodes.reduce(\n      (o, n) => {\n        if (isFolderNode(n)) {\n          const cid = (<SerializedFolderNode>n).sub_container.id;\n          o.containers[cid] = { id: this.idGenerator.genContainerId(cid) };\n        }\n        o.nodeMap[n.cid] = isNull(o.nodeMap[n.cid]) ? [n] : [...o.nodeMap[n.cid], n];\n        return o;\n      }, { containers: {}, nodeMap: {} });\n  }\n\n  private build(containers: { [cid: string]: SerializedContainer },\n                nodeMap: { [cid: string]: SerializedNode[] }): NodeBranch {\n    const remain = Object.keys(nodeMap).filter(cid => isNull(containers[cid]));\n    if (remain.length > 1) {\n      throw new Error(`The given nodes has invalid node(s) that is under non-existed container(s) ` +\n                      `[${remain.filter(id => id !== this.destCId)}]`);\n    }\n    const mapContainers = { ...containers, ...objectOf(this.contextCId, { id: this.destCId }) };\n    this.logger.info(`Building node tree with ${Object.keys(containers).length} new containers ` +\n                     `into container '${this.destCId}'...`);\n    if (remain.length === 1 && remain[0] !== this.contextCId) {\n      nodeMap[this.contextCId] = nodeMap[remain[0]];\n      delete nodeMap[remain[0]];\n    }\n    const remapNodes = arrayToObject(Object.keys(mapContainers), cid => cid, cid => nodeMap[cid] ?? []);\n    return this.buildBranch(this.contextCId, mapContainers, remapNodes);\n  }\n\n  private buildBranch(parent: string, containers: { [p: string]: SerializedContainer },\n                      nodeMap: { [p: string]: SerializedNode[] }): NodeBranch {\n    this.logger.info(`Analyzing ${nodeMap[parent].length} nodes(s) in container '${containers[parent].id}'...`);\n    return new NodeBranch(containers[parent]).add(nodeMap[parent], id => this.idGenerator.genNodeId(parent, id),\n                                                  cid => this.buildBranch(cid, containers, nodeMap));\n\n  }\n\n}\n\nclass NodeBranch {\n\n  readonly parent: SerializedContainer;\n  readonly siblingIds: { [nId: string]: string } = {};\n  private readonly nodes: { [nId: string]: { node: SerializedNode, descendant?: NodeBranch } } = {};\n  private readonly nodeLinks: NodeLink[] = [];\n  private readonly logger = node_service_logger;\n  private outputs: SerializedNode[];\n\n  constructor(parent: SerializedContainer) {\n    this.parent = parent;\n  }\n\n  add(nodes: SerializedNode[], generateId: (id) => string, lookup: (cid) => NodeBranch): NodeBranch {\n    nodes.forEach(node => {\n      const descendant = isFolderNode(node) ? lookup((<IFolderNode>node).sub_container.id) : null;\n      this.siblingIds[node.id] = generateId(node.id);\n      this.nodes[node.id] = { node, descendant };\n      let slot = 0;\n      for (const [k, input] of Object.entries(node.inputs ?? {})) {\n        if (isNull(input.link)) {\n          continue;\n        }\n        this.nodeLinks.push(createNodeLink(this.parent.id, Link.create(input.link),\n                                           Link.create({ nodeId: node.id, ioId: k, slot: ++slot })));\n        input.link = null;\n      }\n      slot = 0;\n      for (const [k, output] of Object.entries(node.outputs ?? {})) {\n        if (isEmpty(output.links)) {\n          continue;\n        }\n        this.nodeLinks.push(createNodeLink(this.parent.id, Link.create({ nodeId: node.id, ioId: k, slot: ++slot }),\n                                           ...output.links.map(l => Link.create(l))));\n        output.links = [];\n      }\n    });\n    return this;\n  }\n\n  normalize(atPos?: [number, number]): NodeBranch {\n    const relativePos = this.computeRelativePositions(atPos);\n    this.logger.info(`Optimizing ${this.nodeLinks.length} node link(s) in container '${this.parent.id}'...`);\n    const handler = createLinkHandler(null, new ContainerValidator(this.parent), new NodeValidator(this.nodes), true);\n    const lr = handler.batchCreate(...this.nodeLinks);\n    this.logger.info(`Normalizing ${Object.keys(this.nodes).length} nodes in container '${this.parent.id}'...`);\n    this.outputs = Object.keys(this.nodes)\n                         .map(nId => this.nodes[nId] = this.normalizeNode(this.nodes[nId], lr, relativePos))\n                         .flatMap(branch => this.flattenBranch(branch));\n    return this;\n  }\n\n  flatten(): SerializedNode[] {\n    return this.outputs ?? [];\n  }\n\n  private computeRelativePositions(atPos: [number, number]): [number, number] {\n    const allPos = Object.values(this.nodes).map(b => b.node.pos);\n    return isNull(atPos) ? null : Shape2D.relative(Shape2D.avgPos(allPos), atPos);\n  }\n\n  private flattenBranch(branch: { node: SerializedNode, descendant?: NodeBranch }): SerializedNode[] {\n    if (isNull(branch.descendant)) {\n      return [branch.node];\n    }\n    const nodes = Object.values(branch.descendant.nodes).flatMap(sub => this.flattenBranch(sub));\n    return [branch.node, ...nodes];\n  }\n\n  private normalizeNode(branch: { node: SerializedNode; descendant?: NodeBranch }, linkResult: LinkResult,\n                        relativePos?: [number, number]): { node: SerializedNode; descendant?: NodeBranch } {\n    if (isFolderNode(branch.node)) {\n      const itself = <SerializedFolderNode>branch.node;\n      itself.sub_container.id = branch.descendant.parent.id;\n      branch.descendant = branch.descendant.normalize();\n    }\n    const oldId = branch.node.id + '';\n    branch.node.id = this.siblingIds[branch.node.id];\n    branch.node.cid = this.parent.id;\n    branch.node.type = NodeTypeRegistry.instance().lookupNodeType(branch.node.type);\n    branch.node.pos = Shape2D.move(relativePos, branch.node.pos);\n    branch.node.inputs = this.normalizeNodeInputs(oldId, branch.node.inputs, linkResult, branch.descendant);\n    branch.node.outputs = this.normalizeNodeOutputs(oldId, branch.node.outputs, linkResult, branch.descendant);\n    return branch;\n  }\n\n  private normalizeNodeInputs(nid: string, inputs: { [p: number]: SerializedNodeInput }, linkResult: LinkResult,\n                              descendant?: NodeBranch) {\n    return mapToObjectSameKey(inputs, (k, input) => {\n      const link = linkResult.getLinkByInput(this.parent.id, nid, k);\n      input.link = isNull(link) ? null : Link.create({ ...link, nodeId: this.siblingIds[link.nodeId] });\n      if (isNotNull(descendant)) {\n        input.subNodeId = descendant.siblingIds[input.subNodeId + ''];\n      }\n      return input;\n    });\n  }\n\n  private normalizeNodeOutputs(nid: string, outputs: { [p: number]: SerializedNodeOutput }, linkResult: LinkResult,\n                               descendant?: NodeBranch) {\n    return mapToObjectSameKey(outputs, (k, output) => {\n      const links = linkResult.getLinkByOutput(this.parent.id, nid, k) ?? [];\n      output.links = links.map(link => Link.create({ ...link, nodeId: this.siblingIds[link.nodeId] }));\n      if (isNotNull(descendant)) {\n        output.subNodeId = descendant.siblingIds[output.subNodeId + ''];\n      }\n      return output;\n    });\n  }\n\n}\n\nclass ContainerValidator implements IContainerRegistryValidator {\n  private readonly container: SerializedContainer;\n\n  constructor(container: SerializedContainer) {\n    this.container = container;\n  }\n\n  validate(cid: number | string | SerializedContainer | IContainer, strict?: boolean): IContainer {\n    return <IContainer>this.container;\n  }\n\n}\n\nclass NodeValidator implements INodeRegistryValidator {\n  private readonly nodes: { [nId: string]: { node: SerializedNode, descendant?: NodeBranch } };\n\n  constructor(nodes: { [p: string]: { node: SerializedNode; descendant?: NodeBranch } }) {\n    this.nodes = nodes;\n  }\n\n  validate(node: string, container: IContainer, strict?: boolean): INode {\n    return <INode>this.nodes[node]?.node;\n  }\n\n}\n","import { ContainerNode } from '../../container-node';\nimport { NodeTypeRegistry } from '../../node-type-registry';\n\nexport const CONTAINER_NODE_TYPE = 'container/folder';\n\n//Container: a node that contains a container of other nodes\nNodeTypeRegistry.registerNodeType(CONTAINER_NODE_TYPE, ContainerNode, null, true, true);\n","module.exports = require(\"os\");","module.exports = require(\"set-ip-address\");","module.exports = require(\"ip\");","module.exports = require(\"util\");","import { isNotNull, isNull } from '../../../utils/helper';\nimport { Node } from '../../node';\nimport { createNodeDbHelper } from '../../node-db-helper';\nimport { NODE_INFO } from '../../node-info';\nimport { NodeIO } from '../../node-io';\n\nexport abstract class AbstractFolderIONode extends Node {\n\n  protected constructor(title: string, description: string) {\n    super();\n    this.title = title;\n    this.description = description;\n    this.iconImageUrl = NODE_INFO.container[\"folder-input\"].iconImageUrl;\n  }\n\n  onAdd() {\n    // To backward compatible\n    if (!this.isUnderContainer() || isNull(this.properties['slot']) || this.properties['slot'] === -1) return;\n    let slot = this.properties['slot'];\n    delete this.properties['slot'];\n    createNodeDbHelper().update(this, ['properties']);\n    this.correctParentIO(this.container.nodeItself(), slot);\n  }\n\n  abstract onRemoved();\n\n  abstract onAfterSettingsChange();\n\n  protected abstract correctParentIO(containerNode: Node, slot: number);\n\n  protected isUnderContainer() {\n    return isNotNull(this.container?.nodeItself());\n  }\n\n  protected findParentIOById(inputOrOutput: string) {\n    return Object.entries(this.container.nodeItself()[inputOrOutput])\n                 .find(([_, io]) => this.id === (<NodeIO>io).subNodeId) ?? [null, null];\n  }\n\n  protected hasItself(inputOrOutput: string): boolean {\n    return this.findParentIOById(inputOrOutput)[0] !== null;\n  }\n}\n","import { NodeSetting } from '../node-io';\n\nexport default class SettingUtils {\n  /**\n   * Inserts new setting into specific position in this.settings\n   * @returns {object}\n   */\n  static insertIntoObjectAtPosition(\n    object: { [name: string]: NodeSetting },\n    insert: object,\n    after: string = '',\n    before: string = '',\n  ): { [name: string]: NodeSetting } {\n    if (before === '' && after === '') {\n      // add to end\n      Object.assign(object, insert);\n      return object;\n    }\n    // Create a temp object and index variable\n    const newObj = {};\n    let insertAfter = false;\n    const matchBoth = before !== '' && after !== '';\n    let foundFlag = false;\n\n    // Loop through the original object\n    for (let prop in object) {\n      if (object.hasOwnProperty(prop)) {\n        // look for matches for before and after keys\n        if (!foundFlag && matchBoth && insertAfter && before === prop) {\n          Object.assign(newObj, insert);\n          foundFlag = true;\n          insertAfter = false;\n        } else if (!foundFlag && !matchBoth && (insertAfter || before === prop)) {\n          Object.assign(newObj, insert);\n          foundFlag = true;\n          insertAfter = false;\n        } else if (!foundFlag && prop === after) {\n          insertAfter = true;\n        }\n        // Add the current item in the loop\n        newObj[prop] = object[prop];\n      }\n    }\n    if (!foundFlag) Object.assign(newObj, insert);\n\n    return newObj;\n  }\n}\n","let TAGNAME = {\n  CHILLER: 'Chiller',\n  CHWP: 'CHWP',\n  PlantChilledWater: 'Plant-Chilled Water',\n  BuildingInfo: 'Building Info',\n  HeatExchanger: 'Heat Exchanger',\n  CoolingTower: 'Cooling Tower',\n  CWP: 'CWP',\n  PlantCoolingTower: 'Plant-Cooling Tower',\n  Boiler: 'Boiler',\n  HWP: 'HWP',\n  BoilerPlant: 'Boiler Plant',\n  FloorControl: 'Floor Control',\n  AHU_VAV: 'AHU-VAV',\n  AHU_CAV: 'AHU_CAV',\n  FCU: 'FCU',\n  FTU: 'FTU',\n  PAC_HotWaterReheat: 'PAC - Hot Water Reheat',\n  PAC_ReverseCycle: 'PAC - Reverse Cycle',\n  PAC_ElectricReheat: 'PAC - Electric Reheat',\n  PAC_Electric_Reheat_WaterCooled: 'PAC - Electric Reheat - Water Cooled',\n  OutsideAirFan: 'Outside Air Fan',\n  SupplyAirFan: 'Supply Air Fan',\n  ReturnAirFan: 'ReturnAirFan',\n  AHUReturnAirFan: 'AHU Return Air Fan',\n  CarParkSupplyAirFan: 'CarPark Supply Air Fan',\n  CarParkExhaustAirFan: 'CarPark Exhaust Air Fan',\n  ToiletExhaustAirFan: 'Toilet Exhaust Air Fan',\n  KitchenExhaustAirFan: 'Kitchen Exhaust Air Fan',\n  ExhaustAirFan: 'Exhaust Air Fan',\n  GeneralExhaustAirFan: 'General Exhaust Air Fan',\n  VAV: 'VAV',\n  Power_SubMeter: 'Power_SubMeter',\n  PowerSiteMeter: 'Power Site Meter',\n  Gas_SubMeter: 'Gas sub-Meter',\n  Gas_SiteMeter: 'Gas Site Meter',\n  Water_subMeter: 'Water sub-Meter',\n  Water_SiteMeter: 'Water Site Meter',\n}\nexport default class tagRefs {\n\n  static acronyms = {\n    BMS: 'BMS',\n    RTD: 'RTD',\n    AHU: 'AHU',\n    CW: 'CW',\n    RTU: 'RTU',\n    RH: 'RH',\n    CHWP: 'CHWP',\n    CWP: 'CWP',\n    HWP: 'HWP',\n    EVP: 'EVP',\n    FCU: 'FCU',\n    FTU: 'FTU',\n    VAV: 'VAV',\n    CT: 'CT',\n    CTF: 'CTF',\n    RT: 'RT',\n    RAT: 'RAT',\n    SAT: 'SAT',\n    ZT: 'ZT',\n    CHL: 'CHL',\n    BLR: 'BLR',\n    AC: 'AC',\n    RAC: 'RAC',\n    EVAP: 'EVAP',\n    HVAC: 'HVAC',\n    HLI: 'HLI',\n    BTU: 'BTU',\n    CMD: 'CMD',\n    REM: 'REM',\n    SYS: 'SYS',\n    RV: 'RV',\n    SOL: 'SOL',\n    DX: 'DX',\n    BACnet: 'BACnet',\n    LoRa: 'LoRa',\n    KNX: 'KNX',\n    LoRaWAN: 'LoRaWAN',\n    Modbus: 'Modbus',\n    LON: 'LON',\n    N2: 'N2',\n    SP: 'SP',\n    SETP: 'SETP',\n    LIQ: 'LIQ',\n    PMP: 'PMP',\n    TEMP: 'TEMP',\n    TMP: 'TMP',\n    PRESS: 'PRESS',\n    EEV: 'EEV',\n    DISCH: 'DISCH',\n  }\n  \n\n  static tagCategory = Object.values(TAGNAME).map(\n    point => {\n      return { value: point, text: point };\n    },\n  )\n\n  static tagType(type: string) {\n    switch (type) {\n      case TAGNAME.CHILLER:\n        return tagRefs.CHILLER;\n      case TAGNAME.CHWP:\n        return tagRefs.CHWP;\n      case TAGNAME.PlantChilledWater:\n        return tagRefs.PlantChilledWater;\n      case TAGNAME.BuildingInfo:\n        return tagRefs.BuildingInfo;\n      case TAGNAME.HeatExchanger:\n        return tagRefs.HeatExchanger;\n      case TAGNAME.CoolingTower:\n        return tagRefs.CoolingTower;\n      case TAGNAME.CWP:\n        return tagRefs.CWP;\n      case TAGNAME.PlantCoolingTower:\n        return tagRefs.PlantCoolingTower;\n      case TAGNAME.Boiler:\n        return tagRefs.Boiler;\n      case TAGNAME.HWP:\n        return tagRefs.HWP;\n      case TAGNAME.BoilerPlant:\n        return tagRefs.BoilerPlant;\n      case TAGNAME.FloorControl:\n        return tagRefs.FloorControl;\n      case TAGNAME.AHU_VAV:\n        return tagRefs.AHU_VAV;\n      case TAGNAME.AHU_CAV:\n        return tagRefs.AHU_CAV;\n      case TAGNAME.FCU:\n        return tagRefs.FCU;\n      case TAGNAME.FTU:\n        return tagRefs.FTU;\n      case TAGNAME.PAC_HotWaterReheat:\n        return tagRefs.PAC_HotWaterReheat;\n      case TAGNAME.PAC_ReverseCycle:\n        return tagRefs.PAC_ReverseCycle;\n      case TAGNAME.PAC_ElectricReheat:\n        return tagRefs.PAC_ElectricReheat;\n      case TAGNAME.PAC_Electric_Reheat_WaterCooled:\n        return tagRefs.PAC_Electric_Reheat_WaterCooled;\n      case TAGNAME.OutsideAirFan:\n        return tagRefs.OutsideAirFan;\n      case TAGNAME.SupplyAirFan:\n        return tagRefs.SupplyAirFan;\n      case TAGNAME.ReturnAirFan:\n        return tagRefs.ReturnAirFan;\n      case TAGNAME.AHUReturnAirFan:\n        return tagRefs.AHUReturnAirFan;\n      case TAGNAME.CarParkSupplyAirFan:\n        return tagRefs.CarParkSupplyAirFan;\n      case TAGNAME.ToiletExhaustAirFan:\n        return tagRefs.ToiletExhaustAirFan;\n      case TAGNAME.KitchenExhaustAirFan:\n        return tagRefs.KitchenExhaustAirFan;\n      case TAGNAME.ExhaustAirFan:\n        return tagRefs.ExhaustAirFan;\n      case TAGNAME.GeneralExhaustAirFan:\n        return tagRefs.GeneralExhaustAirFan;\n      case TAGNAME.VAV:\n        return tagRefs.VAV;\n      case TAGNAME.Power_SubMeter:\n        return tagRefs.Power_SubMeter;\n      case TAGNAME.PowerSiteMeter:\n        return tagRefs.PowerSiteMeter;\n      case TAGNAME.Gas_SubMeter:\n        return tagRefs.Gas_SubMeter;\n      case TAGNAME.Gas_SiteMeter:\n        return tagRefs.Gas_SiteMeter;\n      case TAGNAME.Water_subMeter:\n        return tagRefs.Water_subMeter;\n    }\n  }\n\n  static CHILLER = {\n    'Chiller S/S': {\n      kind: 'boolean',\n      unit: '',\n      equipType: 'hisTsPrecision',\n      tags: ['run', 'cmd', 'chilled', 'chiller'],\n    },\n    'Chiller Status': {\n      kind: 'boolean',\n      unit: '',\n      equipType: 'hisTsPrecision',\n      tags: ['run', 'sensor', 'chilled', 'chiller'],\n    },\n    'Chiller Fault': {\n      kind: 'boolean',\n      unit: '',\n      equipType: 'hisTsPrecision',\n      tags: ['fault', 'sensor', 'chilled', 'chiller'],\n    },\n    'Load': {\n      kind: '',\n      unit: '',\n      equipType: '',\n      tags: ['load', 'sensor', 'chilled', 'chiller'],\n    },\n    'Chilled Water Supply Temperature': {\n      kind: 'number',\n      unit: 'Temperature',\n      equipType: '',\n      tags: ['water', 'temp', 'sensor', 'supply', 'chilled', 'chiller'],\n    },\n    'Chilled Water Supply Temperature Setpoint': {\n      kind: 'number',\n      unit: 'Temperature',\n      equipType: '',\n      tags: ['water', 'temp', 'sp', 'supply', 'chilled', 'chiller'],\n    },\n    'Chilled Water Return Temperature': {\n      kind: 'number',\n      unit: 'Temperature',\n      equipType: '',\n      tags: ['water', 'temp', 'sensor', 'return', 'chilled', 'chiller'],\n    },\n    'Condenser Water Supply Temperature': {\n      kind: '',\n      unit: '',\n      equipType: '',\n      tags: ['water', 'temp', 'sensor', 'supply', 'condenser', 'chiller'],\n    },\n    'Condenser Water Return Temperature': {\n      kind: 'number',\n      unit: '',\n      equipType: '',\n      tags: ['water', 'temp', 'sensor', 'return', 'condenser', 'chiller'],\n    },\n  };\n\n\n  static CHWP = {\n    'Chilled Water Pump S/S': {\n      kind: 'boolean',\n      unit: '',\n      equipType: 'hisTsPrecision',\n      tags: ['run', 'cmd', 'chilled', 'pump'],\n    },\n    'Chilled Water Pump Status': {\n      kind: 'boolean',\n      unit: '',\n      equipType: 'hisTsPrecision',\n      tags: ['run', 'sensor', 'chilled', 'pump'],\n    },\n    'Chilled Water Pump Fault': {\n      kind: 'boolean',\n      unit: '',\n      equipType: 'hisTsPrecision',\n      tags: ['fault', 'sensor', 'chilled', 'pump'],\n    },\n    'Chilled Water Pump Differential Pressure': {\n      kind: 'number',\n      unit: '',\n      equipType: '',\n      tags: ['water', 'pressure', 'sensor', 'differential', 'chilled', 'pump'],\n    },\n    'Chilled Water Pump Differential Pressure Setpoint': {\n      kind: 'number',\n      unit: '',\n      equipType: '',\n      tags: ['water', 'pressure', 'sp', 'differential', 'chilled', 'pump'],\n    },\n    'Chilled Water Flow': {\n      kind: '',\n      unit: '',\n      equipType: '',\n      tags: ['water', 'flow', 'sensor', 'chilled', 'pump'],\n    },\n    'Chilled Water Flow Setpoint': {\n      kind: '',\n      unit: '',\n      equipType: '',\n      tags: ['water', 'flow', 'sp', 'chilled', 'pump'],\n    },\n    'Chilled Water Pump Speed': {\n      kind: 'number',\n      unit: '',\n      equipType: '',\n      tags: ['speed', 'cmd', 'chilled', 'pump'],\n    },\n  }\n\n  static PlantChilledWater = {\n    'Common Chilled Water Supply Temperature': {\n      kind: 'number',\n      unit: '',\n      equipType: '',\n      tags: ['water', 'temp', 'sensor', 'supply', 'chilled', 'common'],\n    },\n    'Common Chilled Water Return Temperature': {\n      kind: 'number',\n      unit: '',\n      equipType: '',\n      tags: ['water', 'temp', 'sensor', 'return', 'chilled', 'common'],\n    },\n    'Common Chilled Water Differential Pressure': {\n      kind: 'number',\n      unit: '',\n      equipType: '',\n      tags: ['water', 'pressure', 'sensor', 'differential', 'chilled', 'common'],\n    },\n    'Common Chilled Water Bypass Valve': {\n      kind: 'number',\n      unit: '',\n      equipType: '',\n      tags: ['water', 'valve', 'bypass', 'cmd', 'chilled', 'common'],\n    },\n    'Common Chilled Water Differential Pressure Setpoint': {\n      kind: 'number',\n      unit: '',\n      equipType: '',\n      tags: ['water', 'pressure', 'sp', 'differential', 'chilled', 'common'],\n    },\n  }\n\n  static BuildingInfo = {\n    'Outside Air Temperature': {\n      kind: 'number',\n      unit: '',\n      equipType: '',\n      tags: ['air', 'temp', 'sensor', 'outside', 'dryBulb/wetBulb', 'buildingInfo'],\n    },\n    'Outside Air Enthalpy': {\n      kind: 'number',\n      unit: '',\n      equipType: '',\n      tags: ['air', 'enthalpy', 'sensor', 'outside', 'buildingInfo'],\n    },\n    'Outside Air Humidity': {\n      kind: 'number',\n      unit: '',\n      equipType: '',\n      tags: ['air', 'humidity', 'sensor', 'outside', 'buildingInfo'],\n    },\n  }\n  static HeatExchanger = {\n    'Primary Supply Temperature': {\n      kind: 'number',\n      unit: '',\n      equipType: '',\n      tags: ['water', 'temp', 'sensor', 'supply', 'hot', 'primaryLoop', 'heatExchanger'],\n    },\n    'Primary Return Temperature': {\n      kind: 'number',\n      unit: '',\n      equipType: '',\n      tags: ['water', 'temp', 'sensor', 'return', 'hot', 'primaryLoop', 'heatExchanger'],\n    },\n    'Primary Loop Valve': {\n      kind: 'number',\n      unit: '',\n      equipType: '',\n      tags: ['water', 'cmd', 'hot', 'primaryLoop', 'heatExchanger'],\n    },\n    'Secondary Supply Temperature': {\n      kind: 'number',\n      unit: '',\n      equipType: '',\n      tags: ['water', 'temp', 'sensor', 'supply', 'hot', 'secondaryLoop', 'heatExchanger'],\n    },\n    'Secondary Return Temperature': {\n      kind: 'number',\n      unit: '',\n      equipType: '',\n      tags: ['water', 'temp', 'sensor', 'return', 'hot', 'secondaryLoop', 'heatExchanger'],\n    },\n    'Secondary Loop Valve': {\n      kind: 'number',\n      unit: '',\n      equipType: '',\n      tags: ['water', 'cmd', 'hot', 'secondaryLoop', 'heatExchanger'],\n    },\n  }\n  static CoolingTower = {\n    'Cooling Tower S/S': {\n      kind: 'boolean',\n      unit: '',\n      equipType: 'hisTsPrecision',\n      tags: ['fan', 'run', 'cmd', 'condenser', 'coolingTower'],\n    },\n    'Cooling Tower Status': {\n      kind: 'boolean',\n      unit: '',\n      equipType: 'hisTsPrecision',\n      tags: ['fan', 'run', 'sensor', 'condenser', 'coolingTower'],\n    },\n    'Cooling Tower Fault': {\n      kind: 'boolean',\n      unit: '',\n      equipType: 'hisTsPrecision',\n      tags: ['fan', 'fault', 'sensor', 'condenser', 'coolingTower'],\n    },\n    'Cooling Tower Fan Speed': {\n      kind: '',\n      unit: '',\n      equipType: '',\n      tags: ['fan', 'speed', 'cmd', 'condenser', 'coolingTower'],\n    },\n    'Condenser Water Supply Temperature': {\n      kind: 'number',\n      unit: '',\n      equipType: '',\n      tags: ['water', 'temp', 'sensor', 'supply', 'condenser', 'coolingTower'],\n    },\n    'Condenser Water Supply Temperature Setpoint': {\n      kind: 'number',\n      unit: '',\n      equipType: '',\n      tags: ['water', 'temp', 'sp', 'supply', 'condenser', 'coolingTower'],\n    },\n    'Condenser Water Return Temperature': {\n      kind: 'number',\n      unit: '',\n      equipType: '',\n      tags: ['water', 'temp', 'sensor', 'return', 'condenser', 'coolingTower'],\n    },\n  }\n  static CWP = {\n    'Condenser Water Pump S/S': {\n      kind: 'boolean',\n      unit: '',\n      equipType: 'hisTsPrecision',\n      tags: ['run', 'cmd', 'condenser', 'pump'],\n    },\n    'Condenser Water Pump Status': {\n      kind: 'boolean',\n      unit: '',\n      equipType: 'hisTsPrecision',\n      tags: ['run', 'sensor', 'condenser', 'pump'],\n    },\n    'Condenser Water Pump Fault': {\n      kind: 'boolean',\n      unit: '',\n      equipType: 'hisTsPrecision',\n      tags: ['fault', 'sensor', 'condenser', 'pump'],\n    },\n    'Condenser Water Pump Differential Pressure': {\n      kind: 'number',\n      unit: '',\n      equipType: '',\n      tags: ['water', 'pressure', 'sensor', 'differential', 'condenser', 'pump'],\n    },\n    'Condenser Water Pump Differential Pressure Setpoint': {\n      kind: 'number',\n      unit: '',\n      equipType: '',\n      tags: ['water', 'pressure', 'sp', 'differential', 'condenser', 'pump'],\n    },\n    'Condenser Water Flow': {\n      kind: '',\n      unit: '',\n      equipType: '',\n      tags: [''],\n    },\n    'Condenser Water Pump Speed': {\n      kind: 'number',\n      unit: '',\n      equipType: '',\n      tags: ['speed', 'cmd', 'condenser', 'pump'],\n    },\n  }\n  static PlantCoolingTower = {\n    'Common Condenser Water Supply Temperature': {\n      kind: 'number',\n      unit: '',\n      equipType: '',\n      tags: ['water', 'temp', 'sensor', 'supply', 'condenser', 'common'],\n    },\n    'Common Condenser Pressure Diff': {\n      kind: 'number',\n      unit: '',\n      equipType: '',\n      tags: ['water', 'pressure', 'sensor', 'differential', 'condenser', 'common'],\n    },\n    'Common Bypass Valve': {\n      kind: 'number',\n      unit: '',\n      equipType: '',\n      tags: ['water', 'valve', 'bypass', 'cmd', 'condenser', 'common'],\n    },\n    'Common Condenser Water Return Temperature': {\n      kind: 'number',\n      unit: '',\n      equipType: '',\n      tags: ['water', 'temp', 'sensor', 'return', 'condenser', 'common'],\n    },\n  }\n  static Boiler = {\n    'Boiler S/S': {\n      kind: 'boolean',\n      unit: '',\n      equipType: 'hisTsPrecision',\n      tags: ['run', 'cmd', 'hot', 'boiler'],\n    },\n    'Boiler Status': {\n      kind: 'boolean',\n      unit: '',\n      equipType: 'hisTsPrecision',\n      tags: ['run', 'sensor', 'hot', 'boiler'],\n    },\n    'Boiler Fault': {\n      kind: 'boolean',\n      unit: '',\n      equipType: 'hisTsPrecision',\n      tags: ['fault', 'sensor', 'hot', 'boiler'],\n    },\n    'Hot Water Supply Temperature': {\n      kind: 'number',\n      unit: '',\n      equipType: '',\n      tags: ['water', 'temp', 'sensor', 'supply', 'hot', 'boiler'],\n    },\n    'Hot Water Supply Temperature Setpoint': {\n      kind: 'number',\n      unit: '',\n      equipType: '',\n      tags: ['water', 'temp', 'sp', 'supply', 'hot', 'boiler'],\n    },\n    'Hot Water Return Temperature': {\n      kind: 'number',\n      unit: '',\n      equipType: '',\n      tags: ['water', 'temp', 'sensor', 'return', 'hot', 'boiler'],\n    },\n  }\n  static HWP = {\n    'Hot Water Pump S/S': {\n      kind: 'boolean',\n      unit: '',\n      equipType: 'hisTsPrecision',\n      tags: ['run', 'cmd', 'hot', 'pump'],\n    },\n    'Hot Water Pump Status': {\n      kind: 'boolean',\n      unit: '',\n      equipType: 'hisTsPrecision',\n      tags: ['run', 'sensor', 'hot', 'pump'],\n    },\n    'Hot Water Pump Fault': {\n      kind: 'boolean',\n      unit: '',\n      equipType: 'hisTsPrecision',\n      tags: ['fault', 'sensor', 'hot', 'pump'],\n    },\n    'Hot Water Pump Differential Pressure': {\n      kind: 'number',\n      unit: '',\n      equipType: '',\n      tags: ['water', 'pressure', 'sensor', 'differential', 'hot', 'pump'],\n    },\n    'Hot Water Pump Differential Pressure Setpoint': {\n      kind: 'number',\n      unit: '',\n      equipType: '',\n      tags: ['water', 'pressure', 'sp', 'differential', 'hot', 'pump'],\n    },\n    'Hot Water Pump Speed': {\n      kind: 'number',\n      unit: '',\n      equipType: '',\n      tags: ['speed', 'cmd', 'hot', 'pump'],\n    },\n  }\n  static BoilerPlant = {\n    'Common Hot Water Supply Temperature': {\n      kind: 'number',\n      unit: '',\n      equipType: '',\n      tags: ['water', 'temp', 'sensor', 'supply', 'hot', 'common'],\n    },\n    'Common Hot Water Return Temperature': {\n      kind: 'number',\n      unit: '',\n      equipType: '',\n      tags: ['water', 'temp', 'sensor', 'return', 'hot', 'common'],\n    },\n  }\n  static FloorControl = {\n    'Floor Occupancy': {\n      kind: 'boolean',\n      unit: '',\n      equipType: '',\n      tags: ['run', 'cmd', 'occupied', 'floor'],\n    },\n    'After Hours Active Time': {\n      kind: 'number',\n      unit: '',\n      equipType: '',\n      tags: ['run', 'cmd', 'afterHour', 'activeTime', 'floor'],\n    },\n    'Zone Occupancy': {\n      kind: '',\n      unit: '',\n      equipType: '',\n      tags: ['run', 'cmd', 'occupied', 'zone', 'floor'],\n    },\n    'Zone After Hours Active Time': {\n      kind: '',\n      unit: '',\n      equipType: '',\n      tags: ['run', 'cmd', 'afterHour', 'activeTime', 'zone', 'floor'],\n    },\n    'After Hours ElapsedTime': {\n      kind: 'number',\n      unit: '',\n      equipType: '',\n      tags: ['afterHour', 'floor'],\n    },\n    'AH Enable': {\n      kind: 'boolean',\n      unit: '',\n      equipType: '',\n      tags: ['cmd', 'afterHour', 'ahuRef', 'floor'],\n    },\n    'VAV Enable': {\n      kind: '',\n      unit: '',\n      equipType: '',\n      tags: ['enable', 'cmd', 'vav', 'floor'],\n    },\n    'Return Air Damper': {\n      kind: '',\n      unit: '',\n      equipType: '',\n      tags: ['air', 'cmd', 'return', 'common', 'damper', 'floor'],\n    },\n    'Supply Air Damper': {\n      kind: '',\n      unit: '',\n      equipType: '',\n      tags: ['air', 'cmd', 'supply', 'common', 'damper', 'floor'],\n    },\n    'Isolation Air Damper': {\n      kind: '',\n      unit: '',\n      equipType: '',\n      tags: ['air', 'cmd', 'isolation', 'damper', 'floor'],\n    },\n    'Zone Temperature Setpoint': {\n      kind: 'number',\n      unit: '',\n      equipType: '',\n      tags: ['air', 'temp', 'sp', 'zone', 'floor'],\n    },\n  }\n  static AHU_VAV = {\n    'AHU Fan S/S': {\n      kind: 'boolean',\n      unit: '',\n      equipType: 'hisTsPrecision',\n      tags: ['fan', 'run', 'cmd', 'supply', 'ahu'],\n    },\n    'AHU Fan Status': {\n      kind: 'boolean',\n      unit: '',\n      equipType: 'hisTsPrecision',\n      tags: ['fan', 'run', 'sensor', 'supply', 'ahu'],\n    },\n    'AHU Fan Fault': {\n      kind: 'boolean',\n      unit: '',\n      equipType: 'hisTsPrecision',\n      tags: ['fan', 'fault', 'sensor', 'supply', 'ahu'],\n    },\n    'AHU Fan Speed': {\n      kind: 'number',\n      unit: '',\n      equipType: '',\n      tags: ['fan', 'speed', 'cmd', 'supply', 'ahu'],\n    },\n    'Supply Air Temperature': {\n      kind: 'number',\n      unit: '',\n      equipType: '',\n      tags: ['air', 'temp', 'sensor', 'supply', 'ahu'],\n    },\n    'Supply Air Temperature Setpoint': {\n      kind: 'number',\n      unit: '',\n      equipType: '',\n      tags: ['air', 'temp', 'sp', 'supply', 'ahu'],\n    },\n    'Supply Air Static Pressure': {\n      kind: 'number',\n      unit: '',\n      equipType: '',\n      tags: ['air', 'pressure', 'sensor', 'supply', 'ahu'],\n    },\n    'Supply Air Static Pressure Setpoint': {\n      kind: 'number',\n      unit: '',\n      equipType: '',\n      tags: ['air', 'pressure', 'sp', 'supply', 'ahu'],\n    },\n    'Supply Air Flow': {\n      kind: '',\n      unit: '',\n      equipType: '',\n      tags: ['air', 'flow', 'sensor', 'supply', 'ahu'],\n    },\n    'Outside/Return/Room Air Temperature': {\n      kind: 'number',\n      unit: '',\n      equipType: '',\n      tags: ['air', 'temp', 'sensor', 'outside/return', 'ahu'],\n    },\n    'Return/Room Air Temperature Setpoint': {\n      kind: 'number',\n      unit: '',\n      equipType: '',\n      tags: ['air', 'temp', 'sp', 'return', 'ahu'],\n    },\n    'Supply/Return/Room Air Humidity': {\n      kind: 'number',\n      unit: '',\n      equipType: '',\n      tags: ['air', 'humidity', 'sensor', 'supply/return', 'ahu'],\n    },\n    'Outside Air Relative Humidity': {\n      kind: '',\n      unit: '',\n      equipType: '',\n      tags: ['air', 'humidity', 'sensor', 'outside', 'ahu'],\n    },\n    'Cooling Coil Valve Control': {\n      kind: 'number',\n      unit: '',\n      equipType: '',\n      tags: ['water', 'valve', 'cmd', 'chilled', 'ahu'],\n    },\n    'Heating Coil Valve Control': {\n      kind: 'number',\n      unit: '',\n      equipType: '',\n      tags: ['water', 'valve', 'cmd', 'hot', 'ahu'],\n    },\n    'Air Off Coil Temperature': {\n      kind: 'number',\n      unit: '',\n      equipType: '',\n      tags: ['air', 'temp', 'sensor', 'offCoil', 'hot/cold', 'ahu'],\n    },\n    'Outside Air Damper Control': {\n      kind: 'number/boolean',\n      unit: '',\n      equipType: '',\n      tags: ['air', 'damper', 'cmd', 'outside', 'ahu'],\n    },\n    'Mix Air Temperature': {\n      kind: '',\n      unit: '',\n      equipType: '',\n      tags: ['air', 'temp', 'sensor', 'mix', 'ahu'],\n    },\n    'Minimum Outside Air Damper Control': {\n      kind: 'number/boolean',\n      unit: '',\n      equipType: '',\n      tags: ['air', 'damper', 'cmd', 'outside', 'minimum', 'ahu'],\n    },\n    'Minimum Outside Air Damper Feedback': {\n      kind: 'number/boolean',\n      unit: '',\n      equipType: '',\n      tags: ['air', 'damper', 'sensor', 'outside', 'minimum', 'ahu'],\n    },\n    'Return Air Damper Control': {\n      kind: 'number/boolean',\n      unit: '',\n      equipType: '',\n      tags: ['air', 'damper', 'cmd', 'return', 'ahu'],\n    },\n    'Exhaust Air Damper': {\n      kind: '',\n      unit: '',\n      equipType: '',\n      tags: ['air', 'damper', 'cmd', 'exhaust', 'ahu'],\n    },\n    'RACO2': {\n      kind: '',\n      unit: '',\n      equipType: '',\n      tags: ['air', 'co2', 'sensor', 'return', 'ahu'],\n    },\n    'Electric Duct Heater S/S': {\n      kind: 'boolean',\n      unit: '',\n      equipType: '',\n      tags: ['edh', 'run', 'cmd', 'ahu'],\n    },\n    'Electric Duct Heater Status': {\n      kind: 'boolean',\n      unit: '',\n      equipType: '',\n      tags: ['edh', 'run', 'sensor', 'ahu'],\n    },\n    'Dew Point': {\n      kind: '',\n      unit: '',\n      equipType: '',\n      tags: ['dewPoint', 'sensor', 'ahu'],\n    },\n    'Dew Point Setpoint': {\n      kind: '',\n      unit: '',\n      equipType: '',\n      tags: ['dewPoint', 'sp', 'ahu'],\n    },\n    'Filter Differential Pressure': {\n      kind: '',\n      unit: '',\n      equipType: '',\n      tags: ['pressure', 'sensor', 'filter', 'delta', 'ahu'],\n    },\n    'Filter Differential Pressure Setpoint': {\n      kind: '',\n      unit: '',\n      equipType: '',\n      tags: ['pressure', 'sp', 'filter', 'delta', 'ahu'],\n    },\n    'Filter Status': {\n      kind: 'number/boolean',\n      unit: '',\n      equipType: '',\n      tags: ['fault', 'sensor', 'filter', 'ahu'],\n    },\n  }\n  static AHU_CAV = {\n    'AHU Fan S/S': {\n      kind: 'boolean',\n      unit: '',\n      equipType: 'hisTsPrecision',\n      tags: ['fan', 'run', 'cmd', 'supply', 'ahu'],\n    },\n    'AHU Fan Status': {\n      kind: 'boolean',\n      unit: '',\n      equipType: 'hisTsPrecision',\n      tags: ['fan', 'run', 'sensor', 'supply', 'ahu'],\n    },\n    'AHU Fan Fault': {\n      kind: 'boolean',\n      unit: '',\n      equipType: 'hisTsPrecision',\n      tags: ['fan', 'fault', 'sensor', 'supply', 'ahu'],\n    },\n    'Speed': {\n      kind: '',\n      unit: '',\n      equipType: '',\n      tags: ['fan', 'speed', 'sensor', 'supply', 'ahu'],\n    },\n    'Supply Air Temperature': {\n      kind: 'number',\n      unit: '',\n      equipType: '',\n      tags: ['air', 'temp', 'sensor', 'supply', 'ahu'],\n    },\n    'Supply Air Temperature Setpoint': {\n      kind: 'number',\n      unit: '',\n      equipType: '',\n      tags: ['air', 'temp', 'sp', 'supply', 'ahu'],\n    },\n    'Return Air Temperature': {\n      kind: 'number',\n      unit: '',\n      equipType: '',\n      tags: ['air', 'temp', 'sensor', 'return', 'ahu'],\n    },\n    'Room Air Temperature': {\n      kind: 'number',\n      unit: '',\n      equipType: '',\n      tags: ['air', 'temp', 'sensor', 'zone', 'ahu'],\n    },\n    'Outside Air Temperature': {\n      kind: '',\n      unit: '',\n      equipType: '',\n      tags: ['air', 'temp', 'sensor', 'outside', 'ahu'],\n    },\n    'Mix Air Temperature': {\n      kind: '',\n      unit: '',\n      equipType: '',\n      tags: ['air', 'temp', 'sensor', 'mix', 'ahu'],\n    },\n    'Return Air Temperature Setpoint': {\n      kind: 'number',\n      unit: '',\n      equipType: '',\n      tags: ['air', 'temp', 'sp', 'return', 'ahu'],\n    },\n    'Room Air Temperature Setpoint': {\n      kind: 'number',\n      unit: '',\n      equipType: '',\n      tags: ['air', 'temp', 'sp', 'zone', 'ahu'],\n    },\n    'Return Air Humidity': {\n      kind: 'number',\n      unit: '',\n      equipType: '',\n      tags: ['air', 'humidity', 'sensor', 'return', 'ahu'],\n    },\n    'Room Air Humidity': {\n      kind: 'number',\n      unit: '',\n      equipType: '',\n      tags: ['air', 'humidity', 'sensor', 'zone', 'ahu'],\n    },\n    'Outside Air Relative Humidity': {\n      kind: '',\n      unit: '',\n      equipType: '',\n      tags: ['air', 'humidity', 'sensor', 'outside', 'ahu'],\n    },\n    'Cooling Coil Valve Control': {\n      kind: 'number',\n      unit: '',\n      equipType: '',\n      tags: ['water', 'valve', 'cmd', 'chilled', 'ahu'],\n    },\n    'Heating Coil Valve Control': {\n      kind: 'number',\n      unit: '',\n      equipType: '',\n      tags: ['water', 'valve', 'cmd', 'hot', 'ahu'],\n    },\n    'Air Off Coil Temperature': {\n      kind: 'number',\n      unit: '',\n      equipType: '',\n      tags: ['air', 'temp', 'sensor', 'offCoil', 'hot/cold', 'ahu'],\n    },\n    'Outside Air Damper Control': {\n      kind: 'number/boolean',\n      unit: '',\n      equipType: '',\n      tags: ['air', 'damper', 'cmd', 'outside', 'ahu'],\n    },\n    'Minimum Outside Air Damper Control': {\n      kind: 'number/boolean',\n      unit: '',\n      equipType: '',\n      tags: ['air', 'damper', 'cmd', 'outside', 'minimum', 'ahu'],\n    },\n    'Minimum Outside Air Damper Feedback': {\n      kind: 'number/boolean',\n      unit: '',\n      equipType: '',\n      tags: ['air', 'damper', 'sensor', 'outside', 'minimum', 'ahu'],\n    },\n    'Exhaust Air Damper': {\n      kind: 'number/boolean',\n      unit: '',\n      equipType: '',\n      tags: ['air', 'damper', 'cmd', 'exhaust', 'ahu'],\n    },\n    'RACO2': {\n      kind: '',\n      unit: '',\n      equipType: '',\n      tags: ['air', 'co2', 'sensor', 'return', 'ahu'],\n    },\n    'Electric Duct Heater S/S': {\n      kind: 'boolean',\n      unit: '',\n      equipType: '',\n      tags: ['edh', 'run', 'cmd', 'ahu'],\n    },\n    'Electric Duct Heater Status': {\n      kind: 'boolean',\n      unit: '',\n      equipType: '',\n      tags: ['edh', 'run', 'sensor', 'ahu'],\n    },\n    'Dew Point': {\n      kind: '',\n      unit: '',\n      equipType: '',\n      tags: ['dewPoint', 'sensor', 'ahu'],\n    },\n    'Dew Point Setpoint': {\n      kind: '',\n      unit: '',\n      equipType: '',\n      tags: ['dewPoint', 'sp', 'ahu'],\n    },\n    'Filter Differential Pressure/Status': {\n      kind: 'number/boolean',\n      unit: '',\n      equipType: '',\n      tags: ['air', 'pressure', 'sensor', 'filter', 'ahu'],\n    },\n  }\n  static FCU = {\n    'FCU Fan S/S': {\n      kind: 'boolean',\n      unit: '',\n      equipType: 'hisTsPrecision',\n      tags: ['fan', 'run', 'cmd', 'fcu'],\n    },\n    'FCU Fan Status': {\n      kind: 'boolean',\n      unit: '',\n      equipType: 'hisTsPrecision',\n      tags: ['fan', 'run', 'sensor', 'fcu'],\n    },\n    'FCU Fan Speed': {\n      kind: '',\n      unit: '',\n      equipType: '',\n      tags: ['fan', 'speed', 'sensor', 'supply', 'fcu'],\n    },\n    'FCU Fan Fault': {\n      kind: 'boolean',\n      unit: '',\n      equipType: 'hisTsPrecision',\n      tags: ['fan', 'fault', 'sensor', 'fcu'],\n    },\n    'Supply Air Temperature': {\n      kind: 'number',\n      unit: '',\n      equipType: '',\n      tags: ['air', 'temp', 'sensor', 'supply', 'fcu'],\n    },\n    'Supply Air Temperature Setpoint': {\n      kind: 'number',\n      unit: '',\n      equipType: '',\n      tags: ['air', 'temp', 'sp', 'supply', 'fcu'],\n    },\n    'Return/Room Air Temperature': {\n      kind: 'number',\n      unit: '',\n      equipType: '',\n      tags: ['air', 'temp', 'sensor', 'return/zone', 'fcu'],\n    },\n    'Return/Room Air Temperature Setpoint': {\n      kind: 'number',\n      unit: '',\n      equipType: '',\n      tags: ['air', 'temp', 'sp', 'return/zone', 'fcu'],\n    },\n    'Return/Room Air Humidity': {\n      kind: 'number',\n      unit: '',\n      equipType: '',\n      tags: ['air', 'humidity', 'sensor', 'return/zone', 'fcu'],\n    },\n    'Cooling Coil Valve Control': {\n      kind: 'number',\n      unit: '',\n      equipType: '',\n      tags: ['water', 'valve', 'cmd', 'chilled', 'fcu'],\n    },\n    'Heating Coil Valve Control': {\n      kind: 'number',\n      unit: '',\n      equipType: '',\n      tags: ['water', 'valve', 'cmd', 'hot', 'fcu'],\n    },\n    'Air Off Coil Temperature': {\n      kind: 'number',\n      unit: '',\n      equipType: '',\n      tags: ['air', 'temp', 'sensor', 'offCoil', 'hot/cold', 'fcu'],\n    },\n    'Outside Air Damper Control': {\n      kind: 'number/boolean',\n      unit: '',\n      equipType: '',\n      tags: ['air', 'damper', 'cmd', 'outside', 'fcu'],\n    },\n    'Filter Differential Pressure/Status': {\n      kind: 'number/boolean',\n      unit: '',\n      equipType: '',\n      tags: ['air', 'pressure', 'sensor', 'filter', 'fcu'],\n    },\n  }\n  static FTU = {\n    'FTU Fan S/S': {\n      kind: '',\n      unit: '',\n      equipType: '',\n      tags: ['fan', 'run', 'cmd', 'ftu'],\n    },\n    'Supply Air Temperature': {\n      kind: 'number',\n      unit: '',\n      equipType: '',\n      tags: ['air', 'temp', 'sensor', 'supply', 'ftu'],\n    },\n    'Return/Room Air Temperature': {\n      kind: 'number',\n      unit: '',\n      equipType: '',\n      tags: ['air', 'temp', 'sensor', 'return/zone', 'ftu'],\n    },\n    'Heating Coil Valve Control': {\n      kind: 'number',\n      unit: '',\n      equipType: '',\n      tags: ['water', 'valve', 'cmd', 'hot', 'ftu'],\n    },\n    'Airflow': {\n      kind: 'number',\n      unit: '',\n      equipType: '',\n      tags: ['air', 'flow', 'sensor', 'ftu'],\n    },\n    'Damper Feedback': {\n      kind: '',\n      unit: '',\n      equipType: '',\n      tags: ['air', 'damper', 'sensor', 'ftu'],\n    },\n  }\n  static PAC_HotWaterReheat = {\n    'PAC Fan S/S': {\n      kind: 'boolean',\n      unit: '',\n      equipType: 'hisTsPrecision',\n      tags: ['fan', 'run', 'cmd', 'pac'],\n    },\n    'PAC Fan Status': {\n      kind: 'boolean',\n      unit: '',\n      equipType: 'hisTsPrecision',\n      tags: ['fan', 'run', 'sensor', 'pac'],\n    },\n    'PAC Fan Fault': {\n      kind: 'boolean',\n      unit: '',\n      equipType: 'hisTsPrecision',\n      tags: ['fan', 'fault', 'sensor', 'pac'],\n    },\n    'Supply Air Temperature': {\n      kind: 'number',\n      unit: '',\n      equipType: '',\n      tags: ['air', 'temp', 'sensor', 'supply', 'pac'],\n    },\n    'Return/Room Air Temperature': {\n      kind: 'number',\n      unit: '',\n      equipType: '',\n      tags: ['air', 'temp', 'sensor', 'return/zone', 'pac'],\n    },\n    'Return/Room Air Temperature Setpoint': {\n      kind: 'number',\n      unit: '',\n      equipType: '',\n      tags: ['air', 'temp', 'sp', 'return/zone', 'pac'],\n    },\n    'Return/Room Air Humidity': {\n      kind: 'number',\n      unit: '',\n      equipType: '',\n      tags: ['air', 'humidity', 'sensor', 'return/zone', 'pac'],\n    },\n    'Compressor S/S': {\n      kind: 'boolean',\n      unit: '',\n      equipType: '',\n      tags: ['refrig', 'run', 'cmd', 'pac'],\n    },\n    'Heating Coil Valve Control': {\n      kind: 'number',\n      unit: '',\n      equipType: '',\n      tags: ['water', 'valve', 'cmd', 'hot', 'pac'],\n    },\n    'Air Off Coil Temperature': {\n      kind: 'number',\n      unit: '',\n      equipType: '',\n      tags: ['air', 'temp', 'sensor', 'offCoil', 'hot/cold', 'pac'],\n    },\n    'Outside Air Damper Control': {\n      kind: 'number/boolean',\n      unit: '',\n      equipType: '',\n      tags: ['air', 'damper', 'cmd', 'outside', 'pac'],\n    },\n    'Filter Differential Pressure/Status': {\n      kind: 'number/boolean',\n      unit: '',\n      equipType: '',\n      tags: ['air', 'pressure', 'sensor', 'filter', 'pac'],\n    },\n  }\n  static PAC_ReverseCycle = {\n    'PAC Fan S/S': {\n      kind: 'boolean',\n      unit: '',\n      equipType: 'hisTsPrecision',\n      tags: ['fan', 'run', 'cmd', 'pac'],\n    },\n    'PAC Fan Status': {\n      kind: 'boolean',\n      unit: '',\n      equipType: 'hisTsPrecision',\n      tags: ['fan', 'run', 'sensor', 'pac'],\n    },\n    'PAC Fan Fault': {\n      kind: 'boolean',\n      unit: '',\n      equipType: 'hisTsPrecision',\n      tags: ['fan', 'fault', 'sensor', 'pac'],\n    },\n    'Supply Air Temperature': {\n      kind: 'number',\n      unit: '',\n      equipType: '',\n      tags: ['air', 'temp', 'sensor', 'supply', 'pac'],\n    },\n    'Return/Room Air Temperature': {\n      kind: 'number',\n      unit: '',\n      equipType: '',\n      tags: ['air', 'temp', 'sensor', 'return/zone', 'pac'],\n    },\n    'Return/Room Air Temperature Setpoint': {\n      kind: 'number',\n      unit: '',\n      equipType: '',\n      tags: ['air', 'temp', 'sp', 'return/zone', 'pac'],\n    },\n    'Return/Room Air Humidity': {\n      kind: 'number',\n      unit: '',\n      equipType: '',\n      tags: ['air', 'humidity', 'sensor', 'return/zone', 'pac'],\n    },\n    'Compressor S/S': {\n      kind: 'boolean',\n      unit: '',\n      equipType: '',\n      tags: ['refrig', 'run', 'cmd', 'reverse', 'pac'],\n    },\n    'Reverse Valve Control': {\n      kind: 'boolean',\n      unit: '',\n      equipType: '',\n      tags: ['valve', 'run', 'cmd', 'reverse', 'pac'],\n    },\n    'Air Off Coil Temperature': {\n      kind: 'number',\n      unit: '',\n      equipType: '',\n      tags: ['air', 'temp', 'sensor', 'offCoil', 'hot/cold', 'pac'],\n    },\n    'Outside Air Damper Control': {\n      kind: 'number/boolean',\n      unit: '',\n      equipType: '',\n      tags: ['air', 'damper', 'cmd', 'outside', 'pac'],\n    },\n    'Filter Differential Pressure/Status': {\n      kind: 'number/boolean',\n      unit: '',\n      equipType: '',\n      tags: ['air', 'pressure', 'sensor', 'filter', 'pac'],\n    },\n  }\n  static PAC_ElectricReheat = {\n    'PAC Fan S/S': {\n      kind: 'boolean',\n      unit: '',\n      equipType: 'hisTsPrecision',\n      tags: ['fan', 'run', 'cmd', 'pac'],\n    },\n    'PAC Fan Status': {\n      kind: 'boolean',\n      unit: '',\n      equipType: 'hisTsPrecision',\n      tags: ['fan', 'run', 'sensor', 'pac'],\n    },\n    'PAC Fan Fault': {\n      kind: 'boolean',\n      unit: '',\n      equipType: 'hisTsPrecision',\n      tags: ['fan', 'fault', 'sensor', 'pac'],\n    },\n    'Supply Air Temperature': {\n      kind: 'number',\n      unit: '',\n      equipType: '',\n      tags: ['air', 'temp', 'sensor', 'supply', 'pac'],\n    },\n    'Return/Room Air Temperature': {\n      kind: 'number',\n      unit: '',\n      equipType: '',\n      tags: ['air', 'temp', 'sensor', 'return/zone', 'pac'],\n    },\n    'Return/Room Air Temperature Setpoint': {\n      kind: 'number',\n      unit: '',\n      equipType: '',\n      tags: ['air', 'temp', 'sp', 'return/zone', 'pac'],\n    },\n    'Return/Room Air Humidity': {\n      kind: 'number',\n      unit: '',\n      equipType: '',\n      tags: ['air', 'humidity', 'sensor', 'return/zone', 'pac'],\n    },\n    'Compressor S/S': {\n      kind: 'boolean',\n      unit: '',\n      equipType: '',\n      tags: ['refrig', 'run', 'cmd', 'pac'],\n    },\n    'Electric Duct Heater S/S': {\n      kind: 'boolean',\n      unit: '',\n      equipType: '',\n      tags: ['edh', 'run', 'cmd', 'pac'],\n    },\n    'Air Off Coil Temperature': {\n      kind: 'number',\n      unit: '',\n      equipType: '',\n      tags: ['air', 'temp', 'sensor', 'offCoil', 'hot/cold', 'pac'],\n    },\n    'Outside Air Damper Control': {\n      kind: 'number/boolean',\n      unit: '',\n      equipType: '',\n      tags: ['air', 'damper', 'cmd', 'outside', 'pac'],\n    },\n    'Filter Differential Pressure/Status': {\n      kind: 'number/boolean',\n      unit: '',\n      equipType: '',\n      tags: ['air', 'pressure', 'sensor', 'filter', 'pac'],\n    },\n  }\n  static PAC_Electric_Reheat_WaterCooled = {\n    'PAC Fan S/S': {\n      kind: 'boolean',\n      unit: '',\n      equipType: 'hisTsPrecision',\n      tags: ['fan', 'run', 'cmd', 'pac'],\n    },\n    'PAC Fan Status': {\n      kind: 'boolean',\n      unit: '',\n      equipType: 'hisTsPrecision',\n      tags: ['fan', 'run', 'sensor', 'pac'],\n    },\n    'PAC Fan Fault': {\n      kind: 'boolean',\n      unit: '',\n      equipType: 'hisTsPrecision',\n      tags: ['fan', 'fault', 'sensor', 'pac'],\n    },\n    'Supply Air Temperature': {\n      kind: 'number',\n      unit: '',\n      equipType: '',\n      tags: ['air', 'temp', 'sensor', 'supply', 'pac'],\n    },\n    'Return/Room Air Temperature': {\n      kind: 'number',\n      unit: '',\n      equipType: '',\n      tags: ['air', 'temp', 'sensor', 'return/zone', 'pac'],\n    },\n    'Return/Room Air Temperature Setpoint': {\n      kind: 'number',\n      unit: '',\n      equipType: '',\n      tags: ['air', 'temp', 'sp', 'return/zone', 'pac'],\n    },\n    'Return/Room Air Humidity': {\n      kind: 'number',\n      unit: '',\n      equipType: '',\n      tags: ['air', 'humidity', 'sensor', 'return/zone', 'pac'],\n    },\n    'Compressor S/S': {\n      kind: 'boolean',\n      unit: '',\n      equipType: '',\n      tags: ['refrig', 'run', 'cmd', 'pac'],\n    },\n    'Electric Duct Heater S/S': {\n      kind: 'boolean',\n      unit: '',\n      equipType: '',\n      tags: ['edh', 'run', 'cmd', 'pac'],\n    },\n    'Condenser Water Call': {\n      kind: 'boolean',\n      unit: '',\n      equipType: '',\n      tags: ['run', 'cmd', 'condenser', 'pac'],\n    },\n    'Air Off Coil Temperature': {\n      kind: 'number',\n      unit: '',\n      equipType: '',\n      tags: ['air', 'temp', 'sensor', 'offCoil', 'hot/cold', 'pac'],\n    },\n    'Outside Air Damper Control': {\n      kind: 'number/boolean',\n      unit: '',\n      equipType: '',\n      tags: ['air', 'damper', 'cmd', 'outside', 'pac'],\n    },\n    'Filter Differential Pressure/Status': {\n      kind: 'number/boolean',\n      unit: '',\n      equipType: '',\n      tags: ['air', 'pressure', 'sensor', 'filter', 'pac'],\n    },\n  }\n  static OutsideAirFan = {\n    'Outside Air Fan S/S': {\n      kind: 'boolean',\n      unit: '',\n      equipType: 'hisTsPrecision',\n      tags: ['fan', 'run', 'cmd', 'outside', 'oaf'],\n    },\n    'Outside Air Fan Status': {\n      kind: 'boolean',\n      unit: '',\n      equipType: 'hisTsPrecision',\n      tags: ['fan', 'run', 'sensor', 'outside', 'oaf'],\n    },\n    'Outside Air Fan Fault': {\n      kind: 'boolean',\n      unit: '',\n      equipType: 'hisTsPrecision',\n      tags: ['fan', 'fault', 'sensor', 'outside', 'oaf'],\n    },\n    'Outside Air Fan Speed': {\n      kind: 'number',\n      unit: '',\n      equipType: '',\n      tags: ['fan', 'speed', 'cmd', 'outside', 'oaf'],\n    },\n    'Outside Air Temperature': {\n      kind: 'number',\n      unit: '',\n      equipType: '',\n      tags: ['air', 'temp', 'sensor', 'outside', 'oaf'],\n    },\n    'Outside Air Humidity': {\n      kind: 'number',\n      unit: '',\n      equipType: '',\n      tags: ['air', 'humidity', 'sensor', 'outside', 'oaf'],\n    },\n    'Outside Air Flow': {\n      kind: 'number',\n      unit: '',\n      equipType: '',\n      tags: ['air', 'flow', 'sensor', 'return', 'oaf'],\n    },\n    'Outside Air Static Pressure': {\n      kind: 'number',\n      unit: '',\n      equipType: '',\n      tags: ['air', 'pressure', 'sensor', 'outside', 'oaf'],\n    },\n    'Outside Air Static Pressure Setpoint': {\n      kind: 'number',\n      unit: '',\n      equipType: '',\n      tags: ['air', 'pressure', 'sp', 'outside', 'oaf'],\n    },\n  }\n  static SupplyAirFan = {\n    'Supply Air Fan S/S': {\n      kind: 'boolean',\n      unit: '',\n      equipType: 'hisTsPrecision',\n      tags: ['fan', 'run', 'cmd', 'supply', 'saf'],\n    },\n    'Supply Air Fan Status': {\n      kind: 'boolean',\n      unit: '',\n      equipType: 'hisTsPrecision',\n      tags: ['fan', 'run', 'sensor', 'supply', 'saf'],\n    },\n    'Supply Air Fan Fault': {\n      kind: 'boolean',\n      unit: '',\n      equipType: 'hisTsPrecision',\n      tags: ['fan', 'fault', 'sensor', 'supply', 'saf'],\n    },\n    'Supply Air Fan Speed': {\n      kind: 'number',\n      unit: '',\n      equipType: '',\n      tags: ['fan', 'speed', 'cmd', 'supply', 'saf'],\n    },\n    'Supply Air Temperature': {\n      kind: 'number',\n      unit: '',\n      equipType: '',\n      tags: ['air', 'temp', 'sensor', 'supply', 'saf'],\n    },\n    'Supply Air Flow': {\n      kind: 'number',\n      unit: '',\n      equipType: '',\n      tags: ['air', 'flow', 'sensor', 'supply', 'saf'],\n    },\n    'Supply Air Humidity': {\n      kind: 'number',\n      unit: '',\n      equipType: '',\n      tags: ['air', 'humidity', 'sensor', 'supply', 'saf'],\n    },\n    'Supply Air Static Pressure': {\n      kind: 'number',\n      unit: '',\n      equipType: '',\n      tags: ['air', 'pressure', 'sensor', 'supply', 'saf'],\n    },\n    'Supply Air Static Pressure Setpoint': {\n      kind: 'number',\n      unit: '',\n      equipType: '',\n      tags: ['air', 'pressure', 'sp', 'supply', 'saf'],\n    },\n  }\n  static ReturnAirFan = {\n    'Return Air Fan S/S': {\n      kind: 'boolean',\n      unit: '',\n      equipType: 'hisTsPrecision',\n      tags: ['fan', 'run', 'cmd', 'return', 'raf'],\n    },\n    'Return Air Fan Status': {\n      kind: 'boolean',\n      unit: '',\n      equipType: 'hisTsPrecision',\n      tags: ['fan', 'run', 'sensor', 'return', 'raf'],\n    },\n    'Return Air Fan Fault': {\n      kind: 'boolean',\n      unit: '',\n      equipType: 'hisTsPrecision',\n      tags: ['fan', 'fault', 'sensor', 'return', 'raf'],\n    },\n    'Return Air Fan Speed': {\n      kind: 'number',\n      unit: '',\n      equipType: '',\n      tags: ['fan', 'speed', 'cmd', 'return', 'raf'],\n    },\n    'Return Air Temperature': {\n      kind: 'number',\n      unit: '',\n      equipType: '',\n      tags: ['air', 'temp', 'sensor', 'return', 'raf'],\n    },\n    'Return Air Humidity': {\n      kind: 'number',\n      unit: '',\n      equipType: '',\n      tags: ['air', 'humidity', 'sensor', 'return', 'raf'],\n    },\n    'Return Air Flow': {\n      kind: 'number',\n      unit: '',\n      equipType: '',\n      tags: ['air', 'flow', 'sensor', 'return', 'raf'],\n    },\n    'Return Air Static Pressure': {\n      kind: 'number',\n      unit: '',\n      equipType: '',\n      tags: ['air', 'pressure', 'sensor', 'return', 'raf'],\n    },\n    'Return Air Enthalpy': {\n      kind: '',\n      unit: '',\n      equipType: '',\n      tags: ['air', 'enthalpy', 'sensor', 'return', 'raf'],\n    },\n    'Return Air Suction Pressure': {\n      kind: 'number',\n      unit: '',\n      equipType: '',\n      tags: ['air', 'pressure', 'sensor', 'return', 'raf'],\n    },\n    'Return Air CO2': {\n      kind: 'number',\n      unit: '',\n      equipType: '',\n      tags: ['air', 'co2', 'sensor', 'return', 'raf'],\n    },\n    'Return Air Static Pressure Setpoint': {\n      kind: 'number',\n      unit: '',\n      equipType: '',\n      tags: ['air', 'pressure', 'sp', 'return', 'raf'],\n    },\n  }\n  static AHUReturnAirFan = {\n    'AHU Return Air Fan S/S': {\n      kind: 'boolean',\n      unit: '',\n      equipType: 'hisTsPrecision',\n      tags: ['fan', 'run', 'cmd', 'return', 'ahu'],\n    },\n    'AHU Return Air Fan Status': {\n      kind: 'boolean',\n      unit: '',\n      equipType: 'hisTsPrecision',\n      tags: ['fan', 'run', 'sensor', 'return', 'ahu'],\n    },\n    'AHU Return Air Fan Fault': {\n      kind: 'boolean',\n      unit: '',\n      equipType: 'hisTsPrecision',\n      tags: ['fan', 'fault', 'sensor', 'return', 'ahu'],\n    },\n    'AHU Return Air Fan Speed': {\n      kind: 'number',\n      unit: '',\n      equipType: '',\n      tags: ['fan', 'speed', 'cmd', 'return', 'ahu'],\n    },\n    'AHU Return Air Temperature': {\n      kind: 'number',\n      unit: '',\n      equipType: '',\n      tags: ['air', 'temp', 'sensor', 'return', 'ahu'],\n    },\n    'AHU Return Air Humidity': {\n      kind: 'number',\n      unit: '',\n      equipType: '',\n      tags: ['air', 'humidity', 'sensor', 'return', 'ahu'],\n    },\n    'AHU Return Air Static Pressure': {\n      kind: 'number',\n      unit: '',\n      equipType: '',\n      tags: ['air', 'pressure', 'sensor', 'return', 'ahu'],\n    },\n    'AHU Return Air CO2': {\n      kind: 'number',\n      unit: '',\n      equipType: '',\n      tags: ['air', 'co2', 'sensor', 'return', 'ahu'],\n    },\n    'AHU Return Air Static Pressure Setpoint': {\n      kind: 'number',\n      unit: '',\n      equipType: '',\n      tags: ['air', 'pressure', 'sp', 'return', 'ahu'],\n    },\n  }\n  static CarParkSupplyAirFan = {\n    'CarPark Supply Air Fan S/S': {\n      kind: 'boolean',\n      unit: '',\n      equipType: 'hisTsPrecision',\n      tags: ['fan', 'run', 'cmd', 'supply', 'carpark'],\n    },\n    'CarPark Supply Air Fan Status': {\n      kind: 'boolean',\n      unit: '',\n      equipType: 'hisTsPrecision',\n      tags: ['fan', 'run', 'sensor', 'supply', 'carpark'],\n    },\n    'CarPark Supply Air Fan Fault': {\n      kind: 'boolean',\n      unit: '',\n      equipType: 'hisTsPrecision',\n      tags: ['fan', 'fault', 'sensor', 'supply', 'carpark'],\n    },\n    'CarPark Supply Air Fan Speed': {\n      kind: 'number',\n      unit: '',\n      equipType: '',\n      tags: ['fan', 'speed', 'cmd', 'supply', 'carpark'],\n    },\n    'CarPark Supply Air Static Pressure': {\n      kind: 'number',\n      unit: '',\n      equipType: '',\n      tags: ['air', 'pressure', 'sensor', 'supply', 'carpark'],\n    },\n    'CarPark Supply Air Static Pressure Setpoint': {\n      kind: 'number',\n      unit: '',\n      equipType: '',\n      tags: ['air', 'pressure', 'sp', 'supply', 'carpark'],\n    },\n  }\n  static CarParkExhaustAirFan = {\n    'CarPark Exhaust Air Fan S/S': {\n      kind: 'boolean',\n      unit: '',\n      equipType: 'hisTsPrecision',\n      tags: ['fan', 'run', 'cmd', 'exhaust', 'carpark'],\n    },\n    'CarPark Exhaust Air Fan Status': {\n      kind: 'boolean',\n      unit: '',\n      equipType: 'hisTsPrecision',\n      tags: ['fan', 'run', 'sensor', 'exhaust', 'carpark'],\n    },\n    'CarPark Exhaust Air Fan Fault': {\n      kind: 'boolean',\n      unit: '',\n      equipType: 'hisTsPrecision',\n      tags: ['fan', 'fault', 'sensor', 'exhaust', 'carpark'],\n    },\n    'CarPark Exhaust Air Fan Speed': {\n      kind: 'number',\n      unit: '',\n      equipType: '',\n      tags: ['fan', 'speed', 'cmd', 'exhaust', 'carpark'],\n    },\n    'CarPark Exhaust Air Static Pressure': {\n      kind: 'number',\n      unit: '',\n      equipType: '',\n      tags: ['air', 'pressure', 'sensor', 'exhaust', 'carpark'],\n    },\n    'CarPark Exhaust Air Static Pressure Setpoint': {\n      kind: 'number',\n      unit: '',\n      equipType: '',\n      tags: ['air', 'pressure', 'sp', 'exhaust', 'carpark'],\n    },\n    'CarPark Exhaust Carbon Monoxide': {\n      kind: 'number',\n      unit: '',\n      equipType: '',\n      tags: ['air', 'co', 'sensor', 'exhaust', 'carpark'],\n    },\n    'CarPark Exhaust Carbon Monoxide Setpoint': {\n      kind: 'number',\n      unit: '',\n      equipType: '',\n      tags: ['air', 'co', 'sp', 'exhaust', 'carpark'],\n    },\n  }\n  static ToiletExhaustAirFan = {\n    'Toilet Exhaust Air Fan S/S': {\n      kind: 'boolean',\n      unit: '',\n      equipType: 'hisTsPrecision',\n      tags: ['fan', 'run', 'cmd', 'exhaust', 'toilet'],\n    },\n    'Toilet Exhaust Air Fan Status': {\n      kind: 'boolean',\n      unit: '',\n      equipType: 'hisTsPrecision',\n      tags: ['fan', 'run', 'sensor', 'exhaust', 'toilet'],\n    },\n    'Toilet Exhaust Air Fan Fault': {\n      kind: 'boolean',\n      unit: '',\n      equipType: 'hisTsPrecision',\n      tags: ['fan', 'fault', 'sensor', 'exhaust', 'toilet'],\n    },\n    'Toilet Exhaust Air Static Pressure': {\n      kind: 'number',\n      unit: '',\n      equipType: '',\n      tags: ['air', 'pressure', 'sensor', 'exhaust', 'toilet'],\n    },\n  }\n  static KitchenExhaustAirFan = {\n    'Kitchen Exhaust Air Fan S/S': {\n      kind: 'boolean',\n      unit: '',\n      equipType: 'hisTsPrecision',\n      tags: ['fan', 'run', 'cmd', 'exhaust', 'kitchen'],\n    },\n    'Kitchen Exhaust Air Fan Status': {\n      kind: 'boolean',\n      unit: '',\n      equipType: 'hisTsPrecision',\n      tags: ['fan', 'run', 'sensor', 'exhaust', 'kitchen'],\n    },\n    'Kitchen Exhaust Air Fan Fault': {\n      kind: 'boolean',\n      unit: '',\n      equipType: 'hisTsPrecision',\n      tags: ['fan', 'fault', 'sensor', 'exhaust', 'kitchen'],\n    },\n    'Kitchen Exhaust Air Static Pressure': {\n      kind: 'number',\n      unit: '',\n      equipType: '',\n      tags: ['air', 'pressure', 'sensor', 'exhaust', 'kitchen'],\n    },\n  }\n  static ExhaustAirFan = {\n    'Exhaust Air Fan S/S': {\n      kind: 'boolean',\n      unit: '',\n      equipType: 'hisTsPrecision',\n      tags: ['fan', 'run', 'cmd', 'exhaust'],\n    },\n    'Exhaust Air Fan Status': {\n      kind: 'boolean',\n      unit: '',\n      equipType: 'hisTsPrecision',\n      tags: ['fan', 'run', 'sensor', 'exhaust'],\n    },\n    'Exhaust Air Fan Fault': {\n      kind: 'boolean',\n      unit: '',\n      equipType: 'hisTsPrecision',\n      tags: ['fan', 'fault', 'sensor', 'exhaust'],\n    },\n    'Exhaust Air Static Pressure': {\n      kind: 'number',\n      unit: '',\n      equipType: '',\n      tags: ['air', 'pressure', 'sensor', 'exhaust'],\n    },\n  }\n  static GeneralExhaustAirFan = {\n    'General Exhaust Air Fan S/S': {\n      kind: 'boolean',\n      unit: '',\n      equipType: 'hisTsPrecision',\n      tags: ['fan', 'run', 'cmd', 'exhaust', 'general'],\n    },\n    'General Exhaust Air Fan Status': {\n      kind: 'boolean',\n      unit: '',\n      equipType: 'hisTsPrecision',\n      tags: ['fan', 'run', 'sensor', 'exhaust', 'general'],\n    },\n    'General Exhaust Air Fan Fault': {\n      kind: 'boolean',\n      unit: '',\n      equipType: 'hisTsPrecision',\n      tags: ['fan', 'fault', 'sensor', 'exhaust', 'general'],\n    },\n    'General Exhaust Air Static Pressure': {\n      kind: 'number',\n      unit: '',\n      equipType: '',\n      tags: ['air', 'pressure', 'sensor', 'exhaust', 'general'],\n    },\n  }\n  static VAV = {\n    'Zone/Room Temperature': {\n      kind: 'number',\n      unit: '',\n      equipType: '',\n      tags: ['air', 'temp', 'sensor', 'zone', 'vav'],\n    },\n    'Zone/Room Temperature Setpoint': {\n      kind: 'number',\n      unit: '',\n      equipType: '',\n      tags: ['air', 'temp', 'sp', 'zone', 'vav'],\n    },\n    'Supply Air Temperature': {\n      kind: 'number',\n      unit: '',\n      equipType: '',\n      tags: ['air', 'temp', 'sensor', 'supply', 'vav'],\n    },\n    'Return Air Temperature': {\n      kind: 'number',\n      unit: '',\n      equipType: '',\n      tags: ['air', 'temp', 'sensor', 'return', 'vav'],\n    },\n    'Zone/Room Relative Humidity': {\n      kind: 'number',\n      unit: '',\n      equipType: '',\n      tags: ['air', 'humidity', 'sensor', 'zone', 'vav'],\n    },\n    'Damper': {\n      kind: 'number',\n      unit: '%',\n      equipType: '',\n      tags: ['air', 'damper', 'cmd', 'vav'],\n    },\n    'Airflow': {\n      kind: 'number',\n      unit: '',\n      equipType: '',\n      tags: ['air', 'flow', 'sensor', 'vav'],\n    },\n    'Airflow Setpoint': {\n      kind: 'number',\n      unit: '',\n      equipType: '',\n      tags: ['air', 'flow', 'sp', 'vav'],\n    },\n    'Minimum Airflow': {\n      kind: 'string',\n      unit: '',\n      equipType: '',\n      tags: ['air', 'flow', 'sensor', 'min', 'vav'],\n    },\n    'Electric Duct Heater Status': {\n      kind: '',\n      unit: '',\n      equipType: '',\n      tags: ['edh', 'run', 'sensor', 'vav'],\n    },\n    'Electric Duct Heater S/S': {\n      kind: '',\n      unit: '',\n      equipType: '',\n      tags: ['edh', 'run', 'cmd', 'vav'],\n    },\n    'Terminal Load': {\n      kind: 'number',\n      unit: '',\n      equipType: '',\n      tags: ['air', 'sensor', 'terminalLoad', 'vav'],\n    },\n    'Maximum Airflow': {\n      kind: 'number',\n      unit: '',\n      equipType: '',\n      tags: ['air', 'flow', 'sensor', 'max', 'vav'],\n    },\n  }\n  static Power_SubMeter = {\n    'Total Active Energy': {\n      kind: '',\n      unit: '',\n      equipType: '',\n      tags: ['elec', 'energy', 'sensor', 'active', 'exclusion', 'hisOnWrite'],\n    },\n    'Total Active Power': {\n      kind: '',\n      unit: '',\n      equipType: '',\n      tags: ['elec', 'power', 'sensor', 'active'],\n    },\n  }\n  static PowerSiteMeter = {\n    'Total Active Energy': {\n      kind: '',\n      unit: '',\n      equipType: '',\n      tags: ['elec', 'energy', 'sensor', 'active'],\n    },\n    'Total Active Power': {\n      kind: '',\n      unit: '',\n      equipType: '',\n      tags: ['elec', 'power', 'sensor', 'active'],\n    },\n    'Energy Target': {\n      kind: '',\n      unit: '',\n      equipType: '',\n      tags: ['elec ', 'energy', 'target'],\n    },\n    '???': {\n      kind: '',\n      unit: '',\n      equipType: '',\n      tags: ['gas', 'sensor', 'inclusion', 'hisTotalized'],\n    },\n  }\n  static Gas_SubMeter = {\n    'Total Gas Consumption': {\n      kind: '',\n      unit: '',\n      equipType: '',\n      tags: ['gas', 'sensor', 'exclusion', 'hisTotalized'],\n    },\n  }\n  static Gas_SiteMeter = {\n    'Total Gas Consumption': {\n      kind: '',\n      unit: '',\n      equipType: '',\n      tags: ['gas', 'sensor', 'inclusion', 'hisTotalized'],\n    },\n    'Gas Target': {\n      kind: '',\n      unit: '',\n      equipType: '',\n      tags: ['gas', 'target', 'sensor', 'exclusion', 'hisTotalized'],\n    },\n  }\n  static Water_subMeter = {\n    'Total Water Consumption': {\n      kind: '',\n      unit: '',\n      equipType: '',\n      tags: ['water', 'sensor', 'inclusion/exclusion', 'hisTotalized'],\n    },\n  }\n  static Water_SiteMeter = {\n    'Total Water Consumption': {\n      kind: '',\n      unit: '',\n      equipType: '',\n      tags: ['water', 'sensor'],\n    },\n    'Water Target': {\n      kind: '',\n      unit: '',\n      equipType: '',\n      tags: ['water', 'target'],\n    },\n  }\n};\n\n\n","interface findVal {\n  valueWithKey: object,\n  value: number;\n}\n\nenum compareType {\n  Equals = 'Equals',\n  NotEquals = 'Not Equal',\n  GreaterThanEqual = 'Greater Than Equal',\n  GreaterThan = 'Greater Than',\n  LessThanEqual = 'Less Than Equal',\n  LessThan = 'Less Than',\n  Includes = 'Includes',\n  startsWith = 'Starts With',\n  endsWith = 'Ends With'\n}\n\nexport default class jsonStringCompare {\n  /**\n   * \n   */\n  static compare(self: any, s1: any, s2: any) {\n    const inputType = self.settings['function'].value;\n    if (self.settings['isNumber'].value) {\n      s1 = Number(s1)\n      s2 = Number(s2)\n    }\n    switch (inputType) {\n      case compareType.Equals:\n        return s1 === s2;\n      case compareType.NotEquals:\n        return s1 !== s2;\n      case compareType.GreaterThanEqual:\n        return s1 >= s2;\n      case compareType.GreaterThan:\n        return s1 > s2;\n      case compareType.LessThanEqual:\n        return s1 <= s2;\n      case compareType.LessThan:\n        return s1 < s2;\n      case compareType.LessThan:\n        return s1 < s2;\n      case compareType.Includes:\n        return s1.includes(s2);\n      case compareType.startsWith:\n        return s1.startsWith(s2);\n      case compareType.endsWith:\n        return s1.endsWith(s2);\n      default:\n        return s1 === s2;\n    }\n   \n  }\n\n  static findVal(object: { [x: string]: any; }, key: string) {\n    let value: findVal;\n    Object.keys(object).some(function (k) {\n      if (k === key) {\n        value = {\n          valueWithKey: { [key]: object[k] },\n          value: object[k]\n        }\n      }\n      if (object[k] && typeof object[k] === 'object') {\n        value = this.findVal(object[k], key);\n        return value !== undefined;\n      }\n    });\n    return value;\n  }\n\n\n  \n\n}\n","export default class NodeUtils {\n  /**\n   * @Deprecated: Use Node::persistProperties\n   */\n  static persistProperties(\n    self,\n    saveSettings = false,\n    saveProperties = false,\n    saveInputs = false,\n    saveOutputs = false,\n  ) {\n    if (!self.container.db) return;\n    var setProps = {};\n    if (saveSettings) setProps['settings'] = self.settings;\n    if (saveProperties) setProps['properties'] = self.properties;\n    if (saveInputs) setProps['inputs'] = self.inputs;\n    if (saveOutputs) setProps['outputs'] = self.outputs;\n    self.container.db.updateNode(self.id, self.container.id, {\n      $set: setProps,\n    });\n  }\n}\n","export enum MATH_FUNC_TYPE {\n  NA = 0,\n  ADD = 1,\n  SUBTRACT = 2,\n  MULTIPLY = 3,\n  DIVIDE = 4,\n  REMAINDER = 5,\n  EXP = 6,\n  BOOL_INVERT = 7,\n  ONE_TO_TRUE = 8,\n  TRUE_TO_ONE = 9,\n  NUMBER_INVERT = 10,\n}\n\nexport default class MathUtils {\n  /**\n   * Values will be converted into the range min-max\n   * @param {number} value\n   * @param {number} min\n   * @param {number} max\n   */\n  static clamp(value: number, min: number, max: number): number {\n    return Math.min(Math.max(value, min), max);\n  }\n\n  /**\n   * It rounds to decimal place\n   * @param {any} value\n   * @param {number} decimals\n   * @returns {number}\n   */\n  static decimals(value: any, decimals: number): number {\n    if (isNaN(value)) return undefined;\n    const out = value.toFixed(MathUtils.clamp(decimals, 0, 5));\n    parseFloat(out);\n    return out;\n  }\n\n  /**\n   * It converts a 1 to a 0 or a 0 to a 1\n   * @param {number} value\n   */\n  static numInvert(value: number): number {\n    return value ^ 1;\n  }\n\n  /**\n   * It convert a true to a 1\n   * @param {number} value\n   */\n  static trueToOne(value: boolean): number {\n    if (typeof value === 'boolean') {\n      return value ? 1 : 0;\n    }\n    return undefined;\n  }\n\n  /**\n   * It convert a 1 to a true\n   * @param {number} value\n   */\n  static oneToTrue(value: number): boolean {\n    if (typeof value === 'number') {\n      return !!value;\n    }\n    return undefined;\n  }\n\n  /**\n   * It inverts the boolean value\n   * @param {boolean} value\n   */\n  static invert(value: boolean): boolean {\n    if (typeof value === 'boolean') {\n      return !value;\n    }\n    return undefined;\n  }\n\n  /**\n   * Checks whether all values are numbers or not\n   * @param values list of comma separated values\n   * @returns {boolean}\n   */\n  static validateNumbers = (...values: any) => {\n    return values.every(x => !isNaN(x));\n  };\n\n  static mathSwitch(mathFuncType: number, val: any, mathValue: number) {\n    let out;\n    switch (mathFuncType) {\n      case MATH_FUNC_TYPE.NA:\n        out = 0;\n        break;\n      case MATH_FUNC_TYPE.ADD:\n        out = val + mathValue;\n        break;\n      case MATH_FUNC_TYPE.SUBTRACT:\n        out = val - mathValue;\n        break;\n      case MATH_FUNC_TYPE.MULTIPLY:\n        out = val * mathValue;\n        break;\n      case MATH_FUNC_TYPE.DIVIDE:\n        out = val / mathValue;\n        break;\n      case MATH_FUNC_TYPE.REMAINDER:\n        out = 1;\n        break;\n      case MATH_FUNC_TYPE.EXP:\n        out = 1;\n        break;\n      case MATH_FUNC_TYPE.BOOL_INVERT:\n        out = MathUtils.invert(val);\n        break;\n      case MATH_FUNC_TYPE.ONE_TO_TRUE:\n        out = MathUtils.oneToTrue(val);\n        break;\n      case MATH_FUNC_TYPE.TRUE_TO_ONE:\n        out = MathUtils.trueToOne(val);\n        break;\n      case MATH_FUNC_TYPE.NUMBER_INVERT:\n        out = MathUtils.numInvert(val);\n        break;\n    }\n    return out;\n  }\n}\n","export default class EdgeGPIOUtils {\n  /*\n  used for scaling a UO !!! YES its backwards 0 is high and 100 is low !!!\n  to drive a UO as an DO send 0 for ON and 100 for OFF // Example to send 6vdc console.log(scaleToGPIOValue(60, 0, 120)) returns 48\n  to drive a UO as an AO send 100 to 0 as a float\n  */\n  static scaleToGPIOValue = (\n    val: number,\n    minOutput: number,\n    maxOutput: number,\n    minInput = 120,\n    maxInput = 0,\n  ): number => {\n    let value = val;\n    let pinValue = ((maxOutput - minOutput) * (value - minInput)) / (maxInput - minInput) + minOutput;\n    if (pinValue > maxOutput) {\n      pinValue = maxOutput;\n      value = maxInput;\n    } else if (pinValue < minOutput) {\n      pinValue = minOutput;\n      value = minInput;\n    }\n    return pinValue;\n  };\n\n  /*\n    used for scaling a UI\n    Example for scaling a 0/10dc to 0 to 1000. \n    scaleFromGPIOValue(0.7, 0, 1000)\n    */\n  static scaleFromGPIOValue = (\n    pinValue: number,\n    minOutput: number,\n    maxOutput: number,\n    minInput = 0,\n    maxInput = 1,\n  ): number => {\n    return ((maxOutput - minOutput) * (pinValue - minInput)) / (maxInput - minInput) + minOutput;\n  };\n\n  /*\n    used for scaling a UI as a DI\n    off/open = around 0.9 vdc. When on the pin jumper its set as a 10K\n    on/closed = around 0.1 vdc\n    */\n  static uiAsDI = (val: number): number => {\n    if (val > 0.6) {\n      return 0; // false/open\n    }\n    if (val < 0.2) {\n      return 1; // true/closed\n    }\n  };\n\n  /*\n    The bbb returns the DI as 0 for closed/on and 1 for open/off\n  */\n  static diInvert = (val: number): number => {\n    return (val ^= 1);\n  };\n\n  //  scale or convert 4-20mA reading to temperature\n  //      -value_420 is input value in 4-20mA\n  //      -min_target is minimum target temperature @4mA, defualts to 0C\n  //      -max_target is maximum target temperature  @20mA, defualts to 100C\n  //      -min_range is minimum input range, defaults to 4 mA.\n  //      -max_range is maximum input range, defaults to 20mA\n\n  static scale420maToRange(value_420: number, min_target: number, max_target: number) {\n    const limit = true,\n      min_range = 4,\n      max_range = 20;\n    const slope = (max_target - min_target) / (max_range - min_range);\n    if (limit)\n      if (value_420 <= min_range) return min_target;\n      else if (value_420 >= max_range) return max_target;\n    return (value_420 - min_range) * slope + min_target;\n  }\n\n  //  scale or convert ui reading to 4-20mA\n  //      -ui_value is input value in ui reading (0-1 range)\n  //      -min_target is minimum target output, defualts to 4mA\n  //      -max_target is maximum target output, defualts to 20mA\n  //      -min_range is minimum input range, defaults to 0.0\n  //      -max_range is maximum input range, defaults to 1.0\n  //\n\n  static scaleUI420ma(ui_value: number, min_range: number, max_range: number) {\n    const min_target = 4,\n      max_target = 20,\n      limit = true;\n    const slope = max_target / (max_range - min_range);\n    const value_420 = (ui_value - min_range) * slope;\n    if (limit)\n      if (value_420 <= min_target) return min_target;\n      else if (value_420 >= max_target) return max_target;\n\n    return value_420;\n  }\n}\n","import { PointOutput, PointValue } from '../../../../backend/models/point-model';\nimport { ErrorHandler } from '../../../../utils/decorators';\nimport { isFunction } from '../../../../utils/helper';\nimport { IMessageSubscriber, NodeStoreItem, Observer } from '../../../../utils/pattern';\nimport { Container } from '../../../container';\nimport { NODE_INFO } from '../../../node-info';\nimport { Type } from '../../../node-io';\nimport { GlobalNodeRegistry } from '../../../node-registry';\nimport { ConnectionOutput, DependantConnectionNode } from '../connection-node-mixin';\nimport { ContainerErrorNodeStore, OneIdentifierOneNodeStore } from '../model/container-node-store';\nimport { CentralizedPointOutputObserver, HasPointOutputObservers } from '../model/point-node';\nimport { ProtocolDeviceNode } from '../ProtocolDeviceNode';\nimport BACnetDevice from './core/bacnet-device';\nimport { BacnetPoint, BacnetPointCreator, PointKind } from './core/bacnet-model';\n\nexport const BACNET_SERVER_NODE_TYPE = 'protocols/bacnet-server/bacnet-server';\nexport const REGISTER_BACNET_POINT = 'REGISTER_BACNET_POINT';\nexport const UPDATE_BACNET_POINT = 'UPDATE_BACNET_POINT';\nexport const PUSH_BACNET_POINT_VALUE = 'PUSH_BACNET_POINT_VALUE';\nexport const UNREGISTER_BACNET_POINT = 'UNREGISTER_BACNET_POINT';\n\nclass BACNetCentralizedPointOutputObserver extends CentralizedPointOutputObserver<BacnetPoint> {\n\n  protected convert(data: PointOutput<BacnetPoint>): object {\n    let output = {};\n    output[data.point.identifier()] = {\n      objectId: data.point.objectInstance,\n      objectType: data.point.objectType.label,\n      objectName: data.point.objectName,\n      pointValue: data.point.pointValue,\n      status: data.connStatus.status.label,\n      error: data.connStatus.error,\n    };\n    return output;\n  }\n\n}\n\nclass BacnetNodeServerStore extends OneIdentifierOneNodeStore<PointValue> {\n\n  public getError(): ContainerErrorNodeStore {\n    return this.errors;\n  }\n\n  public getNodes(): { [identifier: string]: { identifier: string, nodeId: string; enabled: boolean; func: Function } } {\n    return this.nodes;\n  }\n\n  protected alreadyExistedMsg(payload: NodeStoreItem): string {\n    return `Already exist object with ${payload.data?.objectInstance} and type ${payload.data?.objectType}`;\n  }\n}\n\nclass BACnetServerNode extends ProtocolDeviceNode implements IMessageSubscriber, HasPointOutputObservers<BacnetPoint> {\n\n  private readonly _oPointsSlot = 2;\n  private device: BACnetDevice = null;\n  private store: BacnetNodeServerStore = new BacnetNodeServerStore();\n\n  constructor() {\n    super(NODE_INFO['protocols/bacnet-server']['bacnet-server'].title,\n          NODE_INFO['protocols/bacnet-server']['bacnet-server'].description);\n\n    this.mixinEnableInputSetting();\n    this.addInputWithSettings('address', Type.STRING, '0.0.0.0', 'BACnet Server Address');\n    this.addInputWithSettings('broadcast', Type.STRING, '255.255.255.255', 'Broadcast Address');\n    this.addInputWithSettings('port', Type.NUMBER, 47808, 'BACnet port');\n    this.addInputWithSettings('id', Type.NUMBER, 1, 'BACnet Device Id');\n    this.addInputWithSettings('name', Type.STRING, 'nube-bacnet', 'BACnet Device Name');\n    this.addInputWithSettings('apdu', Type.NUMBER, 1476, 'BACnet APDU');\n\n    this.addOutput('points', Type.JSON);\n  }\n\n  listen({ action, payload }: { action: string; payload: NodeStoreItem }) {\n    this.debugInfo(`Handling ${action}:${payload.identifier}...`);\n    switch (action) {\n      case REGISTER_BACNET_POINT:\n        return this.store.register(payload, p => this.afterRegister(p));\n      case UPDATE_BACNET_POINT:\n        return this.store.update(payload, p => this.afterUpdate(p), (p, force) => this.afterUnregister(p, force));\n      case PUSH_BACNET_POINT_VALUE:\n        return this.pushValue(payload);\n      case UNREGISTER_BACNET_POINT:\n        return this.store.unregister(payload, true, p => this.afterUnregister(p, true));\n      default:\n        this.debugWarn(`Request action doesn't match`);\n    }\n  }\n\n  connObserverNodes(): Observer<ConnectionOutput>[] {\n    return this.store.listNodeIds()\n               .map(id => GlobalNodeRegistry.instance().get(id))\n               .filter(n => n)\n               .map(n => (<DependantConnectionNode><unknown>n).statusObserver());\n  }\n\n  pointObservers(): Observer<PointOutput<BacnetPoint>>[] {\n    return [new BACNetCentralizedPointOutputObserver(this, this._oPointsSlot)];\n  }\n\n  isConnConnected(): boolean {\n    return this.device !== null;\n  }\n\n  @ErrorHandler\n  onReceiveMessage(object: object): void {\n    if (!this.getConnectionStatus().isConnected()) {\n      return;\n    }\n    let kind = PointKind.lookupByValue(object['objectType']);\n    let bp = BacnetPointCreator.create(this.isEnabled(), object['objectId'], kind, null,\n                                       object['presentValue'], object['priority'], object['priorityArray']);\n    let pointNode = this.store.lookup(bp.identifier());\n    if (pointNode && GlobalNodeRegistry.instance().has(pointNode.nodeId) && isFunction(pointNode.func)) {\n      pointNode.func(bp);\n    } else {\n      this.debug(`Receive message to BACnet Point ${bp.identifier()} but not found node`);\n      //TODO: how to add new node from server\n    }\n  }\n\n  protected applyTitle() {\n    super.applyTitle();\n    this.broadcastSettingsToClients();\n    this.broadcastNameToClients();\n  }\n\n  protected createThenStart() {\n    this.device = new BACnetDevice({\n                                     deviceId: this.settings['id'].value,\n                                     name: this.settings['name'].value,\n                                     databaseRevision: 1,\n                                   }, {\n                                     port: this.settings['port'].value,\n                                     address: this.settings['address'].value,\n                                     broadcast: this.settings['broadcast'].value,\n                                     apduTimeout: this.settings['apdu'].value,\n                                   }, data => this.onReceiveMessage(data));\n    this.device.start();\n  }\n\n  protected stop() {\n    if (!this.device) {\n      return;\n    }\n    try {\n      this.device.stop();\n      this.device = null;\n    } catch (e) {\n      this.debugWarn(`Cannot closed BACnet client ${e}`);\n    }\n  }\n\n  private afterRegister(payload: NodeStoreItem) {\n    if (payload.enabled && this.getConnectionStatus().isConnected()) {\n      this.device.addPoint(payload.data);\n      return payload.data;\n    }\n    return null;\n  }\n\n  private afterUpdate(payload: NodeStoreItem) {\n    if (payload.enabled && this.getConnectionStatus().isConnected()) {\n      return this.device.updatePoint(payload.data);\n    }\n    return null;\n  }\n\n  private pushValue(payload: NodeStoreItem) {\n    if (payload.enabled && this.getConnectionStatus().isConnected()) {\n      return this.device.updateValue(payload.data);\n    }\n    return null;\n  }\n\n  private afterUnregister(payload: NodeStoreItem, force?: boolean) {\n    if (payload.data?.objectInstance && this.getConnectionStatus().isConnected()) {\n      this.device.delObject(payload.data?.objectInstance, payload.data?.objectType?.value);\n    }\n    if (force) {\n      let output = this.outputs[this._oPointsSlot].data;\n      if (output) {\n        delete output[payload.identifier];\n      }\n      this.setOutputData(this._oPointsSlot, output);\n    }\n  }\n\n}\n\nContainer.registerNodeType(BACNET_SERVER_NODE_TYPE, BACnetServerNode);\n","import { isNull, unionToArray } from '../../../../utils/helper';\nimport { NodeStoreItem } from '../../../../utils/pattern';\n\nexport interface ContainerNodeStore<T> {\n\n  checkExistence(payload: NodeStoreItem): void;\n\n  lookup(identifier: string): any;\n\n  register(payload: NodeStoreItem, afterUpdate?: (p) => T): T;\n\n  update(payload: NodeStoreItem, afterUpdate?: (p) => T, afterUnregisterIfExisted?: (p, force?: boolean) => void): T;\n\n  unregister(payload: NodeStoreItem, force?: boolean, afterUnregister?: (p, force?: boolean) => void): void;\n\n  listNodeIds(): string[];\n\n}\n\nexport interface ContainerErrorNodeStore {\n\n  hasError(nodeId: string): boolean;\n\n  addError(nodeId: string): void;\n\n  removeError(nodeId: string): void;\n\n  listErrors(): Set<string>;\n\n}\n\nexport interface IOneIdentifierManyNodeStore<T> extends ContainerNodeStore<T> {\n\n  has(identifier, predicate: (key, value) => boolean): boolean;\n\n}\n\nexport class DefaultContainerErrorNode implements ContainerErrorNodeStore {\n  private nodeIdErrors: Set<string> = new Set<string>();\n\n  hasError(nodeId: string): boolean {\n    return this.nodeIdErrors.has(nodeId);\n  }\n\n  addError(nodeId: string): void {\n    this.nodeIdErrors.add(nodeId);\n  }\n\n  removeError(nodeId: string): void {\n    this.nodeIdErrors.delete(nodeId);\n  }\n\n  listErrors(): Set<string> {\n    return this.nodeIdErrors;\n  }\n}\n\nexport abstract class AbstractContainerStore<T> implements ContainerNodeStore<T> {\n\n  abstract checkExistence(payload: NodeStoreItem): void;\n\n  abstract lookup(identifier: string): any;\n\n  abstract unregister(payload: NodeStoreItem, force?: boolean, cb?: (p, force?: boolean) => void): void;\n\n  abstract listNodeIds(): string[];\n\n  register(payload: NodeStoreItem, cb?: (p) => T): T {\n    this.checkExistence(payload);\n    this.add(payload);\n    return cb && cb(payload);\n  }\n\n  update(payload: NodeStoreItem, afterUpdate?: (p) => T, afterUnregisterIfExisted?: (p, force?: boolean) => void): T {\n    if (payload?.identifier !== payload?.prev?.identifier) {\n      try {\n        this.checkExistence(payload?.prev);\n      } catch (e) {\n        this.unregister(payload?.prev, true, (p) => afterUnregisterIfExisted && afterUnregisterIfExisted(p, true));\n      }\n      return this.register(payload, afterUpdate);\n    }\n    if (!payload?.enabled) {\n      this.unregister(payload, false, (p) => afterUnregisterIfExisted && afterUnregisterIfExisted(p, false));\n      return payload?.data;\n    }\n    this.add(payload);\n    return afterUpdate && afterUpdate(payload);\n  }\n\n  protected abstract add(payload: NodeStoreItem): string;\n\n}\n\nexport abstract class OneIdentifierOneNodeStore<T> extends AbstractContainerStore<T> {\n\n  protected nodes: { [identifier: string]: { identifier: string, nodeId: string; enabled: boolean; func: Function } } = {};\n  protected errors: ContainerErrorNodeStore = new DefaultContainerErrorNode();\n\n  checkExistence(payload: NodeStoreItem): void {\n    if (this.nodes[payload?.identifier]) {\n      if (payload.lenient && this.nodes[payload.identifier].nodeId === payload.nodeId) {\n        return;\n      }\n      if (this.nodes[payload.identifier].nodeId !== payload.nodeId) {\n        this.errors.addError(payload.nodeId);\n      }\n      throw new Error(this.alreadyExistedMsg(payload));\n    }\n  }\n\n  lookup(identifier: string): { identifier: string, nodeId: string; enabled: boolean; func: Function } {\n    return this.nodes[identifier] ?? null;\n  }\n\n  update(payload: NodeStoreItem, afterUpdate?: (p) => T, afterUnregisterIfExisted?: (p, force?: boolean) => void): T {\n    this.errors.removeError(payload?.nodeId);\n    return super.update(payload, afterUpdate, afterUnregisterIfExisted);\n  }\n\n  unregister(payload: NodeStoreItem, force?: boolean, cb?: (p, force?: boolean) => void): void {\n    if (isNull(payload)) {\n      return null;\n    }\n    this.errors.removeError(payload?.nodeId);\n    let item = this.lookup(payload.identifier);\n    if (isNull(item)) {\n      return null;\n    }\n    if (item.nodeId !== payload.nodeId) {\n      return null;\n    }\n    if (force) {\n      delete this.nodes[payload.identifier];\n    } else {\n      this.nodes[this.add(payload)].enabled = false;\n    }\n    return cb && cb(payload);\n  }\n\n  listNodeIds(): string[] {\n    return unionToArray(Object.values(this.nodes).map(v => v.nodeId), this.errors.listErrors());\n  }\n\n  protected add(payload: NodeStoreItem): string {\n    this.errors.removeError(payload?.nodeId);\n    this.nodes[payload.identifier] = {\n      identifier: payload.identifier,\n      nodeId    : payload.nodeId,\n      enabled   : payload.enabled,\n      func      : payload.callback,\n    };\n    return payload.identifier;\n  }\n\n  protected abstract alreadyExistedMsg(payload: NodeStoreItem): string;\n\n}\n\nexport abstract class OneIdentifierManyNodeStore<T> extends AbstractContainerStore<T>\n  implements IOneIdentifierManyNodeStore<T> {\n\n  private nodes: { [identifier: string]: { [nodeId: string]: { enabled: boolean; func?: Function } } } = {};\n\n  checkExistence(payload: NodeStoreItem): void {\n    if (this.nodes[payload?.identifier] && this.nodes[payload?.identifier][payload?.nodeId]) {\n      if (payload?.lenient) {\n        return;\n      }\n      throw new Error(this.alreadyExistedMsg(payload));\n    }\n  }\n\n  lookup(identifier: string): { [nodeId: string]: { enabled: boolean; func?: Function } } {\n    return this.nodes[identifier] ?? {};\n  }\n\n  unregister(payload: NodeStoreItem, force?: boolean, afterUnregister?: (p, force?: boolean) => void): void {\n    let item = this.lookup(payload.identifier);\n    if (isNull(item) || isNull(item[payload?.nodeId])) {\n      return null;\n    }\n    if (force) {\n      if (this.nodes[payload?.identifier]) {\n        delete this.nodes[payload?.identifier][payload?.nodeId];\n      }\n    } else {\n      this.nodes[this.add(payload)][payload?.nodeId].enabled = false;\n    }\n    return afterUnregister && afterUnregister(payload);\n  }\n\n  listNodeIds(): string[] {\n    return unionToArray(...Object.values(this.nodes).map(v => Object.keys(v)));\n  }\n\n  has(identifier, predicate: (key, value) => boolean): boolean {\n    return Object.entries(this.lookup(identifier)).some(object => predicate(object[0], object[1]));\n  }\n\n  protected add(payload: NodeStoreItem): string {\n    this.nodes[payload?.identifier] = this.nodes[payload?.identifier] ?? {};\n    this.nodes[payload?.identifier][payload?.nodeId] = {\n      enabled: payload?.enabled,\n      func   : payload?.callback,\n    };\n    return payload?.identifier;\n  }\n\n  protected abstract alreadyExistedMsg(payload: NodeStoreItem): string;\n}\n","import { ErrorCallbackHandler } from '../../../utils/decorators';\nimport { ConnectionStatus } from '../../../utils/enums';\nimport { IdGenerator } from '../../../utils/id-generator';\nimport { DefaultObservable, ICentralizedListener, NodeStoreItem, Observable, Observer } from '../../../utils/pattern';\nimport { ContainerNode } from '../../container-node';\nimport { Side } from '../../node-interface';\nimport { ConnectionOutput, ExternalConnectionNode, ExternalConnectionNodeMixin } from './connection-node-mixin';\n\nexport interface IProtocolDeviceNode extends ExternalConnectionNode, ICentralizedListener {\n\n  statusObservable(observers: Observer<ConnectionOutput>[]): Observable<ConnectionOutput>;\n\n}\n\nexport abstract class ProtocolDeviceNode extends ExternalConnectionNodeMixin(ContainerNode)\n  implements IProtocolDeviceNode {\n  private readonly _title: string;\n\n  protected constructor(title, description) {\n    super();\n    this._title = title;\n    this.description = description;\n    this.mixinConnectionStatusOutput();\n  }\n\n  onCreated() {\n    super.onCreated();\n  }\n\n  onAdded() {\n    super.onAdded();\n    this.startOrStop();\n  }\n\n  onAfterSettingsChange() {\n    this.startOrStop();\n    this.applyTitle();\n  }\n\n  onInputUpdated() {\n    this.reEvaluateSettingByInput(this.inputs, this.settings);\n    this.onAfterSettingsChange();\n  }\n\n  onRemoved() {\n    this.stop();\n    super.onRemoved();\n  }\n\n  statusObservable(observers: Observer<ConnectionOutput>[]): Observable<ConnectionOutput> {\n    observers.push(this.statusObserver());\n    return new DefaultObservable<ConnectionOutput>(observers);\n  }\n\n  abstract listen({ action, payload }: { action: string; payload: NodeStoreItem });\n\n  abstract connObserverNodes(): Observer<ConnectionOutput>[];\n\n  protected applyTitle() {\n    super.applyTitle();\n  }\n\n  protected statusOutputIdx(): number {\n    return 0;\n  }\n\n  protected enableDescription(): string {\n    return `Enable ${this._title}`;\n  }\n\n  protected startOrStop(): void {\n    if (this.side !== Side.server) return;\n    this.stop(); // to restart device\n    this.connectionStatus = ConnectionStatus.UNCONNECTED;\n    if (this.isEnabled()) {\n      this.kickoff(this);\n    }\n    this.notifyConnStatusOutput();\n  }\n\n  @ErrorCallbackHandler((err, node) => node.handleErrorInKickOff(err))\n  protected kickoff(node: ProtocolDeviceNode) {\n    node.createThenStart();\n    this.notifyConnStatusOutput(ConnectionStatus.CONNECTED);\n  }\n\n  protected handleErrorInKickOff(err: Error) {\n    this.notifyConnStatusOutput(ConnectionStatus.ERROR, err.message);\n  }\n\n  protected notifyConnStatusOutput(status?: ConnectionStatus, errMsg?: string) {\n    this.connectionStatus = status ?? this.connectionStatus;\n    let nodeId = IdGenerator.createNodeId(this.cid, this.id);\n    this.statusObservable(this.connObserverNodes()).notify(new ConnectionOutput(this.getConnectionStatus(), errMsg),\n                                                           nodeId);\n  }\n\n  protected abstract createThenStart(): void;\n\n  protected abstract stop(): void;\n}\n\n","import { Enumify } from 'enumify';\n\nexport class ConnectionStatus extends Enumify {\n\n  static CONNECTED = new ConnectionStatus('CONNECTED');\n  static DISCONNECTED = new ConnectionStatus('DISCONNECTED');\n  static ERROR = new ConnectionStatus('ERROR');\n  static UNCONNECTED = new ConnectionStatus('UNCONNECTED');\n  static _ = ConnectionStatus.closeEnum();\n\n  readonly label: string;\n\n  constructor(label: string) {\n    super();\n    this.label = label;\n  }\n\n  static lookupByLabel(label: string): ConnectionStatus {\n    return ConnectionStatus.enumValues.map(e => <ConnectionStatus><unknown>e).find(value => value.label === label);\n  }\n\n  isConnected(): boolean {\n    return this === ConnectionStatus.CONNECTED;\n  }\n\n  isError(): boolean {\n    return this === ConnectionStatus.ERROR;\n  }\n\n  isDisconnected(): boolean {\n    return this === ConnectionStatus.DISCONNECTED;\n  }\n\n  isUnconnected(): boolean {\n    return this === ConnectionStatus.UNCONNECTED;\n  }\n}\n\nexport enum HistoryMode {\n  COV,\n  TRIGGERED,\n}\n","import { Constructor, isFunction } from '../../utils/helper';\nimport { Node, NodeSettingConfig} from '../node';\nimport { NodeInput, NodeSetting, Type } from '../node-io';\n\n/**\n * Represents decorator to evaluate {@link NodeSetting} by {@link NodeInput}\n */\nexport interface NodeInputEvaluation {\n  reEvaluateSettingByInput(inputs: { [p: number]: NodeInput }, settings: { [p: string]: NodeSetting }): void;\n}\n\nexport class NodeInputOutputDecoratorProxy implements NodeInputEvaluation {\n  func: any;\n\n  private constructor(func: any) {\n    this.func = func;\n  }\n\n  // static execute(func: any): void {\n  //   new NodeInputOutputDecoratorProxy(func).reEvaluateSettingByInput(this.inputs, this.settings);\n  // }\n\n  reEvaluateSettingByInput(inputs: { [p: number]: NodeInput }, settings: { [p: string]: NodeSetting }): void {\n    if (this.func && isFunction(this.func)) {\n      this.func(inputs, settings);\n    }\n  }\n}\n\nexport interface HasEnabled {\n  isEnabled(): boolean;\n}\n\nexport function AbleEnableNode<TBase extends Constructor<Node>>(Base: TBase) {\n  abstract class AbleEnableNodeBase extends Base implements NodeInputEvaluation, HasEnabled {\n    mixinEnableInputSetting(): NodeSettingConfig {\n      this.addInputWithSettings(this.enableSettingKey(), Type.BOOLEAN, false, this.enableDescription());\n      return { conditions: {} };\n    }\n\n    reEvaluateSettingByInput(inputs: { [p: number]: NodeInput }, settings: { [p: string]: NodeSetting }): void {\n      //TODO: need find a way to auto execute super mixin method\n      // NodeInputOutputDecoratorProxy.execute(super['reEvaluateSettingByInput']);\n      if (isFunction(super['reEvaluateSettingByInput'])) {\n        super['reEvaluateSettingByInput'](inputs, settings);\n      }\n      this.settings[this.enableSettingKey()].value =\n        this.inputs[this.enableInputIdx()].data ?? this.settings[this.enableSettingKey()].value;\n    }\n\n    protected abstract enableDescription(): string;\n\n    protected enableInputIdx(): number {\n      return 0;\n    }\n\n    protected enableSettingKey(): string {\n      return 'enable';\n    }\n\n    isEnabled(): boolean {\n      let parentIsEnabled = true;\n      if (isFunction(super['isEnabled'])) {\n        parentIsEnabled = super['isEnabled']();\n      }\n      return parentIsEnabled && this.settings[this.enableSettingKey()]?.value;\n    }\n  }\n\n  return AbleEnableNodeBase;\n}\n","//\n// BACnet device implementation.\n// Property of an object, such as the current value or maximum reading.\n//\n\nconst nodeUtil = require('util');\nconst bacnet   = require('node-bacnet');\n\nconst propertyTypeMap = require('./typemap-property');\nconst Util            = require('./util');\n\nconst pi = bacnet && bacnet.enum.PropertyIdentifier;\n\nconst typeEnumMap = bacnet && {\n  [pi.OBJECT_TYPE]: bacnet.enum.ObjectType,\n};\n\nclass BACnetObjectProperty {\n  constructor(obj, propertyId, typeId = undefined, readOnly = false) {\n    this.obj           = obj;\n    this.propertyId    = propertyId;\n    this.typeId        = typeId === undefined || typeId === null ? propertyTypeMap[propertyId] : typeId;\n    this.readOnly      = readOnly;\n    this.subscriptions = [];\n    if (this.typeId === undefined) {\n      throw new Error(\n        `Property ${Util.getPropName(propertyId)} has no default ` +\n        `type set, you must specify one yourself or update the bacnet-device ` +\n        `Node module.`,\n      );\n    }\n\n    this.callbacks = [];\n  }\n\n  get value() {\n    return this._value;\n  }\n\n  set value(newValue) {\n    if (this.readOnly) {\n      throw new Error(`Property ${Util.getPropName(this.propertyId)} cannot be changed.`);\n    }\n    this._value = newValue;\n\n    // Notify any subscribeCov listeners.\n    this.obj.onPropertyChanged(this);\n\n    // Notify and subscribeProperty listeners.\n    this.callbacks.forEach(cb => {\n      cb.fn(this);\n    });\n  }\n\n  addCallback(id, fn) {\n    this.callbacks.push({ id: id, fn: fn });\n  }\n\n  removeCallback(id) {\n    this.callbacks = this.callbacks.filter(cb => cb.id !== id);\n  }\n\n  valueAsString() {\n    let lookup = typeEnumMap[this.propertyId];\n    let value  = this._value;\n    if (lookup) {\n      value = Util.getEnumName(lookup, value);\n    }\n    return value;\n  }\n\n  toString() {\n    return `BACnetObjectProperty { ${Util.getPropName(\n      this.propertyId,\n    )} = ${this.valueAsString()} }`;\n  }\n\n  [nodeUtil.inspect.custom]() {\n    return this.toString();\n  }\n}\n\nmodule.exports = BACnetObjectProperty;\n","import { Enumify } from 'enumify';\nimport { PointModel, PointValue, PointValueCreator } from '../../../../../backend/models/point-model';\nimport { isNull } from '../../../../../utils/helper';\n\nexport class PointKind extends Enumify {\n  static ANALOG_INPUT = new PointKind(0, 'analog-input');\n  static ANALOG_OUTPUT = new PointKind(1, 'analog-output');\n  static ANALOG_VALUE = new PointKind(2, 'analog-value');\n  static BINARY_INPUT = new PointKind(3, 'binary-input');\n  static BINARY_OUTPUT = new PointKind(4, 'binary-output');\n  static BINARY_VALUE = new PointKind(5, 'binary-value');\n  static MULTI_STATE_INPUT = new PointKind(13, 'multi-state-input');\n  static MULTI_STATE_OUTPUT = new PointKind(14, 'multi-state-output');\n  static MULTI_STATE_VALUE = new PointKind(19, 'multi-state-value');\n\n  static _ = PointKind.closeEnum();\n\n  readonly value: number;\n  readonly label: string;\n\n  constructor(value: number, label: string) {\n    super();\n    this.value = value;\n    this.label = label;\n  }\n\n  static items(): { text: string; value: any }[] {\n    return PointKind.enumKeys.map(k => {\n      return { value: k, text: (<PointKind>PointKind.enumValueOf(k)).label };\n    });\n  }\n\n  static lookupByValue(objectType: number): PointKind {\n    return PointKind.enumValues.map(pk => <PointKind>pk).find(pk => pk.value === objectType);\n  }\n\n  static lookupByLabel(objectType: string): PointKind {\n    return PointKind.enumValues.map(pk => <PointKind>pk).find(pk => pk.label === objectType);\n  }\n}\n\nexport interface BacnetPoint extends PointModel {\n  objectInstance: number;\n\n  objectType: PointKind;\n\n  objectName: string;\n}\n\nexport class BacnetPointCreator {\n  private constructor() {\n  }\n\n  static from = (json: object): BacnetPoint => {\n    if (isNull(json)) {\n      return null;\n    }\n    // @ts-ignore\n    let pv = json?.pointValue;\n    // @ts-ignore\n    return BacnetPointCreator.create(json?.enabled, json?.objectInstance, json?.objectType, json?.objectName,\n                                     pv?.presentValue, pv?.priority, pv?.priorityArray);\n  };\n\n  static create = (enabled: boolean, objectInstance: number, objectType: PointKind, objectName: string,\n                   presentValue?: number, priority?: number, priorityArray?: any): BacnetPoint => {\n    return BacnetPointCreator.by(enabled, objectInstance, objectType, objectName,\n                                 PointValueCreator.create(presentValue, priority, priorityArray));\n  };\n\n  static by = (enabled: boolean, objectInstance: number, objectType: PointKind, objectName: string,\n               pointValue: PointValue): BacnetPoint => {\n    return new DefaultBacnetPoint(enabled, objectInstance, objectType, objectName, pointValue);\n  };\n}\n\nclass DefaultBacnetPoint implements BacnetPoint {\n  enabled: boolean;\n  objectInstance: number;\n  objectType: PointKind;\n  objectName: string;\n  pointValue: PointValue;\n\n  constructor(enabled: boolean, objectInstance: number, objectType: PointKind, objectName: string,\n              pointValue: PointValue) {\n    this.enabled = enabled || false;\n    this.objectInstance = objectInstance;\n    this.objectType = objectType;\n    this.objectName = objectName;\n    this.pointValue = pointValue;\n  }\n\n  identifier(): string {\n    return `${this.objectType.enumKey}:${this.objectInstance}`;\n  }\n\n  mightOnlyValueChanged(bp: BacnetPoint): boolean {\n    return (this.enabled === bp?.enabled && this.objectInstance === bp?.objectInstance &&\n            this.objectType === bp?.objectType && this.objectName === bp?.objectName);\n  }\n\n  equals(bp: BacnetPoint): boolean {\n    return this.identifier() === bp?.identifier();\n  }\n}\n","import { Container } from '../../../container';\nimport { Node } from '../../../node';\nimport { NODE_INFO } from '../../../node-info';\nimport { NodeSetting, SettingType, Type } from '../../../node-io';\n\nexport enum LORA_DATA_TYPE_NAMES {\n  INT8 = 0,\n  UINT8,\n  INT16,\n  UINT16,\n  INT32,\n  UINT32,\n  FLOAT,\n}\n\nexport const LORA_DATA_TYPE_LENGTHS = [\n  1, // INT8\n  1, // UINT8\n  2, // INT16\n  2, // UINT16\n  4, // INT32\n  4, // UINT32\n  4, // FLOAT\n];\n\nexport class LoRaRawTwoWayInput extends Node {\n  payloadDefinition: Array<LORA_DATA_TYPE_NAMES> = [];\n\n  constructor() {\n    super();\n    this.title = NODE_INFO[\"protocols/lora-raw\"][\"lora-raw-two-way-in\"].title;\n    this.description = NODE_INFO[\"protocols/lora-raw\"][\"lora-raw-two-way-in\"].description;\n    this.settings['enable'] = NodeSetting.create({\n      description: 'enable',\n      type: SettingType.BOOLEAN,\n      value: false,\n    });\n    this.settings['senderId'] = NodeSetting.create({\n      description: 'sender Id',\n      type: SettingType.NUMBER,\n      value: 0,\n    });\n    this.settings['port'] = NodeSetting.create({\n      description: 'port number',\n      type: SettingType.NUMBER,\n      value: 0,\n    });\n    this.settings['types'] = NodeSetting.create({\n      description: 'Types',\n      type: SettingType.READONLY,\n      value: 'INT8, INT16, INT32, FLOAT',\n      // value: 'INT8, UINT8, INT16, UINT16, INT32, UINT32, FLOAT',\n    });\n    this.settings['definition'] = NodeSetting.create({\n      description: 'payload definition (JSON)',\n      type: SettingType.STRING,\n      value: '',\n    });\n\n    this.addInput('rawInput', Type.STRING);\n    this.addOutput('error', Type.STRING);\n  }\n\n  init() {\n    this.updateOutputs();\n  }\n\n  onAdded() {\n    this.payloadDefinition = this.stringToDataTypes(this.settings['definition'].value);\n  }\n\n  onInputUpdated() {\n    let data: string = this.getInputData(0) || '';\n    if (this.settings['enable'].value === false) return;\n    if (!data) return;\n    if (!data || data.length <= 6 * 2 || data.substring(0, 8) !== 'FFFFFFFF') {\n      // 6 = 4(ff's) + 1(slaveid) + 1(port). (x2 for HEX)\n      return;\n    }\n\n    const senderId = parseInt(data.substring(10, 12), 16);\n    const port = parseInt(data.substring(12, 14), 16);\n\n    if (senderId !== this.settings['senderId'].value || port !== this.settings['port'].value) {\n      return;\n    }\n\n    // remove newline\n    if (data.substring(data.length - 2, data.length) === '\\r\\n') {\n      data = data.substring(0, data.length - 2);\n    } else if (data.length % 2 === 1 && data[data.length - 1] === '\\n') {\n      data = data.substring(0, data.length - 1);\n    }\n\n    // PARSING\n\n    const parseError = msg => {\n      this.setOutputData(0, 'parse error: ' + msg);\n    };\n\n    // convert hex string to buffer\n    let buffer = Buffer.from(data.substring(14), 'hex');\n    let pointParsed = new Array<boolean>(this.payloadDefinition.length);\n    pointParsed.fill(false);\n\n    for (let i = 0; i < buffer.length; ) {\n      let point = buffer.readUInt8(i++);\n      let type_length = 0;\n\n      if (point >= this.payloadDefinition.length) {\n        parseError('invalid point ' + point);\n        return;\n      }\n      if (pointParsed[point]) {\n        parseError('point already parsed: ' + point);\n        return;\n      }\n\n      type_length = LORA_DATA_TYPE_LENGTHS[this.payloadDefinition[point]];\n\n      if (buffer.length - i < type_length) {\n        parseError('invalid length');\n        return;\n      }\n\n      switch (this.payloadDefinition[point]) {\n        case LORA_DATA_TYPE_NAMES.INT8:\n          this.setOutputData(point + 1, buffer.readInt8(i));\n          break;\n\n        case LORA_DATA_TYPE_NAMES.UINT8:\n          this.setOutputData(point + 1, buffer.readUInt8(i));\n          break;\n\n        case LORA_DATA_TYPE_NAMES.INT16:\n          this.setOutputData(point + 1, buffer.readInt16LE(i));\n          break;\n\n        case LORA_DATA_TYPE_NAMES.UINT16:\n          this.setOutputData(point + 1, buffer.readUInt16LE(i));\n          break;\n\n        case LORA_DATA_TYPE_NAMES.INT32:\n          this.setOutputData(point + 1, buffer.readInt32LE(i));\n          break;\n\n        case LORA_DATA_TYPE_NAMES.UINT32:\n          this.setOutputData(point + 1, buffer.readUInt32LE(i));\n          break;\n\n        case LORA_DATA_TYPE_NAMES.FLOAT:\n          this.setOutputData(point + 1, buffer.readFloatLE(i));\n          break;\n      }\n      pointParsed[point] = true;\n      i += type_length;\n    }\n\n    this.setOutputData(0, null);\n  }\n\n  onAfterSettingsChange() {\n    this.payloadDefinition = this.updateOutputs();\n    this.setOutputData(0, null);\n    this.onInputUpdated();\n  }\n\n  private updateOutputs() {\n    const data = this.stringToDataTypes(this.settings['definition'].value);\n    if (this.payloadDefinition.length !== data.length) {\n      const outputsCount = this.getOutputsCount();\n      for (let i = 1; i < outputsCount; i++) {\n        this.removeOutput(i);\n      }\n      for (let i = 0; i < data.length; i++) {\n        this.addOutput(i.toString(), Type.NUMBER);\n      }\n      this.updateNodeOutput();\n    }\n    return data;\n  }\n\n  stringToDataTypes(str) {\n    const data = str\n      .toUpperCase()\n      .replace(/ /g, '')\n      .split(',')\n      .filter(x => x !== '');\n\n    if (data && data.length) {\n      for (let i = 0; i < data.length; i++) {\n        if (LORA_DATA_TYPE_NAMES[data[i]] === undefined) {\n          this.setOutputData(1, 'settings parse error');\n          return undefined;\n        }\n        data[i] = LORA_DATA_TYPE_NAMES[data[i]];\n      }\n    }\n    return data;\n  }\n}\nContainer.registerNodeType('protocols/lora-raw/lora-raw-two-way-in', LoRaRawTwoWayInput);\n","module.exports = require(\"crypto\");","module.exports = require(\"modbus-serial\");","module.exports = require(\"net\");","import { PointValue } from '../../../../backend/models/point-model';\nimport { NodeStoreItem } from '../../../../utils/pattern';\nimport { OneIdentifierManyNodeStore, OneIdentifierOneNodeStore } from '../model/container-node-store';\n\nexport class MqttPointStoreItem implements NodeStoreItem {\n\n  identifier: string;\n  nodeId: string;\n  enabled: boolean;\n  lenient?: boolean;\n  publisher: {\n    identifier?: string,\n    prev?: NodeStoreItem,\n    data?: any,\n    callback?: Function\n  };\n  subscriber: {\n    identifier?: string,\n    prev?: NodeStoreItem,\n    callback?: Function\n  };\n\n  constructor(identifier: string, nodeId: string, enabled: boolean,\n              publisher: { identifier?: string; prev?: NodeStoreItem; data?: any; callback?: Function },\n              subscriber: { identifier?: string; prev?: NodeStoreItem; callback?: Function }) {\n    this.identifier = identifier;\n    this.nodeId = nodeId;\n    this.enabled = enabled;\n    this.publisher = publisher;\n    this.subscriber = subscriber;\n  }\n\n  toPublisher(): NodeStoreItem {\n    return this.to(this.publisher as NodeStoreItem);\n  }\n\n  toSubscriber(): NodeStoreItem {\n    return this.to(this.subscriber as NodeStoreItem);\n  }\n\n  private to(ps: NodeStoreItem) {\n    return {\n      identifier: ps?.identifier ?? this.identifier,\n      nodeId    : this.nodeId,\n      enabled   : this.enabled,\n      prev      : ps?.prev,\n      data      : ps?.data,\n      lenient   : this.lenient,\n      callback  : ps?.callback,\n    } as NodeStoreItem;\n  }\n}\n\n//TODO: current only per MQTT topic per point node. Can enhance to support multiple point nodes with same topic\nexport class MqttPublisherStore extends OneIdentifierOneNodeStore<PointValue> {\n\n  protected alreadyExistedMsg(payload: NodeStoreItem): string {\n    return `Already exist MQTT publisher bind to topic ${payload?.identifier}`;\n  }\n\n}\n\nexport class MqttSubscriberStore extends OneIdentifierManyNodeStore<any> {\n\n  protected alreadyExistedMsg(payload: NodeStoreItem): string {\n    return `Already existed MQTT subscriber bind to topic ${payload?.identifier} with node id ${payload.nodeId}`;\n  }\n\n}\n","module.exports = require(\"serialport\");","export default class NodeColours {\n  /**\n   * Changes the node colour for the user\n   * NORMAL, light grey\n   * INFO, light green\n   * WARNING, light orange\n   * ERROR, light red\n   * @param self {string} pass in this instance\n   * @param NodeState {string} pass in the colour to use\n   */\n    static nodeColourChange(self, NodeState) {\n        self.setNodeState(NodeState);\n    }\n}\n","module.exports = require(\"source-map-support\");","module.exports = require(\"process\");","module.exports = require(\"minimist\");","module.exports = require(\"dotenv\");","import { Colors, create } from 'logplease';\nimport { Database } from '../database/database';\nimport {\n  EDGES_PARENT_CONTAINER_TYPE,\n  MODULES_PARENT_CONTAINER_TYPE,\n  SERVICES_PARENT_CONTAINER_TYPE,\n} from '../nodes/constants';\nimport { Container, ContainerRegistry } from '../nodes/container';\nimport { Node } from '../nodes/node';\nimport { NodeFactory } from '../nodes/node-factory';\nimport { SerializedNode } from '../nodes/node-interface';\nimport { EdgesParentContainerNode } from '../nodes/nodes/IoT/datapoint-node';\nimport { ModulesParentContainerNode, ServicesParentContainerNode } from '../nodes/nodes/IoT/installer-node';\n\nconst logger = create('backend', { color: Colors.Yellow });\n\nexport interface BackendSyncConfiguration {\n  enabled: boolean,\n  baseUrl: string,\n  nodeRefreshIntervalSeconds: number,\n  pointRefreshIntervalSeconds: number,\n  nodeDistance: number\n}\n\nexport class Backend {\n  database: Database;\n  backendSyncCfg: BackendSyncConfiguration;\n  edgesContainer: EdgesParentContainerNode;\n  modulesContainer: ModulesParentContainerNode;\n  servicesContainer: ServicesParentContainerNode;\n\n  constructor(database: Database, backendSyncCfg: BackendSyncConfiguration) {\n    this.database = database;\n    this.backendSyncCfg = backendSyncCfg;\n  }\n\n  start(): void {\n    if (!this.backendSyncCfg.enabled) {\n      return;\n    }\n    this.ensureParentContainers().then(() => this.refreshPeriodically());\n  }\n\n  private ensureParentContainers(): Promise<any> {\n    return this.findOrCreateNode(EDGES_PARENT_CONTAINER_TYPE, node => node instanceof EdgesParentContainerNode)\n               .then(edgesContainer => (this.edgesContainer = edgesContainer as EdgesParentContainerNode))\n               .then(() => this.findOrCreateNode(MODULES_PARENT_CONTAINER_TYPE,\n                                                 node => node instanceof ModulesParentContainerNode))\n               .then(modulesContainer => (this.modulesContainer = modulesContainer as ModulesParentContainerNode))\n               .then(() => this.findOrCreateNode(SERVICES_PARENT_CONTAINER_TYPE,\n                                                 node => node instanceof ServicesParentContainerNode))\n               .then(servicesContainer => (this.servicesContainer = servicesContainer as ServicesParentContainerNode));\n  }\n\n  private findOrCreateNode<N extends Node>(type_name: string, f: (Node) => boolean): Promise<N> {\n    const root: Container = ContainerRegistry.instance().rootContainer();\n    return new Promise((resolve, reject) => {\n      const existingNode = root.getNodes().find(f);\n      if (existingNode) {\n        resolve(<N>existingNode);\n      } else {\n        return root.nodeRegistry().register(NodeFactory.create(<SerializedNode>{ type: type_name }, true));\n      }\n    });\n  }\n\n  private refreshPeriodically() {\n    setInterval(() => this.refreshParentContainers(), this.backendSyncCfg.nodeRefreshIntervalSeconds * 1000);\n  }\n\n  private refreshParentContainers() {\n    this.edgesContainer.syncWithBackend();\n    this.modulesContainer.syncWithBackend();\n    this.servicesContainer.syncWithBackend();\n  }\n}\n","module.exports = require(\"slugid\");","import { IOType } from '../nodes/node-io';\nimport { compareNodeIO, SlimNodeIO } from '../nodes/node-link';\nimport { ApiResult } from './api-result';\n\nexport class LinkResult implements ApiResult<object> {\n\n  message: string;\n  private readonly _map: {\n    [cid: string]: {\n      [nid: string]: {\n        nid: string,\n        inputs: { [ioId: string]: SlimNodeIO },\n        outputs: { [ioId: string]: SlimNodeIO[] }\n      }\n    }\n  };\n\n  constructor(data?: {\n    [cid: string]: {\n      [nid: string]: {\n        nid: string,\n        inputs: { [ioId: string]: SlimNodeIO },\n        outputs: { [ioId: string]: SlimNodeIO[] }\n      }\n    }\n  }) {\n    this._map = data ?? {};\n  }\n\n  push(cid: string | number, nid: string | number, type: IOType, ioId: string | number,\n       ...links: SlimNodeIO[]): LinkResult {\n    this._map[cid] = this._map[cid] ?? {};\n    this._map[cid][nid] = this._map[cid][nid] ?? { nid: nid + '', inputs: {}, outputs: {} };\n    if (type === 'input') {\n      this._map[cid][nid].inputs[ioId] = (links ?? [])[0] ?? null;\n    }\n    if (type === 'output') {\n      const o = this._map[cid][nid].outputs[ioId] ?? [];\n      const u = links ?? [];\n      this._map[cid][nid].outputs[ioId] = o.concat(u.filter(io1 => !o.some(io2 => compareNodeIO(io1, io2))));\n    }\n    return this;\n  }\n\n  hasInput(cid: string | number, nid: string | number, ioId: string | number): boolean {\n    return this.getLinkByInput(cid, nid, ioId) !== undefined;\n  }\n\n  getLinkByInput(cid: string | number, nid: string | number, ioId: string | number): SlimNodeIO {\n    return (this._map[cid] ?? {})[nid]?.inputs[ioId];\n  }\n\n  getLinkByOutput(cid: string | number, nid: string | number, ioId: string | number): SlimNodeIO[] {\n    return (this._map[cid] ?? {})[nid]?.outputs[ioId];\n  }\n\n  result(): {\n    [cid: string]: {\n      [nid: string]: {\n        nid: string,\n        inputs: { [ioId: string]: SlimNodeIO },\n        outputs: { [ioId: string]: SlimNodeIO[] }\n      }\n    }\n  } {\n    return this._map;\n  }\n\n  merge(r: LinkResult): LinkResult {\n    Object.keys(r.result()).forEach(cid => Object.values(r.result()[cid]).forEach(d => {\n      Object.keys(d.inputs).forEach(k => this.push(cid, d.nid, 'input', k, d.inputs[k]));\n      Object.keys(d.outputs).forEach(k => this.push(cid, d.nid, 'output', k, ...d.outputs[k]));\n    }));\n    return this;\n  }\n\n}\n","import { DispatchNode } from './DispatchNode';\n\nexport const UNKNOWN_POINT_NAME = 'Unknown';\n\nexport interface Point {\n  msg: any;\n  name: string;\n  listeners: DispatchNode[];\n  soft: boolean;\n}\n\nexport interface Points {\n  [point: string]: Point;\n}\n\nexport interface Store {\n  [protocol: string]: { points: Points };\n}\n\nexport interface IPubSub {\n  getStore(): Store;\n\n  /**\n   * Add point on a protocol whose output will be subscribed by listeners\n   * @param {string} protocol - protocol for making things on different selection\n   * @param {string} point - unique point id `${cid}/${id}`\n   * @param {string} name - display name for point\n   * @param {boolean} soft - true when it's real, false when it's unreal added from DispatchNode\n   * soft is added for subscribing to the topic when topic is not added\n   */\n  addPoint(protocol: string, point: string, name: string, soft: boolean): void;\n\n  /**\n   * Remove added input point from it's protocol\n   * @param {string} protocol - protocol for making things on different selection\n   * @param point - unique point id `${cid}/${id}`\n   */\n  removePoint(protocol: string, point: string): void;\n\n  /**\n   * When `name` gets changed we need to notify it's changes to all subscriber\n   * @param {string} protocol - protocol for making things on different selection\n   * @param {string} point - unique point id `${cid}/${id}`\n   * @param {string} name - display name for point\n   */\n  renamePoint(protocol: string, point: string, name: string): void;\n  /**\n   * Dispatch value for listeners\n   * @param {string} protocol - protocol for making things on different selection\n   * @param {string} point - unique point id `${cid}/${id}`\n   * @param {any} value - value to send to it's listener\n   */\n  dispatch(protocol: string, point: string, value: any): void;\n\n  /**\n   * Add node for subscription on particular protocol and point\n   * @param {string} protocol - protocol for making things on different selection\n   * @param {string} point - unique point id `${cid}/${id}`\n   * @param {string} name - display name for point\n   * @param {DispatchNode} node - listener node for the registration\n   */\n  connect(protocol: string, point: string, name: string, node: DispatchNode): void;\n\n  /**\n   * Remove node from the subscription\n   * @param {string} protocol - protocol for making things on different selection\n   * @param {string} point - unique point id `${cid}/${id}`\n   * @param {DispatchNode} node - listener node for the registration\n   */\n  disconnect(protocol: string, point: string, node: DispatchNode): void;\n}\n","\nexport default class EdgeHelp {\n\n    static NetworkDesc =\n        `## Description\\n ` +\n        ` The is node is used for reading and writing values to the edge-io-28. This node uses an internal rest-api to talk to the edge-io-28. No details need to be set\\n ` +\n        `   \\n ` +\n        `### Enable\\n ` +\n        `   \\n ` +\n        ` The point enable will disable any new value being sent to the node **output**  \\n ` +\n        `   \\n ` +\n        `### Polling Interval\\n ` +\n        `   \\n ` +\n        ` This will change the poll rate of the edge-io-28 inputs. A normal setting is 1 second\\n ` +\n        ` The faster the polling rate is the higher the memory usage is\\n ` +\n        `   \\n ` +\n        `### Polling Interval Time Setting\\n ` +\n        `   \\n ` +\n        `Used in conjugation with the **Polling Interval**. Make the selection for the time units for **Seconds**, **Minutes**, **Hours** \\n ` +\n        `   \\n `;\n\n        static inputsDesc =\n        `## Description\\n ` +\n        ` The is node is used in conjunction with the edge-io-28. This node uses an internal rest-api to talk to the edge-io-28\\n ` +\n        `   \\n ` +\n        `## Digital Input\\n ` +\n        `   \\n ` +\n        `A total of 14 DIs can be used on the edge-io-28. There are 7 DIs and 7 UIs\\n ` +\n        `   \\n ` +\n        `### DIs (From the UIs)  \\n ` +\n        `   \\n ` +\n        ` The UIs can be setup and used to read a status change from a *Digital Input* (7 off dry input)\\n ` +\n        `   \\n ` +\n        `### DIs (From the UIs)  \\n ` +\n        `   \\n ` +\n        ` The UIs can be setup and used to read a status change from a *Digital Input* (7 off dry input)\\n ` +\n        `   \\n ` +\n        `## Universal Input\\n ` +\n        `   \\n ` +\n        ` The Universal Input or Analogue Input (7 off) can be used in a number of combinations for reading different sensor types\\n ` +\n        `   \\n ` +\n        `### UI as 0/10dc  \\n ` +\n        `   \\n ` +\n        ` When configured as a UI 0/10dc the node output value will return a value that is set in the **Low scale** & **High scale**\\n ` +\n        `   \\n ` +\n        `### UI as 0/20ma and or 4/20ma \\n ` +\n        `   \\n ` +\n        ` When configured as a UI 0/20ma and or 4/20ma the node output value will return a value that is set in the **Low scale** & **High scale**\\n ` +\n        `   \\n ` +\n        `### UI as 10K thermistor \\n ` +\n        `   \\n ` +\n        ` When configured as a UI 10K thermistor type 2 the node output value will return a value based on the resistance and corresponding temperature\\n ` +\n        `   \\n ` +\n        `## Point Configuration\\n ` +\n        `### Point Enable\\n ` +\n        `   \\n ` +\n        ` The point enable will disable any new value being sent to the node **output**  \\n ` +\n        `   \\n ` +\n        `### Point Debug\\n ` +\n        `   \\n ` +\n        ` The point debug will allow the node **output** to always send the value even if there is node change\\n ` +\n        ` This is just a guide to see if the polling is working\\n ` +\n        `   \\n ` +\n        `### Point Selection\\n ` +\n        `   \\n ` +\n        ` 1. Select the **Point Type** for example UO  \\n ` +\n        ` 2. Select the **Point Number** for example UO-1   \\n ` +\n        ` **Note:** You cant set a type **Digital** and point number **UI1** the correct types must be matched with the correct point numbers  \\n ` +\n        `   \\n ` +\n        `### Point Units\\n ` +\n        `   \\n ` +\n        ` The units can be set as required see steps below.  \\n ` +\n        ` 1. Select the **Units Category**.  \\n ` +\n        ` 2. Lock (**lock icon**) the node setting's and hit the **save** button to return the units types.  \\n ` +\n        ` 3. Select the units type.  \\n ` +\n        ` 4. Save and close the node as required  \\n ` +\n        `   \\n ` +\n        `### Point Low Scale\\n ` +\n        `   \\n ` +\n        ` This is used in when the UI type is set as a 0-10dc or 4-20ma. The **High Scale**  must be set as well \\n ` +\n        ` For example if the point type is 0-10dc and the *Low Scale* is set to 0 and *High Scale* is set to 100 \\   \\n ` +\n        ` the node output value when at 0vdc will return 0 and at 10vdc the node output value will return 100 \\   \\n ` +\n        `   \\n ` +\n        `### Point High Scale\\n ` +\n        `   \\n ` +\n        ` This is used in when the UI type is set as a 0-10dc or 4-20ma (See **Low Scale** setting for more info).  \\n ` +\n        `   \\n ` +\n        `### Point Decimal Places\\n ` +\n        `   \\n ` +\n        ` The units can be set as required see steps below.  \\n ` +\n        `   \\n ` +\n        `### Point Offset\\n ` +\n        `   \\n ` +\n        ` Enter a float value to offset. This will apply an math add function to the original value  \\n ` +\n        ` Example original value is 20 and offset is -1 the **node output** value result will be 19 \\n ` +\n        `   \\n ` +\n        `### Point Decimal Places\\n ` +\n        `   \\n ` +\n        ` Enter a int value to Decimal. This will apply an math round function to the original value \\n ` +\n        ` Example original value is 99.9999 and the device places is set to 0  the **node output** value result will be 99 \\n ` +\n        `   \\n ` +\n        `### Math Function\\n ` +\n        `   \\n ` +\n        ` The units can be set as required see steps below.  \\n ` +\n        ` 1. **na** Will apply not math.  \\n ` +\n        ` 2. **add** Will add a **value** node output.  \\n ` +\n        ` 3. **subtract** Will subtract a **value** node output.  \\n ` +\n        ` 4. **multiply** Will multiply a **value** node output.  \\n ` +\n        ` 5. **divide** Will divide a **value** node output. \\n ` +\n        ` 6. **invert** Will invert the node output. Example in original value = 0 the node output value will = 1.   \\n ` +\n        `   \\n ` +\n        `###  History Settings Database Type\\n ` +\n        `   \\n ` +\n        ` The are two options for the database type. The data can either be pushed to influxDB or PostgreSQL.  \\n ` +\n        ` 1. Select required database type (if type is *Nube DB PostgreSQL* *no more steps are required*).  \\n ` +\n        ` 2. Enter DB details like IP, port, username and password(if type is *InfluxDB*)\\n ` +\n        `   \\n ` +\n        `#### History Settings History Type\\n ` +\n        `   \\n ` +\n        ` 1. **Change Of Value (COV)**.  \\n ` +\n        ` 2. **Periodic**.  \\n ` +\n        ` 3. **Trigger Only**.  \\n ` +\n        `   \\n ` +\n        `####  History Settings Local Storage Limit\\n ` +\n        `   \\n ` +\n        ` 1. **Change Of Value (COV)**.  \\n ` +\n        ` 2. **Periodic**.  \\n ` +\n        ` 3. **Trigger Only**.  \\n ` +\n        `   \\n ` +\n        `####  History Settings Round minutes\\n ` +\n        `   \\n ` +\n        ` 1. **Change Of Value (COV)**.  \\n ` +\n        ` 2. **Periodic**.  \\n ` +\n        ` 3. **Trigger Only**.  \\n ` +\n        `   \\n ` +\n        `### Alarm Settings\\n ` +\n        `   \\n ` +\n        ` to be added  \\n ` +\n        `   \\n ` +\n        `### Tag Settings\\n ` +\n        `   \\n ` +\n        ` to be added  \\n `;\n  \n\n\n        static outputsDesc =\n        `## Description\\n ` +\n        ` The is node is used in conjunction with the edge-io-28. This node uses an internal rest-api to talk to the edge-io-28\\n ` +\n        `   \\n ` +\n        `## Digital Output\\n ` +\n        `   \\n ` +\n        ` The DOs can be used to drive a 0-12vdc relay (5 off) or an onboard Normally Open Relay (2 off)\\n ` +\n        `### DOs  \\n ` +\n        `   \\n ` +\n        ` The input of the node can will drive the output on/true  with any value > 1 or a true value \\n ` +\n        ` Any value < 0 or a false will drive the output off/false \\n ` +\n        `### Relay Output  \\n ` +\n        `   \\n ` +\n        ` The input of the node can will drive the output on/true  with any value > 1 or a true value \\n ` +\n        ` Any value < 0 or a false will drive the output off/false \\n ` +\n        `## Universal Output\\n ` +\n        `   \\n ` +\n        ` The Universal Output or Analogue Output (7 off) has a voltage range of 0 to 12vdc\\n ` +\n        ` The UOs can be used as an AO floating point 0/10dc or a binary on/off 0-12dc \\n ` +\n        `### UOs as 0/10dc  \\n ` +\n        `   \\n ` +\n        ` When configured as a UOs a the node input value is a float value between 0/100 to drive a voltage of 0/10dc \\n ` +\n        `### UOs as On/Off  \\n ` +\n        `   \\n ` +\n        ` The input of the node can will drive the output on/true  with any value > 1 or a true value \\n ` +\n        ` Any value < 0 or a false will drive the output off/false \\n ` +\n        `## Point Configuration\\n ` +\n        `### Point Enable\\n ` +\n        `   \\n ` +\n        ` The point enable will disable any new value being sent to the node **output**  \\n ` +\n        `### Point Selection\\n ` +\n        `   \\n ` +\n        ` 1. Select the **Point Type** for example UO  \\n ` +\n        ` 2. Select the **Point Number** for example UO-1   \\n ` +\n        `### Point Settings\\n ` +\n        `   \\n ` +\n        ` The DOs can be used to drive a 0-12vdc relay (5 off) or an onboard Normally Open Relay (2 off)\\n ` +\n        `### Point Units\\n ` +\n        `   \\n ` +\n        ` The units can be set as required see steps below.  \\n ` +\n        ` 1. Select the **Units Category**.  \\n ` +\n        ` 2. Lock (**lock icon**) the node setting's and hit the **save** button to return the units types.  \\n ` +\n        ` 3. Select the units type.  \\n ` +\n        ` 4. Save and close the node as required  \\n ` +\n        `###  History Settings Database Type\\n ` +\n        `   \\n ` +\n        ` The are two options for the database type. The data can either be pushed to influxDB or PostgreSQL.  \\n ` +\n        ` 1. Select required database type (if type is *Nube DB PostgreSQL* *no more steps are required*).  \\n ` +\n        ` 2. Enter DB details like IP, port, username and password(if type is *InfluxDB*)\\n ` +\n        `#### History Settings History Type\\n ` +\n        `   \\n ` +\n        ` 1. **Change Of Value (COV)**.  \\n ` +\n        ` 2. **Periodic**.  \\n ` +\n        ` 3. **Trigger Only**.  \\n ` +\n        `####  History Settings Local Storage Limit\\n ` +\n        `   \\n ` +\n        ` 1. **Change Of Value (COV)**.  \\n ` +\n        ` 2. **Periodic**.  \\n ` +\n        ` 3. **Trigger Only**.  \\n ` +\n        `####  History Settings Round minutes\\n ` +\n        `   \\n ` +\n        ` 1. **Change Of Value (COV)**.  \\n ` +\n        ` 2. **Periodic**.  \\n ` +\n        ` 3. **Trigger Only**.  \\n ` +\n        `### Alarm Settings\\n ` +\n        `   \\n ` +\n        ` to be added  \\n ` +\n        `### Tag Settings\\n ` +\n        `   \\n ` +\n        ` to be added  \\n `;\n}\n\n","import { get, merge } from 'lodash';\nimport { Api } from '../../../backend/api';\nimport { DeviceAPI, EdgeAPI, FolderAPI, NetworkAPI, PointAPI } from '../../../backend/datapoint';\nimport { Device, Edge, Folder, Network, Point } from '../../../backend/entry';\nimport config from '../../../config';\nimport { singleton as actor } from '../../../promise-actor';\nimport { ERROR } from '../../../shared/websocket-events';\nimport {\n  DEVICE_CONTAINER_TYPE,\n  EDGE_CONTAINER_TYPE,\n  EDGES_PARENT_CONTAINER_TYPE,\n  GROUP_CONTAINER_TYPE,\n  NETWORK_CONTAINER_TYPE,\n  POINT_NODE_TYPE,\n} from '../../constants';\nimport { Container } from '../../container';\nimport { Node } from '../../node';\nimport { Side } from '../../node-interface';\nimport { NodeSetting, SettingType, Type } from '../../node-io';\nimport Utils from '../../utils';\nimport ApiContainerNode from './shared/api-container-node';\nimport EntryNode from './shared/entry-node';\nimport Mixin from './shared/mixin';\nimport TopLevelApiContainerNode from './shared/top-level-api-container-node';\n\nconst doNothing = () => {\n};\n\nexport class EdgesParentContainerNode extends TopLevelApiContainerNode<Edge> {\n  title: string = 'Edges';\n  extra_node_types = []; // not possible to create edges via API\n\n  collectChildNodes(nodes: Node[]): Node[] {\n    return nodes.filter(n => n instanceof EdgeContainerNode);\n  }\n\n  protected initAPI(): Api<Edge> {\n    return new EdgeAPI();\n  }\n\n  protected fetchChildren(): Promise<Edge[]> {\n    return this.api.list();\n  }\n\n  protected childNodeType(): string[] {\n    return [EDGE_CONTAINER_TYPE];\n  }\n}\n\nexport class EdgeContainerNode extends ApiContainerNode<Edge> {\n  title: string = 'Edge Container';\n  settingFields = {\n    code            : SettingType.STRING,\n    customer_code   : SettingType.STRING,\n    side_code       : SettingType.STRING,\n    model           : SettingType.STRING,\n    firmware_version: SettingType.STRING,\n    data_version    : SettingType.STRING,\n  };\n\n  onAdded() {\n    this.ignore_remove = true;\n    this.removable = false;\n    this.movable = false;\n    super.onAdded();\n  }\n\n  createEntry() {\n    return Promise.reject('ERROR: Edge creation not currently supported.');\n  }\n\n  deleteEntry() {\n    return Promise.reject('ERROR: Edge deletion not currently supported.');\n  }\n\n  collectChildNodes(nodes: Node[]): Node[] {\n    return nodes.filter(v => v instanceof NetworkContainerNode);\n  }\n\n  namePrefix() {\n    return 'Edge';\n  }\n\n  protected initAPI(): Api<Edge> {\n    return new EdgeAPI();\n  }\n\n  protected fetchChildren() {\n    return new NetworkAPI().list(this.entryId());\n  }\n\n  protected childNodeType(): string[] {\n    return [NETWORK_CONTAINER_TYPE];\n  }\n}\n\nexport class NetworkContainerNode extends ApiContainerNode<Network> {\n  title: string = 'Network Container';\n  settingFields = {\n    state   : SettingType.READONLY,\n    protocol: SettingType.READONLY,\n    code    : SettingType.STRING,\n  };\n  private protocols = ['GPIO', 'BACNET', 'MODBUS', 'UNKNOWN'].map(point => ({\n    value: point,\n    text : point,\n  }));\n\n  createSettingForm = (entry: Network) => {\n    return merge(Mixin.prototype.createSettingForm.call(this, entry), {\n      protocol: {\n        value : this.protocols[this.protocols.length - 1].value,\n        type  : SettingType.DROPDOWN,\n        config: {\n          items: this.protocols,\n        },\n      },\n    });\n  };\n\n  collectChildNodes(nodes: Node[]): Node[] {\n    return nodes.filter(v => v instanceof DeviceContainerNode);\n  }\n\n  namePrefix() {\n    return 'Network';\n  }\n\n  createEntry() {\n    const edge_node = <EdgeContainerNode>this.container.nodeItself();\n    if (!(edge_node instanceof EdgeContainerNode)) {\n      const errorMessage =\n              'Error: Trying to create network, but network node does not exist inside a valid Edge container...';\n      console.log(errorMessage);\n      return Promise.reject(errorMessage);\n    }\n    return this.findFreeIdentifier().then(code => this.api.create(<any>{ code }, edge_node.entryId()));\n  }\n\n  protected initAPI(): Api<Network> {\n    return new NetworkAPI();\n  }\n\n  protected fetchChildren(): Promise<any[]> {\n    return new DeviceAPI().list(this.entryId());\n  }\n\n  protected childNodeType(): string[] {\n    return [DEVICE_CONTAINER_TYPE];\n  }\n}\n\nexport class DeviceContainerNode extends ApiContainerNode<Device> {\n  title: string = 'Device Container';\n  settingFields = {\n    state       : SettingType.READONLY,\n    code        : SettingType.STRING,\n    manufacturer: SettingType.STRING,\n    protocol    : SettingType.STRING,\n    type        : SettingType.STRING,\n  };\n\n  collectChildNodes(nodes: Node[]): Node[] {\n    return nodes.filter(v => v instanceof GroupContainerNode || v instanceof PointNode);\n  }\n\n  namePrefix() {\n    return 'Device';\n  }\n\n  createEntry() {\n    const network_node = <NetworkContainerNode>this.container.nodeItself();\n    const edge_node = <EdgeContainerNode>network_node.container.nodeItself();\n    if (!(network_node instanceof NetworkContainerNode)) {\n      const errorMessage =\n              'Error: Trying to create device, but device node does not exist inside a valid Network container...';\n      return Promise.reject(errorMessage);\n    }\n    return this.findFreeIdentifier().then(code => this.api.create(<any>{\n                                                                    edge_id: edge_node.entryId(),\n                                                                    device : {\n                                                                      type: 'EQUIPMENT',\n                                                                      code,\n                                                                    },\n                                                                  },\n                                                                  network_node.entryId()));\n  }\n\n  protected initAPI(): Api<Device> {\n    return new DeviceAPI();\n  }\n\n  protected fetchChildren(): Promise<Folder[]> {\n    return new FolderAPI().list(this.entryId());\n  }\n\n  protected childNodeType(): string[] {\n    return [GROUP_CONTAINER_TYPE, POINT_NODE_TYPE];\n  }\n}\n\nexport class GroupContainerNode extends ApiContainerNode<Folder> {\n  title: string = 'Group Container';\n  settingFields = {\n    name: SettingType.STRING,\n  };\n\n  collectChildNodes(nodes: Node[]): Node[] {\n    return nodes.filter(v => v instanceof PointNode);\n  }\n\n  namePrefix() {\n    return 'Group';\n  }\n\n  createEntry() {\n    const device_node = <DeviceContainerNode>this.container.nodeItself();\n    const network_node = <NetworkContainerNode>device_node.container.nodeItself();\n    const edge_node = <EdgeContainerNode>network_node.container.nodeItself();\n    if (\n      !(device_node instanceof DeviceContainerNode) ||\n      !(network_node instanceof NetworkContainerNode) ||\n      !(edge_node instanceof EdgeContainerNode)\n    ) {\n      const errorMessage =\n              'Error: Trying to create group, but group node does not exist inside a valid Device container hierarchy...';\n      return Promise.reject(errorMessage);\n    }\n    return this.findFreeIdentifier().then(name => this.api.create(<any>{ folder: { name } }, device_node.entryId()));\n  }\n\n  protected initAPI(): Api<Folder> {\n    return new FolderAPI();\n  }\n\n  protected fetchChildren(): Promise<any[]> {\n    return new PointAPI().list(this.entryId());\n  }\n\n  protected childNodeType() {\n    return [POINT_NODE_TYPE];\n  }\n}\n\nexport class PointNode extends Node implements EntryNode<Point> {\n  title: string;\n  backend: Api<Point>;\n  properties: {\n    entry: Point;\n    is_protected: boolean;\n  };\n  clonable = false;\n  movable = false;\n  settingFields = {\n    edge        : SettingType.READONLY,\n    network     : SettingType.READONLY,\n    code        : SettingType.STRING,\n    enabled     : SettingType.BOOLEAN,\n    kind        : SettingType.STRING,\n    measure_unit: SettingType.STRING,\n    offset      : SettingType.NUMBER,\n    precision   : SettingType.NUMBER,\n    protocol    : SettingType.STRING,\n    type        : SettingType.STRING,\n  };\n\n  entry = Mixin.prototype.entry.bind(this);\n  entryId = Mixin.prototype.entryId.bind(this);\n  onAfterSettingsChange = Mixin.prototype.onAfterSettingsChange.bind(this);\n  applyEntry = Mixin.prototype.applyEntry.bind(this);\n  deactivate = Mixin.prototype.deactivate.bind(this);\n  onCreated = Mixin.prototype.onCreated.bind(this);\n  makeIdentifier = Mixin.prototype.makeIdentifier.bind(this);\n  findFreeIdentifier = Mixin.prototype.findFreeIdentifier.bind(this);\n  getTakenIdentifiers = Mixin.prototype.getTakenIdentifiers.bind(this);\n  createSettingForm = Mixin.prototype.createSettingForm.bind(this);\n\n  private interval: number;\n\n  constructor() {\n    super();\n    this.title = 'Point container';\n    this.description = 'placeholder'; // FIXME\n    this.backend = new PointAPI();\n    this.settings['name'] = NodeSetting.create({\n      description: 'Point ID',\n      value      : this.title,\n      type       : SettingType.READONLY,\n    });\n    this.settings['priority'] = NodeSetting.create({\n      description: 'Priority',\n      value      : 1,\n      type       : SettingType.NUMBER,\n    });\n    this.addOutput('value', Type.NUMBER);\n    this.addInput('in', Type.NUMBER);\n  }\n\n  entryFactory() {\n    return new Point();\n  }\n\n  onAdded() {\n    Mixin.prototype.onAdded.call(this);\n    this.syncWithBackend();\n    this.interval = <any>(\n      setInterval(() => this.syncWithBackend(), config.backendSync.pointRefreshIntervalSeconds * 1000)\n    );\n  }\n\n  onRemoved() {\n    return Mixin.prototype.onRemoved.call(this);\n    // TODO: hmmm, wtf?\n    // if (this.interval) clearInterval(this.interval);\n  }\n\n  namePrefix() {\n    return 'Point';\n  }\n\n  syncWithBackend() {\n    // refactor into mixin and reuse\n    if (this.side !== Side.server) return;\n    actor.process(() => {\n      if (!this.entry()) return;\n      return (this.backend as PointAPI)\n        .fetchPointData(this.entryId())\n        .then(data => {\n          // we check again if the node is still active - this may have changed since the request was sent\n          if (!this.entry()) return; // TODO: Replace with isActive()\n          this.setOutputData(0, get(data, 'value'));\n        })\n        .catch(doNothing); // error response presumably means no value is set yet\n    });\n  }\n\n  onInputUpdated() {\n    let value = parseFloat(this.getInputData(0));\n    if (isNaN(value) || value === null) {\n      console.log('WARNING: Received non-numeric value on point inlet.');\n      return;\n    }\n    this.setOutputData(0, value);\n    const priority = Utils.clamp(this.settings['priority'].value, 1, 17);\n    (this.backend as PointAPI)\n      .updatePointData(this.entryId(), priority, value)\n      .catch(e => this.container.server_editor_socket.emit(ERROR, `Could not patch point value. ${e.message}`));\n  }\n\n  createEntry() {\n    const parentNode = this.container.nodeItself();\n    const device_node = parentNode.container.nodeItself();\n    const network_node = device_node.container.nodeItself();\n    const edge_node = network_node.container.nodeItself();\n    if (!(parentNode instanceof GroupContainerNode) || !(parentNode instanceof DeviceContainerNode)) {\n      const errorMessage =\n              'Error: Trying to create point, but point node does not exist inside a valid Group container hierarchy...';\n      console.log(errorMessage);\n      return Promise.reject(errorMessage);\n    }\n    return this.findFreeIdentifier().then(code => this.backend.create(\n      <any>{\n        device_id: (device_node as DeviceContainerNode).entryId(),\n        point    : {\n          network: (network_node as NetworkContainerNode).entryId(),\n          edge   : (edge_node as EdgeContainerNode).entryId(),\n          code,\n          unit   : { type: 'number' },\n          enabled: false,\n        },\n      },\n      parentNode.entryId(),\n                                          ),\n    );\n  }\n\n  updateEntry(body: Point) {\n    return this.backend.update(body, this.entryId());\n  }\n\n  deleteEntry() {\n    return this.backend.delete(this.entryId());\n  }\n}\n\nContainer.registerNodeType(EDGES_PARENT_CONTAINER_TYPE, EdgesParentContainerNode, null, false);\nContainer.registerNodeType(EDGE_CONTAINER_TYPE, EdgeContainerNode, null, false);\nContainer.registerNodeType(NETWORK_CONTAINER_TYPE, NetworkContainerNode, null, false);\nContainer.registerNodeType(DEVICE_CONTAINER_TYPE, DeviceContainerNode, null, false);\nContainer.registerNodeType(GROUP_CONTAINER_TYPE, GroupContainerNode, null, false);\nContainer.registerNodeType(POINT_NODE_TYPE, PointNode, null, false);\n","import { Api } from './api';\nimport { Device, Edge, Folder, Network, Point, PointData } from './entry';\n\nexport class EdgeAPI extends Api<Edge> {\n  list(_objId?: string): Promise<Edge[]> {\n    return this.fetchMany('edge', 'edges');\n  }\n\n  get(objId: string): Promise<Edge[]> {\n    return this.fetchOne(`edge/${objId}`);\n  }\n\n  create(obj: Edge): Promise<any> {\n    throw new Error('Method not implemented.');\n  }\n\n  update(obj: Edge, objId?: string): Promise<any> {\n    return this.client.patch(`edge/${objId}`, obj);\n  }\n\n  delete(objId: string): Promise<any> {\n    throw new Error('Method not implemented.');\n  }\n\n  factoryEntry(): Edge {\n    return this.newEntry(Edge);\n  }\n}\n\nexport class NetworkAPI extends Api<Network> {\n  list(objId?: string): Promise<Network[]> {\n    return this.fetchMany(`edge/${objId}/network`, 'networks');\n  }\n\n  get(objId: string): Promise<Network[]> {\n    return this.fetchOne(`network/${objId}`);\n  }\n\n  create(obj: Network, parentId: string): Promise<any> {\n    return this.client.post(`edge/${parentId}/network`, obj).then(this.extractData('resource'));\n  }\n\n  update(obj: Network, objId?: string): Promise<any> {\n    return this.client.patch(`network/${objId}`, obj);\n  }\n\n  delete(objId: string): Promise<any> {\n    return this.client.delete(`network/${objId}?_force=true`);\n  }\n\n  factoryEntry(): Network {\n    return this.newEntry(Network);\n  }\n}\n\nexport class DeviceAPI extends Api<Device> {\n  factoryEntry(): Device {\n    return this.newEntry(Device);\n  }\n\n  list(objId?: string): Promise<Device[]> {\n    return this.client.get(`network/${objId}/device`)\n               .then(this.extractData('devices'))\n               .then(v => v.map(d => d.device))\n               .then(this.assignAllTo(() => new Device()));\n  }\n\n  get(objId: string): Promise<Device[]> {\n    return this.fetchOne(`device/${objId}`);\n  }\n\n  create(obj: Device, parentId?: string): Promise<any> {\n    return this.client.post(`network/${parentId}/device`, obj).then(this.extractData('resource.device'));\n  }\n\n  update(obj: Device, objId?: string): Promise<any> {\n    return this.client.patch(`device/${objId}`, obj);\n  }\n\n  delete(objId: string): Promise<any> {\n    return this.client.delete(`device/${objId}?_force=true`);\n  }\n}\n\nexport class FolderAPI extends Api<Folder> {\n  list(objId?: string): Promise<Folder[]> {\n    return this.fetchMany(`device/${objId}/folder`, 'folders');\n  }\n\n  get(objId: string): Promise<Folder[]> {\n    return this.fetchOne(`folder/${objId}`);\n  }\n\n  create(obj: Folder, parentId?: string): Promise<any> {\n    return this.client.post(`device/${parentId}/folder`, obj).then(this.extractData('resource'));\n  }\n\n  update(obj: Folder, objId?: string): Promise<any> {\n    return this.client.patch(`folder/${objId}`, obj);\n  }\n\n  delete(objId: string): Promise<any> {\n    return this.client.delete(`folder/${objId}?_force=true`);\n  }\n\n  factoryEntry(): Folder {\n    return this.newEntry(Folder);\n  }\n}\n\nexport class PointAPI extends Api<Point> {\n  factoryEntry(): Point {\n    return this.newEntry(Point);\n  }\n\n  list(objId?: string): Promise<Point[]> {\n    return this.fetchMany(`folder/${objId}/point`, 'points');\n  }\n\n  get(objId: string): Promise<Point[]> {\n    return this.fetchOne(`point/${objId}`);\n  }\n\n  create(obj: Point, parentId?: string): Promise<any> {\n    return this.client.post(`folder/${parentId}/point`, obj).then(this.extractData('resource.point'));\n  }\n\n  update(obj: Point, objId?: string): Promise<any> {\n    return this.client.patch(`point/${objId}`, obj);\n  }\n\n  delete(objId: string): Promise<any> {\n    return this.client.delete(`point/${objId}?_force=true`);\n  }\n\n  fetchPointData(pointId: string): Promise<PointData> {\n    return this.client.get(`point/${pointId}/data`).then(this.extractData());\n  }\n\n  updatePointData(pointId: string, priority: number, value: number): Promise<any> {\n    return this.client.put(`point/${pointId}/data`, { priority, value });\n  }\n}\n","import { merge } from 'lodash';\nimport { Api } from '../../../backend/api';\nimport { Service } from '../../../backend/entry';\nimport { ModuleAPI, ServiceAPI } from '../../../backend/installer';\nimport { singleton as actor } from '../../../promise-actor';\nimport {\n  MODULE_NODE_TYPE,\n  MODULES_PARENT_CONTAINER_TYPE,\n  SERVICE_NODE_TYPE,\n  SERVICES_PARENT_CONTAINER_TYPE,\n} from '../../constants';\nimport { Container } from '../../container';\nimport { Node } from '../../node';\nimport { Side } from '../../node-interface';\nimport { SettingType } from '../../node-io';\nimport ApiNode from './shared/api-node';\nimport Mixin from './shared/mixin';\nimport TopLevelApiContainerNode from './shared/top-level-api-container-node';\n\nexport class ModulesParentContainerNode extends TopLevelApiContainerNode<Service> {\n  title: string = 'Modules';\n\n  collectChildNodes(nodes: Node[]): ModuleNode[] {\n    return <ModuleNode[]>nodes.filter(v => v instanceof ModuleNode);\n  }\n\n  protected initAPI(): Api<Service> {\n    return new ModuleAPI();\n  }\n\n  protected fetchChildren() {\n    return this.api.list();\n  }\n\n  protected childNodeType() {\n    return [MODULE_NODE_TYPE];\n  }\n}\n\nexport class ServicesParentContainerNode extends TopLevelApiContainerNode<Service> {\n  title: string = 'Services';\n\n  collectChildNodes(nodes: Node[]): ServiceNode[] {\n    return <ServiceNode[]>nodes.filter(v => v instanceof ServiceNode);\n  }\n\n  protected initAPI(): Api<Service> {\n    return new ServiceAPI();\n  }\n\n  protected fetchChildren() {\n    return this.api.list();\n  }\n\n  protected childNodeType() {\n    return [SERVICE_NODE_TYPE];\n  }\n}\n\nabstract class BaseServiceNode<A extends Api<Service>> extends ApiNode<Service, A> {\n  properties: {\n    entry: Service;\n    is_protected: boolean;\n  };\n  required_settings = ['service_id', 'service_name', 'version'];\n  settingFields = {\n    service_id     : SettingType.STRING,\n    service_name   : SettingType.STRING,\n    version        : SettingType.STRING,\n    service_type   : SettingType.STRING,\n    published_by   : SettingType.STRING,\n    state          : SettingType.STRING,\n    deploy_id      : SettingType.STRING,\n    deploy_location: SettingType.STRING,\n    created_at     : SettingType.READONLY,\n    modified_at    : SettingType.READONLY,\n  };\n  settingsHeaderComponent = {\n    props   : ['self'],\n    template:\n      '<div>' +\n      '  <v-alert v-if=\"self.properties.is_protected\" type=\"warning\">Waiting for required fields <br />' +\n      `    <small>(${this.required_settings.join(', ')})</small>` +\n      '  </v-alert>' +\n      '</div>',\n  };\n  onAdded = Mixin.prototype.onAdded.bind(this);\n  onRemoved = Mixin.prototype.onRemoved.bind(this);\n\n  constructor() {\n    super();\n    this.title = this.namePrefix();\n  }\n\n  entryId = () => this.entry() && this.entry().service_id;\n\n  syncWithBackend = () => {\n  };\n\n  onAfterSettingsChange() {\n    if (this.side !== Side.server || !this.areSettingsValid()) return;\n    if (!this.entry()) {\n      actor.process(() =>\n                      this.createEntry()\n                          .then(entry => this.applyEntry(entry))\n                          .then(() => this.displayMessage(`${this.namePrefix()} entry created.`))\n                          .catch(e => this.displayError(e, 'Entry not created.')),\n      );\n    } else {\n      // update entry\n      Mixin.prototype.onAfterSettingsChange.call(this);\n    }\n  }\n\n  applyEntry(entry: Service) {\n    this.settingFields['service_id'] = SettingType.READONLY;\n    Mixin.prototype.applyEntry.call(this, entry);\n    this.properties.is_protected = !entry;\n    this.broadcastPropertiesToClients();\n  }\n\n  onCreated() {\n    if (this.entry()) {\n      this.applyEntry(this.entry());\n    } else {\n      this.properties.is_protected = true; // await manual configuration\n      merge(this.settings, this.createSettingForm(null));\n    }\n  }\n\n  createEntry() {\n    const entry = Object.keys(this.settingFields)\n                        .map(key => ({ [key]: this.settings[key].value }))\n                        .reduce(merge);\n    return this.backend.create(this.settings['service_id'].value, <any>entry);\n  }\n\n  private areSettingsValid(): boolean {\n    return this.required_settings.map(key => this.settings[key].value).reduce((a, b) => a && b);\n  }\n}\n\nclass ModuleNode extends BaseServiceNode<ModuleAPI> {\n  namePrefix() {\n    return 'Module';\n  }\n\n  protected initAPI(): ModuleAPI {\n    return new ModuleAPI();\n  }\n}\n\nclass ServiceNode extends BaseServiceNode<ServiceAPI> {\n  namePrefix() {\n    return 'Service';\n  }\n\n  initAPI(): ServiceAPI {\n    return new ServiceAPI();\n  }\n}\n\nContainer.registerNodeType(MODULES_PARENT_CONTAINER_TYPE, ModulesParentContainerNode, null, false);\nContainer.registerNodeType(SERVICES_PARENT_CONTAINER_TYPE, ServicesParentContainerNode, null, false);\nContainer.registerNodeType(MODULE_NODE_TYPE, ModuleNode, null, false);\nContainer.registerNodeType(SERVICE_NODE_TYPE, ServiceNode, null, false);\n","import { Api } from './api';\nimport { Service } from './entry';\n\nabstract class ApplicationAPI extends Api<Service> {\n  list(_objId?: string): Promise<Service[]> {\n    return this.fetchMany(this.url(), 'services');\n  }\n\n  get(objId: string): Promise<Service[]> {\n    return this.fetchOne(`${this.url()}/${objId}`);\n  }\n\n  create(obj: Service, parentId?: string): Promise<any> {\n    return this.client.post(this.url(), { obj }).then(() => this.get(parentId));\n  }\n\n  update(obj: Service, objId: string): Promise<any> {\n    return this.client.patch(`${this.url()}/${objId}`, { service_id: objId, obj });\n  }\n\n  delete(objId: string): Promise<any> {\n    return this.client.delete(`${this.url()}/${objId}`);\n  }\n\n  factoryEntry(): Service {\n    return this.newEntry(Service);\n  }\n\n  protected abstract url(): string;\n}\n\nexport class ModuleAPI extends ApplicationAPI {\n  protected url(): string {\n    return 'modules';\n  }\n}\n\nexport class ServiceAPI extends ApplicationAPI {\n  protected url(): string {\n    return 'services';\n  }\n}\n","import { Api } from '../../../../backend/api';\nimport { Entry } from '../../../../backend/entry';\nimport { Node } from '../../../node';\nimport { NodeSetting, SettingType } from '../../../node-io';\nimport EntryNode from './entry-node';\nimport Mixin from './mixin';\n\n/**\n * TODO should rework later\n */\nexport default abstract class ApiNode<T extends Entry, A extends Api<T>> extends Node implements EntryNode<T> {\n  properties: {\n    entry: T; // main entry\n    is_protected: boolean; // If true the node won't be deleted if the remote counter-part is missing\n  };\n  settingFields: {};\n  clonable = false;\n  removable = false;\n  movable = false;\n  entry = Mixin.prototype.entry.bind(this);\n  entryId = Mixin.prototype.entryId.bind(this);\n  deactivate = Mixin.prototype.deactivate.bind(this);\n  createSettingForm = Mixin.prototype.createSettingForm.bind(this);\n  getTakenIdentifiers = Mixin.prototype.getTakenIdentifiers.bind(this);\n  makeIdentifier = Mixin.prototype.makeIdentifier.bind(this);\n  findFreeIdentifier = Mixin.prototype.findFreeIdentifier.bind(this);\n  backend: A;\n\n  protected constructor() {\n    super();\n    this.description = 'placeholder'; // FIXME\n    this.backend = this.initAPI();\n    this.settings['name'] = NodeSetting.create({\n      description: 'Entry',\n      value      : this.title,\n      type       : SettingType.READONLY,\n    });\n  }\n\n  entryFactory = (): T => this.backend.factoryEntry();\n\n  updateEntry = (body: T): Promise<any> => this.backend.update(body, this.entryId());\n\n  deleteEntry = (): Promise<any> => this.backend.delete(this.entryId());\n\n  abstract namePrefix(): string;\n\n  abstract createEntry(): Promise<T>;\n\n  abstract applyEntry(entry: T): void;\n\n  abstract syncWithBackend(): void;\n\n  protected abstract initAPI(): A;\n}\n","/**\n * Created by Derwish (derwish.pro@gmail.com) on 15.09.2017.\n * License: http://www.gnu.org/licenses/gpl-3.0.txt\n */\nimport Debounce from 'lodash-decorators/debounce';\nimport { Colors, create } from 'logplease';\nimport { AsyncDbHelper, Database } from '../database/database';\nimport { UiNode } from '../nodes/nodes/dashboard/ui-node';\nimport { DashboardServerSocket } from './dashboard-server-socket';\n\nconst logger = create('dashboard', { color: Colors.Yellow });\n\nexport interface UiPanel {\n  name: string;\n  title: string;\n  icon: string;\n  subPanels: Array<UiSubpanel>;\n}\n\nexport interface UiSubpanel {\n  title: string;\n  name: string;\n  uiElements: Array<UiElement>;\n}\n\nexport interface UiElement {\n  title: string;\n  type: string;\n\n  // link to node\n  cid: string | number;\n  id: string | number;\n  name: string;\n  icon: string;\n\n}\n\nexport class Dashboard {\n  db: Database;\n  uiPanels: Array<UiPanel>;\n  socket: DashboardServerSocket;\n\n  constructor(socket: DashboardServerSocket) {\n    this.socket = socket;\n    this.uiPanels = [];\n  }\n\n  loadFromDatabase(db: Database): Promise<any> {\n    this.db = db;\n    return AsyncDbHelper.noArgs<UiPanel[]>(db, db.getUiPanels)\n                        .then(panels => this.uiPanels = panels)\n                        .catch(err => logger.warn(err));\n  }\n\n  onNodeRemoved(node: UiNode) {\n    if (!node.isDashboardNode) return;\n\n    this.removeElementForNode(node);\n    this.removeEmptyPanels();\n    this.sendUiPanel(node.settings['ui-panel'].value);\n  }\n\n  onNodeChangePanelOrTitle(node: UiNode, newPanelName: string, newTitle: string) {\n    this.removeElementForNode(node);\n\n    //add new element\n    const uiElemet: UiElement = {\n      title: newTitle,\n      type: node.uiElementType,\n      cid: node.container.id,\n      id: node.id,\n      name: node.name,\n      icon: node.icon,\n\n    };\n\n    let newPanel = this.getUiPanel(newPanelName);\n    if (!newPanel) {\n      //add to new panel\n      newPanel = this.addUiPanel(newPanelName);\n      newPanel.subPanels[0].uiElements.push(uiElemet);\n\n      if (this.db) this.db.addUiPanel(newPanel);\n    } else {\n      //update existing panel\n      newPanel.subPanels[0].uiElements.push(uiElemet);\n      if (this.db)\n        this.db.updateUiPanel(newPanel.name, { $set: { subPanels: newPanel.subPanels } });\n    }\n    this.removeEmptyPanels();\n    this.socket.io.emit('getUiPanelsList', this.getUiPanelsList());\n    this.sendUiPanel(node.settings['ui-panel'].value);\n  }\n\n  @Debounce(100)\n  sendUiPanel(uiPanelValue) {\n    this.socket.io.emit('getUiPanel', this.getUiPanel(uiPanelValue));\n  }\n\n  removeEmptyPanels() {\n    let changed = false;\n    for (let p = 0; p < this.uiPanels.length; p++) {\n      let panel = this.uiPanels[p];\n      if (panel.subPanels.every(s => s.uiElements.length == 0)) {\n        // remove panel\n        changed = true;\n        this.uiPanels = this.uiPanels.filter(pan => pan.name != panel.name);\n        if (this.db) this.db.removeUiPanel(panel.name);\n      }\n    }\n    if (changed) this.socket.io.emit('getUiPanelsList', this.getUiPanelsList());\n  }\n\n  removeElementForNode(node: UiNode) {\n    const oldPanel = this.getUiPanel(node.settings['ui-panel'].value);\n    if (oldPanel) {\n      //remove old element\n      for (let s = 0; s < oldPanel.subPanels.length; s++) {\n        const subPanel = oldPanel.subPanels[s];\n        for (let e = 0; e < subPanel.uiElements.length; e++) {\n          const element = subPanel.uiElements[e];\n          if (element.cid == node.container.id && element.id == node.id) {\n            subPanel.uiElements.splice(e, 1);\n\n            if (this.db)\n              this.db.updateUiPanel(oldPanel.name, { $set: { subPanels: oldPanel.subPanels } });\n          }\n        }\n      }\n    }\n  }\n\n  getUiPanel(name: string): UiPanel {\n    return this.uiPanels.find(p => p.name === name);\n  }\n\n  getUiPanelsList(): Array<string> {\n    let arr = [];\n    this.uiPanels.forEach(p => {\n      arr.push({ name: p.name, title: p.title, icon: p.icon });\n    });\n    return arr;\n  }\n\n  addUiPanel(name: string): UiPanel {\n    const subPanel: UiSubpanel = {\n      title: '',\n      name: '',\n      uiElements: [],\n    };\n    const panel: UiPanel = {\n      name: name,\n      title: name,\n      icon: 'label_outline',\n      subPanels: [subPanel],\n    };\n    this.uiPanels.push(panel);\n    return panel;\n  }\n}\n","/**\n * Created by Derwish (derwish.pro@gmail.com) on 04.07.2016.\n * License: http://www.gnu.org/licenses/gpl-3.0.txt\n */\n\nimport * as bodyParser from 'body-parser';\nimport * as cookieParser from 'cookie-parser';\nimport * as express from 'express';\nimport * as http from 'http';\nimport { Colors, create } from 'logplease';\nimport * as morgan from 'morgan';\nimport * as path from 'path';\nimport * as socket from 'socket.io';\nimport * as config from '../config.json';\nimport { DashboardServerSocket } from './dashboard-server-socket';\nimport { EditorServerSocket } from './editor-server-socket';\nimport { authMiddleware } from './middleware';\nimport { PingPongServerSocket } from './ping-pong-server-socket';\nimport { apiEditorSetup } from './routes/api-editor';\nimport { WireNameServerSocket } from './wire-name-server-socket';\n\nconst expressValidator = require('express-validator');\n\nconst log = create('server', { color: Colors.Yellow });\n\nconst isDev = process.env.NODE_ENV !== 'production';\n\nexport class Server {\n  express: express.Application;\n  server: http.Server;\n\n  editorSocket: EditorServerSocket;\n  dashboardSocket: DashboardServerSocket;\n  wireNameSocket: WireNameServerSocket;\n  private pingPongSocket: PingPongServerSocket;\n  private readonly port: number;\n  private readonly loopInterval: number;\n\n  constructor(workingDir: string, port: number, loopInterval: number) {\n    this.port = port;\n    this.loopInterval = loopInterval;\n    this.express = express();\n    this.express.locals.moment = require('moment');\n    /* webpack-strip-block:removed */\n    this.middleware(workingDir);\n    this.routes();\n    this.handleErrors();\n    this.configure();\n    this.start_io();\n  }\n\n  /* webpack-strip-block:removed */\n\n  private middleware(workingDir: string) {\n    if (config.webServer.debug) {\n      this.express.use(\n        morgan('dev', {\n          skip: function (req, res) {\n            return res.statusCode < 400;\n          },\n        }),\n      );\n    }\n    this.express.use(bodyParser.json({ limit: '5mb' }));\n    this.express.use(bodyParser.urlencoded({ extended: false }));\n    this.express.use(cookieParser());\n    this.express.use(expressValidator());\n    const publicFolder = path.resolve(workingDir, 'public');\n    log.info(`App Server Dir : '${publicFolder}'`);\n    this.express.use('/', express.static(publicFolder));\n  }\n\n  private routes() {\n    // api console logger, after respective apis got called this method will be triggered\n    this.express.use('/api/', function (req, res, next) {\n      const send = res.send;\n      (<any>res).send = function (body) {\n        if (![200, 201].includes(res.statusCode)) log.warn(body);\n        send.call(this, body);\n      };\n      next();\n    });\n    this.express.use('/dashboard', authMiddleware(), require('./routes/dashboard'));\n    this.express.use('/api/dashboard', authMiddleware(), require('./routes/api-dashboard'));\n    this.express.use('/editor', authMiddleware(), require('./routes/editor'));\n    this.express.use('/api/editor', authMiddleware(), apiEditorSetup(this, this.loopInterval));\n    this.express.use('/api/wire-name', authMiddleware(), require('./routes/api-wire-name'));\n    this.express.use('/api/auth', require('./routes/auth'));\n    this.express.use('/api/help', authMiddleware(), require('./routes/api-help'));\n    this.express.use('/api/platform', authMiddleware(), require('./routes/api-platform'));\n\n  }\n\n  private handleErrors() {\n    // Route not found middleware\n    this.express.use((req: express.Request, res: express.Response): void => {\n      res.status(404);\n      res.json({ error: { message: 'Not Found' } });\n    });\n    // Error handler\n    this.express.use(\n      (\n        err: Error & { status: number },\n        req: express.Request,\n        res: express.Response,\n        next: express.NextFunction,\n      ): void => {\n        log.warn(`${err}`);\n        res.status(err.status || 500);\n        res.json({ error: { message: err.message, error: isDev ? err : {} } });\n      },\n    );\n  }\n\n  private configure() {\n    const port = normalizePort(this.port);\n    this.express.set('port', port);\n\n    this.server = http.createServer(this.express);\n    this.server.listen(port);\n    this.server.on('error', onError);\n    this.server.on('listening', onListening);\n\n    function normalizePort(val: number | string): number | string | boolean {\n      const port: number = typeof val === 'string' ? parseInt(val, 10) : val;\n      if (isNaN(port)) {\n        return val;\n      } else if (port >= 0) {\n        return port;\n      } else {\n        return false;\n      }\n    }\n\n    const that = this;\n\n    function onError(error: NodeJS.ErrnoException): void {\n      if (error.syscall !== 'listen') throw error;\n      const bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port;\n      switch (error.code) {\n        case 'EACCES':\n          console.error(`${bind} requires elevated privileges`);\n          process.exit(1);\n          break;\n        case 'EADDRINUSE':\n          console.error(`${bind} is already in use`);\n          process.exit(1);\n          break;\n        default:\n          throw error;\n      }\n    }\n\n    function onListening(): void {\n      const addr = that.server.address();\n      const bind = typeof addr === 'string' ? `pipe ${addr}` : `port ${addr.port}`;\n      log.info(`Listening on ${bind}`);\n    }\n  }\n\n  private start_io() {\n    const io_root: SocketIO.Server = socket(this.server);\n    this.editorSocket = new EditorServerSocket(io_root);\n    this.dashboardSocket = new DashboardServerSocket(io_root);\n    this.wireNameSocket = new WireNameServerSocket(io_root);\n    this.pingPongSocket = new PingPongServerSocket(this.server, io_root);\n  }\n}\n","module.exports = require(\"body-parser\");","module.exports = require(\"cookie-parser\");","module.exports = require(\"http\");","module.exports = require(\"morgan\");","import app from '../app';\nimport { ContainerRegistry } from '../nodes/container';\nimport { createNodeDbHelper } from '../nodes/node-db-helper';\nimport { NodeHookHelper } from '../nodes/node-hook';\nimport { SerializableHelper } from '../nodes/serializable';\nimport { PubSubHelpers } from '../pub-sub/PubSubHelpers';\nimport { UPDATE_NODE_SETTING } from '../shared/websocket-events';\nimport { IdGenerator } from '../utils/id-generator';\nimport { server_logger } from '../utils/loggers';\nimport Namespace = SocketIO.Namespace;\n\nconst log = server_logger;\n\nexport class DashboardServerSocket {\n\n  io_root: SocketIO.Server;\n  io: Namespace;\n\n  constructor(io_root: SocketIO.Server) {\n    this.io_root = io_root;\n    const io = this.io_root.of('/dashboard');\n\n    this.io = io;\n    io.on('connection', function (socket) {\n      log.debug('New client connected to dashboard');\n\n      socket.on('disconnect', () => {\n        log.debug('Client disconnected from dashboard');\n      });\n\n      socket.on('getUiPanel', name => {\n        log.debug('getUiPanel: ' + name);\n        socket.emit('getUiPanel', app.dashboard.getUiPanel(name));\n      });\n\n      socket.on('getUiPanelsList', () => {\n        socket.emit('getUiPanelsList', app.dashboard.getUiPanelsList());\n      });\n\n      socket.on('nodeMessageToServerSide', n => {\n        let cont = ContainerRegistry.instance().get(n.cid);\n        if (!cont) {\n          log.error(`Can't send node message to server-side. Container [${n.cid}] does not exist`);\n          return;\n        }\n\n        let node = cont.getSubNode(n.id);\n        if (!node) {\n          log.error(`Can't send node message to server-side. Node [${IdGenerator.createNodeId(n.cid,\n                                                                                              n.id)}] does not exist`);\n          return;\n        }\n\n        if (!node['onGetMessageToServerSide']) {\n          log.error(`Can't send node message to server-side. Node ${node.getReadableId()} ` +\n                    `dont have onGetMessageToServerSide method!`);\n          return;\n        }\n\n        node['onGetMessageToServerSide'](n.message);\n      });\n\n      //redirect message\n      socket.on('nodeMessageToEditorSide', n => {\n        let cont = ContainerRegistry.instance().get(n.cid);\n        if (!cont) {\n          log.error(`Can't send node message to editor-side. Container [${n.cid}] does not exist`);\n          return;\n        }\n\n        let node = cont.getSubNode(n.id);\n        if (!node) {\n          log.error(`Can't send node message to editor-side. Node [${IdGenerator.createNodeId(n.cid,\n                                                                                              n.id)}] does not exist`);\n          return;\n        }\n\n        app.server.editorSocket.io.in(n.cid).emit('nodeMessageToEditorSide', n);\n      });\n\n      //redirect message\n      socket.on('nodeMessageToDashboardSide', n => {\n        let cont = ContainerRegistry.instance().get(n.cid);\n        if (!cont) {\n          log.error(`Can't send node message to dashboard-side. Container [${n.cid}] does not exist`);\n          return;\n        }\n\n        let node = cont.getSubNode(n.id);\n        if (!node) {\n          log.error(`Can't send node message to dashboard-side. Node [${IdGenerator.createNodeId(n.cid,\n                                                                                                 n.id)}] does not exist`);\n          return;\n        }\n\n        app.server.dashboardSocket.io.in(n.cid).emit('nodeMessageToDashboardSide', n);\n      });\n\n      socket.on(UPDATE_NODE_SETTING, n => {\n        let cont = ContainerRegistry.instance().get(n.cid);\n        if (!cont) {\n          log.error(`Can't update node settings. Container id [${n.cid}] does not exist`);\n          return;\n        }\n\n        let node = cont.nodeRegistry().get(n.id);\n        if (!node) {\n          log.error(`Can't update node settings. Node [${IdGenerator.createNodeId(n.cid, n.id)}] does not exist`);\n          return;\n        }\n\n        let oldName = node.name;\n        let oldIcon = node.icon;\n        let oldSettings = SerializableHelper.serialize(node.settings);\n\n        NodeHookHelper.execute(node, 'onBeforeSettingsChange', n.settings, n.name, n.icon);\n\n        for (let key in n.settings) {\n          let s = n.settings[key];\n          try {\n            node.settings[key].value = s.value;\n          } catch (error) {\n            log.error(error);\n          }\n        }\n\n        node.name = n.name;\n        node.icon = n.icon;\n        PubSubHelpers.renameFunction(node);\n\n        Promise.resolve(NodeHookHelper.execute(node, 'onAfterSettingsChange', oldSettings, oldName, oldIcon))\n               .then(nn => createNodeDbHelper().updateAsync(ContainerRegistry.instance().rootContainer().db, nn))\n               .then(_ => {\n                 const args = {\n                   id: n.id, cid: n.cid, name: n.name, icon: n.icon, settings: node.settings,\n                   oldName: oldName, oldIcon: oldIcon, oldSettings: oldSettings,\n                 };\n                 app.server.editorSocket.io.emit(UPDATE_NODE_SETTING, args);\n                 if (node.isDashboardNode) {\n                   app.server.dashboardSocket.io.in(n.cid).emit(UPDATE_NODE_SETTING, args);\n                 }\n               });\n      });\n\n      socket.on('dashboardElementGetNodeState', n => {\n        let cont = ContainerRegistry.instance().get(n.cid);\n        if (!cont) {\n          log.error(`Can't get dashboard element state. Container [${n.cid}] does not exist`);\n          return;\n        }\n\n        let node = cont.getSubNode(n.id);\n        if (!node) {\n          log.error(\n            `Can't get dashboard element state. Node [${IdGenerator.createNodeId(n.cid, n.id)}] does not exist`);\n          return;\n        }\n\n        //you can override get state logic\n        if (node['onDashboardElementGetNodeState']) {\n          node['onDashboardElementGetNodeState'](n.options);\n        } else {\n          let m = { id: node.id, cid: node.container.id, state: node.properties['state'] };\n          socket.emit('dashboardElementGetNodeState', m);\n        }\n      });\n\n      socket.on('dashboardElementSetNodeState', n => {\n        let cont = ContainerRegistry.instance().get(n.cid);\n        if (!cont) {\n          log.error(`Can't set node state from dashboard element. Container [${n.cid}] does not exist`);\n          return;\n        }\n\n        let node = cont.getSubNode(n.id);\n        if (!node) {\n          log.error(`Can't set node state from dashboard element. Node [${IdGenerator.createNodeId(n.cid,\n                                                                                                   n.id)}] does not exist`);\n          return;\n        }\n\n        //you can override get state logic\n        if (node['onDashboardElementSetNodeState']) {\n          node['onDashboardElementSetNodeState'](n.state);\n        } else {\n          node.properties['state'] = n.state;\n          //send state back to all clients\n          let m = { id: node.id, cid: node.container.id, state: node.properties['state'] };\n          let panelName = this.settings['ui-panel'].value;\n          io.in('' + panelName).emit('dashboardElementGetNodeState', m);\n        }\n      });\n\n      // client join to dashboard room\n      socket.on('join-room', room => {\n        if ((<any>socket).room != null) {\n          log.debug('Leave dashboard room [' + (<any>socket).room + ']');\n          socket.leave((<any>socket).room, () => {\n            (<any>socket).room = room;\n            socket.join(room, () => {\n              log.debug('Join to dashboard room [' + room + ']');\n            });\n          });\n        } else {\n          (<any>socket).room = room;\n          socket.join(room, () => {\n            log.debug('Join to dashboard room [' + room + ']');\n          });\n        }\n      });\n\n      socket.on('leave-room', room => {\n        socket.leave(room, () => {\n          log.debug('Leave dashboard room [' + room + ']');\n        });\n        (<any>socket).room = null;\n      });\n    });\n  }\n}\n","/**\n * Created by Derwish (derwish.pro@gmail.com) on 25.01.2017.\n * License: http://www.gnu.org/licenses/gpl-3.0.txt\n */\n\nimport app from '../app';\nimport { ContainerRegistry } from '../nodes/container';\nimport { Node } from '../nodes/node';\nimport { Side } from '../nodes/node-interface';\nimport NodeUtils from '../nodes/node-utils';\nimport { NODE_IO_VALUES } from '../shared/websocket-events';\nimport { server_logger } from '../utils/loggers';\nimport Namespace = SocketIO.Namespace;\n\nconst log = server_logger;\nconst SLOTS_VALUES_INTERVAL = 200;\n\nexport class EditorServerSocket {\n  io_root: SocketIO.Server;\n  io: Namespace;\n\n  constructor(io_root: SocketIO.Server) {\n    this.io_root = io_root;\n    const io = io_root.of('/editor');\n    this.io = io;\n\n    io.on('connection', function (socket) {\n      log.debug('New client connected to editor');\n\n      socket.on('disconnect', () => {\n        log.debug('Client disconnected from editor');\n      });\n\n      // join client to container room\n      socket.on('room', function (room) {\n        if ((<any>socket).room != null) {\n          socket.leave((<any>socket).room, function () {\n            // it is necessary to waiting for leave room before join only if it's the same room (same id)\n            (<any>socket).room = room;\n            socket.join(room, () => {\n              log.debug('Switch editor room to [' + room + ']');\n            });\n          });\n        } else {\n          (<any>socket).room = room;\n          socket.join(room, () => {\n            log.debug('Join to editor room [' + room + ']');\n          });\n        }\n      });\n\n      socket.on('nodeMessageToServerSide', function (n) {\n        let node = EditorServerSocket.checkContainerNodeValidity(n, Side.server);\n        node && node['onGetMessageToServerSide'](n.message);\n      });\n\n      //redirect message\n      socket.on('nodeMessageToEditorSide', function (n) {\n        let node = EditorServerSocket.checkContainerNodeValidity(n, Side.editor);\n        node && app.server.editorSocket.io.in(n.cid).emit('nodeMessageToEditorSide', n);\n      });\n\n      //redirect message\n      socket.on('nodeMessageToDashboardSide', function (n) {\n        let node = EditorServerSocket.checkContainerNodeValidity(n, Side.dashboard);\n        node && app.server.dashboardSocket.io.in(n.cid).emit('nodeMessageToDashboardSide', n);\n      });\n    });\n\n    setInterval(() => this.sendSlotsValues(io), SLOTS_VALUES_INTERVAL);\n  }\n\n  /**\n   * @param {Node} n\n   * @param {Side} side\n   * @returns {Node} Node if Container and Node is valid otherwise null\n   */\n  static checkContainerNodeValidity(n: Node, side: Side): Node {\n    let cont = ContainerRegistry.instance().get(n.cid);\n    if (!cont) {\n      log.error(`Can't send node message to ${side}-side. Container id [\"${n.cid}'] does not exist`);\n      return null;\n    }\n\n    let node = cont.getSubNode(n.id);\n    if (!node) {\n      log.error(`Can't send node message to ${side}-side. Node id [\"${n.cid}'/'${n.id}'] does not exist`);\n      return null;\n    }\n    return node;\n  }\n\n  sendSlotsValues(io) {\n    const connectedSocket = io.connected;\n    for (let key of Object.keys(connectedSocket)) {\n      const room = Object.keys(io.connected[key].rooms).filter(x => x !== key)[0];\n      let slotsValues = NodeUtils.getNodesIOValues(room);\n      io.to(room).emit(NODE_IO_VALUES, slotsValues);\n    }\n  }\n}\n","import { ContainerRegistry } from './container';\nimport Utils from './utils';\n\nexport default class NodeUtils {\n  static getNodesIOValues(cid: string | number): any {\n    let container = ContainerRegistry.instance().get(cid);\n    if (!container || !container.subNodes()) return;\n\n    let inputs_values = [];\n    let outputs_values = [];\n    for (let node of container.subNodes()) {\n      if (node.inputs) {\n        for (let i in node.inputs) {\n          let data = node.getInputData(Number(i));\n          data = Utils.formatAndTrimValue(data);\n          inputs_values.push({ nodeId: node.id, inputId: i, type: node.type, data });\n        }\n      }\n\n      if (node.outputs) {\n        for (let o in node.outputs) {\n          let data = node.outputs[o].data;\n          data = Utils.formatAndTrimValue(data);\n          outputs_values.push({ nodeId: node.id, outputId: o, type: node.type, data });\n        }\n      }\n    }\n    return { cid: container.id, inputs: inputs_values, outputs: outputs_values };\n  }\n}\n","import { Server } from 'http';\nimport * as SocketIO from 'socket.io';\nimport { Namespace, Socket } from 'socket.io';\nimport { heartbeat_logger } from '../utils/loggers';\n\nexport class PingPongServerSocket {\n  private io: Namespace;\n\n  constructor(httpServer: Server, io_root?: SocketIO.Server) {\n    let socketServer = io_root ?? SocketIO(httpServer, { path: '/heartbeat' });\n    this.io = socketServer.of(io_root ? '/heartbeat' : '/ping');\n    this.io.on('connect', socket => this.listen(socket));\n  }\n\n  private listen(client: Socket): void {\n    heartbeat_logger.debug(`New client ${client.id} connected into server path ${client.server.path()}`);\n    heartbeat_logger.debug(`Handshake: ${JSON.stringify(client.handshake)}`);\n    client.on('disconnect', () => {\n      heartbeat_logger.debug(`Client ${client.id} is disconnected`);\n    });\n  }\n}\n","import * as express from 'express';\nimport { IRouter } from 'express-serve-static-core';\nimport { ContainerRegistry } from '../../nodes/container';\nimport { isNull } from '../../utils/helper';\nimport { Server } from '../server';\nimport { ApiLinkHandler } from './handler/api-link-handler';\nimport { ApiNodeHandler } from './handler/api-node-handler';\n\nclass ApiEditorRouter {\n  private readonly router: IRouter;\n  private readonly server: Server;\n  private _nodeHandler: ApiNodeHandler;\n  private _linkHandler: ApiLinkHandler;\n\n  constructor(server: Server) {\n    this.router = express.Router();\n    this.server = server;\n  }\n\n  setup(loopInterval: number): IRouter {\n    this.router.get('/c/:cid', (req, res) => this.nodeHandler().onList(req, res));\n    this.router.delete('/c/:cid/n/', (req, res) => this.nodeHandler().onRemove(req, res));\n    this.router.post('/c/:cid/n/', (req, res) => this.nodeHandler().onCreate(req, res));\n    this.router.post('/c/:cid/move', (req, res) => this.nodeHandler().onPackUp(req, res));\n    this.router.post('/c/:cid/export', (req, res) => this.nodeHandler().onExport(req, res));\n    this.router.post('/c/:cid/clone', (req, res) => this.nodeHandler().onClone(req, res));\n    this.router.post('/c/:cid/import', (req, res) => this.nodeHandler().onImport(req, res));\n\n    this.router.post('/c/:cid/l', (req, res) => this.linkHandler().onCreate(req, res));\n    this.router.put('/c/:cid/l', (req, res) => this.linkHandler().onMove(req, res));\n    this.router.delete('/c/:cid/l', (req, res) => this.linkHandler().onRemove(req, res));\n\n    setInterval(() => updateActiveNodes(this.server), 500);\n    return legacySetup(this.router, this.server, loopInterval);\n  }\n\n  nodeHandler() {\n    if (isNull(this._nodeHandler)) {\n      this._nodeHandler = new ApiNodeHandler(this.server.editorSocket, this.server.dashboardSocket);\n    }\n    return this._nodeHandler;\n  }\n\n  linkHandler() {\n    if (isNull(this._linkHandler)) {\n      this._linkHandler = new ApiLinkHandler(this.server.editorSocket);\n    }\n    return this._linkHandler;\n  }\n}\n\nfunction updateActiveNodes(server: Server) {\n  if (!ContainerRegistry.instance().rootContainer()) return;\n\n  for (let container of ContainerRegistry.instance().list()) {\n    let activeNodesIds = [];\n\n    for (let node of container.subNodes()) {\n      if (node.isRecentlyActive) {\n        node.isRecentlyActive = false;\n        activeNodesIds.push(node.id);\n      }\n    }\n\n    if (activeNodesIds.length > 0) {\n      server.editorSocket.io.in('' + container.id).emit('nodes-active', {\n        ids: activeNodesIds,\n        cid: container.id,\n      });\n    }\n  }\n}\n\nfunction legacySetup(router: IRouter, server: Server, loopInterval: number): IRouter {\n\n  function getDb() {\n    return ContainerRegistry.instance().rootContainer().db;\n  }\n\n  /**\n   * Update node position\n   */\n  router.put('/c/:cid/n/:id/position', function (req, res) {\n    let container = ContainerRegistry.instance().get(req.params.cid);\n    if (!container) {\n      return res.status(404).send(`Can't update node position. Container id [${req.params.cid}] not found.`);\n    }\n\n    let node = container.getSubNode(req.params.id);\n    if (!node) {\n      return res.status(404).send(\n        `Can't update node position. Node id [${req.params.cid}/${req.params.id}] not found.`);\n    }\n\n    node.pos = req.body.position;\n\n    if (getDb()) {\n      getDb().updateNode(node.id, node.container.id, { $set: { pos: node.pos } });\n    }\n\n    server.editorSocket.io.emit('node-update-position', {\n      id: req.params.id,\n      cid: req.params.cid,\n      pos: node.pos,\n    });\n    res.send(`Node position updated: type [${node.type}] id [${node.container.id}/${node.id}]`);\n  });\n\n  /**\n   * Update node size\n   */\n  router.put('/c/:cid/n/:id/size', function (req, res) {\n    let container = ContainerRegistry.instance().get(req.params.cid);\n    if (!container) return res.status(404).send(`Can't update node size. Container id [${req.params.cid}] not found.`);\n\n    let node = container.getSubNode(req.params.id);\n    if (!node) {\n      return res.status(404).send(`Can't update node size. Node id [${req.params.cid}/${req.params.id}] not found.`);\n    }\n\n    node.size = req.body.size;\n\n    if (getDb()) getDb().updateNode(node.id, node.container.id, { $set: { size: node.size } });\n\n    server.editorSocket.io.emit('node-update-size', {\n      id: req.params.id,\n      cid: req.params.cid,\n      size: node.size,\n    });\n    res.send(`Node size updated: type [${node.type}] id [${node.container.id}/${node.id}]`);\n  });\n\n  /**\n   * Update node collapsed\n   */\n  router.put('/c/:cid/n/:id/collapse', function (req, res) {\n    let container = ContainerRegistry.instance().get(req.params.cid);\n    if (!container) {\n      return res.status(404).send(`Can't update node collapse. Container id [${req.params.cid}] not found.`);\n    }\n\n    let node = container.getSubNode(req.params.id);\n    if (!node) {\n      return res.status(404).send(\n        `Can't update node collapse. Node id [${req.params.cid}/${req.params.id}] not found.`);\n    }\n\n    node.flags.collapsed = req.body.collapsed;\n\n    if (getDb()) getDb().updateNode(node.id, node.container.id, { $set: { 'flags.collapsed': node.flags?.collapsed } });\n\n    server.editorSocket.io.emit('node-update-collapsed', {\n      id: req.params.id,\n      cid: req.params.cid,\n      'flags.collapsed': node.flags?.collapsed,\n    });\n    res.send(`Node collapsed updated: type [${node.type}] id [${node.container.id}/${node.id}]`);\n  });\n\n//------------------ Container ------------------------\n  /**\n   * Run step container\n   */\n  router.get('/state', function (req, res) {\n    let state = {\n      isRunning: ContainerRegistry.instance().rootContainer().isRunning,\n    };\n    res.json(state);\n  });\n\n  /**\n   * Run container\n   */\n  router.post('/run', function (req, res) {\n    ContainerRegistry.instance().rootContainer().run(loopInterval);\n    server.editorSocket.io.emit('container-run');\n    res.send(`Run container`);\n  });\n\n  /**\n   * Stop container\n   */\n  router.post('/stop', function (req, res) {\n    ContainerRegistry.instance().rootContainer().stop();\n    server.editorSocket.io.emit('container-stop');\n    res.send(`Stop container`);\n  });\n\n  /**\n   * Run step container\n   */\n  router.post('/step', function (req, res) {\n    ContainerRegistry.instance().rootContainer().runStep();\n    server.editorSocket.io.emit('container-run-step');\n    res.send(`Run step container`);\n  });\n\n//------------------ nodes internal requests ------------------------\n\n  router.get('/c/:cid/n/:id*', function (req, res) {\n    let cont = ContainerRegistry.instance().get(req.params.cid);\n    if (!cont) return res.status(404).send(`Can't send request to node. Container id [${req.params.cid}] not found.`);\n\n    let node = cont.getSubNode(req.params.id);\n    if (!node) {\n      return res.status(404).send(\n        `Can't send request to node. Node id [${req.params.cid}/${req.params.id}] not found.`);\n    }\n\n    if (node['onEditorApiGetRequest']) {\n      node['onEditorApiGetRequest'](req, res);\n    } else {\n      return res\n        .status(404)\n        .send(`Can't send request to node. Node id [${req.params.cid}/${req.params.id}] does not accept requests.`);\n    }\n  });\n\n  router.post('/c/:cid/n/:id*', function (req, res) {\n    let cont = ContainerRegistry.instance().get(req.params.cid);\n    if (!cont) return res.status(404).send(`Can't send request to node. Container id [${req.params.cid}] not found.`);\n\n    let node = cont.getSubNode(req.params.id);\n    if (!node) {\n      return res.status(404).send(\n        `Can't send request to node. Node id [${req.params.cid}/${req.params.id}] not found.`);\n    }\n\n    if (node['onEditorApiPostRequest']) {\n      node['onEditorApiPostRequest'](req, res);\n    } else {\n      return res\n        .status(404)\n        .send(`Can't send request to node. Node id [${req.params.cid}/${req.params.id}] does not accept requests.`);\n    }\n  });\n\n  router.post('/c/:cid/n-type', function (req, res) {\n    let cont = ContainerRegistry.instance().get(req.params.cid);\n    if (!cont) {\n      return res.status(404).send(\n        `Can't receive request to node. Container id [${req.params.cid}] not found.`);\n    }\n\n    let type = req.body.type;\n    if (!type) return res.status(404).send(`Can't receive request to node. Node type is not defined.`);\n\n    let includeSubContainers = req.body.subcontainers == true;\n    let nodes = cont.getNodesByType(type, includeSubContainers);\n    if (nodes.length == 0) {\n      return res\n        .status(404)\n        .send(`Can't receive request to node. Node type [${type}] not found in container [${req.params.cid}].`);\n    }\n\n    nodes.forEach(node => {\n      if (node['onEditorApiPostRequest']) {\n        node['onEditorApiPostRequest'](req, res);\n      } else {\n        return res.status(404).send(`Can't receive request to node. Node type [${type}] does not accept requests.`);\n      }\n    });\n\n    if (!res.headersSent) res.status(400).send(`No node has processed the request.`);\n  });\n\n  return router;\n}\n\nconst apiEditorSetup = (server: Server, loopInterval: number) => new ApiEditorRouter(server).setup(loopInterval);\nexport { apiEditorSetup };\n","import { Request, Response } from 'express';\nimport { createNodeLink } from '../../../nodes/node-link';\nimport { CREATE_LINK, MOVE_LINK, REMOVE_LINK } from '../../../shared/websocket-events';\nimport { EditorServerSocket } from '../../editor-server-socket';\nimport { NodeLinkService } from '../../service/NodeLinkService';\nimport { ApiHandler } from './api-handler';\n\nexport class ApiLinkHandler extends ApiHandler {\n\n  private readonly linkService = new NodeLinkService();\n\n  constructor(editorSocket: EditorServerSocket) {\n    super(editorSocket);\n  }\n\n  onCreate(req: Request, resp: Response) {\n    const { source, targets } = req.body;\n    this.linkService.create(req.params.cid, source, ...targets)\n        .then(result => this.emitSuccess(resp, CREATE_LINK, result, 201))\n        .catch(err => this.emitError(resp, err, CREATE_LINK));\n  }\n\n  onRemove(req: Request, resp: Response) {\n    const { source, targets } = req.body;\n    this.linkService.remove(req.params.cid, source, ...targets)\n        .then(result => this.emitSuccess(resp, REMOVE_LINK, result))\n        .catch(err => this.emitError(resp, err, REMOVE_LINK));\n  }\n\n  onMove(req: Request, resp: Response) {\n    const cid = req.params.cid;\n    const { type, source, targets, another } = req.body;\n    const nodeLink = createNodeLink(cid, source, ...targets);\n    this.linkService.move(type, nodeLink, another)\n        .then(result => this.emitSuccess(resp, MOVE_LINK, result))\n        .catch(err => this.emitError(resp, err, MOVE_LINK));\n  }\n}\n","import { NodeDbHelper } from '../../nodes/node-db-helper';\nimport { ContainerRegistryMetadata } from '../../nodes/node-interface';\nimport { IOType } from '../../nodes/node-io';\nimport { createLinkHandler, createNodeLink, NodeLink, NodeLinkHandler, SlimNodeIO } from '../../nodes/node-link';\nimport { LinkResult } from '../../shared/link-result';\nimport { BackendLinkVisitor } from '../../shared/link-result-visitor';\nimport { NodeService } from './node-service';\n\nexport class NodeLinkService extends NodeService {\n  private readonly handler: NodeLinkHandler;\n\n  constructor(cRegistry?: ContainerRegistryMetadata, dbHelper?: NodeDbHelper) {\n    super(cRegistry, dbHelper);\n    this.handler = createLinkHandler(this.cRegistry);\n  }\n\n  create(cid: number | string, source: SlimNodeIO, ...targets: SlimNodeIO[]): Promise<LinkResult> {\n    return Promise.resolve(createNodeLink(cid, source, ...targets))\n                  .then(nodeLink => this.handler.create(nodeLink))\n                  .then(r => this.persist(r));\n  }\n\n  remove(cid: number | string, source: SlimNodeIO, ...targets: SlimNodeIO[]): Promise<LinkResult> {\n    return Promise.resolve(createNodeLink(cid, source, ...targets))\n                  .then(nodeLink => this.handler.remove(nodeLink))\n                  .then(r => this.persist(r));\n  }\n\n  move(type: IOType, fromLink: NodeLink, toAnother: SlimNodeIO): Promise<LinkResult> {\n    return Promise.resolve(this.handler.move(type, fromLink, toAnother)).then(r => this.persist(r));\n  }\n\n  disconnect(): Promise<LinkResult> {\n    return null;\n  }\n\n  private persist(r: LinkResult): Promise<LinkResult> {\n    return new BackendLinkVisitor(this.cRegistry).visit(r)\n                                                 .then(re => {\n                                                   this.logger.info(re.message);\n                                                   return re;\n                                                 });\n  }\n}\n\n","import { Request, Response } from 'express';\nimport { SerializedContainer, SerializedNode } from '../../../nodes/node-interface';\nimport { NodeValidator } from '../../../shared/validator';\nimport {\n  CLONE_NODES,\n  CREATE_NODE,\n  EXPORT_NODES,\n  IMPORT_NODES,\n  PACK_UP_NODES,\n  REMOVE_NODES,\n} from '../../../shared/websocket-events';\nimport { RegistryItemExistedError } from '../../../utils/errors';\nimport { reliability_logger } from '../../../utils/loggers';\nimport { DashboardServerSocket } from '../../dashboard-server-socket';\nimport { EditorServerSocket } from '../../editor-server-socket';\nimport { NodeCRUDService } from '../../service/NodeCRUDService';\nimport { NodeETLService } from '../../service/NodeETLService';\nimport { ApiHandler } from './api-handler';\n\nexport class ApiNodeHandler extends ApiHandler {\n\n  private readonly dashboardSocket: DashboardServerSocket;\n  private readonly crudService = new NodeCRUDService();\n  private readonly etlService = new NodeETLService();\n\n  constructor(editorSocket: EditorServerSocket, dashboardSocket: DashboardServerSocket) {\n    super(editorSocket);\n    this.dashboardSocket = dashboardSocket;\n  }\n\n  onList(req: Request, resp: Response): void {\n    this.crudService.getNodes(req.params.cid)\n        .then(containers => resp.status(200).json(containers))\n        .catch(err => {\n          reliability_logger.warn(err);\n          resp.status(500).json(<SerializedContainer>{ id: req.params.cid, serializedNodes: [], err: err.msg });\n        });\n  }\n\n  onCreate(req: Request, resp: Response): void {\n    this.crudService.createNode(req.params.cid, <SerializedNode>{ type: req.body.type, pos: req.body.position })\n        .then(result => {\n          if (result.isDashboardNode) {\n            this.dashboardSocket.io.in(req.params.cid).emit(CREATE_NODE, result.result());\n          }\n          return this.emitSuccess(resp, CREATE_NODE, result, 201);\n        })\n        .catch(err => this.emitError(resp, err, CREATE_NODE,\n                                     e => e instanceof RegistryItemExistedError ? 409 : 400));\n  }\n\n  onRemove(req: Request, resp: Response): void {\n    this.crudService.removeNodes(req.params.cid, req.body, true)\n        .then(result => this.emitSuccess(resp, REMOVE_NODES, result))\n        .catch(err => this.emitError(resp, err, REMOVE_NODES));\n  }\n\n  onPackUp(req: Request, resp: Response): void {\n    const cId = req.params.cid;\n    const { ids, pos } = req.body;\n    this.etlService.packUpNodes(cId, ids, pos)\n        .then(result => {\n          this.editorSocket.io.emit(REMOVE_NODES, result.cleanupResult.result());\n          return this.emitSuccess(resp, PACK_UP_NODES, result);\n        })\n        .catch(err => this.emitError(resp, err, PACK_UP_NODES));\n  }\n\n  onClone(req: Request, resp: Response): void {\n    const { ids, pos } = req.body;\n    this.etlService.cloneNodes(req.params.cid, ids, pos)\n        .then(result => this.emitSuccess(resp, CLONE_NODES, result))\n        .catch(err => this.emitError(resp, err, CLONE_NODES));\n  }\n\n  onExport(req: Request, resp: Response): void {\n    this.etlService.exportNodes(req.params.cid, req.body)\n        .then(output => resp.status(200).json(output))\n        .catch(err => this.emitError(resp, err, EXPORT_NODES));\n  }\n\n  onImport(req: Request, resp: Response) {\n    const cId = req.params.cid;\n    const { nodes, pos } = req.body;\n    const output = NodeValidator.NodeArrayValidator().validate(nodes, { allowUnknown: true });\n    if (output.error) {\n      return this.emitError(resp, new Error(output.error), IMPORT_NODES);\n    }\n    this.etlService.importNodes(cId, nodes as SerializedNode[], pos)\n        .then(result => this.emitSuccess(resp, IMPORT_NODES, result, 201))\n        .catch(err => this.emitError(resp, err, IMPORT_NODES));\n  }\n\n}\n","import Namespace = SocketIO.Namespace;\nimport { Colors, create } from 'logplease';\n\nconst log = create('server', { color: Colors.Yellow });\n\nexport class WireNameServerSocket {\n  io_root: SocketIO.Server;\n  io: Namespace;\n\n  constructor(io_root: SocketIO.Server) {\n    this.io_root = io_root;\n    const io = io_root.of('/wire-name');\n    this.io = io;\n\n    io.on('connection', function(socket) {\n      log.debug('New client connected to wire');\n\n      socket.on('disconnect', () => {\n        log.debug('Client disconnected from wire');\n      });\n    });\n  }\n}\n","module.exports = require(\"express-validator\");","/**\n * Created by Derwish (derwish.pro@gmail.com) on 04.07.2016.\n * License: http://www.gnu.org/licenses/gpl-3.0.txt\n */\n\nimport * as express from 'express';\nimport { ContainerRegistry } from '../../nodes/container';\n\nlet router = express.Router();\n\nrouter.get('/', function(req, res, next) {\n  res.render('dashboard/index', { container_id: 0 });\n});\n\nrouter.get('/c/:cid', function(req, res, next) {\n  res.render('dashboard/index', { container_id: req.params.cid });\n});\n\n//node direct page get\nrouter.get('/c/:cid/n/:id*', function(req, res) {\n  let cont = ContainerRegistry.instance().get(req.params.cid);\n  if (!cont)\n    return res\n      .status(404)\n      .send(`Can't send request to node. Container id [${req.params.cid}] not found.`);\n\n  let node = cont.getSubNode(req.params.id);\n  if (!node)\n    return res\n      .status(404)\n      .send(`Can't send request to node. Node id [${req.params.cid}/${req.params.id}] not found.`);\n\n  if (node['onDashboardGetRequest']) node['onDashboardGetRequest'](req, res);\n  else\n    return res\n      .status(404)\n      .send(\n        `Can't send request to node. Node id [${req.params.cid}/${req.params.id}] does not accept requests.`,\n      );\n});\n\n//node direct page post\nrouter.post('/c/:cid/n/:id*', function(req, res) {\n  let cont = ContainerRegistry.instance().get(req.params.cid);\n  if (!cont)\n    return res\n      .status(404)\n      .send(`Can't send request to node. Container id [${req.params.cid}] not found.`);\n\n  let node = cont.getSubNode(req.params.id);\n  if (!node)\n    return res\n      .status(404)\n      .send(`Can't send request to node. Node id [${req.params.cid}/${req.params.id}] not found.`);\n\n  if (node['onDashboardPostRequest']) node['onDashboardPostRequest'](req, res);\n  else\n    return res\n      .status(404)\n      .send(\n        `Can't send request to node. Node id [${req.params.cid}/${req.params.id}] does not accept requests.`,\n      );\n});\n\nmodule.exports = router;\n","/**\n * Created by Derwish (derwish.pro@gmail.com) on 25.02.2017.\n * License: http://www.gnu.org/licenses/gpl-3.0.txt\n */\n\nimport * as express from 'express';\nimport { ContainerRegistry } from '../../nodes/container';\n\nlet router = express.Router();\n\n/**\n * Get container\n */\nrouter.get('/c/:cid', function(req, res) {\n  let container = ContainerRegistry.instance().get(req.params.cid);\n  if (!container)\n    return res.status(404).send(`Can't get container. Container id [${req.params.cid}] not found.`);\n  //TODO: fix it\n  // let s = container.serialize(true);\n  let s = container.serialize();\n  res.json(s);\n});\n\nmodule.exports = router;\n","/**\n * Created by Derwish (derwish.pro@gmail.com) on 04.07.2016.\n * License: http://www.gnu.org/licenses/gpl-3.0.txt\n */\n\nimport * as express from 'express';\nimport * as config from '../../config.json';\nimport { ContainerRegistry } from '../../nodes/container';\n\nlet router = express.Router();\n\nrouter.get('/', function(req, res) {\n  res.render('editor/index', {\n    split: req.query.split,\n    container_id: 0,\n    theme: config.nodeEditor.theme,\n  });\n});\n\nrouter.get('/c/:cid', function(req, res) {\n  let cid = req.params.cid || 0;\n\n  if (!ContainerRegistry.instance().get(cid)) return res.redirect('/editor');\n\n  res.render('editor/index', {\n    split: req.query.split,\n    container_id: cid,\n    theme: config.nodeEditor.theme,\n  });\n});\n\nrouter.get('/split', function(req, res) {\n  res.render('editor/split', { container_id: 0 });\n});\n\nrouter.get('/split/c/:cid', function(req, res) {\n  let cid = req.params.cid || 0;\n\n  if (!ContainerRegistry.instance().get(cid)) return res.redirect('/editor/split');\n\n  res.render('editor/split', { container_id: cid });\n});\n\nmodule.exports = router;\n","import * as express from 'express';\nimport app from '../../app';\nimport WireNameDataSource from '../../database/datasource/WireNameDataSource';\n\nlet router = express.Router();\n\nrouter.get('', async function(req, res) {\n  try {\n    const wire = await WireNameDataSource.getWireName();\n    res.json(wire);\n  } catch (e) {\n    res.status(500).send(e);\n  }\n});\n\nrouter.put('', async function({ body }, res) {\n  const { name } = body;\n  try {\n    await WireNameDataSource.changeWireName(name);\n    app.server.wireNameSocket.io.emit('wire-name-update', name);\n    res.status(201).send(body);\n  } catch (e) {\n    res.status(500).send(e);\n  }\n});\n\nmodule.exports = router;\n","import * as fs from 'fs';\nimport config from '../../config';\nimport FileUtils from '../../nodes/utils/file-utils';\nimport { db_logger as logger } from '../../utils/loggers';\n\nconst file = `${config.dataDir}/wire-name.txt`;\nexport default class WireNameDataSource {\n\n  static getWireName(): Promise<string> {\n    return new Promise((resolve, reject) => {\n      FileUtils.createFile(file).then(() => {\n        fs.readFile(file, { encoding: 'utf-8' }, (err, data) => {\n          if (err) {\n            logger.error(err.message);\n            reject(err);\n          } else {\n            resolve(data);\n          }\n        });\n      });\n    });\n  }\n\n  static changeWireName(wireName: string): Promise<string> {\n    return new Promise((resolve, reject) => {\n      FileUtils.createFile(file).then(() => {\n        fs.writeFile(file, wireName, err => {\n          if (err) {\n            logger.error(err.message);\n            reject(err);\n          } else {\n            resolve(wireName);\n          }\n        });\n      });\n    });\n  }\n\n}\n","import * as express from 'express';\nimport app from '../../app';\nimport { authMiddleware, schemaMiddleware } from '../middleware';\nimport CryptoUtils from '../../nodes/utils/crypto-utils';\n\nconst Joi = require('@hapi/joi');\nlet router = express.Router();\n\nconst authUserSchema = Joi.object({\n  username: Joi.string().min(5),\n  password: Joi.string().min(5),\n});\n\nconst encryptTextSchema = Joi.object({\n  text: Joi.string().min(1),\n});\n\nrouter.route('/encrypt').post(schemaMiddleware(encryptTextSchema, 'body'), async (req, res) => {\n  try {\n    res.status(201).send({ encryptedText: CryptoUtils.encrypt(req.body.text) });\n  } catch (e) {\n    res.status(500).send(e);\n  }\n});\n\nrouter.route('/user').post(schemaMiddleware(authUserSchema, 'body'), async (req, res) => {\n  try {\n    const authUser = await app.db.addAuthUser(req.body);\n    res.status(201).send(authUser);\n  } catch (e) {\n    res.status(500).send(e);\n  }\n});\n\nrouter.route('/user').get(async (req, res) => {\n  try {\n    const authUser = await app.db.getAuthUser();\n    res.status(200).send(authUser);\n  } catch (e) {\n    res.status(500).send(e);\n  }\n});\n\nrouter.route('/users').delete(authMiddleware(), async (req, res) => {\n  try {\n    const authUser = await app.db.deleteAuthUsers();\n    res.status(200).send(authUser);\n  } catch (e) {\n    res.status(500).send(e);\n  }\n});\n\nrouter.route('/login').post(schemaMiddleware(authUserSchema, 'body'), async (req, res) => {\n  try {\n    const token = await app.db.getAuthToken(req.body);\n    res.status(200).send({ token });\n  } catch (e) {\n    res.status(500).send(e);\n  }\n});\n\nmodule.exports = router;\n","module.exports = require(\"crypto-js\");","import * as express from 'express';\nimport HelpDataSource from '../../database/datasource/HelpDataSource';\n\nlet router = express.Router();\n\nrouter.get('', async function(req, res) {\n  try {\n    const stringHtml = await HelpDataSource.getHelpComment();\n    res.json(stringHtml);\n  } catch (e) {\n    res.status(500).send(e);\n  }\n});\n\nrouter.put('', async function({ body }, res) {\n  const { stringHtml } = body;\n  try {\n    await HelpDataSource.changeHelpComment(stringHtml);\n    res.status(201).send(\"successful\");\n  } catch (e) {\n    res.status(500).send(e);\n  }\n});\n\nmodule.exports = router;\n\n","import * as fs from 'fs';\nimport config from '../../config';\nimport FileUtils from '../../nodes/utils/file-utils';\nimport { db_logger as logger } from '../../utils/loggers';\n\nconst file = `${config.dataDir}/help-comment.txt`;\nexport default class HelpDataSource {\n\n  static getHelpComment(): Promise<string> {\n    return new Promise((resolve, reject) => {\n      FileUtils.createFile(file).then(() => {\n        fs.readFile(file, { encoding: 'utf-8' }, (err, data) => {\n          if (err) {\n            logger.error(err.message);\n            reject(err);\n          } else {\n            resolve(data);\n          }\n        });\n      });\n    });\n  }\n\n  static changeHelpComment(stringHtml: string): Promise<string> {\n    return new Promise((resolve, reject) => {\n      FileUtils.createFile(file).then(() => {\n        fs.writeFile(file, stringHtml, err => {\n          if (err) {\n            logger.error(err.message);\n            reject(err);\n          } else {\n            resolve(stringHtml);\n          }\n        });\n      });\n    });\n  }\n\n}\n\n","import { exec } from 'child_process';\nimport * as express from 'express';\nimport PlatformDataSource from '../../database/datasource/PlatformDataSource';\nimport { ContainerRegistry } from '../../nodes/container';\nimport FileUtils from '../../nodes/utils/file-utils';\nimport IpAddressUtils from '../../nodes/utils/ip-address-utils';\nimport OsUtils from '../../nodes/utils/os-utils';\nimport UuidUtils from '../../nodes/utils/uuid-utils';\nimport { parseBool } from '../../utils/helper';\nimport PLAT from '../../utils/wires-plat';\n\nlet router = express.Router();\n\n// get platform data\nrouter.get('', async function (req, res) {\n  try {\n    const platform = await PlatformDataSource.getPlatform();\n    res.json(platform);\n  } catch (e) {\n    res.status(500).send(e);\n  }\n});\n\n// update platform\nrouter.put('', async function ({ body }, res) {\n  try {\n    await PlatformDataSource.updatePlatform(body);\n    res.status(201).send(\"successful\");\n  } catch (e) {\n    res.status(500).send(e);\n  }\n});\n\n// get log app-out.log  \nrouter.get('/host/logs/wires/app-out', async function (req, res) {\n  const file = \"/app-out.log\"\n  const hostBBB = \"/home/debian/.pm2/logs\"\n  const hostRC = \"/home/pi/.pm2/logs\"\n  const hostBBBType = \"GENERIC AM33XX (FLATTENED DEVICE TREE)\"\n  const hostRCType = \"BCM2835\"\n  const testPcHost = 'MS-7A66'\n  const testPc = '/home/aidan/code/node/wires/rubix-wires/db'\n  try {\n    await OsUtils.systemInfo().then(e => {\n      let hostFile = \"\"\n      if (e.system.model === hostBBBType) {\n        hostFile = `${hostBBB}${file}`\n      } else if (e.system.model === hostRCType) {\n        hostFile = `${hostRC}${file}`\n      } else res.status(500).send('ERROR GET LOGS platform API call /host/logs/wires/app-out: ISSUE ON host not found');\n      try {\n        FileUtils.readFile(hostFile).then((e) => {\n          res.status(201).send(e);\n        });\n      } catch (err) {\n        res.status(500).send(`ERROR GET LOGS platform API call /host/logs/wires/app-out: ISSUE ON read file try/catch ${err}`);\n      }\n    }).catch(err => {\n      res.status(500).send('ERROR GET LOGS platform API call /host/logs/wires/app-out: ISSUE ON systemInfo()');\n    })\n  } catch (err) {\n    res.status(500).send('ERROR GET LOGS platform API call /host/logs/wires/app-out: ISSUE ON main try/catch');\n  }\n});\n\n\n// get log app-error.log  \nrouter.get('/host/logs/wires/app-error', async function (req, res) {\n  const file = \"/app-error.log\"\n  const hostBBB = \"/home/debian/.pm2/logs\"\n  const hostRC = \"/home/pi/.pm2/logs\"\n  const hostBBBType = \"GENERIC AM33XX (FLATTENED DEVICE TREE)\"\n  const hostRCType = \"BCM2835\"\n  const testPcHost = 'MS-7A66'\n  const testPc = '/home/aidan/code/node/wires/rubix-wires/db'\n  try {\n    await OsUtils.systemInfo().then(e => {\n      let hostFile = \"\"\n      if (e.system.model === hostBBBType) {\n        hostFile = `${hostBBB}${file}`\n      } else if (e.system.model === hostRCType) {\n        hostFile = `${hostRC}${file}`\n      } else res.status(500).send('ERROR GET LOGS platform API call /host/logs/wires/app-error: ISSUE ON host not found');\n      try {\n        FileUtils.readFile(hostFile).then((e) => {\n          res.status(201).send(e);\n        });\n      } catch (err) {\n        res.status(500).send(`ERROR GET LOGS platform API call /host/logs/wires/app-error: ISSUE ON read file try/catch ${err}`);\n      }\n    }).catch(err => {\n      res.status(500).send('ERROR GET LOGS platform API call /host/logs/wires/app-error: ISSUE ON systemInfo()');\n    })\n  } catch (err) {\n    console.log(4444)\n    res.status(500).send('ERROR GET LOGS platform API call /host/logs/wires/app-error: ISSUE ON main try/catch');\n  }\n});\n\n\n\n\n// restart wires \nrouter.get('/wires/runtime/restart', async function (req, res) {\n  let command = 'sudo systemctl restart nubeio-rubix-wires.service'\n  try {\n    //reboot after 10 sec\n    setTimeout(() => {\n      exec(command, (err, stdout, stderr) => {\n        if (stdout) {\n          res.json(\"reboot wires\");\n        }\n        if (err) {\n          res.status(500);\n        }\n        if (stderr) {\n          res.status(500);\n        }\n      });\n    }, 5000);\n  } catch (e) {\n    res.status(500).send(e);\n  }\n});\n\n// reboot host \nrouter.get('/host/reboot', async function (req, res) {\n  let command = 'sudo reboot'\n  try {\n    //reboot after 10 sec\n    setTimeout(() => {\n      exec(command, (err, stdout, stderr) => {\n        if (stdout) {\n          res.json(\"reboot host\");\n        }\n        if (err) {\n          res.status(500);\n        }\n        if (stderr) {\n          res.status(500);\n        }\n      });\n    }, 5000);\n  } catch (e) {\n    res.status(500).send(e);\n  }\n});\n\n// delete db files\n// dashboard.db, nodes.db, schedule.db\n// sudo touch nodes.db  && sudo touch schedule.db && sudo touch dashboard.db\nrouter.get('/wires/db/delete', async function (req, res) {\n  const path = '/data/rubix-wires'\n  const nodes = `${path}/nodes.db`\n  const sch = `${path}/schedule.db`\n  const dashboard = `${path}/dashboard.db`\n  const files = [nodes, sch, dashboard];\n  files.forEach(function (file) {\n    if (FileUtils.checkFileExists(file)) {\n      let command = `sudo rm ${file}`\n      try {\n        exec(command, (err, stdout, stderr) => {\n          if (stdout) {\n            res.status(201).send(\"successful\");\n          }\n          if (err) {\n            res.status(500);\n          }\n          if (stderr) {\n            res.status(500);\n          }\n        });\n      } catch (e) {\n        res.status(500).send(e);\n      }\n    }\n  });\n  res.status(201).send(\"successful\");\n\n});\n\n//make uuid\nrouter.get('/uuid/eight', async function (req, res) {\n  try {\n    const out8 = UuidUtils.create8DigId();\n    if (out8) {\n      res.json(JSON.stringify(out8));\n    } else {\n      res.status(500);\n    }\n  } catch (e) {\n    res.status(500).send(e);\n  }\n});\n\n\n//update wires by calling a bash script\nrouter.get('/wires/update', async function (req, res) {\n  const url: string = PLAT.wiresPlatUrlBuilder(PLAT.EPWiresUpdate);\n  try {\n    console.log(`WIRES-UPDATE: api call ${url}`)\n    await PLAT.get(url).then(e => {\n      res.status(200).send(`API CALL WAS SUCCESSFUL ${e.data}`);\n    }).catch(err => {\n      console.log(`WIRES-UPDATE-ERROR: ${err}`)\n      res.status(500).send(err);\n    })\n  } catch (err) {\n    console.log(`WIRES-UPDATE-ERROR: main try/catch error: ${err}`)\n    res.status(500).send(err);\n  }\n});\n\n//download nodes\nrouter.get('/wires/download/nodes', async function (req, res) {\n  try {\n    const container = ContainerRegistry.instance().rootContainer();\n    container.db.getNodes((err, docs) => {\n      if (!err) {\n        res.json(JSON.stringify(docs));\n      } else {\n        res.status(500);\n      }\n    });\n  } catch (e) {\n    res.status(500).send(e);\n  }\n});\n\n//get disc space\nrouter.get('/host/info/disc', async function (req, res) {\n  try {\n    OsUtils.fsSize()\n      .then(obj => {\n        res.json(JSON.stringify(obj));\n      })\n      .catch(err => {\n        res.status(500).send(err);\n      });\n  } catch (e) {\n    res.status(500).send(e);\n  }\n});\n\n// get hostname\nrouter.get('/host/info/host-name', async function (req, res) {\n  try {\n    await OsUtils.systemAll().then(e => {\n      res.json(e);\n    }).catch(err => {\n      console.log('hostName ERROR')\n      res.status(500).send(err);\n    })\n  } catch (e) {\n    res.status(500).send(e);\n  }\n});\n\n\n// get system info\nrouter.get('/host/info/system', async function (req, res) {\n  try {\n    await OsUtils.systemInfo().then(e => {\n      console.log(' systemInfo', e)\n      res.json(e);\n    }).catch(err => {\n      console.log('ERROR ')\n      res.status(500).send(err);\n    })\n  } catch (e) {\n    res.status(500).send(e);\n  }\n});\n\n\n// get eth\nrouter.get('/host/ip/eth-info', async function (req, res) {\n  try {\n    const eth = await PlatformDataSource.getEth();\n    res.json(eth);\n  } catch (e) {\n    res.status(500).send(e);\n  }\n});\n\n// update eth\nrouter.put('/host/ip/eth', async function ({ body }, res) {\n  try {\n    await PlatformDataSource.updateEth(body);\n    const interface1Eth = 'eth0'; //eth0 (ETH1 on the RC)\n    const dhcp1Eth = parseBool(body.dhcpEth1)\n    const eth1Ip = body.eth1Ip;\n    const eth1Sub = body.eth1Sub;\n    const eth1Gate = body.eth1Gate;\n    const eth1NameServer = body.eth1NameServer;\n\n    const interface2Eth = 'eth1'; //eth1 (ETH2 on the RC)\n    const dhcp2Eth = parseBool(body.dhcpEth2)\n    const eth2Ip = body.eth2Ip;\n    const eth2Sub = body.eth2Sub;\n    const eth2Gate = body.eth2Gate;\n    const eth2NameServer = body.eth2NameServer;\n    console.log(1111)\n    console.log(body)\n    console.log(1111)\n    IpAddressUtils.updateIpRubixCompute(interface1Eth, dhcp1Eth, eth1Ip, eth1Sub, eth1Gate, eth1NameServer, interface2Eth, dhcp2Eth, eth2Ip, eth2Sub, eth2Gate, eth2NameServer).then(e => {\n      console.log('UPDATE IP ETH')\n      res.status(201).send('UPDATE IP ETH');\n    }).catch(err => {\n      console.log('UPDATE IP ETH ERR')\n      res.status(500).send(err);\n    })\n  } catch (err) {\n    res.status(500).send(err);\n  }\n});\n\n\nmodule.exports = router;\n\n","module.exports = require(\"systeminformation\");","module.exports = require(\"network\");","import Utils from \"../nodes/utils\";\nimport axios from 'axios'\n\nexport default class PLAT {\n\n  static port = 1414;\n  static url = '127.0.0.1';\n  static apiVer = '1.1';\n  static EPWiresUpdate = 'wires/update';\n\n  /**\n   * wires plat url builder\n   * @param endpoint {string} pass in the endpoint\n   */\n  static wiresPlatUrlBuilder(ep: string) {\n    const url = `${Utils.buildUrl(PLAT.url, PLAT.port)}/api/${PLAT.apiVer}/${ep}`;\n    return url;\n  }\n\n  /**\n   * wires plat api call\n   * @param endpoint {string} pass in the endpoint\n   */\n  static async get(url: string): Promise<any> {\n    return await axios.get(url);\n  }\n\n\n}\n","/**\n * Add all new nodes classes here!!!\n */\n// import './alerts/alerts';\nimport './boolean/and';\nimport './boolean/or';\nimport './boolean/xor';\nimport './boolean/not';\nimport './boolean/toggle';\nimport './boolean/one-shot';\nimport './boolean/min-on-off';\nimport './boolean/on-delay';\nimport './boolean/off-delay';\nimport './boolean/ticker';\nimport './compare/equal';\nimport './compare/greater-than';\nimport './compare/less-than';\nimport './compare/between';\nimport './compare/hysteresis';\nimport './compare/type-check';\nimport './connection/DispatchListener';\nimport './connection/local-transmitter-single';\nimport './connection/local-receiver-single';\nimport './connection/local-transmitter';\nimport './connection/local-receiver';\nimport './connection/hub';\nimport './container/folder';\nimport './container/folder-input';\nimport './container/folder-output';\nimport './conversion/bit-mask';\nimport './conversion/bit-split';\nimport './conversion/bool-to-int';\nimport './conversion/buffer-to-hex-string'\nimport './conversion/buffer-to-num';\nimport './conversion/data-conversion';\nimport './conversion/hex-string-to-buffer'\nimport './conversion/int-to-byte-four-array';\nimport './count/any-event-counter';\nimport './count/counter';\nimport './count/triggered-ramp';\nimport './count/interval-ramp';\nimport './count/waveform';\nimport './csv/csv-merge-rows';\nimport './csv/csv-merge-columns';\nimport './bsa/bsa-cumulocity-device';\nimport './bsa/bsa-cumulocity-point';\nimport './bsa/bsa-cumulocity-alarm';\nimport './custom-function/function';\n// import './custom-function/merge-function';\n// import './custom-function/fan-out-function';\nimport './custom-function/uuid';\nimport './dashboard/label';\nimport './dashboard/button';\nimport './dashboard/switch';\nimport './dashboard/progress';\nimport './dashboard/slider';\nimport './dashboard/text-box';\nimport './dashboard/log';\nimport './dashboard/chart';\nimport './debug/console';\nimport './debug/notes';\nimport './debug/watch';\nimport './error/link-error-check';\nimport './error/output-error-check';\nimport './filter/only-true';\nimport './filter/only-false';\nimport './filter/only-between';\nimport './filter/only-greater';\nimport './filter/only-lower';\nimport './filter/only-equal';\nimport './filter/prevent-null';\nimport './filter/prevent-equal';\nimport './filter/prevent-duplicates';\n//import './filter/reduce-events';\n//import './filter/reduce-duplicates';\nimport './history/data-store';\nimport './history/influx-db';\nimport './history/influx-db-2';\nimport './history/history';\nimport './history/point-persistence';\nimport './history/point-tag';\nimport './hvac/deadband';\nimport './hvac/thermostat';\nimport './hvac/lead-lag-staging';\nimport './hvac/lead-lag-switch';\nimport './hvac/pac-unit-control';\nimport './hvac/PID';\nimport './hvac/toggle-duration';\nimport './hvac/psychometrics';\nimport './hvac/energy-conversion';\nimport './hvac/power-conversion';\nimport './hvac/volume-conversion';\nimport './hvac/temperature-conversion';\nimport './hvac/atm-pressure-conversion';\nimport './hvac/pressure-conversion';\nimport './hvac/actuator-sizing';\nimport './hvac/k-factor';\nimport './hvac/dp-airflow';\n// import './IoT/datapoint-node';\n// import './IoT/installer-node';\n// import './IoT/IoT-point-folder';\n// import './IoT/IoT-network';\nimport './json/array-builder';\nimport './json/array-builder-num';\nimport './json/array-combine';\nimport './json/json-builder';\nimport './json/json-enum-builder';\nimport './json/json-filter';\nimport './json/json-obj-filter';\nimport './json/json-filter-compare';\n// import './json/json-filter-multiple-old';\nimport './json/json-filter-multiple';\nimport './json/json-checker';\n//  import './json/json-func';\n//  import './json/json-keys';\nimport './json/json-parse';\nimport './json/json-prevent-duplicates';\nimport './json/json-query';\nimport './latch/any-latch';\nimport './latch/bool-latch';\nimport './latch/num-latch';\nimport './latch/string-latch';\nimport './latch/set-reset';\nimport './math/add';\nimport './math/subtract';\nimport './math/multiply';\nimport './math/divide';\nimport './math/absolute';\nimport './math/modulus';\nimport './math/power';\nimport './math-advanced/acos';\nimport './math-advanced/asin';\nimport './math-advanced/atan';\nimport './math-advanced/cbrt';\nimport './math-advanced/cos';\nimport './math-advanced/exp';\nimport './math-advanced/log';\nimport './math-advanced/log10';\nimport './math-advanced/sin';\nimport './math-advanced/sqrt';\nimport './math-advanced/tan';\nimport './math-trigger/trigger-add';\nimport './math-trigger/trigger-subtract';\nimport './math-trigger/trigger-multiply';\nimport './math-trigger/trigger-divide';\nimport './math-trigger/trigger-modulus';\nimport './math-trigger/trigger-power';\n//import './network/network-ping';\n//import './network/network-scan';\nimport './miscellaneous/geo-hash';\nimport './miscellaneous/num-series-generator';\nimport './miscellaneous/append-to-strings';\nimport './nube/get-schedules';\nimport './num-transform/round';\nimport './num-transform/floor';\nimport './num-transform/ceil';\nimport './num-transform/limit';\nimport './num-transform/scale';\nimport './num-transform/linear-shaper';\nimport './num-transform/fade';\nimport './num-transform/rate-limit';\nimport './point/bool-constant';\nimport './point/num-constant';\nimport './point/string-constant';\nimport './point/json-constant';\nimport './point/bool-writable';\nimport './point/num-writable';\nimport './point/string-writable';\nimport './point/generic-point';\nimport './protocols/email/email';\nimport './protocols/http/http-client';\n//import './protocols/http/dynamic-http-client';\nimport './protocols/edge-28/edge-28-network';\nimport './protocols/edge-28/edge-28-input';\nimport './protocols/edge-28/edge-28-output';\nimport './protocols/edge-28/edge-28-lora-reset';\nimport './protocols/bacnet/bacnet-network';\nimport './protocols/bacnet/bacnet-device';\nimport './protocols/bacnet/bacnet-point';\nimport './protocols/bacnet-server/bacnet-server-node';\nimport './protocols/bacnet-server/bacnet-server-point';\nimport './protocols/bacnet-server/bacnet-server-api';\nimport './protocols/lora-raw/lora';\n// import './protocols/lora-raw/lora-filter';\nimport './protocols/lora-raw/lora-two-way-in';\nimport './protocols/lora-raw/lora-two-way-out';\n// import './protocols/lora-raw/lora-two-way-test';\n// import './protocols/lora-raw/rubix-compute-lora-reset';\nimport './protocols/lora-raw-v2/lora-raw-points'\nimport './protocols/lora-raw-v2/lora-raw-sensor-legacy'\nimport './protocols/modbus/modbus-server';\nimport './protocols/modbus/modbus-rtu-device';\nimport './protocols/modbus/modbus-rtu-point';\nimport './protocols/modbus/modbus-rtu-network';\nimport './protocols/mqtt/mqtt-client';\nimport './protocols/mqtt/mqtt-client-single';\nimport './protocols/mqtt/mqtt-client-node';\nimport './protocols/mqtt/mqtt-point-node';\nimport './protocols/mqtt/mqtt-generic-node';\nimport './protocols/mqtt-broker/mqtt-broker';\nimport './protocols/mqtt/topic-parts';\nimport './protocols/mqtt/topic-builder';\n// import './protocols/mqtt-broker/mqtt-broker';\n// import './protocols/mqtt/mqtt-point';\n// import './protocols/mqtt/mqtt-point-read';\nimport './protocols/serial-connector/serial-connector';\n//import './protocols/websocket/web-socket';\n//import './schedule/event-schedule';\nimport './schedule/weekly-schedule';\nimport './schedule/schedule-merge';\nimport './schedule/schedule-checker';\n//import './social/slack-bot';\n//import './social/sms-twilio';\nimport './statistics/min-max-avg';\nimport './statistics/avg';\nimport './statistics/min';\nimport './statistics/max';\nimport './statistics/sum';\nimport './statistics/median';\nimport './statistics/range';\nimport './statistics/rank';\nimport './statistics/stats-all';\nimport './streams/stream-average';\nimport './streams/stream-highest';\nimport './streams/stream-lowest';\nimport './streams/stream-sum';\nimport './streams/stream-merge';\nimport './streams/gate';\nimport './streams/stack';\nimport './streams/queue';\nimport './streams/stream-delay';\nimport './streams/stream-delay-meter';\nimport './streams/frequency-meter';\nimport './streams/flatline';\nimport './string/string-acronyms';\nimport './string/string-compare';\nimport './string/substring-cut';\nimport './string/string-join';\nimport './string/string-length';\nimport './string/string-index-of';\nimport './string/char-at-index';\nimport './string/string-split';\nimport './string/string-case';\nimport './string/char-to-ascii';\nimport './string/ascii-to-char';\nimport './string/string-buffer';\nimport './switch/bool-switch';\nimport './switch/num-switch';\nimport './switch/string-switch';\nimport './switch/bool-select';\nimport './switch/num-select';\nimport './switch/string-select';\nimport './switch/bool-output-select';\nimport './switch/num-output-select';\nimport './switch/string-output-select';\nimport './system/host-info';\nimport './system/platform';\nimport './system/system-info';\nimport './system/beep';\nimport './system/execute-cmd';\n//import './system/file';\nimport './system/flow-export';\n//import './system/json-file';\nimport './system/ip/network-interfaces-bbb';\nimport './system/ip/network-interfaces';\nimport './system/wires-version';\nimport './time/time-conversion';\nimport './time/time-conversion-plus';\nimport './time/timezone-conversion';\nimport './time/clock';\nimport './time/date';\nimport './time/time-diff';\nimport './time/stopwatch';\nimport './time/cron-interval';\nimport './time/cron-weekly';\nimport './time/cron-expression';\nimport './time/timestamp-generator';\nimport './trigger/change-of-value';\nimport './trigger/random';\nimport './trigger/inject';\nimport './trigger/interval-inject';\nimport './trigger/iterator';\nimport './widget/schedule-afterhours-off';\nimport './widget/schedule-prestart-fixed';\nimport './unknown/unknown-export';\n","import { Container } from '../../container';\nimport { FlexibleNode } from '../../flexible-node';\nimport { Type } from '../../node-io';\nimport { NODE_INFO } from '../../node-info';\n\nclass AndNode extends FlexibleNode {\n\n  constructor() {\n    super();\n    this.dynamicSettingsExist = false;\n    this.dynamicInputsType = Type.BOOLEAN;\n    this.title = NODE_INFO.boolean.and.title;\n    this.description = NODE_INFO.boolean.and.description;\n    this.addOutput('output', Type.BOOLEAN);\n    this.addOutput('out not', Type.BOOLEAN);\n    this.setOutputData(0, false);\n    this.setOutputData(1, true);\n  }\n\n  onAdded() {\n \n    this.onInputUpdated();\n  }\n\n  onExecute(){\n    //this.onInputUpdated();\n  }\n\n  onInputUpdated() {\n    const allInputs = this.getDefinedInputValues();\n    if (allInputs.length == 0) {\n      this.setOutputData(0, false);\n      this.setOutputData(1, true);\n      return;\n    }\n    const areAllInputsTrue = allInputs.every(v => v === true);\n    this.setOutputData(0, areAllInputsTrue);\n    this.setOutputData(1, !areAllInputsTrue);\n  }\n\n  onAfterSettingsChange() {\n    super.onAfterSettingsChange();\n    this.onInputUpdated();\n  }\n}\nContainer.registerNodeType('boolean/and', AndNode);\n","import { Container } from '../../container';\nimport { FlexibleNode } from '../../flexible-node';\nimport { Type } from '../../node-io';\nimport { NODE_INFO } from '../../node-info';\n\nclass OrNode extends FlexibleNode {\n\n  constructor() {\n    super();\n    this.dynamicSettingsExist = false;\n    this.dynamicInputsType = Type.BOOLEAN;\n    this.title = NODE_INFO.boolean.or.title;\n    this.description = NODE_INFO.boolean.or.description;\n    this.addOutput('output', Type.BOOLEAN);\n    this.addOutput('out not', Type.BOOLEAN);\n  }\n\n  onAdded() {\n    this.onInputUpdated();\n  }\n\n  onExecute(){\n    //this.onInputUpdated();\n  }\n\n  onInputUpdated() {\n    const allInputs = this.getDefinedInputValues();\n    if (allInputs.length == 0) {\n      this.setOutputData(0, false);\n      this.setOutputData(1, true);\n      return;\n    }\n\n    const anyTrue = allInputs.some(v => v == true);\n    this.setOutputData(0, anyTrue);\n    this.setOutputData(1, !anyTrue);\n  }\n\n  onAfterSettingsChange() {\n    super.onAfterSettingsChange();\n    this.onInputUpdated();\n  }\n}\nContainer.registerNodeType('boolean/or', OrNode);\n","import { Container } from '../../container';\nimport { Node } from '../../node';\nimport Icons from '../../node-icons';\nimport { Type } from '../../node-io';\nimport { NODE_INFO } from '../../node-info';\n\nlet logicMainColour = Icons.logicMainColour;\nlet logicAndIcon = Icons.logicAndIcon;\nlet logicOrIcon = Icons.logicOrIcon;\n\nclass XorNode extends Node {\n\n  constructor() {\n    super();\n    this.title = NODE_INFO.boolean.xor.title;\n    this.description = NODE_INFO.boolean.xor.description;\n\n    // this.headerColor = logicMainColour;\n    //this.iconImageUrl = logicAndIcon;\n\n    this.addInput('in 1', Type.BOOLEAN);\n    this.addInput('in 2', Type.BOOLEAN);\n    this.addOutput('output', Type.BOOLEAN);\n    this.addOutput('out not', Type.BOOLEAN);\n  }\n\n  onAdded() {\n \n    this.onInputUpdated();\n  }\n\n  onExecute(){\n    //this.onInputUpdated();\n  }\n\n  onInputUpdated() {\n    const in1 = this.getInputData(0);\n    const in2 = this.getInputData(1);\n    if ((in1 && !in2) || (!in1 && in2)) {\n      this.setOutputData(0, true);\n      this.setOutputData(1, false);\n    } else {\n      this.setOutputData(0, false);\n      this.setOutputData(1, true);\n    }\n  }\n}\nContainer.registerNodeType('boolean/xor', XorNode);\n","import { Container } from '../../container';\nimport { Node } from '../../node';\nimport Icons from '../../node-icons';\nimport { Type } from '../../node-io';\nimport { NODE_INFO } from '../../node-info';\n\nlet logicMainColour = Icons.logicMainColour;\nlet logicNotIcon = Icons.logicNotIcon;\n\nclass NotNode extends Node {\n\n  constructor() {\n    super();\n\n    this.title = NODE_INFO.boolean.not.title;\n    this.description = NODE_INFO.boolean.not.description;\n    // this.headerColor = logicMainColour;\n    // this.iconImageUrl = logicNotIcon;\n    this.addInput('input', Type.BOOLEAN);\n    this.addOutput('output', Type.BOOLEAN);\n  }\n\n  onAdded() {\n    this.onInputUpdated();\n  }\n\n  onExecute(){\n    //this.onInputUpdated();\n  }\n\n  onInputUpdated() {\n    this.emitTransformedInput(x => !x);\n  }\n}\nContainer.registerNodeType('boolean/not', NotNode);\n","import { Container } from '../../container';\nimport { Node } from '../../node';\nimport { NODE_INFO } from '../../node-info';\nimport { NodeSetting, SettingType, Type } from '../../node-io';\n\nclass ToggleNode extends Node {\n  state = false;\n  lastVal;\n  count = 0;\n  constructor() {\n    super();\n    this.title = NODE_INFO.boolean.toggle.title;\n    this.description = NODE_INFO.boolean.toggle.description;\n    this.addInput('input', Type.BOOLEAN);\n    this.addOutput('output', Type.BOOLEAN);\n    //this.addOutput('toggle out', Type.BOOLEAN);\n    this.settings['reset-on-disc'] = NodeSetting.create({\n      description: 'Reset on disconnected or input is null',\n      value: false,\n      type: SettingType.BOOLEAN,\n    });\n    this.settings['toggleOnAny'] = NodeSetting.create({\n      description: 'Toggle on any input change',\n      value: false,\n      type: SettingType.BOOLEAN,\n    });\n  }\n\n  onAdded() {\n    this.setOutputData(0, false);\n    this.onInputUpdated();\n  }\n\n  onExecute(){\n    //this.onInputUpdated();\n  }\n\n  onInputUpdated() {\n    let input = this.getInputData(0);\n    const toggleOnAny = this.settings['toggleOnAny'].value\n    const inputUpdated = this.inputs[0].updated;\n\n    if(toggleOnAny){\n      if (inputUpdated) {\n        this.properties['count']++;\n        this.setOutputData(0, !this.outputs[0].data); // toggle\n      }\n      return\n    }\n    // sends a true/false on each input update\n    if (this.count === 0) {\n      //this.setOutputData(1, false);\n      this.count = 1;\n    } else if (this.count === 1) {\n      //this.setOutputData(1, true);\n      this.count = 0;\n    }\n\n    if (input == null || input == undefined) {\n      if (this.settings['reset-on-disc'].value) {\n        this.lastVal = false;\n        this.setOutputData(0, false);\n        this.state = false;\n      }\n    } else if (input == this.lastVal) return;\n    if (input == true) {\n      this.setOutputData(0, !this.state);\n      this.state = !this.state;\n    }\n    this.lastVal = input;\n  }\n}\nContainer.registerNodeType('boolean/toggle', ToggleNode);\n","import { Container } from '../../container';\nimport { Node } from '../../node';\nimport { NodeSetting, SettingType, Type } from '../../node-io';\nimport TimeUtils, { TIME_TYPE } from '../../utils/time-utils';\nimport { NODE_INFO } from '../../node-info';\n\nclass OneShotNode extends Node {\n  lastFireValue: boolean;\n  enabled: boolean;\n  lastResetValue: boolean;\n  timeoutFunc;\n  remainingFunc;\n  timeUnits;\n  remainingUpdateMillis;\n  remainingUpdateSize;\n\n\n  constructor() {\n    super();\n    this.title = NODE_INFO.boolean[\"one-shot\"].title;\n    this.description = NODE_INFO.boolean[\"one-shot\"].description;\n\n    this.addInput('trigger', Type.BOOLEAN);\n    this.addInput('reset', Type.BOOLEAN);\n    this.addInputWithSettings('interval', Type.NUMBER, 1, 'Interval (Max is 597 Hours)');\n    this.addOutput('output', Type.BOOLEAN);\n    this.addOutput('remaining', Type.NUMBER);\n    this.settings['time'] = NodeSetting.create({\n      description: 'Units',\n      type: SettingType.DROPDOWN,\n      config: {\n        items: [\n          { value: TIME_TYPE.MILLISECONDS, text: 'Milliseconds' },\n          { value: TIME_TYPE.SECONDS, text: 'Seconds' },\n          { value: TIME_TYPE.MINUTES, text: 'Minutes' },\n          { value: TIME_TYPE.HOURS, text: 'Hours' },\n        ],\n      },\n      value: TIME_TYPE.SECONDS,\n    });\n    this.setSettingsConfig({\n      groups: [{ interval: { weight: 2 }, time: {} }],\n    });\n\n    this.settings['retrigger'] = NodeSetting.create({\n      description: \"Retrigger While Output is 'true'?\",\n      value: true,\n      type: SettingType.BOOLEAN,\n    });\n\n  }\n\n  onCreated() {\n  }\n\n  onAdded() {\n    this.clearTimers();\n    this.setOutputData(0, false);\n    this.setOutputData(1, 0);\n    this.lastFireValue = false;\n    this.lastResetValue = false;\n    this.enabled = false;\n    this.onAfterSettingsChange();\n  }\n\n  onExecute(){\n    //this.onInputUpdated();\n  }\n\n  onAfterSettingsChange() {\n    this.timeUnits = this.settings['time'].value;\n    this.inputs[2]['name'] = `[interval] (${this.settings['time'].value})`;\n    this.outputs[1]['name'] = `[remaining] (${this.timeUnits})`;\n    this.onInputUpdated();\n  }\n\n  onInputUpdated() {\n    let reset = this.getInputData(1);\n    if (reset == null) reset = false;\n    if (reset == true && reset != this.lastResetValue) {\n      this.clearTimers();\n      this.setOutputData(0, false);\n      this.setOutputData(1, 0);\n      this.enabled = false;\n    }\n    this.lastResetValue = reset;\n\n    let fire = this.getInputData(0);\n    if (fire == null) fire = false;\n    if (fire == true && fire != this.lastFireValue) {\n      const retrigger = this.settings['retrigger'].value;\n      if (retrigger || this.enabled === false) {\n        const delay = this.getInputData(2);\n        const delayMilli = TimeUtils.timeConvert(delay, this.timeUnits);\n        this.clearTimers();\n        this.setOutputData(0, true);\n        this.setOutputData(1, delay);\n        this.enabled = true;\n        this.timeoutFunc = setTimeout(() => {\n          this.enabled = false;\n          this.setOutputData(0, false);\n          this.setOutputData(1, 0);\n          clearInterval(this.remainingFunc);\n        }, delayMilli);\n        switch(this.timeUnits){\n          case TIME_TYPE.MILLISECONDS:\n            this.remainingUpdateMillis = 500;\n            this.remainingUpdateSize = 500;\n            break;\n          case TIME_TYPE.SECONDS:\n            this.remainingUpdateMillis = 1000;\n            this.remainingUpdateSize = 1;\n            break;\n          case TIME_TYPE.MINUTES:\n            this.remainingUpdateMillis = 6000;\n            this.remainingUpdateSize = 0.1;\n            break;\n          case TIME_TYPE.HOURS:\n            this.remainingUpdateMillis = 360000;\n            this.remainingUpdateSize = 0.1;\n            break;\n        }\n        this.remainingFunc = setInterval(() => {\n          const remaining = this.outputs[1].data - this.remainingUpdateSize;\n          this.setOutputData(1, remaining);\n        }, this.remainingUpdateMillis);\n      }\n    }\n    this.lastFireValue = fire;\n    this.setOutputData(0, this.outputs[0].data, true);\n    this.setOutputData(1, this.outputs[1].data, true);\n  }\n\n  private clearTimers() {\n    if (this.timeoutFunc) clearTimeout(this.timeoutFunc);\n    if (this.remainingFunc) clearInterval(this.remainingFunc);\n  }\n  \n}\nContainer.registerNodeType('boolean/one-shot', OneShotNode);\n","import { Container } from '../../container';\nimport { Node } from '../../node';\nimport { NodeSetting, SettingType, Type } from '../../node-io';\nimport Utils from '../../utils';\nimport TimeUtils from '../../utils/time-utils';\nimport { NODE_INFO } from '../../node-info';\n\n// TODO: Check logic\nclass MinOnOffNode extends Node {\n  lastValue: boolean;\n  timeOn: number;\n  timeOff: number;\n  minOnEnabled: boolean;\n  minOffEnabled: boolean;\n  minOnTime: number;\n  minOffTime: number;\n  lastResetValue: boolean;\n\n  constructor() {\n    super();\n    this.title = NODE_INFO.boolean[\"min-on-off\"].title;\n    this.description = NODE_INFO.boolean[\"min-on-off\"].description;\n    this.addInput('input', Type.BOOLEAN);\n    this.addInputWithSettings('minOn', Type.NUMBER, 1, 'Minimum On Time');\n    this.addInputWithSettings('minOff', Type.NUMBER, 1, 'Minimum Off Time');\n    this.addInput('reset', Type.BOOLEAN);\n    this.addOutput('output', Type.BOOLEAN);\n    this.addOutput('minOn active', Type.BOOLEAN);\n    this.addOutput('minOff active', Type.BOOLEAN);\n    this.settings['timeMinOn'] = NodeSetting.create({\n      description: 'Units',\n      type: SettingType.DROPDOWN,\n      config: {\n        items: [\n          { value: 'milliseconds', text: 'Milliseconds' },\n          { value: 'seconds', text: 'Seconds' },\n          { value: 'minutes', text: 'Minutes' },\n          { value: 'hours', text: 'Hours' },\n        ],\n      },\n      value: 'seconds',\n    });\n    this.settings['timeMinOff'] = NodeSetting.create({\n      description: 'Units',\n      type: SettingType.DROPDOWN,\n      config: {\n        items: [\n          { value: 'milliseconds', text: 'Milliseconds' },\n          { value: 'seconds', text: 'Seconds' },\n          { value: 'minutes', text: 'Minutes' },\n          { value: 'hours', text: 'Hours' },\n        ],\n      },\n      value: 'seconds',\n    });\n    this.setSettingsConfig({\n      groups: [\n        { minOn: { weight: 2 }, timeMinOn: {} },\n        { minOff: { weight: 2 }, timeMinOff: {} },\n      ],\n    });\n\n    this.timeOn = null;\n    this.timeOff = null;\n    this.minOnEnabled = false;\n    this.minOffEnabled = false;\n    this.lastResetValue = false;\n  }\n\n  onCreated() {\n  }\n\n  onAdded() {\n    this.setOutputData(0, false);\n    this.setOutputData(1, false, true);\n    this.setOutputData(2, false, true);\n    this.inputs[1]['name'] = `[minOn] (${this.settings['timeMinOn'].value})`;\n    this.inputs[2]['name'] = `[minOff] (${this.settings['timeMinOff'].value})`;\n    this.onInputUpdated();\n  }\n\n  onExecute() {\n    let elapsed = null;\n    if (this.minOnEnabled) {\n      elapsed = Date.now() - this.timeOn;\n      if (elapsed >= this.minOnTime) {\n        this.minOnEnabled = false;\n        this.onInputUpdated();\n        this.setOutputData(1, false, true);\n      }\n    }\n    if (this.minOffEnabled) {\n      elapsed = Date.now() - this.timeOff;\n      if (elapsed >= this.minOffTime) {\n        this.minOffEnabled = false;\n        this.onInputUpdated();\n        this.setOutputData(2, false, true);\n      }\n    }\n    this.setOutputData(1, this.outputs[1].data, true)\n    this.setOutputData(2, this.outputs[2].data, true)\n  }\n\n  onInputUpdated() {\n    let reset = this.getInputData(3);\n    if (reset == null) reset = false;\n    if (reset == true && reset != this.lastResetValue) {\n      this.setOutputData(0, false);\n      this.minOnEnabled = false;\n      this.minOffEnabled = false;\n      this.setOutputData(1, false, true);\n      this.setOutputData(2, false), true;\n    }\n    this.lastResetValue = reset;\n\n    let minOn = this.getInputData(1);\n    minOn = TimeUtils.timeConvert(minOn, this.settings['timeMinOn'].value);\n    this.minOnTime = minOn;\n\n    let minOff = this.getInputData(2);\n    minOff = TimeUtils.timeConvert(minOff, this.settings['timeMinOff'].value);\n    this.minOffTime = minOff;\n\n    let input = this.getInputData(0);\n    if (!Utils.hasInput(input)) input = false;\n    if (!this.minOnEnabled && !this.minOffEnabled) {\n      this.setOutputData(0, input);\n      if (input && input != this.lastValue) {\n        this.timeOn = Date.now();\n        this.minOnEnabled = true;\n        this.setOutputData(1, false, true);\n      } else if (!input && input != this.lastValue) {\n        this.timeOff = Date.now();\n        this.minOffEnabled = true;\n        this.setOutputData(2, false), true;\n      }\n      this.lastValue = input;\n    }\n  }\n\n  onAfterSettingsChange() {\n    this.inputs[1]['name'] = `[minOn] (${this.settings['timeMinOn'].value})`;\n    this.inputs[2]['name'] = `[minOff] (${this.settings['timeMinOff'].value})`;\n    this.onInputUpdated();\n  }\n}\nContainer.registerNodeType('boolean/min-on-off', MinOnOffNode);\n","import { Container } from '../../container';\nimport { Node } from '../../node';\nimport { NodeSetting, SettingType, Type } from '../../node-io';\nimport TimeUtils, { TIME_TYPE } from '../../utils/time-utils';\nimport { NODE_INFO } from '../../node-info';\n\nclass DelayOnNode extends Node {\n  lastInput:boolean;\n  lastReset:boolean;\n  timeoutFunc;\n  enabled = false;\n  remainingFunc;\n  timeUnits;\n  remainingUpdateMillis;\n  remainingUpdateSize;\n\n\n  constructor() {\n    super();\n    this.title = NODE_INFO.boolean[\"on-delay\"].title;\n    this.description = NODE_INFO.boolean[\"on-delay\"].description;\n\n    this.addInput('input', Type.BOOLEAN);\n    this.addInputWithSettings('delay', Type.NUMBER, 1, 'On Delay Duration (Max 597 Hours)');\n    this.addInput('reset', Type.BOOLEAN);\n    this.addOutput('output', Type.BOOLEAN);\n    this.addOutput('onDelay active', Type.BOOLEAN);\n    this.addOutput('remaining', Type.NUMBER);\n\n    this.settings['time'] = NodeSetting.create({\n      description: 'Units',\n      type: SettingType.DROPDOWN,\n      config: {\n        items: [\n          { value: TIME_TYPE.MILLISECONDS, text: 'Milliseconds' },\n          { value: TIME_TYPE.SECONDS, text: 'Seconds' },\n          { value: TIME_TYPE.MINUTES, text: 'Minutes' },\n          { value: TIME_TYPE.HOURS, text: 'Hours' },\n        ],\n      },\n      value: TIME_TYPE.SECONDS,\n    });\n    this.setSettingsConfig({\n      groups: [{ delay: { weight: 2 }, time: {} }],\n    });\n\n    \n  }\n\n  onCreated() {\n    this.setOutputData(0, false);\n    this.setOutputData(1, false);\n    this.setOutputData(2, 0);\n    this.lastInput = false;\n    this.lastReset = false;\n  }\n\n  onAdded() {\n \n    this.onAfterSettingsChange();\n  }\n\n  onExecute(){\n    //this.onInputUpdated();\n  }\n\n  onAfterSettingsChange() {\n    this.timeUnits = this.settings['time'].value;\n    this.inputs[1]['name'] = `[delay] (${this.timeUnits})`;\n    this.outputs[2]['name'] = `[remaining] (${this.timeUnits})`;\n    this.onInputUpdated();\n  }\n\n  onInputUpdated() {\n    const delay = this.getInputData(1);\n    const delayMilli = TimeUtils.timeConvert(delay, this.timeUnits);\n\n    let input = this.getInputData(0);\n    if (input !== true) input = false;\n\n    const reset = this.getInputData(2);\n    if (reset && this.inputs[2].updated && !this.lastReset && this.enabled) {\n      this.clearTimers();\n      this.setOutputData(0, input);\n      this.setOutputData(1, false);\n      this.setOutputData(2, 0);\n      this.enabled = false;\n    }\n    this.lastReset = reset;\n\n    if (input && this.inputs[0].updated && !this.lastInput) {\n      this.setOutputData(1, true);\n      this.setOutputData(2, delay);\n      this.enabled = true;\n      this.clearTimers();\n      this.timeoutFunc = setTimeout(() => {\n        this.enabled = false;\n        this.setOutputData(0, true);\n        this.setOutputData(1, false);\n        this.setOutputData(2, 0);\n        clearInterval(this.remainingFunc);\n      }, delayMilli);\n      switch(this.timeUnits){\n        case TIME_TYPE.MILLISECONDS:\n          this.remainingUpdateMillis = 500;\n          this.remainingUpdateSize = 500;\n          break;\n        case TIME_TYPE.SECONDS:\n          this.remainingUpdateMillis = 1000;\n          this.remainingUpdateSize = 1;\n          break;\n        case TIME_TYPE.MINUTES:\n          this.remainingUpdateMillis = 6000;\n          this.remainingUpdateSize = 0.1;\n          break;\n        case TIME_TYPE.HOURS:\n          this.remainingUpdateMillis = 360000;\n          this.remainingUpdateSize = 0.1;\n          break;\n      }\n      this.remainingFunc = setInterval(() => {\n        const remaining = this.outputs[2].data - this.remainingUpdateSize;\n        this.setOutputData(2, remaining);\n      }, this.remainingUpdateMillis);\n    }\n    this.lastInput = input;\n    if (!input) {\n      this.setOutputData(0, false);\n      this.setOutputData(1, false);\n      this.setOutputData(2, 0);\n      if (this.inputs[0].updated && this.enabled) {\n        this.clearTimers();\n        this.enabled = false;\n      }\n    }\n  }\n\n  private clearTimers() {\n    if (this.timeoutFunc) clearTimeout(this.timeoutFunc);\n    if (this.remainingFunc) clearInterval(this.remainingFunc);\n  }\n\n}\nContainer.registerNodeType('boolean/on-delay', DelayOnNode);\n","import { Container } from '../../container';\nimport { Node } from '../../node';\nimport { NodeSetting, SettingType, Type } from '../../node-io';\nimport TimeUtils, { TIME_TYPE } from '../../utils/time-utils';\nimport { NODE_INFO } from '../../node-info';\n\nclass DelayOffNode extends Node {\n  lastInput:boolean;\n  lastReset:boolean;\n  timeoutFunc;\n  enabled = false;\n  remainingFunc;\n  timeUnits;\n  remainingUpdateMillis;\n  remainingUpdateSize;\n\n\n  constructor() {\n    super();\n    this.title = NODE_INFO.boolean[\"off-delay\"].title;\n    this.description = NODE_INFO.boolean[\"off-delay\"].description;\n    this.addInput('input', Type.BOOLEAN);\n    this.addInputWithSettings('delay', Type.NUMBER, 1, 'Off Delay Duration (Max 597 Hours)');\n    this.addInput('reset', Type.BOOLEAN);\n    this.addOutput('output', Type.BOOLEAN);\n    this.addOutput('offDelay active', Type.BOOLEAN);\n    this.addOutput('remaining', Type.NUMBER);\n\n    this.settings['time'] = NodeSetting.create({\n      description: 'Units',\n      type: SettingType.DROPDOWN,\n      config: {\n        items: [\n          { value: TIME_TYPE.MILLISECONDS, text: 'Milliseconds' },\n          { value: TIME_TYPE.SECONDS, text: 'Seconds' },\n          { value: TIME_TYPE.MINUTES, text: 'Minutes' },\n          { value: TIME_TYPE.HOURS, text: 'Hours' },\n        ],\n      },\n      value: TIME_TYPE.SECONDS,\n    });\n    this.setSettingsConfig({\n      groups: [{ delay: { weight: 2 }, time: {} }],\n    });\n    \n  }\n\n  onCreated() {\n  }\n\n  onAdded() {\n    this.clearTimers();\n    this.setOutputData(0, false);\n    this.setOutputData(1, false);\n    this.setOutputData(2, 0);\n    this.lastInput = false;\n    this.lastReset = false;\n    this.onAfterSettingsChange();\n  }\n\n  onAfterSettingsChange() {\n    this.timeUnits = this.settings['time'].value;\n    this.inputs[1]['name'] = `[delay] (${this.timeUnits})`;\n    this.outputs[2]['name'] = `[remaining] (${this.timeUnits})`;\n    this.onInputUpdated();\n  }\n\n  onExecute(){\n    //this.onInputUpdated();\n  }\n\n  onInputUpdated() {\n    const delay = this.getInputData(1);\n    const delayMilli = TimeUtils.timeConvert(delay, this.timeUnits);\n\n    let input = this.getInputData(0);\n    if (input !== true) input = false;\n\n    const reset = this.getInputData(2);\n    if (reset && this.inputs[2].updated && !this.lastReset && this.enabled) {\n      this.clearTimers();\n      this.setOutputData(0, input);\n      this.setOutputData(1, false);\n      this.setOutputData(2, 0);\n      this.enabled = false;\n    }\n    this.lastReset = reset;\n\n    if (!input && this.inputs[0].updated && this.lastInput) {\n      this.setOutputData(1, true);\n      this.setOutputData(2, delay);\n      this.clearTimers();\n      this.enabled = true;\n      this.timeoutFunc = setTimeout(() => {\n        this.enabled = false;\n        this.setOutputData(0, false);\n        this.setOutputData(1, false);\n        this.setOutputData(2, 0);\n        clearInterval(this.remainingFunc);\n      }, delayMilli);\n      switch(this.timeUnits){\n        case TIME_TYPE.MILLISECONDS:\n          this.remainingUpdateMillis = 500;\n          this.remainingUpdateSize = 500;\n          break;\n        case TIME_TYPE.SECONDS:\n          this.remainingUpdateMillis = 1000;\n          this.remainingUpdateSize = 1;\n          break;\n        case TIME_TYPE.MINUTES:\n          this.remainingUpdateMillis = 6000;\n          this.remainingUpdateSize = 0.1;\n          break;\n        case TIME_TYPE.HOURS:\n          this.remainingUpdateMillis = 360000;\n          this.remainingUpdateSize = 0.1;\n          break;\n      }\n      this.remainingFunc = setInterval(() => {\n        const remaining = this.outputs[2].data - this.remainingUpdateSize;\n        this.setOutputData(2, remaining);\n      }, this.remainingUpdateMillis);\n    }\n    this.lastInput = input;\n    if (input) {\n      this.setOutputData(0, true);\n      this.setOutputData(1, false);\n      this.setOutputData(2, 0);\n      if (this.inputs[0].updated && this.enabled) {\n        this.clearTimers();\n        this.enabled = false;\n      }\n    }\n  }\n\n  private clearTimers() {\n    if (this.timeoutFunc) clearTimeout(this.timeoutFunc);\n    if (this.remainingFunc) clearInterval(this.remainingFunc);\n  }\n}\nContainer.registerNodeType('boolean/off-delay', DelayOffNode);\n","import { Container } from '../../container';\nimport { Node } from '../../node';\nimport { NodeSetting, SettingType, Type } from '../../node-io';\nimport TimeUtils from '../../utils/time-utils';\nimport { NODE_INFO } from '../../node-info';\n\nclass TickerNode extends Node {\n  lastInterval = 1000;\n  state: boolean = false;\n  runState: boolean = true;\n  timeoutFunc;\n\n\n  constructor() {\n    super();\n    this.title = NODE_INFO.boolean.ticker.title;\n    this.description = NODE_INFO.boolean.ticker.description;\n\n    this.addInputWithSettings('enable', Type.BOOLEAN, true, 'Enable');\n    this.addInputWithSettings('interval', Type.NUMBER, 1, 'Interval');\n    this.addOutput('output', Type.BOOLEAN);\n\n    this.settings['time'] = NodeSetting.create({\n      description: 'Units',\n      type: SettingType.DROPDOWN,\n      config: {\n        items: [\n          { value: 'milliseconds', text: 'Milliseconds' },\n          { value: 'seconds', text: 'Seconds' },\n          { value: 'minutes', text: 'Minutes' },\n          { value: 'hours', text: 'Hours' },\n        ],\n      },\n      value: 'seconds',\n    });\n    this.setSettingsConfig({\n      groups: [{ interval: { weight: 2 }, time: {} }],\n    });\n\n    this.settings['false'] = NodeSetting.create({\n      description: 'Generate False',\n      value: true,\n      type: SettingType.BOOLEAN,\n    });\n  }\n\n  onAdded() {\n    //this.title = `Ticker (${this.settings['time'].value})`;\n    this.inputs[1]['name'] = `[interval] (${this.settings['time'].value})`;\n    clearInterval(this.timeoutFunc);\n    this.setOutputData(0, false);\n    let enable = this.getInputData(0);\n    if (!enable) {\n      this.setOutputData(0, false);\n      this.runState = false;\n      return;\n    }\n    let interval = this.getInputData(1);\n    interval = TimeUtils.timeConvert(interval, this.settings['time'].value);\n    this.timeoutFunc = setInterval(() => {\n      this.state = !this.state;\n      if (!this.state && this.settings['false'].value) {\n        this.setOutputData(0, false);\n        return;\n      }\n      if (this.state) this.setOutputData(0, true);\n    }, interval / 2);\n    this.onInputUpdated();\n  }\n\n  onExecute(){\n    //this.onInputUpdated();\n  }\n\n  onInputUpdated() {\n    let enable = this.getInputData(0);\n\n    if (!enable && this.runState) {\n      clearInterval(this.timeoutFunc);\n      this.setOutputData(0, false);\n      this.runState = false;\n      this.state = false;\n      return;\n    } else if (!enable && !this.runState) {\n      this.setOutputData(0, false);\n      this.runState = false;\n      this.state = false;\n      return;\n    } else if (enable) {\n      let interval = this.getInputData(1);\n      interval = TimeUtils.timeConvert(interval, this.settings['time'].value);\n\n      if (this.runState) {\n        if (interval != this.lastInterval) {\n          this.lastInterval = interval;\n          clearInterval(this.timeoutFunc);\n          this.timeoutFunc = setInterval(() => {\n            this.state = !this.state;\n            if (!this.state && this.settings['false'].value) {\n              this.setOutputData(0, false);\n              return;\n            }\n            if (this.state) this.setOutputData(0, true);\n          }, interval / 2);\n        }\n        return;\n      } else if (!this.runState) {\n        this.runState = true;\n        this.state = true;\n        this.setOutputData(0, true);\n        this.timeoutFunc = setInterval(() => {\n          this.state = !this.state;\n          if (!this.state && this.settings['false'].value) {\n            this.setOutputData(0, false);\n            return;\n          }\n          if (this.state) this.setOutputData(0, true);\n        }, interval / 2);\n      }\n    }\n  }\n\n  onAfterSettingsChange() {\n    //this.title = `Ticker (${this.settings['time'].value})`;\n    this.inputs[1]['name'] = `[interval] (${this.settings['time'].value})`;\n    this.onInputUpdated();\n  }\n}\nContainer.registerNodeType('boolean/ticker', TickerNode);\n","import { Container } from '../../container';\nimport { Node } from '../../node';\nimport { Type } from '../../node-io';\nimport Utils from '../../utils';\nimport { NODE_INFO } from '../../node-info';\n\nclass EqualNode extends Node {\n\n  constructor() {\n    super();\n    this.title = NODE_INFO.compare.equal.title;\n    this.description = NODE_INFO.compare.equal.description;\n\n    this.addInput('in 1', Type.ANY);\n    this.addInputWithSettings('in 2', Type.ANY, null, 'in 2');\n    this.addOutput('out equal', Type.BOOLEAN);\n    this.addOutput('out not equal', Type.BOOLEAN);\n  }\n\n  onAdded() {\n    this.setOutputData(0, false);\n    this.setOutputData(1, true);\n    this.onInputUpdated();\n  }\n\n\n  onInputUpdated() {\n    let a = this.getInputData(0);\n    if (!Utils.hasInput(a)) {\n      this.setOutputData(0, false);\n      this.setOutputData(1, true);\n      return;\n    }\n    a = (a || '').toString(); // making string null i.e `''` and other `null` same\n    const b = (this.getInputData(1) || '').toString();\n    if (a === b) {\n      this.setOutputData(0, true);\n      this.setOutputData(1, false);\n    } else {\n      this.setOutputData(0, false);\n      this.setOutputData(1, true);\n    }\n  }\n\n  onAfterSettingsChange() {\n    this.onInputUpdated();\n  }\n}\nContainer.registerNodeType('compare/equal', EqualNode);\n","import { Container } from '../../container';\nimport { Node } from '../../node';\nimport { Type } from '../../node-io';\nimport { NODE_INFO } from '../../node-info';\n\nclass GreaterNode extends Node {\n\n  constructor() {\n    super();\n\n    this.title = NODE_INFO.compare[\"greater-than\"].title;\n    this.description = NODE_INFO.compare[\"greater-than\"].description;\n\n    this.addInput('in 1', Type.NUMBER);\n    this.addInputWithSettings('in 2', Type.NUMBER, 0, 'In 2 Constant', false);\n    this.addOutput('out >', Type.BOOLEAN);\n    this.addOutput('out >=', Type.BOOLEAN);\n  }\n\n  onAdded() {\n    this.setOutputData(0, false);\n    this.setOutputData(1, false);\n    this.onInputUpdated();\n  }\n  \n\n  onInputUpdated() {\n    let a = this.getInputData(0);\n    let b = this.getInputData(1);\n\n    if (a != null && b != null) {\n      this.setOutputData(0, a > b);\n      this.setOutputData(1, a >= b);\n    } else {\n      this.setOutputData(0, false);\n      this.setOutputData(1, false);\n    }\n  }\n\n  onAfterSettingsChange() {\n    this.onInputUpdated();\n  }\n}\nContainer.registerNodeType('compare/greater-than', GreaterNode);\n","import { Container } from '../../container';\nimport { Node } from '../../node';\nimport { Type } from '../../node-io';\nimport { NODE_INFO } from '../../node-info';\n\nclass LessThanNode extends Node {\n\n  constructor() {\n    super();\n\n    this.title = NODE_INFO.compare[\"less-than\"].title;\n    this.description = NODE_INFO.compare[\"less-than\"].description;\n    \n    this.addInput('in 1', Type.NUMBER);\n    this.addInputWithSettings('in 2', Type.NUMBER, 0, 'In 2 Constant', false);\n    this.addOutput('out <', Type.BOOLEAN);\n    this.addOutput('out <=', Type.BOOLEAN);\n  }\n\n  onAdded() {\n    this.setOutputData(0, false);\n    this.setOutputData(1, false);\n    this.onInputUpdated();\n  }\n\n  onExecute(){\n    //this.onInputUpdated();\n  }\n\n  onInputUpdated() {\n    let a = this.getInputData(0);\n    let b = this.getInputData(1);\n\n    if (a != null && b != null) {\n      this.setOutputData(0, a < b);\n      this.setOutputData(1, a <= b);\n      return;\n    } else {\n      this.setOutputData(0, false);\n      this.setOutputData(1, false);\n    }\n  }\n\n  onAfterSettingsChange() {\n    this.onInputUpdated();\n  }\n}\nContainer.registerNodeType('compare/less-than', LessThanNode);\n","import { Container } from '../../container';\nimport { Node } from '../../node';\nimport { Type } from '../../node-io';\nimport { NODE_INFO } from '../../node-info';\n\nclass BetweenNode extends Node {\n\n  constructor() {\n    super();\n\n    this.title = NODE_INFO.compare.between.title;\n    this.description = NODE_INFO.compare.between.description;\n\n    this.addInput('input', Type.NUMBER);\n    this.addInputWithSettings('from', Type.NUMBER, 0, 'From Value', false);\n    this.addInputWithSettings('to', Type.NUMBER, 1, 'To Value', false);\n    this.addOutput('output', Type.BOOLEAN);\n    this.addOutput('out not', Type.BOOLEAN);\n  }\n\n  onAdded() {\n    this.setOutputData(0, false);\n    this.setOutputData(1, true);\n    this.onInputUpdated();\n  }\n\n\n  onInputUpdated() {\n    let val = this.getInputData(0);\n    let from = this.getInputData(1);\n    let to = this.getInputData(2);\n\n    if (val != null && from != null && to != null) {\n      //if (val >= from && val <= to) {\n      if (val >= Math.min(from, to) && val <= Math.max(from, to)) {\n        this.setOutputData(0, true);\n        this.setOutputData(1, false);\n      } else {\n        this.setOutputData(0, false);\n        this.setOutputData(1, true);\n      }\n    } else {\n      this.setOutputData(0, false);\n      this.setOutputData(1, true);\n    }\n  }\n\n  onAfterSettingsChange() {\n    this.onInputUpdated();\n  }\n}\nContainer.registerNodeType('compare/between', BetweenNode);\n","import { Container } from '../../container';\nimport { Node } from '../../node';\nimport { Type } from '../../node-io';\nimport { NODE_INFO } from '../../node-info';\n\nclass HysteresisNode extends Node {\n\n  constructor() {\n    super();\n\n    this.title = NODE_INFO.compare.hysteresis.title;\n    this.description = NODE_INFO.compare.hysteresis.description;\n\n    this.addInput('input', Type.NUMBER);\n    this.addInputWithSettings('risingEdge', Type.NUMBER, 20, 'Rising Edge', false);\n    this.addInputWithSettings('fallingEdge', Type.NUMBER, 10, 'Falling Edge', false);\n    this.addOutput('output', Type.BOOLEAN);\n    this.addOutput('out not', Type.BOOLEAN);\n  }\n\n  onAdded() {\n    this.setOutputData(0, false);\n    this.setOutputData(1, true);\n  }\n\n  onExecute(){\n    //this.onInputUpdated();\n  }\n\n  onInputUpdated() {\n    let inMsg = this.getInputData(0);\n    let risingEdge = this.getInputData(1);\n    let fallingEdge = this.getInputData(2);\n\n    if (risingEdge != null && fallingEdge != null) {\n      if (risingEdge > fallingEdge) {\n        if (inMsg <= fallingEdge) {\n          this.setOutputData(0, false);\n          this.setOutputData(1, true);\n        }\n        if (inMsg >= risingEdge) {\n          this.setOutputData(0, true);\n          this.setOutputData(1, false);\n        }\n      } else if (risingEdge < fallingEdge) {\n        if (inMsg >= fallingEdge) {\n          this.setOutputData(0, false);\n          this.setOutputData(1, true);\n        }\n        if (inMsg <= risingEdge) {\n          this.setOutputData(0, true);\n          this.setOutputData(1, false);\n        }\n      }\n    } else {\n      this.setOutputData(0, false);\n      this.setOutputData(1, true);\n    }\n  }\n\n  onAfterSettingsChange() {\n    this.onInputUpdated();\n  }\n}\nContainer.registerNodeType('compare/hysteresis', HysteresisNode);\n","import { Container } from '../../container';\nimport { Node } from '../../node';\nimport { NODE_INFO } from '../../node-info';\nimport { NodeSetting, SettingType, Type } from '../../node-io';\n\nclass TypeCheckNode extends Node {\n\n  constructor() {\n    super();\n\n    this.title = NODE_INFO.compare[\"type-check\"].title;\n    this.description = NODE_INFO.compare[\"type-check\"].description;\n\n    this.addInput('input', Type.ANY);\n    this.addOutput('output', Type.BOOLEAN);\n    this.addOutput('isType', Type.STRING);\n\n    this.settings['type'] = NodeSetting.create({\n      description: 'Type to check',\n      type: SettingType.DROPDOWN,\n      config: {\n        items: [\n          { value: Type.STRING, text: Type.STRING },\n          { value: Type.NUMBER, text: Type.NUMBER },\n          { value: Type.BOOLEAN, text: Type.BOOLEAN },\n          { value: Type.JSON, text: Type.JSON },\n        ],\n      },\n      value: Type.STRING,\n    });\n  }\n\n  onAdded() {\n \n    this.updateTitle();\n    this.onInputUpdated();\n  }\n\n  onExecute(){\n    //this.onInputUpdated();\n  }\n\n  onInputUpdated() {\n    let data = this.getInputData(0);\n    if (data === undefined) {\n      this.setOutputData(0, null);\n      this.setOutputData(1, null);\n    }\n    const type = this.settings['type'].value;\n    const dataType = typeof data;\n    this.setOutputData(1, dataType);\n    switch (type) {\n      case Type.STRING:\n        this.setOutputData(0, typeof data === Type.STRING);\n        break;\n      case Type.NUMBER:\n        this.setOutputData(0, typeof data === Type.NUMBER);\n        break;\n      case Type.BOOLEAN:\n        this.setOutputData(0, typeof data === Type.BOOLEAN);\n        break;\n      case Type.JSON:\n        if (typeof data === 'string') {\n          try {\n            JSON.parse(data);\n            this.setOutputData(0, true);\n          } catch (e) {\n            this.setOutputData(0, false);\n          }\n        } else if (typeof data === 'object') {\n          try {\n            JSON.parse(JSON.stringify(data));\n            this.setOutputData(0, true);\n          } catch (e) {\n            this.setOutputData(0, false);\n          }\n        }\n        this.setOutputData(0, data === null);\n        break;\n    }\n  }\n\n  onAfterSettingsChange() {\n    this.updateTitle();\n    this.onInputUpdated();\n  }\n\n  updateTitle() {\n    const type = this.settings['type'].value;\n    switch (type) {\n      case Type.STRING:\n        this.title = 'Type Check (string)';\n        break;\n      case Type.NUMBER:\n        this.title = 'Type Check (number)';\n        break;\n      case Type.BOOLEAN:\n        this.title = 'Type Check (boolean)';\n        break;\n      case Type.JSON:\n        this.title = 'Type Check (json)';\n        break;\n    }\n  }\n}\n\nContainer.registerNodeType('compare/type-check', TypeCheckNode);\n","import { isNull } from 'util';\nimport { Connect, Disconnect } from '../../../pub-sub/Decorators';\nimport { DispatchNode } from '../../../pub-sub/DispatchNode';\nimport { Store } from '../../../pub-sub/IPubSub';\nimport { pubSubSingleton } from '../../../pub-sub/PubSub';\nimport { Container } from '../../container';\nimport { BROADCAST } from '../../node';\nimport Icons from '../../node-icons';\nimport { NODE_INFO } from '../../node-info';\nimport { Side } from '../../node-interface';\nimport { NodeSetting, SettingType, Type } from '../../node-io';\n\nexport class DispatchListener extends DispatchNode {\n  originalHeaderColor: string = '';\n\n  constructor() {\n    super();\n    this.originalHeaderColor = this.headerColor;\n    this.title = NODE_INFO.connection['dispatch-listener'].title;\n    this.description = NODE_INFO.connection['dispatch-listener'].description;\n    this.iconImageUrl = NODE_INFO.connection[\"dispatch-listener\"].iconImageUrl;\n\n    this.addOutput('output', Type.ANY);\n    this.settings['protocol'] = NodeSetting.create({\n      description: 'Protocol',\n      config: { items: [] },\n      value: '',\n      type: SettingType.TREE_SELECT,\n    });\n    this.addInputWithSettings('enable', Type.BOOLEAN, true, 'Enable');\n    this.settings['blockNull'] = NodeSetting.create({\n      description: 'Block Null',\n      value: false,\n      type: SettingType.BOOLEAN,\n    });\n\n    this.setSettingsConfig({\n      groups: [{ enable: { weight: 1 }, blockNull: { weight: 1 } }],\n    });\n  }\n\n  async onAdded() {\n    super.onAdded();\n    this.onAfterSettingsChange();\n    if (this.side === Side.editor) {\n      this.sendMessageToServerSide(null); // for title update it will call onGetMessageToServerSide\n    }\n  }\n\n  @Disconnect\n  onRemoved() {\n    super.onRemoved();\n  }\n\n  @Connect\n  onAfterSettingsChange(oldSettings = {}, oldName = '') {\n    if (this.side !== Side.server) return;\n    this.updateSubscriptionTree();\n    this.updateTitle();\n    this.broadcastSettingsToClients();\n    this.broadcastTitleToClients();\n  }\n\n  updateTitle() {\n    this.title = `${NODE_INFO.connection['dispatch-listener'].title} [${this.getSelectedPointText()}]`;\n  }\n\n  updateSubscriptionTree() {\n    const store: Store = pubSubSingleton.getStore();\n    let items = Object.keys(store).map(protocol => {\n      return {\n        text: protocol,\n        items: Object.keys(store[protocol].points)\n          .filter(point => !store[protocol].points[point].soft)\n          .map(point => {\n            return {\n              text: `${store[protocol].points[point].name} (${point})`,\n              name: store[protocol].points[point].name,\n              value: point,\n              protocol,\n            };\n          }),\n      };\n    });\n    items = items.filter(item => item.items.length); // removed protocol which has soft only\n    this.settings['protocol'].config.items = items;\n  }\n\n  getSelectedProtocol(): string {\n    const matchProtocolItem = this.getMatchProtocolItem();\n    return matchProtocolItem?.protocol || '';\n  }\n\n  getSelectedPoint(): string {\n    return this.settings['protocol'].value;\n  }\n\n  getSelectedPointName(): string {\n    const matchProtocolItem = this.getMatchProtocolItem();\n    return matchProtocolItem?.name || '';\n  }\n\n  getSelectedPointText(): string {\n    const matchProtocolItem = this.getMatchProtocolItem();\n    return matchProtocolItem?.text || '';\n  }\n\n  getMatchProtocolItem(): any {\n    const protocol = this.settings['protocol'].value;\n    const protocolsItems = this.settings['protocol'].config.items;\n    for (let protocolsItem of protocolsItems) {\n      const protocolItems = protocolsItem.items;\n      for (let protocolItem of protocolItems) {\n        if (protocolItem.value === protocol) {\n          return protocolItem;\n        }\n      }\n    }\n    return null;\n  }\n\n  onGetMessageToServerSide() {\n    this.broadcastTitleToClients(false); // false since it needs to reflect even on sub-containers\n  }\n\n  subscribe(value: any) {\n    // this.debugInfo(`Subscribed value: ${value}`);\n    const enable: boolean = this.settings['enable'].value;\n    const blockNull: boolean = this.settings['blockNull'].value;\n    if (enable && !(isNull(value) && blockNull)) {\n      this.setOutputData(0, value);\n    }\n  }\n\n  updateProtocols() {\n    this.updateSubscriptionTree();\n    // this.debugInfo(`Updating protocol to: ${this.settings['protocol'].config.items}`);\n    this.updateTitle();\n    this.broadcastSettingsToClients(false);\n    this.broadcastTitleToClients(false);\n  }\n\n  onGetMessageToEditorSide({ action, payload, key }: { action: any; payload: any; key: any }) {\n    if (action === BROADCAST.UPDATE_TITLE) {\n      this.title = payload;\n      this.size = this.computeSize();\n      if (payload === `${NODE_INFO.connection['dispatch-listener'].title} []`) {\n        this.headerColor = '#A44';\n      } else {\n        this.headerColor = this.originalHeaderColor;\n      }\n    } else if (action === BROADCAST.UPDATE_SETTINGS) {\n      // Sorting only in frontend, don't pressurized the backend much\n      const items = payload['protocol'].config.items;\n      items.sort((item1, item2) => (item1.text.toUpperCase() > item2.text.toUpperCase() ? 1 : -1));\n      items.forEach(item =>\n        item.items.sort((item1, item2) => (item1.text.toUpperCase() > item2.text.toUpperCase() ? 1 : -1)),\n      );\n      payload['protocol'].config.items = items;\n      this.settings = payload;\n    } else {\n      super.onGetMessageToEditorSide({ action, payload, key });\n    }\n  }\n}\nContainer.registerNodeType('connection/dispatch-listener', DispatchListener);\n","import { PubSubHelpers } from './PubSubHelpers';\n\nexport const Map = (target: any, propertyKey: string, descriptor: any) => {\n  const fn = descriptor.value!;\n  descriptor.value = function DescriptorValue(...args: any[]) {\n    PubSubHelpers.map(this);\n    return fn.apply(this, args);\n  };\n  return descriptor;\n};\n\nexport const UnMap = (target: any, propertyKey: string, descriptor: any) => {\n  const fn = descriptor.value!;\n  descriptor.value = function DescriptorValue(...args: any[]) {\n    PubSubHelpers.unMap(this);\n    return fn.apply(this, args);\n  };\n  return descriptor;\n};\n\nexport const Rename = (target: any, propertyKey: string, descriptor: any) => {\n  const fn = descriptor.value!;\n  descriptor.value = function DescriptorValue(...args: any[]) {\n    PubSubHelpers.renameFunction(this);\n    fn.apply(this, args);\n  };\n  return descriptor;\n};\n\nexport const Dispatch = (target: any, propertyKey: string, descriptor: any) => {\n  const fn = descriptor.value!;\n  descriptor.value = function DescriptorValue(...args: any[]) {\n    const value: any = fn.apply(this, args);\n    PubSubHelpers.dispatch(this, value);\n  };\n  return descriptor;\n};\n\nexport const Connect = (target: any, propertyKey: string, descriptor: any) => {\n  const fn = descriptor.value;\n  descriptor.value = function DescriptorValue(...args: any[]) {\n    fn.apply(this, args);\n    PubSubHelpers.connect(this);\n  };\n  return descriptor;\n};\n\nexport const Disconnect = (target: any, propertyKey: string, descriptor: any) => {\n  const fn = descriptor.value;\n  descriptor.value = function DescriptorValue(...args: any[]) {\n    fn.apply(this, args);\n    PubSubHelpers.disconnect(this);\n  };\n  return descriptor;\n};\n","import { Container, ContainerRegistry } from '../../container';\nimport { Node } from '../../node';\nimport { NODE_INFO } from '../../node-info';\nimport { Side } from '../../node-interface';\nimport { NodeSetting, SettingType, Type } from '../../node-io';\n\nexport class ConnectionLocalTransmitterNode extends Node {\n  constructor() {\n    super();\n\n    this.title = NODE_INFO.connection[\"link-transmitter-single\"].title;\n    this.description = NODE_INFO.connection[\"link-transmitter-single\"].description;\n    this.iconImageUrl = NODE_INFO.connection[\"link-transmitter-single\"].iconImageUrl;\n\n    this.addInput('input', Type.ANY);\n    this.addInputWithSettings('topic', Type.STRING, '1', 'Topic Name', false);\n    this.addInputWithSettings('enable', Type.BOOLEAN, true, 'Enable');\n    this.settings['ifNew'] = NodeSetting.create({\n      description: 'Only transmit on COV',\n      value: false,\n      type: SettingType.BOOLEAN,\n    });\n  }\n\n  init() {\n    if (!this.properties['topic']) {\n      // we are persisting topic input just because, we don't have getInputData(1) on frontend to update title\n      this.properties['topic'] = null;\n    }\n  }\n\n  onAdded() {\n    this.onAfterSettingsChange();\n    this.updateTitle();\n  }\n\n  onInputUpdated() {\n    if (this.side !== Side.server) return;\n\n    this.properties['topic'] = this.getInputData(1);\n    this.persistProperties(false, true);\n\n    const receivers = this.getReceivers();\n    if (this.inputs[1].updated) {\n      this.updateTransmitterTopics();\n    }\n    if (!this.isEnable()) return;\n    const val = this.getInputData(0);\n    const topic = this.getInputData(1);\n    const ifNew = this.settings['ifNew'].value\n    receivers.forEach(receiver => {\n      if (receiver.properties['topic'] === topic) {\n        const blockNull = receiver.settings['blockNull'].value;\n        if (receiver.getInputData(0) === true && ((blockNull && val != null) || !blockNull)) {\n          receiver.properties['val'] = val;\n          receiver.persistProperties(false, true);\n          receiver.setOutputData(0, receiver.properties['val'], ifNew);\n        }\n      }\n    });\n    this.updateTitle();\n  }\n\n  onAfterSettingsChange() {\n    this.updateTransmitterTopics();\n    this.onInputUpdated();\n  }\n\n  onRemoved() {\n    this.updateTransmitterTopics();\n  }\n\n  updateTransmitterTopics() {\n    if (this.side !== Side.server) return;\n    setTimeout(() => {\n      const receivers = this.getReceivers();\n      receivers.forEach(receiver => {\n        receiver['triggerTransmitterTopicUpdate']();\n      });\n    }, 100); // waiting for this node deletion and hence, receiver will not discover this node\n  }\n\n  getReceivers(): Array<Node> {\n    return ContainerRegistry.instance().rootContainer().getNodesByType('connection/link-receiver-single', true);\n  }\n\n  isEnable() {\n    return this.getInputData(2);\n  }\n\n  updateTitle() {\n    this.title = `Link Transmitter Single [${this.properties['topic'] || this.getInputData(1)}]`;\n    this.broadcastTitleToClients();\n  }\n}\n\nContainer.registerNodeType('connection/link-transmitter-single', ConnectionLocalTransmitterNode);\n","import { isNull } from '../../../utils/helper';\nimport { Container, ContainerRegistry } from '../../container';\nimport { Node } from '../../node';\nimport { NODE_INFO } from '../../node-info';\nimport { Side } from '../../node-interface';\nimport { NodeSetting, SettingType, Type } from '../../node-io';\n\nexport class ConnectionLocalReceiverNode extends Node {\n  topicList: any = [];\n\n  inputEnable = 0;\n  inputNumTopic = 1;\n\n  constructor() {\n    super();\n    this.title = NODE_INFO.connection[\"link-receiver-single\"].title;\n    this.description = NODE_INFO.connection[\"link-receiver-single\"].description;\n    this.iconImageUrl = NODE_INFO.connection[\"link-receiver-single\"].iconImageUrl;\n    \n    this.addInputWithSettings('enable', Type.BOOLEAN, true, 'Enable');\n    this.settings['manualTopicOption'] = NodeSetting.create({\n      description: 'Set topic manually',\n      value: false,\n      type: SettingType.BOOLEAN,\n    });\n    this.addInputWithSettings('topic', Type.STRING, '1', 'Set topic', false);\n    this.addOutput('output', Type.ANY);\n    this.addOutput('topic', Type.STRING);\n    this.properties['topic'] = \"\";\n    this.settings['topicDropdown'] = NodeSetting.create({\n      description: 'Select Topic',\n      config: { items: [] },\n      value: '',\n      type: SettingType.DROPDOWN,\n    });\n    this.settings['blockNull'] = NodeSetting.create({\n      description: 'Block Null',\n      value: false,\n      type: SettingType.BOOLEAN,\n    });\n    this.setSettingsConfig({\n      conditions: {\n        topicDropdown: setting => {\n          return setting['manualTopicOption'].value === false;\n        }\n      },\n    });\n  }\n\n  init() {\n    if (!this.properties['val']) {\n      this.properties['val'] = null;\n    }\n  }\n\n  onAdded() {\n    this.onAfterSettingsChange();\n    this.setOutputData(0, this.properties['val']);\n  }\n\n  onCreated() {\n    if (isNull(this.properties['topic'])) {\n      this.onAfterSettingsChange();\n    }\n  }\n\n  async onAfterSettingsChange() {\n    await this.setTopic();\n    this.updateTitle();\n    if (this.side !== Side.server) return;\n    this.transmitterTopic();\n    this.updateChannel();\n\n  }\n\n  pushSettings() {\n    const unitCategory = this.topicList.map((point: any) => {\n      return { value: point, text: point };\n    });\n    this.settings['topicDropdown'].config = {\n      items: unitCategory,\n    };\n    this.persistProperties(true);\n    this.updateTitle();\n    this.updateChannel();\n    this.broadcastSettingsToClients(false);\n    this.broadcastTitleToClients(false);\n    this.broadcastOutputsToClients(false);\n  }\n\n  transmitterTopic() {\n    const transmitters = ContainerRegistry.instance().rootContainer().getNodesByType('connection/link-transmitter-single', true);\n    this.topicList = [];\n    transmitters.forEach(transmitter => {\n      this.topicList.push(transmitter.getInputData(1));\n      if (this.properties['topic'] === transmitter.getInputData(1)) {\n        this.setOutputData(0, transmitter.getInputData(0));\n      }\n    });\n    this.pushSettings();\n  }\n\n  updateTitle() {\n    this.title = 'Link Receiver Single [' + this.properties['topic'] + ']';\n  }\n\n  updateChannel() {\n    this.setOutputData(1, this.properties['topic']);\n  }\n\n\n  onInputUpdated() {\n    if (this.side !== Side.server) return;\n    this.onAfterSettingsChange()\n  }\n\n  async setTopic() {\n    const manualTopicOption = this.settings['manualTopicOption'].value\n    if (manualTopicOption) {\n      this.properties['topic'] = this.getInputData(this.inputNumTopic)\n    } else if (!manualTopicOption) {\n      this.properties['topic'] = this.settings['topicDropdown'].value\n    }\n  }\n\n  // @Link: Triggers from transmitter on addition and on remove\n  triggerTransmitterTopicUpdate() {\n    if (this.side !== Side.server) return;\n    this.transmitterTopic();\n  }\n}\nContainer.registerNodeType('connection/link-receiver-single', ConnectionLocalReceiverNode);\n","import { Container, ContainerRegistry } from '../../container';\nimport { Node } from '../../node';\nimport { Side } from '../../node-interface';\nimport { NodeSetting, SettingType, Type } from '../../node-io';\nimport Utils from '../../utils';\nimport { NODE_INFO } from '../../node-info';\n\nexport class ConnectionLocalTransmitterNode extends Node {\n  constructor() {\n    super();\n\n    this.title = NODE_INFO.connection[\"link-transmitter\"].title;\n    this.description = NODE_INFO.connection[\"link-transmitter\"].description;\n\n    this.settings['channel'] = NodeSetting.create({\n      description: 'Channel Number',\n      value: 1,\n      type: SettingType.NUMBER,\n    });\n\n    this.settings['inputsCount'] = NodeSetting.create({\n      description: 'Inputs Count',\n      value: 1,\n      type: SettingType.NUMBER,\n    });\n  }\n\n  init() {\n    this.properties['inputsCount'] = 0;\n    this.changeTopicsCount(this.settings['inputsCount'].value);\n  }\n\n  onAdded() {\n    this.onAfterSettingsChange();\n  }\n\n  onInputUpdated() {\n    for (let i in this.inputs) {\n      let val = this.inputs[i].data;\n      if (val == undefined) val = null;\n      let receivers = ContainerRegistry.instance().rootContainer().getNodesByType('connection/link-receiver', true);\n      receivers.forEach(receiver => {\n        if (receiver.settings['channel'].value == this.settings['channel'].value) {\n          if (receiver.outputs.hasOwnProperty(i)) {\n            receiver.setOutputData(+i, val);\n            if (this.inputs[i].name !== '') receiver.outputs[i].name = this.inputs[i].name;\n          }\n        }\n      });\n    }\n  }\n\n  onAfterSettingsChange() {\n    this.updateTitle();\n    let inputCount = this.settings['inputsCount'].value;\n    inputCount = Utils.clamp(inputCount, 1, 100);\n    if (inputCount !== this.properties['inputsCount']) this.changeTopicsCount(inputCount);\n    this.renameInputs();\n    this.persistProperties(true, true, true);\n    this.onInputUpdated();\n  }\n\n  changeTopicsCount(target_count) {\n    let diff = target_count - this.properties['inputsCount'];\n    if (diff == 0) return;\n\n    //add inputs, outputs\n    this.changeInputsCount(target_count, Type.ANY);\n\n    //change settings for topics\n    if (diff > 0) {\n      for (let i = this.properties['inputsCount'] + 1; i <= target_count; i++) {\n        this.settings['in' + i] = NodeSetting.create({\n          description: 'Input ' + i,\n          value: '',\n          type: SettingType.STRING,\n        });\n      }\n    } else if (diff < 0) {\n      for (let i = this.properties['inputsCount']; i > target_count; i--) {\n        delete this.settings['in' + i];\n      }\n    }\n    this.properties['inputsCount'] = target_count;\n  }\n\n  renameInputs() {\n    for (let i = 0; i <= this.properties['inputsCount'] - 1; i++) {\n      let topic = this.settings['in' + (i + 1)]?.value;\n      if (topic?.length > 20) topic = '...' + topic.substr(topic.length - 20, 20);\n      this.inputs[String(i)].name = '' + (i + 1) + ' | ' + topic;\n    }\n\n    if (this.side == Side.editor) {\n      for (let i = 0; i <= this.properties['inputsCount'] - 1; i++) {\n        this.inputs[String(i)].label = this.inputs[String(i)].name;\n      }\n      this.setDirtyCanvas(true, true);\n    }\n  }\n\n  updateTitle() {\n    this.title = 'Link Transmitter [' + this.settings['channel'].value + ']';\n  }\n}\nContainer.registerNodeType('connection/link-transmitter', ConnectionLocalTransmitterNode);\n","import { Container, ContainerRegistry } from '../../container';\nimport { FlexibleNode } from '../../flexible-node';\nimport { NODE_INFO } from '../../node-info';\nimport { NodeSetting, SettingType } from '../../node-io';\n\nexport class ConnectionLocalReceiverNode extends FlexibleNode {\n  constructor() {\n    super();\n    this.dynamicOutputsExist = true;\n    this.dynamicInputsExist = false;\n    this.dynamicSettingsExist = false;\n    this.dynamicDefaultOutputs = 1;\n    this.dynamicMinOutputs = 1;\n    this.title = NODE_INFO.connection[\"link-receiver\"].title;\n    this.description = NODE_INFO.connection[\"link-receiver\"].description;\n    this.settings['channel'] = NodeSetting.create({\n      description: 'Channel Number',\n      value: 1,\n      type: SettingType.NUMBER,\n    });\n  }\n\n  onCreated() {\n    this.properties['channel'] = 1;\n  }\n\n  onAdded() {\n    this.updateTitle();\n    this.onAfterSettingsChange();\n  }\n\n  onAfterSettingsChange() {\n    super.onAfterSettingsChange();\n    this.updateTitle();\n    if (this.properties['channel'] !== this.settings['channel'].value) this.resetOutputs();\n    this.triggerTransmitterNodeUpdate();\n  }\n\n  triggerTransmitterNodeUpdate() {\n    let transmitters = ContainerRegistry.instance().rootContainer().getNodesByType('connection/link-transmitter', true);\n    transmitters.forEach(transmitter => {\n      if (transmitter.settings['channel'].value == this.settings['channel'].value) {\n        transmitter['onInputUpdated']();\n      }\n    });\n  }\n\n  resetOutputs() {\n    for (let i in this.outputs) {\n      this.setOutputData(+i, null);\n    }\n  }\n\n  updateTitle() {\n    this.title = 'Link Receiver [' + this.settings['channel'].value + ']';\n  }\n}\nContainer.registerNodeType('connection/link-receiver', ConnectionLocalReceiverNode);\n","\n// THIS NODE IS A COPY OF THE STREAM-MERGE NODE.  \n// IT SHOULD BE REMOVED ONCE NODES ARE DUPLICATED TO MULTIPLE CATEGORIES\n\nimport { Container } from '../../container';\nimport { FlexibleNode } from '../../flexible-node';\nimport { NODE_INFO } from '../../node-info';\nimport { Type } from '../../node-io';\nimport Utils from '../../utils';\n\nclass HubNode extends FlexibleNode {\n  val: number;\n  lastReset: boolean;\n\n  constructor() {\n    super();\n    this.dynamicSettingsExist = false;\n    this.dynamicInputsType = Type.ANY;\n\n    this.title = NODE_INFO.connection.hub.title;\n    this.description = NODE_INFO.connection.hub.description;\n\n    this.addOutput('output', Type.ANY);\n  }\n\n  onAdded() {\n    this.onInputUpdated();\n    this.size = this.computeSize();\n  }\n\n  onInputUpdated() {\n    const inputs = this.getInputsCount();\n    for (let i = this.dynamicInputStartPosition; i < inputs; i++) {\n      let inputValue = this.getInputData(i);\n      if (Utils.hasInput(inputValue)) {\n        if (this.inputs[i].updated) {\n          this.setOutputData(0, this.inputs[i].data);\n          return;\n        }\n      }\n    }\n  }\n\n  onAfterSettingsChange() {\n    super.onAfterSettingsChange();\n    this.onInputUpdated();\n  }\n}\nContainer.registerNodeType('connection/hub', HubNode);\n","import { isNull } from '../../../utils/helper';\nimport { Node } from '../../node';\nimport { createNodeDbHelper } from '../../node-db-helper';\nimport { NODE_INFO } from '../../node-info';\nimport { NodeIO, Type } from '../../node-io';\nimport { createLegacyLinkHandler } from '../../node-link';\nimport { NodeTypeRegistry } from '../../node-type-registry';\nimport { AbstractFolderIONode } from './abstract-folder-io';\n\nclass ContainerInputNode extends AbstractFolderIONode {\n  constructor() {\n    super(NODE_INFO.container[\"folder-input\"].title, NODE_INFO.container[\"folder-input\"].description);\n    this.addOutput('input', null);\n  }\n\n  onAdded() {\n    super.onAdded();\n    if (!this.isUnderContainer() || this.hasItself('inputs')) return;\n    const containerNode = this.container.nodeItself();\n    const id = containerNode.addInput(this.name, Type.ANY, undefined, undefined, { subNodeId: this.id });\n    this.name = containerNode.inputs[id].name;\n    createLegacyLinkHandler(containerNode).recomputeInputLinks(containerNode);\n  }\n\n  onRemoved() {\n    if (!this.isUnderContainer() || !this.hasItself('inputs')) return;\n    let containerNode = this.container.nodeItself();\n    let [inputId, _] = this.findParentIOById('inputs');\n    containerNode.removeInput(+inputId);\n    createLegacyLinkHandler(containerNode).recomputeInputLinks(containerNode);\n    createNodeDbHelper().update(containerNode, ['size']);\n  }\n\n  onAfterSettingsChange() {\n    if (!this.isUnderContainer()) return;\n    const containerNode = this.container.nodeItself();\n    let [inputId, _] = this.findParentIOById('inputs');\n    if (isNull(inputId)) {\n      return;\n    }\n    containerNode.inputs[inputId].name = this.name;\n    createNodeDbHelper().update(containerNode, ['inputs']);\n  }\n\n  onExecute() {\n    if (!this.isUnderContainer()) return;\n    let [_, i] = this.findParentIOById('inputs');\n    let input = <NodeIO>i;\n    if (input?.updated) this.setOutputData(0, input.data);\n  }\n\n  protected correctParentIO(containerNode: Node, slot: number) {\n    let input = containerNode.inputs[slot];\n    if (isNull(input)) {\n      return;\n    }\n    input.subNodeId = this.id;\n    createNodeDbHelper().update(containerNode, ['inputs']);\n  }\n\n}\n\nexport const FOLDER_INPUT = 'container/folder-input';\nNodeTypeRegistry.registerNodeType(FOLDER_INPUT, ContainerInputNode, null, true, false, true);\n","import { isNull } from '../../../utils/helper';\nimport { Node } from '../../node';\nimport { createNodeDbHelper } from '../../node-db-helper';\nimport { NODE_INFO } from '../../node-info';\nimport { Type } from '../../node-io';\nimport { createLegacyLinkHandler } from '../../node-link';\nimport { NodeTypeRegistry } from '../../node-type-registry';\nimport { AbstractFolderIONode } from './abstract-folder-io';\n\nclass ContainerOutputNode extends AbstractFolderIONode {\n\n  constructor() {\n    super(NODE_INFO.container[\"folder-output\"].title, NODE_INFO.container[\"folder-output\"].description);\n    this.addInput('output', null);\n  }\n\n  onAdded() {\n    super.onAdded();\n    if (!this.isUnderContainer() || this.hasItself('outputs')) return;\n    const containerNode = this.container.nodeItself();\n    const id = containerNode.addOutput(this.name, Type.ANY, undefined, { subNodeId: this.id });\n    this.name = containerNode.outputs[id].name;\n    createLegacyLinkHandler(containerNode).recomputeOutputLinks(containerNode);\n  }\n\n  onRemoved() {\n    if (!this.isUnderContainer() || !this.hasItself('outputs')) return;\n    let containerNode = this.container.nodeItself();\n    let [outputId, _] = this.findParentIOById('outputs');\n    containerNode.removeOutput(+outputId);\n    createLegacyLinkHandler(containerNode).recomputeOutputLinks(containerNode);\n    createNodeDbHelper().update(containerNode, ['size']);\n  }\n\n  onAfterSettingsChange() {\n    if (!this.isUnderContainer()) return;\n    const containerNode = this.container.nodeItself();\n    let [outputId, _] = this.findParentIOById('outputs');\n    if (isNull(outputId)) {\n      return;\n    }\n    containerNode.outputs[outputId].name = this.name;\n    createNodeDbHelper().update(containerNode, ['outputs']);\n  }\n\n  onInputUpdated() {\n    if (!this.isUnderContainer()) return;\n    let [outputId, _] = this.findParentIOById('outputs');\n    if (isNull(outputId)) {\n      return;\n    }\n    this.isRecentlyActive = true;\n    this.container.nodeItself().setOutputData(+outputId, this.getInputData(0));\n  }\n\n  protected correctParentIO(containerNode: Node, slot: number) {\n    let output = containerNode.outputs[slot];\n    if (isNull(output)) {\n      return;\n    }\n    output.subNodeId = this.id;\n    createNodeDbHelper().update(containerNode, ['outputs']);\n  }\n\n}\n\nexport const FOLDER_OUTPUT = 'container/folder-output';\nNodeTypeRegistry.registerNodeType(FOLDER_OUTPUT, ContainerOutputNode, null, true, false, true);\n","import { Container } from '../../container';\nimport { Node } from '../../node';\nimport { NodeSetting, SettingType, Type } from '../../node-io';\nimport Utils from '../../utils';\nimport { NODE_INFO } from '../../node-info';\n\nclass BitMaskSingle extends Node {\n  constructor() {\n    super();\n  \n    this.title = NODE_INFO.conversion[\"bit-mask-single\"].title;\n    this.description = NODE_INFO.conversion[\"bit-mask-single\"].description;\n\n    this.settings['bit'] = NodeSetting.create({\n      description: 'bit index (0-7)',\n      type: SettingType.NUMBER,\n      value: 0,\n    });\n\n    this.settings['byte'] = NodeSetting.create({\n      description: 'Byte to read if Array',\n      type: SettingType.NUMBER,\n      value: 0,\n    });\n\n    this.addInput('input', Type.ANY);\n    this.addOutput('output', Type.NUMBER);\n  }\n\n  onAdded() {\n    this.onInputUpdated();\n  }\n\n  onInputUpdated() {\n    let input = this.getInputData(0);\n    if (input === undefined || input === null) {\n      return;\n    }\n\n    const BIT = this.settings['bit'].value;\n    const BYTE = this.settings['byte'].value;\n\n    if (typeof input === 'object') {\n      if (!input || !input.length || input.length < BYTE + 1) {\n        return;\n      }\n      input = input[BYTE];\n    }\n\n    this.setOutputData(0, (input >> BIT) & 0x01);\n  }\n\n  onAfterSettingsChange() {\n    this.settings['bit'].value = Utils.clamp(this.settings['bit'].value, 0, 7);\n    this.onInputUpdated();\n  }\n}\nContainer.registerNodeType('conversion/bit-mask-single', BitMaskSingle);\n\nclass BitMaskMultiple extends Node {\n  mask: number = 0;\n\n  constructor() {\n    super();\n    this.title = 'Bit Mask Multiple';\n    this.description = 'A node to mask certain bits of a byte';\n\n    this.settings['bitStart'] = NodeSetting.create({\n      description: 'Lowest bit to start (0-7)',\n      type: SettingType.NUMBER,\n      value: 0,\n    });\n\n    this.settings['maskLen'] = NodeSetting.create({\n      description: 'Mask length (1-8)',\n      type: SettingType.NUMBER,\n      value: 1,\n    });\n\n    this.settings['byte'] = NodeSetting.create({\n      description: 'Byte to read if Array',\n      type: SettingType.NUMBER,\n      value: 0,\n    });\n\n    this.addInput('input', Type.ANY);\n    this.addOutput('output', Type.NUMBER);\n    this.addOutput('error', Type.STRING);\n  }\n\n  init() {\n    this.updateMask();\n  }\n\n  onAdded() {\n    this.updateMask();\n    this.onInputUpdated();\n  }\n\n  onInputUpdated() {\n    let input = this.getInputData(0);\n    if (input === undefined || input === null) {\n      return;\n    }\n\n    const BIT_START = this.settings['bitStart'].value;\n    const BYTE = this.settings['byte'].value;\n\n    if (typeof input === 'object') {\n      if (!input || !input.length || input.length < BYTE + 1) {\n        return;\n      }\n      input = input[BYTE];\n    }\n\n    this.setOutputData(0, (input & this.mask) >> BIT_START);\n  }\n\n  onAfterSettingsChange() {\n    this.settings['bitStart'].value = Utils.clamp(this.settings['bitStart'].value, 0, 7);\n    this.settings['maskLen'].value = Utils.clamp(\n      this.settings['maskLen'].value,\n      1,\n      8 - this.settings['bitStart'].value,\n    );\n    this.updateMask();\n    this.onInputUpdated();\n  }\n\n  private updateMask() {\n    this.mask = 0;\n    for (let i = 0; i < this.settings['maskLen'].value; i++) {\n      this.mask |= 1 << i;\n    }\n    this.mask <<= this.settings['bitStart'].value;\n  }\n}\nContainer.registerNodeType('conversion/bit-mask-multiple', BitMaskMultiple);\n","import { Container } from '../../container';\nimport { Node } from '../../node';\nimport { NODE_INFO } from '../../node-info';\nimport { NodeSetting, SettingType, Type } from '../../node-io';\n\nclass IntToBits extends Node {\n  constructor() {\n    super();\n    this.title = NODE_INFO.conversion[\"int-to-bits\"].title;\n    this.description = NODE_INFO.conversion[\"int-to-bits\"].description;\n    this.settings['start'] = NodeSetting.create({\n      description: 'Start index if Array',\n      type: SettingType.NUMBER,\n      value: 0,\n    });\n\n    this.settings['bytes'] = NodeSetting.create({\n      description: 'Bytes to read if Array',\n      type: SettingType.NUMBER,\n      value: 1,\n    });\n\n    this.addInput('input', Type.ANY);\n  }\n\n  init() {\n    this.setNewOutputs();\n  }\n\n  onAdded() {\n    this.onInputUpdated();\n  }\n\n  onInputUpdated() {\n    let input = this.getInputData(0);\n    if (input === undefined || input === null) {\n      return;\n    }\n\n    if (typeof input === 'number') {\n      input = [input];\n    }\n\n    const START = this.settings['start'].value;\n    const BYTES = this.settings['bytes'].value;\n\n    if (!input || !input.length || input.length < BYTES) {\n      return;\n    }\n\n    let outputIndex = 0;\n    for (let i = 0; i < BYTES; i++) {\n      for (let j = 0; j < 8; j++) {\n        this.setOutputData(outputIndex++, (input[START + i] >> j) & 0x01);\n      }\n    }\n  }\n\n  onAfterSettingsChange() {\n    this.setNewOutputs();\n    this.onInputUpdated();\n  }\n\n  private setNewOutputs() {\n    let outputsLen = this.getOutputsCount();\n    for (let i = 0; i < outputsLen; i++) {\n      this.removeOutput(i);\n    }\n    outputsLen = this.settings['bytes'].value * 8;\n    for (let i = 0; i < outputsLen; i++) {\n      this.addOutput(i.toString(), Type.NUMBER);\n    }\n    this.updateNodeOutput();\n    this.onInputUpdated();\n  }\n}\nContainer.registerNodeType('conversion/int-to-bits', IntToBits);\n","import { Container } from '../../container';\nimport { Node } from '../../node';\nimport { Type } from '../../node-io';\nimport { NODE_INFO } from '../../node-info';\n\nclass BoolToIntNode extends Node {\n    constructor() {\n        super();\n        this.title = NODE_INFO.conversion[\"bool-to-int\"].title;\n        this.description = NODE_INFO.conversion[\"bool-to-int\"].description;\n        this.addInput('input', Type.BOOLEAN);\n        this.addOutput('output', Type.NUMBER);\n    }\n    onInputUpdated() {\n        this.setOutputData(0, this.inputs[0].data ? 1 : 0);\n    }\n}\n\nContainer.registerNodeType('conversion/bool-to-int', BoolToIntNode);\n\nclass IntToBoolNode extends Node {\n    constructor() {\n        super();\n        this.title = NODE_INFO.conversion[\"int-to-bool\"].title;\n        this.description = NODE_INFO.conversion[\"int-to-bool\"].description;\n        this.addInput('input', Type.NUMBER);\n        this.addOutput('output', Type.BOOLEAN);\n    }\n    onInputUpdated() {\n        this.setOutputData(0, !!this.inputs[0].data);\n    }\n}\nContainer.registerNodeType('conversion/int-to-bool', IntToBoolNode);\n\n\nclass StringToBool extends Node {\n    constructor() {\n        super();\n        this.title = NODE_INFO.conversion[\"string-to-bool\"].title;\n        this.description = NODE_INFO.conversion[\"string-to-bool\"].description;\n        this.addInput('input', Type.STRING);\n        this.addOutput('output', Type.BOOLEAN);\n    }\n    onInputUpdated() {\n        const val = this.getInputData(0)\n        if (val === \"0\" || val === 'false') {\n            this.setOutputData(0, false, true);\n        } else if (val === \"1\" || val === 'true') {\n            this.setOutputData(0, true, true);\n        }\n    }\n}\nContainer.registerNodeType('conversion/string-to-bool', StringToBool);\n","import { Node } from '../../node';\nimport { Type } from '../../node-io';\nimport { Container } from '../../container';\nimport { NODE_INFO } from '../../node-info';\n\nexport class BufferToHexString extends Node {\n  constructor() {\n    super();\n    this.title = NODE_INFO.conversion[\"buffer-to-hex-string\"].title;\n    this.description = NODE_INFO.conversion[\"buffer-to-hex-string\"].description;\n\n    this.addInput('input', Type.ANY);\n    this.addOutput('output', Type.STRING);\n  }\n\n  onInputUpdated() {\n    let buffer = this.getInputData(0);\n\n    if (!buffer || !Buffer.isBuffer(buffer)) {\n      return;\n    }\n\n    // console.log(buffer);\n    let str = buffer.toString('hex').toUpperCase();\n    // console.log(str);\n    this.setOutputData(0, str);\n  }\n}\nContainer.registerNodeType('conversion/buffer-to-hex-string', BufferToHexString);\n","import { Container } from '../../container';\nimport { Node } from '../../node';\nimport { NODE_INFO } from '../../node-info';\nimport { NodeSetting, SettingType, Type } from '../../node-io';\nimport ModbusByteOrder from '../protocols/modbus/modbus-fc/modbus-point-byte-order';\n\nclass BufferToNumNode extends Node {\n  value = null;\n  constructor() {\n    super();\n    this.title = NODE_INFO.conversion[\"buffer-to-num\"].title;\n    this.description = NODE_INFO.conversion[\"buffer-to-num\"].description;\n    this.addInput('in', Type.ANY);\n    this.addOutput('out', Type.JSON);\n    this.addOutput('out buffer', Type.JSON);\n    this.settings['dataType'] = NodeSetting.create({\n      description: 'Set data type',\n      type: SettingType.DROPDOWN,\n      config: {\n        items: [\n          { value: 0, text: 'na' }, // use reg length from setting\n          { value: 1, text: 'INT-16' }, // 1 reg\n          { value: 2, text: `UINT-16` }, // 1 reg\n          { value: 3, text: 'INT-32' }, // 2 reg\n          { value: 4, text: 'UINT-32' }, // 2 reg\n          { value: 5, text: 'FLOAT-32' }, // 2 reg\n          { value: 8, text: 'DOUBLE-64' }, // 4 reg\n        ],\n      },\n      value: 0,\n    });\n    this.settings['dataEndian'] = NodeSetting.create({\n      description: 'Set byte order',\n      type: SettingType.DROPDOWN,\n      config: {\n        items: [\n          { value: 0, text: 'LE-Byte BE-Word' },\n          { value: 1, text: 'LE-Byte LE-Word' },\n          { value: 2, text: 'BE-Byte LE-Word' },\n          { value: 3, text: 'BE-Byte BE-Word' },\n        ],\n      },\n      value: 0,\n    });\n  }\n\n  onAdded() {\n    this.onInputUpdated();\n  }\n\n  onInputUpdated() {\n    const input = this.getInputData(0);\n    const dataEndian = this.settings['dataEndian'].value;\n    const dataType = this.settings['dataType'].value;\n    try {\n      let j = JSON.parse(input);\n      if (!j.length) {\n        return\n      }\n      let buf;\n      if ((j.length === 1 && j[0] > 255) || (j.length === 2 && (j[0] > 255 || j[1] > 255))) {\n        buf = Buffer.alloc(j.length * 2);\n        let index = 0\n        for (let i = 0; i < j.length; i++) {\n          if (dataEndian >= 2) {\n            buf.writeUInt16BE(j[i], index);\n          } else {\n            buf.writeUInt16LE(j[i], index);\n          }\n          index += 2;\n        }\n      } else if(j.length <= 4){\n        buf = Buffer.from(j);\n      }else{\n        return;\n      }\n      const out = ModbusByteOrder.readByteOrder(buf, 0, dataType, dataEndian);\n      this.setOutputData(0, JSON.stringify(out));\n      this.setOutputData(1, JSON.stringify(buf));\n    } catch (error) { }\n  }\n\n  onAfterSettingsChange() {\n    this.onInputUpdated();\n  }\n}\nContainer.registerNodeType('conversion/buffer-to-num', BufferToNumNode);\n","import * as convert from 'convert-units';\nimport { get } from 'lodash';\nimport { Container } from '../../container';\nimport { Node } from '../../node';\nimport { NODE_INFO } from '../../node-info';\nimport { NodeSetting, SettingType } from '../../node-io';\n\nclass UnitConversionNode extends Node {\n  constructor() {\n    super();\n\n    this.title = NODE_INFO.conversion[\"convert-units\"].title;\n    this.description = NODE_INFO.conversion[\"convert-units\"].description;\n\n    this.addInput('in');\n    this.addOutput('converted');\n\n    this.settings['from-to'] = NodeSetting.create({\n      description: 'From / To unit',\n      type: SettingType.TREE_SELECT,\n      config: { items: [] },\n    });\n    this.ensureFromToConfig();\n  }\n\n  onAdded() {\n    this.updateTitle();\n    this.ensureFromToConfig();\n  }\n\n  // the from-to config is excluded from JSON serialization, we need to maintain it conditionally\n  ensureFromToConfig() {\n    // settings['from-to'].config is omitted from serialization / deserialization\n    if (!get(this, \"settings['from-to'].config.items.length\", 0))\n      this.settings['from-to'].config = { items: this.createTreeSelectItems() };\n    // ensure config exclusion from JSON serialization\n    this.settings['from-to'].toJSON = function() {\n      const { config = null, ...withoutConfig } = { ...this };\n      return withoutConfig;\n    };\n  }\n\n  createTreeSelectItems() {\n    const asItem = unit => ({ value: unit, text: unit });\n    // higher-order function:\n    const addAsChildren = (categoryName: string, units: { value: any; text: any }[]) => from => ({\n      ...from,\n      items: units.map(to => ({\n        ...to,\n        value: { type: categoryName, from: from.value, to: to.value },\n      })),\n    });\n    return convert()\n      .measures()\n      .map(unitType => ({\n        text: unitType,\n        items: convert()\n          .possibilities(unitType)\n          .map(asItem),\n      }))\n      .map(category => ({\n        ...category,\n        items: category.items.map(addAsChildren(category.text, category.items)),\n      }));\n  }\n\n  onInputUpdated() {\n    if (!this.settings['from-to'].value) return;\n    const { from, to } = this.settings['from-to'].value;\n    const value = parseFloat(this.inputs[0].data);\n    this.setOutputData(\n      0,\n      convert(value)\n        .from(from)\n        .to(to),\n    );\n  }\n\n  onAfterSettingsChange() {\n    this.ensureFromToConfig();\n    this.onInputUpdated();\n    this.updateTitle();\n  }\n\n  updateTitle() {\n    if (!this.settings['from-to'].value) return;\n    const { from, to } = this.settings['from-to'].value;\n    this.title = 'Unit converter' + ' ' + '(' + from + '/' + to + ')';\n  }\n}\nContainer.registerNodeType('conversion/convert-units', UnitConversionNode);\n","module.exports = require(\"convert-units\");","import { Node } from '../../node';\nimport { Type } from '../../node-io';\nimport { Container } from '../../container';\nimport { NODE_INFO } from '../../node-info';\n\nexport class HexStringToBuffer extends Node {\n  constructor() {\n    super();\n    this.title = NODE_INFO.conversion[\"hex-string-to-buffer\"].title;\n    this.description = NODE_INFO.conversion[\"hex-string-to-buffer\"].description;\n\n    this.addInput('input', Type.STRING);\n    this.addOutput('output', Type.ANY);\n  }\n\n  onInputUpdated() {\n    let str = this.getInputData(0);\n\n    if (!str) {\n      return;\n    }\n\n    // console.log(str);\n    let buffer = Buffer.from(str, 'hex');\n    // console.log(buffer);\n    this.setOutputData(0, buffer);\n  }\n}\nContainer.registerNodeType('conversion/hex-string-to-buffer', HexStringToBuffer);\n","import { Container } from '../../container';\nimport { Node } from '../../node';\nimport { NodeSetting, SettingType, Type } from '../../node-io';\nimport ModbusByteOrder from '../protocols/modbus/modbus-fc/modbus-point-byte-order';\nimport { NODE_INFO } from '../../node-info';\n\nclass IntToFourByteArrayNode extends Node {\n  constructor() {\n    super();\n    this.title = NODE_INFO.conversion[\"int-to-buffer\"].title;\n    this.description = NODE_INFO.conversion[\"int-to-buffer\"].description; this.addInput('in 1', Type.ANY);\n    \n    this.addOutput('out', Type.JSON);\n    this.addOutput('out data', Type.JSON);\n    this.settings['dataType'] = NodeSetting.create({\n      description: 'Set data type',\n      type: SettingType.DROPDOWN,\n      config: {\n        items: [\n          { value: 0, text: 'na' }, // use reg length from setting\n          { value: 1, text: 'INT-16' }, // 1 reg\n          { value: 2, text: `UINT-16` }, // 1 reg\n          { value: 3, text: 'INT-32' }, // 2 reg\n          { value: 4, text: 'UINT-32' }, // 2 reg\n          { value: 5, text: 'FLOAT-32' }, // 2 reg\n          { value: 8, text: 'DOUBLE-64' }, // 4 reg\n        ],\n      },\n      value: 0,\n    });\n    this.settings['dataEndian'] = NodeSetting.create({\n      description: 'Set byte order',\n      type: SettingType.DROPDOWN,\n      config: {\n        items: [\n          { value: 0, text: 'LE-Byte BE-Word' },\n          { value: 1, text: 'LE-Byte LE-Word' },\n          { value: 2, text: 'BE-Byte LE-Word' },\n          { value: 3, text: 'BE-Byte BE-Word' },\n        ],\n      },\n      value: 0,\n    });\n  }\n\n  onAdded() {\n    this.onInputUpdated();\n  }\n\n  onInputUpdated() {\n    const input = this.getInputData(0);\n    const dataEndian = this.settings['dataEndian'].value;\n    const dataType = this.settings['dataType'].value;\n    const out = ModbusByteOrder.writeValue(input, dataType, dataEndian);\n    this.setOutputData(0, JSON.stringify(out));\n    this.setOutputData(1, JSON.parse(JSON.stringify(out)).data);\n  }\n\n  onAfterSettingsChange() {\n    this.onInputUpdated();\n  }\n}\nContainer.registerNodeType('conversion/int-to-buffer', IntToFourByteArrayNode);\n","import { isNull } from '../../../utils/helper';\nimport { Container } from '../../container';\nimport { Node } from '../../node';\nimport { NODE_INFO } from '../../node-info';\nimport { NodeSetting, SettingType, Type } from '../../node-io';\n\nclass EventCounterNode extends Node {\n  constructor() {\n    super();\n\n    this.title = NODE_INFO.count[\"any-event-counter\"].title;\n    this.description = NODE_INFO.count[\"any-event-counter\"].description;\n\n    this.addInput('input');\n    this.addInput('reset', Type.BOOLEAN);\n    this.addOutput('count', Type.NUMBER);\n    this.addOutput('toggle', Type.NUMBER);\n    this.settings['null'] = NodeSetting.create({\n      description: 'Stop count if input is null',\n      value: false,\n      type: SettingType.BOOLEAN,\n    });\n    this.properties['count'] = 0;\n  }\n\n  onAdded(){\n    this.setOutputData(0, 0);\n    this.setOutputData(1, false);\n    this.onInputUpdated();\n  }\n\n  onInputUpdated() {\n    const inputUpdated = this.inputs[0].updated;\n    const inputData = this.inputs[0].data;\n    const reset = this.inputs[1].data\n    if (reset && reset == true) this.properties['count'] = 0; //reset count\n    if (this.settings['null'].value && this.isNull(inputData)) return\n     if (inputUpdated) {\n        this.properties['count']++;\n        this.setOutputData(1, !this.outputs[1].data); // toggle\n      }\n    if (this.properties['count'] !== inputData) {\n      this.setOutputData(0, this.properties['count']);\n      this.persistProperties(false, true);\n    }\n  }\n\n  isNull(message: any) {\n    return isNull(message)\n  }\n}\nContainer.registerNodeType('count/any-event-counter', EventCounterNode);\n","import { Container } from '../../container';\nimport { Node } from '../../node';\nimport { Type } from '../../node-io';\nimport { NODE_INFO } from '../../node-info';\n\nclass CounterNode extends Node {\n  lastUp:boolean;\n  lastDown:boolean;\n  lastReset:boolean;\n\n\n  constructor() {\n    super();\n\n    this.title = NODE_INFO.count.counter.title;\n    this.description = NODE_INFO.count.counter.description;\n\n    this.addInputWithSettings('set value', Type.NUMBER, 0, 'Set Value');\n    this.addInput('count up', Type.BOOLEAN);\n    this.addInput('count down', Type.BOOLEAN);\n    this.addInput('reset', Type.BOOLEAN);\n    this.addOutput('count', Type.NUMBER);\n    this.properties['pointVal'] = 0;\n  }\n\n  onCreated() {\n  }\n\n  onAdded() {\n    this.setOutputData(1, false);\n    this.setOutputData(2, false);\n    this.lastUp = false;\n    this.lastDown = false;\n    this.lastReset = false;\n    this.onInputUpdated();\n  }\n\n  onExecute(){\n    //this.onInputUpdated();\n  }\n\n  onInputUpdated() {\n    const old = this.outputs[0].data;\n    const up = this.getInputData(1) || false;\n    const down = this.getInputData(2) || false;\n    const reset = this.getInputData(3) || false;\n\n    if (this.inputs[1].updated && up && !this.lastUp) this.properties['pointVal']++;\n    this.lastUp = up;\n\n    if (this.inputs[2].updated && down && !this.lastDown) this.properties['pointVal']--;\n    this.lastDown = down;\n\n    const setValue = this.getInputData(0);\n\n    if (this.inputs[3].updated && reset && !this.lastReset) this.properties['pointVal'] = setValue;\n    this.lastReset = reset;\n\n    if (this.properties['pointVal'] !== old) {\n      this.setOutputData(0, this.properties['pointVal']);\n      this.properties['pointVal'] = this.properties['pointVal'];\n      this.persistProperties(false, true);\n    }\n\n    this.setOutputData(0, this.outputs[0].data);\n  }\n}\nContainer.registerNodeType('count/counter', CounterNode);\n","import { Container } from '../../container';\nimport { Node } from '../../node';\nimport { NODE_INFO } from '../../node-info';\nimport { NodeSetting, SettingType, Type } from '../../node-io';\n\nclass TriggeredRamp extends Node {\n  countUp: boolean;\n  lastTrigger: boolean;\n  lastReset: boolean;\n  currentVal: number;\n\n  constructor() {\n    super();\n    this.title = NODE_INFO.count[\"triggered-ramp\"].title;\n    this.description = NODE_INFO.count[\"triggered-ramp\"].description;\n    this.addInput('trigger', Type.BOOLEAN);\n    this.addInputWithSettings('min', Type.NUMBER, 0, 'min', false);\n    this.addInputWithSettings('max', Type.NUMBER, 10, 'max', false);\n    this.addInputWithSettings('step', Type.NUMBER, 1, 'Step Size', false);\n    this.addInput('reset', Type.BOOLEAN);\n    this.addOutput('output', Type.NUMBER);\n    this.settings['countOnFalse'] = NodeSetting.create({\n      description: 'Also count on true->false?',\n      value: false,\n      type: SettingType.BOOLEAN,\n    });\n\n    this.settings['rampUpOnly'] = NodeSetting.create({\n      description: 'Ramp Up Only',\n      value: false,\n      type: SettingType.BOOLEAN,\n    });\n  }\n\n  onAdded() {\n    this.countUp = false;\n    this.lastTrigger = false;\n    this.lastReset = false;\n    this.currentVal = 0;\n    this.onInputUpdated();\n  }\n\n  onInputUpdated() {\n    const min = this.getInputData(1);\n    const max = this.getInputData(2);\n\n    this.currentVal = Number(this.currentVal);\n    if (this.currentVal < min) this.currentVal = min;\n    else if (this.currentVal > max) this.currentVal = max;\n\n    const reset = this.getInputData(4);\n    if (reset && !this.lastReset) this.currentVal = min;\n    this.lastReset = reset;\n\n    const trigger = this.getInputData(0);\n    if (trigger != this.lastTrigger) {\n      if (this.settings['countOnFalse'].value || trigger) {\n        const step = this.getInputData(3);\n        if (this.countUp && this.currentVal + step > max) {\n          if (this.settings['rampUpOnly'].value) {\n            this.countUp = true;\n            this.currentVal = min - step;\n          } else this.countUp = false;\n        } else if (!this.countUp && this.currentVal - step < min) this.countUp = true;\n        if (this.countUp) this.currentVal += step;\n        else this.currentVal -= step;\n      }\n      this.lastTrigger = trigger;\n    }\n\n    this.setOutputData(0, this.currentVal, true); //out\n  }\n\n  onAfterSettingsChange() {\n    this.onInputUpdated();\n  }\n}\nContainer.registerNodeType('count/triggered-ramp', TriggeredRamp);\n","import { Container } from '../../container';\nimport { Node } from '../../node';\nimport { NODE_INFO } from '../../node-info';\nimport { NodeSetting, SettingType, Type } from '../../node-io';\nimport TimeUtils from '../../utils/time-utils';\n\nclass IntervalRampNode extends Node {\n  countUp: boolean;\n  lastInterval: number;\n  lastReset: boolean;\n  lastEnable: boolean;\n  currentVal: number;\n  timeoutFunc;\n\n  constructor() {\n    super();\n    this.title = NODE_INFO.count[\"interval-ramp\"].title;\n    this.description = NODE_INFO.count[\"interval-ramp\"].description;\n    this.addInputWithSettings('enable', Type.BOOLEAN, 0, 'Enable', false);\n    this.addInputWithSettings('min', Type.NUMBER, 0, 'min', false);\n    this.addInputWithSettings('max', Type.NUMBER, 10, 'max', false);\n    this.addInputWithSettings('step', Type.NUMBER, 1, 'Step Size', false);\n    this.addInputWithSettings('interval', Type.NUMBER, 1, 'Count Interval', false);\n    this.addInput('reset', Type.BOOLEAN);\n    this.addOutput('output', Type.NUMBER);\n    this.settings['time'] = NodeSetting.create({\n      description: 'Units',\n      type: SettingType.DROPDOWN,\n      config: {\n        items: [\n          { value: 'milliseconds', text: 'Milliseconds' },\n          { value: 'seconds', text: 'Seconds' },\n          { value: 'minutes', text: 'Minutes' },\n          { value: 'hours', text: 'Hours' },\n        ],\n      },\n      value: 'seconds',\n    });\n    this.setSettingsConfig({\n      groups: [{ interval: { weight: 2 }, time: {} }],\n    });\n\n    this.settings['rampUpOnly'] = NodeSetting.create({\n      description: 'Ramp Up Only',\n      value: false,\n      type: SettingType.BOOLEAN,\n    });\n\n  }\n\n  onAdded() {\n    this.countUp = true;\n    this.lastInterval = 1000;\n    this.lastReset = false;\n    this.lastEnable = true;\n    this.currentVal = 0;\n    this.timeoutFunc = setInterval(() => {\n      const min = this.getInputData(1);\n      const max = this.getInputData(2);\n      this.count(min, max);\n      this.setOutputData(0, this.currentVal, true);\n    }, this.lastInterval);\n    this.inputs[4]['name'] = `[interval] (${this.settings['time'].value})`;\n    this.onInputUpdated();\n  }\n\n  onInputUpdated() {\n    const min = this.getInputData(1);\n    const max = this.getInputData(2);\n\n    this.currentVal = Number(this.currentVal);\n    if (this.currentVal < min) this.currentVal = min;\n    else if (this.currentVal > max) this.currentVal = max;\n\n    const reset = Boolean(this.getInputData(5));\n    if (reset && !this.lastReset) this.currentVal = min;\n    this.countUp = true;\n    this.lastReset = reset;\n\n    let interval = this.getInputData(4);\n    interval = TimeUtils.timeConvert(interval, this.settings['time'].value);\n    const enable = this.getInputData(0);\n    if (enable && !this.lastEnable) {\n      this.timeoutFunc = setInterval(() => {\n        this.count(min, max);\n        this.setOutputData(0, this.currentVal, true);\n      }, interval);\n    } else if (!enable && this.lastEnable) {\n      clearInterval(this.timeoutFunc);\n      this.setOutputData(0, null);\n    } else if (enable && this.lastEnable && interval !== this.lastInterval) {\n      clearInterval(this.timeoutFunc);\n      this.timeoutFunc = setInterval(() => {\n        this.count(min, max);\n        this.setOutputData(0, this.currentVal, true);\n      }, interval);\n    }\n    this.lastInterval = interval;\n    this.lastEnable = enable;\n  }\n\n  count(min, max) {\n    const step = this.getInputData(3);\n    if (this.countUp && this.currentVal + step > max) {\n      if (this.settings['rampUpOnly'].value) {\n        this.countUp = true;\n        this.currentVal = min - step;\n      } else this.countUp = false;\n    } else if (!this.countUp && this.currentVal - step < min) this.countUp = true;\n    if (this.countUp) this.currentVal += step;\n    else this.currentVal -= step;\n  }\n\n  onAfterSettingsChange() {\n    this.inputs[4]['name'] = `[interval] (${this.settings['time'].value})`;\n    this.onInputUpdated();\n  }\n}\nContainer.registerNodeType('count/interval-ramp', IntervalRampNode);\n","/**\n * Created by Derwish (derwish.pro@gmail.com) on 07.03.2017.\n * License: http://www.gnu.org/licenses/gpl-3.0.txt\n */\n\nimport { Container } from '../../container';\nimport { Node } from '../../node';\nimport { NodeSetting, SettingType, Type } from '../../node-io';\nimport TimeUtils from '../../utils/time-utils';\nimport { NODE_INFO } from '../../node-info';\n\nclass WaveformNode extends Node {\n  lastTime: number;\n  startTime: number;\n  lastReset: boolean;\n  constructor() {\n    super();\n    this.title = NODE_INFO.count.waveform.title;\n    this.description = NODE_INFO.count.waveform.description;\n    this.addInputWithSettings('enable', Type.BOOLEAN, 0, 'min', false);\n    this.settings['signalType'] = NodeSetting.create({\n      description: 'Signal Type',\n      type: SettingType.DROPDOWN,\n      config: {\n        items: [\n          { value: 'Ramp', text: 'Ramp' },\n          { value: 'Sine', text: 'Sine' },\n          { value: 'Square', text: 'Square' },\n          { value: 'Triangle', text: 'Triangle' },\n          { value: 'Sawtooth', text: 'Sawtooth' },\n        ],\n      },\n      value: 'Ramp',\n    });\n    this.addInputWithSettings('interval', Type.NUMBER, 1, 'Interval', false);\n    this.addInputWithSettings('period', Type.NUMBER, 10, 'Period', false);\n    this.addInputWithSettings('amplitude', Type.NUMBER, 1, 'Amplitude', false);\n    this.addInput('reset', Type.BOOLEAN);\n    this.addOutput('output', Type.BOOLEAN);\n    this.settings['intervalTime'] = NodeSetting.create({\n      description: 'Units',\n      type: SettingType.DROPDOWN,\n      config: {\n        items: [\n          { value: 'milliseconds', text: 'Milliseconds' },\n          { value: 'seconds', text: 'Seconds' },\n          { value: 'minutes', text: 'Minutes' },\n          { value: 'hours', text: 'Hours' },\n        ],\n      },\n      value: 'seconds',\n    });\n    this.settings['periodTime'] = NodeSetting.create({\n      description: 'Units',\n      type: SettingType.DROPDOWN,\n      config: {\n        items: [\n          { value: 'milliseconds', text: 'Milliseconds' },\n          { value: 'seconds', text: 'Seconds' },\n          { value: 'minutes', text: 'Minutes' },\n          { value: 'hours', text: 'Hours' },\n        ],\n      },\n      value: 'seconds',\n    });\n    this.setSettingsConfig({\n      groups: [\n        { interval: { weight: 2 }, intervalTime: {} },\n        { period: { weight: 2 }, periodTime: {} },\n        { amplitude: {} },\n      ],\n    });\n    this.settings['enable'] = NodeSetting.create({ description: 'Enable', value: true, type: SettingType.BOOLEAN });\n    this.settings['invert'] = NodeSetting.create({\n      description: 'Invert Output',\n      value: false,\n      type: SettingType.BOOLEAN,\n    });\n  }\n\n  onAdded() {\n    this.updateTitle();\n    this.inputs[1]['name'] = `[interval] (${this.settings['intervalTime'].value})`;\n    this.inputs[2]['name'] = `[period] (${this.settings['periodTime'].value})`;\n    this.lastReset = false;\n    this.startTime = Date.now();\n    this.onInputUpdated();\n  }\n\n  onExecute() {\n    if (!this.getInputData(0)) return;\n    let interval = this.getInputData(1);\n    interval = TimeUtils.timeConvert(interval, this.settings['intervalTime'].value);\n    const now = Date.now();\n    if (!this.lastTime) {\n      this.lastTime = now;\n    }\n    if (now - this.lastTime >= interval) {\n      this.recalculate();\n    }\n  }\n  onInputUpdated() {\n    const reset = this.getInputData(4);\n    if (reset && !this.lastReset) {\n      this.setOutputData(0, 0, false);\n      this.startTime = Date.now();\n    }\n    this.lastReset = reset;\n\n    if (!this.getInputData(0)) {\n      return;\n    }\n    this.recalculate();\n  }\n\n  recalculate() {\n    const now = Date.now();\n    const signalType = this.settings['signalType'].value || 'Ramp';\n    let period = this.getInputData(2);\n    period = TimeUtils.timeConvert(period, this.settings['periodTime'].value) / 1000;\n    const amplitude = this.getInputData(3);\n    const invert = this.settings['invert'].value ? -1 : 1;\n    let time = (now - this.startTime) / 1000;\n    let t = (time % period) / period;\n    let value = 0;\n    switch (signalType) {\n      case 'Sine':\n        value = Math.sin(2 * Math.PI * t);\n        break;\n      case 'Square':\n        value = Math.sign(Math.sin(2 * Math.PI * t));\n        if (value === -1) {\n          value = 0;\n        }\n        break;\n      case 'Triangle':\n        value = 1 - 4 * Math.abs(Math.round(t - 0.25) - (t - 0.25));\n        break;\n      case 'Sawtooth':\n        value = t;\n        break;\n      case 'Ramp':\n        value = 2 * Math.abs(Math.round(t) - t);\n        break;\n    }\n    value = invert * amplitude * value;\n    this.lastTime = now;\n    this.setOutputData(0, value);\n  }\n\n  onAfterSettingsChange() {\n    this.updateTitle();\n    this.inputs[1]['name'] = `[interval] (${this.settings['intervalTime'].value})`;\n    this.inputs[2]['name'] = `[period] (${this.settings['periodTime'].value})`;\n  }\n\n  updateTitle() {\n    if (!this.settings['signalType'].value) return;\n    const signalType = this.settings['signalType'].value;\n    this.title = 'Waveform' + ' ' + '(' + signalType + ')';\n  }\n}\nContainer.registerNodeType('count/waveform', WaveformNode);\n","import { Container } from '../../container';\nimport { Node } from '../../node';\nimport { NODE_INFO } from '../../node-info';\nimport { Side } from '../../node-interface';\nimport { Type } from '../../node-io';\n\nlet moment = require('moment-timezone');\n\n//https://github.com/travishorn/csval\n//https://github.com/C2FO/fast-csv\n\nclass CSVMergeRowsNode extends Node {\n  obj = [];\n  constructor() {\n    super();\n    this.title = NODE_INFO.csv[\"csv-merge-rows\"].title;\n    this.description = NODE_INFO.csv[\"csv-merge-rows\"].description;\n    this.addInput('original', Type.STRING);\n    this.addInput('merge', Type.STRING);\n    this.addOutput('output', Type.STRING);\n  }\n\n  onAdded() {\n    this.setOutputData(0, '');\n    this.onInputUpdated();\n  }\n\n  onInputUpdated() {\n    if (this.side !== Side.server) return; // only execute on server\n    if (!this.getInputData(0) || !this.getInputData(1)) return;\n    let outputCSV = this.getInputData(0).slice(0, this.getInputData(0).length - 1);\n    let addCSV = this.getInputData(1);\n    addCSV = addCSV.slice(addCSV.indexOf('\\n'), addCSV.length - 1);\n    outputCSV += addCSV;\n\n    this.setOutputData(0, outputCSV);\n  }\n}\nContainer.registerNodeType('csv/csv-merge-rows', CSVMergeRowsNode);\n","import { Container } from '../../container';\nimport { Node } from '../../node';\nimport { NODE_INFO } from '../../node-info';\nimport { Side } from '../../node-interface';\nimport { Type } from '../../node-io';\n\nlet moment = require('moment-timezone');\n\n//https://github.com/travishorn/csval\n//https://github.com/C2FO/fast-csv\n\nclass CSVMergeColumnsNode extends Node {\n  obj = [];\n  constructor() {\n    super();\n    this.title = NODE_INFO.csv[\"csv-merge-columns\"].title;\n    this.description = NODE_INFO.csv[\"csv-merge-columns\"].description;\n    this.addInput('original', Type.STRING);\n    this.addInput('merge', Type.STRING);\n    this.addOutput('output', Type.STRING);\n  }\n\n  onAdded() {\n    this.setOutputData(0, '');\n    this.onInputUpdated();\n  }\n\n  onInputUpdated() {\n    if (this.side !== Side.server) return; // only execute on server\n    if (!this.getInputData(0) || !this.getInputData(1)) return;\n\n    let originalColumnsArray = this.getInputData(0).split('\\n');\n    let mergeColumnsArray = this.getInputData(1).split('\\n');\n    let outputCSV = '';\n    const originalColumnsCount = originalColumnsArray[0].split(',').length;\n    const mergeColumnsCount = mergeColumnsArray[0].split(',').length;\n\n    var i = 0;\n    for (i = 0; i < Math.min(mergeColumnsArray.length, originalColumnsArray.length) - 1; i++) {\n      outputCSV += originalColumnsArray[i] + ', ' + mergeColumnsArray[i] + '\\n';\n    }\n    //if(i < originalColumnsArray.length){\n    var x = 0;\n    while (i < originalColumnsArray.length - 1) {\n      outputCSV += originalColumnsArray[i];\n      x = originalColumnsCount;\n      while (x < originalColumnsCount + mergeColumnsCount) {\n        outputCSV += ', ';\n        x++;\n      }\n      outputCSV += '\\n';\n      i++;\n    }\n    while (i < mergeColumnsArray.length - 1) {\n      x = mergeColumnsCount;\n      while (x < originalColumnsCount + mergeColumnsCount) {\n        outputCSV += ', ';\n        x++;\n      }\n      outputCSV += mergeColumnsArray[i];\n      outputCSV += '\\n';\n      i++;\n    }\n    this.setOutputData(0, outputCSV);\n  }\n}\nContainer.registerNodeType('csv/csv-merge-columns', CSVMergeColumnsNode);\n","import axios from 'axios';\nimport { Container } from '../../container';\nimport { Node } from '../../node';\nimport { NODE_INFO } from '../../node-info';\nimport { Side } from '../../node-interface';\nimport { NodeSetting, SettingType, Type } from '../../node-io';\nimport SystemUtils from '../system/system-utils';\nimport { bsaClientConfig } from './bsa-client-config';\n\nclass BSACumulocityDeviceNode extends Node {\n  constructor() {\n    super();\n    this.title = NODE_INFO.cumulocity[\"cumulocity-device\"].title;\n    this.description =  NODE_INFO.cumulocity[\"cumulocity-device\"].description;\n    this.addInput('createDevice', Type.BOOLEAN);\n    this.addOutput('id', Type.NUMBER);\n    this.addOutput('message', Type.STRING);\n\n    this.settings['CumulocityDeviceName'] = NodeSetting.create({\n      description: 'Cumulocity Device Name',\n      value: '',\n      type: SettingType.STRING,\n    });\n  }\n\n  async onAdded() {\n    await this.onAfterSettingsChange();\n  }\n\n  async onInputUpdated() {\n    if (this.side !== Side.server) return;\n    if (this.getInputData(0) && this.inputs[0].updated) {\n      if (this.outputs[0].data && this.outputs[0].data.length == 0) await this.createDevice();\n      await this.checkDeviceExists();\n    }\n  }\n\n  async onAfterSettingsChange() {\n    if (this.side !== Side.server) return;\n    await this.checkDeviceExists();\n  }\n\n  getDeviceName(): string {\n    let deviceName = this.settings['CumulocityDeviceName'].value || 'unknownDevice';\n    if (!deviceName.startsWith('c8y_')) deviceName = 'c8y_' + deviceName;\n    return deviceName;\n  }\n\n  async checkDeviceExists() {\n    let deviceName = this.getDeviceName();\n    let cfg: any = bsaClientConfig('device');\n    cfg = {\n      ...cfg,\n      method: 'GET',\n      url: `${cfg.url}?query=name+eq+${deviceName}`,\n    };\n    try {\n      const response = await axios(cfg);\n      const ids = [];\n      response.data.managedObjects.forEach(device => {\n        ids.push(Number(device.id));\n      });\n      this.setOutputData(0, ids);\n      this.setOutputData(1, null);\n    } catch (error) {\n      this.setOutputData(1, String(error));\n    }\n  }\n\n  async createDevice() {\n    let clientIdFromPlat;\n    let deviceIdFromPlat;\n    try {\n      clientIdFromPlat = await SystemUtils.getClientIdDb();\n    } catch (e) {\n      clientIdFromPlat = 'unknownClientID';\n    }\n    try {\n      deviceIdFromPlat = await SystemUtils.getDeviceIdDb();\n    } catch (e) {\n      deviceIdFromPlat = 'unknownDeviceID';\n    }\n    let deviceName = this.getDeviceName();\n    let cfg: any = bsaClientConfig('device');\n    cfg = {\n      ...cfg,\n      method: 'POST',\n      data: {\n        name: deviceName,\n        type: 'c8y_nube',\n        deviceid: deviceIdFromPlat,\n        clientid: clientIdFromPlat,\n        c8y_IsDevice: {},\n      },\n    };\n    try {\n      await axios(cfg);\n    } catch (error) {\n      this.setOutputData(1, String(error));\n    }\n  }\n}\n\nContainer.registerNodeType('cumulocity/cumulocity-device', BSACumulocityDeviceNode);\n","import axios from 'axios';\nimport * as moment from 'moment-timezone';\nimport { Container } from '../../container';\nimport { Node } from '../../node';\nimport { Side } from '../../node-interface';\nimport { NodeSetting, SettingType, Type } from '../../node-io';\nimport Utils from '../../utils';\nimport TimeUtils, { TIME_TYPE } from '../../utils/time-utils';\nimport { bsaClientConfig } from './bsa-client-config';\nimport { NODE_INFO } from '../../node-info';\n\nenum HistoryMode {\n  COV = 0,\n  PERIODIC = 1,\n  TRIGGER_ONLY = 2,\n}\n\nclass BSACumulocityNode extends Node {\n  // dynamically calculate position when starting\n  histTriggerInput: number;\n  clearStoredHisInput: number;\n  histErrorOutput: number;\n  storedHistCountOutput: number;\n  lastHistExportOutput: number;\n  // configurable parameters from each extended node for extracting values to store on DB\n  valueInput: number = 0;\n  // extra parameter for nodes\n  interval: number = -1;\n  timeoutFunc: any;\n\n  constructor() {\n    super();\n    this.title = NODE_INFO.cumulocity[\"cumulocity-point\"].title;\n    this.description =  NODE_INFO.cumulocity[\"cumulocity-point\"].description;\n    this.addInput('input', Type.ANY);\n  }\n\n  addHistoryConfiguration() {\n    this.addInput('histTrigger', Type.BOOLEAN);\n    this.addInput('clearStoredHis', Type.BOOLEAN);\n    this.addOutput('histError', Type.ANY);\n    this.addOutput('storedHistCount', Type.NUMBER);\n    this.addOutput('lastHistExport', Type.STRING);\n\n    /**\n     * History settings\n     */\n    this.settings['enable'] = NodeSetting.create({\n      description: 'History Enable',\n      value: false,\n      type: SettingType.BOOLEAN,\n    });\n\n    this.settings['CumulocityDeviceID'] = NodeSetting.create({\n      description: 'Cumulocity Device ID (Number)',\n      value: '',\n      type: SettingType.STRING,\n    });\n\n    this.settings['CumulocityPointName'] = NodeSetting.create({\n      description: 'Measurement Name',\n      value: '',\n      type: SettingType.STRING,\n    });\n\n    this.settings['CumulocityPointType'] = NodeSetting.create({\n      description: 'Measurement Type',\n      value: '',\n      type: SettingType.STRING,\n    });\n\n    this.settings['CumulocitySeries'] = NodeSetting.create({\n      description: 'Series Name',\n      value: '',\n      type: SettingType.STRING,\n    });\n\n    this.settings['historyMode'] = NodeSetting.create({\n      description: 'History Logging Mode',\n      type: SettingType.DROPDOWN,\n      config: {\n        items: [\n          { value: HistoryMode.COV, text: 'Change Of Value (COV)' },\n          { value: HistoryMode.PERIODIC, text: 'Periodic' },\n          { value: HistoryMode.TRIGGER_ONLY, text: 'Trigger Only' },\n        ],\n      },\n      value: HistoryMode.COV,\n    });\n\n    this.settings['dataType'] = NodeSetting.create({\n      description: 'Data type for storing',\n      type: SettingType.DROPDOWN,\n      config: {\n        items: [\n          { value: Type.NUMBER, text: 'Number' },\n          { value: Type.BOOLEAN, text: 'Boolean' },\n          { value: Type.STRING, text: 'String' },\n        ],\n      },\n      value: Type.NUMBER,\n    });\n    this.settings['threshold'] = NodeSetting.create({\n      description: 'COV Threshold',\n      value: 0,\n      type: SettingType.NUMBER,\n    });\n\n    this.settings['period'] = NodeSetting.create({\n      description: 'Logging Interval',\n      value: 15,\n      type: SettingType.NUMBER,\n    });\n    this.settings['periodUnits'] = NodeSetting.create({\n      description: 'Units',\n      type: SettingType.DROPDOWN,\n      config: {\n        items: [\n          { value: TIME_TYPE.MILLISECONDS, text: 'Milliseconds' },\n          { value: TIME_TYPE.SECONDS, text: 'Seconds' },\n          { value: TIME_TYPE.MINUTES, text: 'Minutes' },\n          { value: TIME_TYPE.HOURS, text: 'Hours' },\n        ],\n      },\n      value: TIME_TYPE.MINUTES,\n    });\n\n    this.settings['storage-limit'] = NodeSetting.create({\n      description: 'Local Storage Limit (Max 50)',\n      value: 25,\n      type: SettingType.NUMBER,\n    });\n    this.settings['minuteRoundValue'] = NodeSetting.create({\n      description: 'Round minutes up in increments of',\n      value: 0,\n      type: SettingType.NUMBER,\n    });\n    this.settings['decimals'] = NodeSetting.create({\n      description: 'Decimal Places (Limit 5)',\n      value: 3,\n      type: SettingType.NUMBER,\n    });\n    this.settings['timeAsString'] = NodeSetting.create({\n      description: 'Display Timestamp as',\n      type: SettingType.DROPDOWN,\n      config: {\n        items: [\n          { value: false, text: 'Numeric' },\n          { value: true, text: 'String' },\n        ],\n      },\n      value: true,\n    });\n\n    this.settings['units'] = NodeSetting.create({\n      description: 'Units',\n      value: '',\n      type: SettingType.STRING,\n    });\n\n    this.properties['obj'] = [];\n  }\n\n  setup() {\n    this.addHistoryConfiguration();\n  }\n\n  init() {\n    this.assignInputsOutputs();\n  }\n\n  onAdded() {\n    this.assignInputsOutputs();\n    this.resetOutputs();\n    this.doPeriodicHistoryFunctions();\n  }\n\n  async onInputUpdated() {\n    if (this.getInputData(this.clearStoredHisInput)) {\n      this.properties['obj'] = [];\n      this.updateHistoryCountOutput();\n    }\n    await this.doNonPeriodicHistoryFunctions();\n  }\n\n  async onAfterSettingsChange() {\n    await this.doNonPeriodicHistoryFunctions();\n    this.doPeriodicHistoryFunctions();\n  }\n\n  onRemoved() {\n    clearInterval(this.timeoutFunc);\n  }\n\n  assignInputsOutputs() {\n    for (let input in this.inputs) {\n      if (this.inputs.hasOwnProperty(input)) {\n        if (this.inputs[input].name == 'histTrigger') this.histTriggerInput = Number(input);\n        if (this.inputs[input].name == 'clearStoredHis') this.clearStoredHisInput = Number(input);\n      }\n    }\n\n    for (let output in this.outputs) {\n      if (this.outputs.hasOwnProperty(output)) {\n        if (this.outputs[output].name == 'histError') this.histErrorOutput = Number(output);\n        else if (this.outputs[output].name == 'storedHistCount') this.storedHistCountOutput = Number(output);\n        else if (this.outputs[output].name == 'lastHistExport') this.lastHistExportOutput = Number(output);\n      }\n    }\n  }\n\n  resetOutputs() {\n    this.updateHistoryCountOutput();\n  }\n\n  async doNonPeriodicHistoryFunctions() {\n    if (this.side !== Side.server) return;\n    if (!this.settings['enable'].value) return;\n    const input = this.getInputData(this.valueInput);\n\n    if (this.checkTriggered()) {\n      await this.storeLogEntry(input);\n    } else if (this.checkCOV(input)) {\n      await this.storeLogEntry(input);\n    }\n\n    if (this.properties['obj'].length > 0) await this.trySendStoredData();\n  }\n\n  async trySendStoredData() {\n    let decimals = this.settings['decimals'].value;\n    decimals = Utils.clamp(decimals, 0, 5);\n\n    const multiPointPost = [];\n\n    let measurementName = this.settings['CumulocityPointName'].value || 'c8y_unknownPoint';\n    if (!measurementName.startsWith('c8y_')) measurementName = 'c8y_' + measurementName;\n    let measurementType = this.settings['CumulocityPointType'].value || 'c8y_unknownType';\n    if (!measurementType.startsWith('c8y_')) measurementType = 'c8y_' + measurementType;\n    const seriesName = this.settings['CumulocitySeries'].value || 'unknownSeries';\n\n    this.properties['obj'].forEach(log => {\n      const dataType = this.settings['dataType'].value;\n      log.payload = this.convertInput(log.payload, dataType, decimals);\n      multiPointPost.push({\n        source: {\n          id: this.settings['CumulocityDeviceID'].value,\n        },\n        time: log.timestamp,\n        type: measurementType,\n        [measurementName]: {\n          [seriesName]: {\n            value: log.payload,\n            unit: String(this.settings['units'].value) || 'undefined',\n          },\n        },\n      });\n    });\n    this.debugInfo(`SENDING DATA: ${JSON.stringify(multiPointPost)}`);\n    let cfg: any = bsaClientConfig('measurement');\n    cfg = { ...cfg, method: 'POST', data: { measurements: multiPointPost } };\n    try {\n      const response = await axios(cfg);\n      this.debugInfo(`RESPONSE FROM SERVER: ${JSON.stringify(response.data)}`);\n      this.properties['obj'] = [];\n      this.persistProperties(false, true);\n      this.setOutputData(this.histErrorOutput, '');\n      this.settings['timeAsString'].value\n        ? this.setOutputData(this.lastHistExportOutput, moment().format(), true)\n        : this.setOutputData(this.lastHistExportOutput, moment().valueOf(), true);\n      this.updateHistoryCountOutput();\n    } catch (e) {\n      this.debugErr(`ERROR: ${e}`);\n      this.setOutputData(this.histErrorOutput, e);\n    }\n  }\n\n  async storeLogEntry(input) {\n    if (input == null) return;\n    // cap the amount of data that can be stored\n    const storageLimit = Utils.clamp(this.settings['storage-limit'].value, 0, 50);\n    const minuteRound = Utils.clamp(this.settings['minuteRoundValue'].value, 0, 60);\n    const now = minuteRound ? TimeUtils.nearestFutureMinutes(minuteRound, moment()) : moment();\n    // object data\n    const msg = {\n      payload: input,\n      timestamp: now.toISOString(),\n    };\n    // build an object\n    this.properties['obj'].push(msg);\n    while (this.properties['obj'].length > storageLimit) {\n      this.properties['obj'].shift();\n    }\n    this.properties['lastHistoryValue'] = input;\n    this.persistProperties(false, true);\n    this.updateHistoryCountOutput();\n  }\n\n  checkTriggered() {\n    return (\n      this.settings['historyMode'].value === HistoryMode.TRIGGER_ONLY &&\n      this.getInputData(this.histTriggerInput) &&\n      this.inputs[this.histTriggerInput].updated\n    );\n  }\n\n  checkCOV(input) {\n    if (this.settings['historyMode'].value === HistoryMode.COV) {\n      const threshold = this.settings['threshold'].value;\n      if (!isNaN(input) && !isNaN(this.properties['lastHistoryValue'])) {\n        return Math.abs(Number(input) - Number(this.properties['lastHistoryValue'])) >= threshold;\n      } else {\n        return input !== this.properties['lastHistoryValue'];\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Sets values in periodic period when HistoryMode is `PERIODIC`\n   */\n  doPeriodicHistoryFunctions() {\n    if (this.side !== Side.server) return;\n    const enable = this.settings['enable'].value;\n    const isPeriodic = this.settings['historyMode'].value === HistoryMode.PERIODIC;\n    if (!enable || !isPeriodic) {\n      if (this.timeoutFunc) {\n        this.interval = -1;\n        clearInterval(this.timeoutFunc);\n        this.debugInfo('Clearing Periodic interval data insertion...');\n      }\n    }\n    if (enable && isPeriodic) {\n      const interval = TimeUtils.timeConvert(this.settings['period'].value, this.settings['periodUnits'].value);\n      if (this.interval !== interval) {\n        clearInterval(this.timeoutFunc);\n        this.timeoutFunc = setInterval(async () => {\n          const input = this.getInputData(this.valueInput);\n          await this.storeLogEntry(input);\n          if (this.properties['obj'].length > 0) await this.trySendStoredData();\n        }, interval);\n        this.interval = interval;\n        this.debugInfo(`Setting Periodic Period of: ${interval} ms`);\n      }\n    }\n  }\n\n  updateHistoryCountOutput() {\n    this.setOutputData(this.storedHistCountOutput, (this.properties['obj'] && this.properties['obj'].length) || 0);\n  }\n}\n\nContainer.registerNodeType('cumulocity/cumulocity-point', BSACumulocityNode);\n","import axios from 'axios';\nimport * as _ from 'lodash';\nimport { Container } from '../../container';\nimport { Node } from '../../node';\nimport { Side } from '../../node-interface';\nimport { NodeSetting, SettingType, Type } from '../../node-io';\nimport { bsaClientConfig } from './bsa-client-config';\nimport { NODE_INFO } from '../../node-info';\n\nlet moment = require('moment-timezone');\n\nenum ALARM_TYPE {\n  WARNING = 'WARNING',\n  MINOR = 'MINOR',\n  MAJOR = 'MAJOR',\n  CRITICAL = 'CRITICAL',\n}\n\nconst alarmConfig = {\n  items: [\n    { value: ALARM_TYPE.WARNING, text: ALARM_TYPE.WARNING },\n    { value: ALARM_TYPE.MINOR, text: ALARM_TYPE.MINOR },\n    { value: ALARM_TYPE.MAJOR, text: ALARM_TYPE.MAJOR },\n    { value: ALARM_TYPE.CRITICAL, text: ALARM_TYPE.CRITICAL },\n  ],\n};\n\nclass BSACumulocityAlarmNode extends Node {\n  constructor() {\n    super();\n    this.title = NODE_INFO.cumulocity[\"cumulocity-alarm\"].title;\n    this.description =  NODE_INFO.cumulocity[\"cumulocity-alarm\"].description;\n    this.addInput('alarmInput', Type.BOOLEAN);\n    this.addInputWithSettings('alarmText', Type.STRING, 'No Alarm Message Available', 'Enter Alarm Message');\n    this.addInputWithSettings('alarmClass', Type.DROPDOWN, ALARM_TYPE.WARNING, 'Alarm Class', false, alarmConfig);\n\n    this.addOutput('status', Type.BOOLEAN);\n    this.addOutput('error', Type.STRING);\n\n    this.settings['enable'] = NodeSetting.create({\n      description: 'Alarm Enable',\n      value: true,\n      type: SettingType.BOOLEAN,\n    });\n\n    this.settings['CumulocityDeviceID'] = NodeSetting.create({\n      description: 'Cumulocity Device ID (Number)',\n      value: '',\n      type: SettingType.STRING,\n    });\n\n    this.settings['CumulocityAlarmName'] = NodeSetting.create({\n      description: 'Alarm Name',\n      value: '',\n      type: SettingType.STRING,\n    });\n  }\n\n  onCreated() {\n    if (_.isEmpty(this.properties['alarmRegistry'])) this.properties['alarmRegistry'] = {};\n  }\n\n  async onInputUpdated() {\n    if (this.side !== Side.server) return;\n    if (!this.settings['enable'].value) return;\n    if (this.inputs[0].updated) await this.postAlarm(this.getInputData(0));\n  }\n\n  async onAfterSettingsChange() {\n    await this.onInputUpdated();\n  }\n\n  async postAlarm(alarmInput) {\n    let alarmName = this.settings['CumulocityAlarmName'].value || 'c8y_unknownAlarm';\n    if (!alarmName.startsWith('c8y_')) alarmName = 'c8y_' + alarmName;\n\n    let cfg: any = bsaClientConfig('alarm');\n    if (alarmInput) {\n      cfg = {\n        ...cfg,\n        method: 'POST',\n        data: {\n          source: {\n            id: this.settings['CumulocityDeviceID'].value,\n          },\n          text: this.getInputData(1),\n          time: moment().toISOString(),\n          type: alarmName,\n          status: 'ACTIVE',\n          severity: this.getInputData(2),\n        },\n      };\n      try {\n        const response = await axios(cfg);\n        this.setOutputData(0, true);\n        this.setOutputData(1, false);\n        this.properties['alarmRegistry'][alarmName] = response.data.id;\n        this.debugInfo(`ALARM_REGISTRY ${JSON.stringify(this.properties['alarmRegistry'])}`);\n      } catch (error) {\n        this.debugErr(error);\n        this.setOutputData(0, false);\n        this.setOutputData(1, error);\n      }\n    } else if (!alarmInput) {\n      const alarmID = this.properties['alarmRegistry'][alarmName];\n      if (!alarmID) return;\n      cfg = {\n        ...cfg,\n        method: 'PUT',\n        url: `alarm/alarms/${alarmID}`,\n        data: { status: 'CLEARED' },\n      };\n      try {\n        await axios(cfg);\n        this.setOutputData(0, false);\n        this.setOutputData(1, false);\n        delete this.properties['alarmRegistry'][alarmName];\n        this.debugInfo(`Cleared alarm ${alarmName}`);\n        this.debugInfo(`ALARM_REGISTRY ${JSON.stringify(this.properties['alarmRegistry'])}`);\n      } catch (error) {\n        this.debugErr(`ERROR ${error}`);\n        this.setOutputData(0, false);\n        this.setOutputData(1, error);\n      }\n    }\n    this.persistProperties(false, true);\n  }\n}\n\nContainer.registerNodeType('cumulocity/cumulocity-alarm', BSACumulocityAlarmNode);\n","import { Container } from '../../container';\nimport { BaseFunctionNode } from './base-function-node';\nimport { NODE_INFO } from '../../node-info';\n\nexport class FunctionNode extends BaseFunctionNode {\n\n  constructor() {\n    super(NODE_INFO[\"custom-function\"].function.title, NODE_INFO[\"custom-function\"].function.description);\n    this.mixinScriptSetting('// message is the received value\\nreturn message;');\n  }\n\n  protected getScriptInput() {\n    return this.getInputData(0);\n  }\n}\n\nContainer.registerNodeType('custom-function/function', FunctionNode);\n","import { NodeVM } from 'vm2';\nimport { isEmpty } from '../../../utils/helper';\nimport { Node } from '../../node';\nimport { Side } from '../../node-interface';\nimport { NodeSetting, SettingType } from '../../node-io';\n\nexport abstract class BaseFunctionNode extends Node {\n\n  protected constructor(title: string, description: string) {\n    super();\n    this.title = title;\n    this.description = description;\n\n    this.addInput('message');\n    this.addOutput('output');\n    this.addOutput('error');\n  }\n\n  onCreated() {\n  }\n\n  onAdded() {\n  }\n\n  onInputUpdated() {\n    try {\n      this.executeConfiguredScript(this.getScriptInput())\n          .then(result => this.emitResult(result))\n          .catch(e => this.emitError(e));\n    } catch (e) {\n      this.emitError(e);\n    }\n  }\n\n  onAfterSettingsChange() {\n    this.onInputUpdated();\n  }\n\n  protected abstract getScriptInput();\n\n  protected executeConfiguredScript(...variables): Promise<any> {\n    const code = this.settings['script'].value;\n    if (this.side !== Side.server || isEmpty(code)) return;\n    const vm = new NodeVM({ timeout: 1000, sandbox: {} });\n    let func = vm.run(`module.exports = function(message, ...args) {\\n${code}\\n};`);\n    return Promise.resolve(func(...variables));\n  }\n\n  protected emitResult(result: any) {\n    this.setOutputData(0, result);\n    this.setOutputData(1, null); // reset error\n  }\n\n  protected emitError(error: Error) {\n    this.setOutputData(0, null); // reset result\n    this.debugErr(`Error when executing function node ${error.stack}`);\n    this.setOutputData(1, error);\n  }\n\n  protected mixinScriptSetting(defaultScript: string) {\n    this.settings['script'] = NodeSetting.create({ description: 'Function Code', value: defaultScript, type: SettingType.CODE_AREA });\n  }\n}\n","module.exports = require(\"vm2\");","import { Container } from '../../container';\nimport { Node } from '../../node';\nimport UuidUtils from '../../utils/uuid-utils';\nimport { NODE_INFO } from '../../node-info';\n\nclass UuidNode extends Node {\n  constructor() {\n    super();\n    this.title = NODE_INFO[\"custom-function\"].uuid.title;\n    this.description =  NODE_INFO[\"custom-function\"].uuid.description;\n    this.addInput('trigger');\n    this.addOutput('uuid-out-8');\n    this.addOutput('uuid-out-12');\n    this.addOutput('uuid-out-28');\n  }\n\n  onInputUpdated() {\n    const out8 = UuidUtils.create8DigId();\n    const out12 = UuidUtils.create12DigId();\n    const out28 = UuidUtils.createUUID();\n    this.setOutputData(0, out8);\n    this.setOutputData(1, out12);\n    this.setOutputData(2, out28);\n\n  }\n\n  onAfterSettingsChange() {\n    this.onInputUpdated()\n  }\n\n}\n\nContainer.registerNodeType('custom-function/uuid', UuidNode);\n","/**\n * Created by Derwish (derwish.pro@gmail.com) on 25.02.2017.\n * License: http://www.gnu.org/licenses/gpl-3.0.txt\n */\n\nimport { Container } from '../../container';\nimport { NODE_INFO } from '../../node-info';\nimport Utils from '../../utils';\nimport { UiNode } from './ui-node';\n\nexport class UiLabelNode extends UiNode {\n  constructor(container?: Container, id?: number, properties?: any) {\n    super('Label', 'UiLabelNode', properties);\n    this.title = NODE_INFO.dashboard.label.title;\n    this.description = NODE_INFO.dashboard.label.description;\n    this.addInput('input');\n    this.UPDATE_INPUTS_INTERVAL = 100;\n  }\n\n  onInputUpdated() {\n    const state = Utils.formatValue(this.getInputData(0));\n    this.setState(state);\n    this.isRecentlyActive = true;\n  }\n}\n\nContainer.registerNodeType('dashboard/label', UiLabelNode);\n","/**\n * Created by Derwish (derwish.pro@gmail.com) on 26.02.2017.\n * License: http://www.gnu.org/licenses/gpl-3.0.txt\n */\n\nimport { Container } from '../../container';\nimport { NODE_INFO } from '../../node-info';\nimport { Side } from '../../node-interface';\nimport { NodeSetting, SettingType, Type } from '../../node-io';\nimport { UiNode } from './ui-node';\n\nexport class UiButtonNode extends UiNode {\n  interval = null;\n\n  constructor(container?: Container, id?: number, properties?: any) {\n    super('Button', 'UiButtonNode', properties);\n    this.title = NODE_INFO.dashboard.button.title;\n    this.description = NODE_INFO.dashboard.button.description;\n    this.addOutput('output', Type.BOOLEAN);\n    this.settings['button-text'] = NodeSetting.create({\n      description: 'Button Text',\n      value: 'ON',\n      type: SettingType.STRING,\n    });\n    this.setState({ buttonText: 'ON' });\n  }\n\n  onAfterSettingsChange() {\n    if (this.side !== Side.server) return;\n  }\n\n  onRemoved() {\n    super.onRemoved();\n  }\n\n  onGetMessageToServerSide() {\n    this.setOutputData(0, true);\n    this.sendIOValuesToEditor();\n  }\n}\n\nContainer.registerNodeType('dashboard/button', UiButtonNode);\n","/**\n * Created by Derwish (derwish.pro@gmail.com) on 02.03.2017.\n * License: http://www.gnu.org/licenses/gpl-3.0.txt\n */\n\nimport { Container } from '../../container';\nimport { Side } from '../../node-interface';\nimport { Type } from '../../node-io';\nimport { UiNode } from './ui-node';\nimport { NODE_INFO } from '../../node-info';\n\nexport class UiSwitchNode extends UiNode {\n  constructor(container?: Container, id?: number, properties?: any) {\n    super('Switch', 'UiSwitchNode', properties);\n    this.title = NODE_INFO.dashboard.switch.title;\n    this.description = NODE_INFO.dashboard.switch.description;\n    this.setState(false);\n\n    this.addInput('input', Type.BOOLEAN);\n    this.addOutput('output', Type.BOOLEAN);\n  }\n\n  onAdded() {\n    super.onAdded();\n    if (this.side == Side.server) this.setOutputData(0, this.getState());\n  }\n\n  onGetMessageToServerSide(data) {\n    this.setValue(data.state);\n  }\n\n  onInputUpdated() {\n    let val = this.getInputData(0);\n    this.setValue(val);\n  }\n\n  setValue(val) {\n    this.setOutputData(0, val);\n    this.sendIOValuesToEditor();\n    this.isRecentlyActive = true;\n\n    if (this.getState() != val)\n      //prevent loop sending\n      this.setState(val);\n  }\n}\n\nContainer.registerNodeType('dashboard/switch', UiSwitchNode);\n","/**\n * Created by Derwish (derwish.pro@gmail.com) on 02.03.2017.\n * License: http://www.gnu.org/licenses/gpl-3.0.txt\n */\n\nimport { Container } from '../../container';\nimport { NODE_INFO } from '../../node-info';\nimport { Type } from '../../node-io';\nimport { UiNode } from './ui-node';\n\nexport class UiProgressNode extends UiNode {\n  constructor(container?: Container, id?: number, properties?: any) {\n    super('Progress', 'UiProgressNode', properties);\n    this.title = NODE_INFO.dashboard.progress.title;\n    this.description = NODE_INFO.dashboard.progress.description;\n    this.addInput('input', Type.NUMBER);\n    this.UPDATE_INPUTS_INTERVAL = 100;\n    this.setState(0);\n  }\n\n  onInputUpdated() {\n    let val = this.getInputData(0);\n\n    if (val > 100) val = 100;\n    if (val < 0) val = 0;\n\n    this.setState(val);\n    this.isRecentlyActive = true;\n  }\n}\n\nContainer.registerNodeType('dashboard/progress', UiProgressNode);\n","/**\n * Created by Derwish (derwish.pro@gmail.com) on 02.03.2017.\n * License: http://www.gnu.org/licenses/gpl-3.0.txt\n */\n\nimport { Container } from '../../container';\nimport { NODE_INFO } from '../../node-info';\nimport { Side } from '../../node-interface';\nimport { Type } from '../../node-io';\nimport { UiNode } from './ui-node';\n\nexport class UiSliderNode extends UiNode {\n  constructor(container?: Container, id?: number, properties?: any) {\n    super('Slider', 'UiSliderNode', properties);\n    this.title = NODE_INFO.dashboard.slider.title;\n    this.description = NODE_INFO.dashboard.slider.description;\n    this.addInput('input', Type.NUMBER);\n    this.addOutput('output', Type.NUMBER);\n    this.UPDATE_INPUTS_INTERVAL = 100;\n    this.setState(0);\n  }\n\n  onAdded() {\n    super.onAdded();\n    if (this.side == Side.server) this.setOutputData(0, this.getState());\n  }\n\n  onGetMessageToServerSide(data) {\n    this.setValue(data.state);\n  }\n\n  onInputUpdated() {\n    let val = this.getInputData(0);\n    this.setValue(val);\n  }\n\n  setValue(val) {\n    if (val > 100) val = 100;\n    if (val < 0) val = 0;\n\n    this.setOutputData(0, val);\n    this.sendIOValuesToEditor();\n    this.isRecentlyActive = true;\n\n    if (this.getState() != val)\n      //prevent loop sending\n      this.setState(val);\n  }\n}\n\nContainer.registerNodeType('dashboard/slider', UiSliderNode);\n","/**\n * Created by Derwish (derwish.pro@gmail.com) on 02.03.2017.\n * License: http://www.gnu.org/licenses/gpl-3.0.txt\n */\n\nimport { Container } from '../../container';\nimport { Side } from '../../node-interface';\nimport { Type } from '../../node-io';\nimport { UiNode } from './ui-node';\nimport { NODE_INFO } from '../../node-info';\n\nexport class UiTextBoxNode extends UiNode {\n  constructor(container?: Container, id?: number, properties?: any) {\n    super('TextBox', 'UiTextBoxNode', properties);\n\n    this.title = NODE_INFO.dashboard[\"text-box\"].title;\n    this.description = NODE_INFO.dashboard[\"text-box\"].description;\n\n    this.setState('');\n\n    this.addInput('input', Type.STRING);\n    this.addOutput('output', Type.STRING);\n  }\n\n  onAdded() {\n    super.onAdded();\n    if (this.side == Side.server) this.setOutputData(0, this.getState());\n  }\n\n  onGetMessageToServerSide(data) {\n    this.setValue(data.state);\n  }\n\n  onInputUpdated() {\n    let val = this.getInputData(0);\n    this.setValue(val);\n  }\n\n  setValue(val) {\n    this.setOutputData(0, val);\n    this.sendIOValuesToEditor();\n    this.isRecentlyActive = true;\n\n    if (this.getState() != val)\n      //prevent loop sending\n      this.setState(val);\n  }\n}\n\nContainer.registerNodeType('dashboard/text-box', UiTextBoxNode);\n","/**\n * Created by Derwish (derwish.pro@gmail.com) on 02.03.2017.\n * License: http://www.gnu.org/licenses/gpl-3.0.txt\n */\nimport { Container } from '../../container';\nimport { NODE_INFO } from '../../node-info';\nimport { Side } from '../../node-interface';\nimport { NodeSetting, SettingType } from '../../node-io';\nimport { UiNode } from './ui-node';\n\nexport class UiLogNode extends UiNode {\n  messagesPerSec = 0;\n\n  constructor(container?: Container, id?: number, properties?: any) {\n    super('Log', 'UiLogNode', properties);\n\n    this.title = NODE_INFO.dashboard.log.title;\n    this.description = NODE_INFO.dashboard.log.description;\n    this.properties['log'] = [];\n    this.settings['maxRecords'] = NodeSetting.create({\n      description: 'Max Records',\n      value: 10,\n      type: SettingType.NUMBER,\n    });\n    this.settings['maxRecordsPerSec'] = NodeSetting.create({\n      description: 'Max records/sec limit',\n      value: 11,\n      type: SettingType.NUMBER,\n    });\n    this.settings['saveToDb'] = NodeSetting.create({\n      description: 'Save log to DB',\n      value: false,\n      type: SettingType.BOOLEAN,\n    });\n\n    this.addInput('input');\n  }\n\n  onAdded() {\n    super.onAdded();\n    if (this.side == Side.server) this.updateMessPerSec();\n  }\n\n  onAfterSettingsChange(oldSettings) {\n    if (this.side == Side.server) {\n      if (oldSettings.maxRecords != this.settings.maxRecords) {\n        this.removeOldRecords();\n\n        this.sendMessageToDashboardSide({\n          maxRecords: this.settings['maxRecords'].value,\n        });\n      }\n    }\n  }\n\n  onDbReaded() {\n    // invert log\n    let log = [];\n    this.properties['log'].forEach(rec => log.unshift(rec));\n    this.properties['log'] = log;\n  }\n\n  removeOldRecords() {\n    let records = this.properties['log'] || [];\n    let max = this.settings['maxRecords'].value;\n    let del = records.length - max;\n    records.splice(records.length - del, del);\n  }\n\n  updateMessPerSec() {\n    setInterval(() => {\n      if (this.messagesPerSec > this.settings['maxRecordsPerSec'].value) {\n        let dropped = this.messagesPerSec - this.settings['maxRecordsPerSec'].value;\n        let record = { date: Date.now(), value: 'Dropped ' + dropped + ' records (rec/sec limit)' };\n        this.properties['log'].unshift(record);\n        this.sendMessageToDashboardSide({ record: record });\n      }\n\n      this.messagesPerSec = 0;\n    }, 1000);\n  }\n\n  onInputUpdated() {\n    if (!this.inputs[0].link) return;\n\n    let val = this.getInputData(0);\n    this.isRecentlyActive = true;\n\n    this.messagesPerSec++;\n    if (this.messagesPerSec <= this.settings['maxRecordsPerSec'].value) {\n      let record = { date: Date.now(), value: val };\n      if (this.properties['log']) this.properties['log'].unshift(record);\n\n      this.removeOldRecords();\n\n      this.sendMessageToDashboardSide({ record: record });\n\n      // update in db\n      let max = this.settings['maxRecords'].value;\n      if (this.container.db && this.settings['saveToDb'].value) {\n        this.container.db.updateNode(this.id, this.container.id, {\n          $push: { 'properties.log': { $each: [record], $slice: -max } },\n        });\n      }\n    }\n  }\n\n  onGetMessageToServerSide(message) {\n    if (message == 'getLog') {\n      this.sendMessageToDashboardSide({\n        log: this.properties['log'],\n        maxRecords: this.settings['maxRecords'].value,\n      });\n    } else if (message == 'clearLog') {\n      // clear log\n      this.isRecentlyActive = true;\n      this.properties['log'] = [];\n\n      this.sendMessageToDashboardSide({ log: [] });\n\n      // update in db\n      if (this.container.db) {\n        this.container.db.updateNode(this.id, this.container.id, {\n          $unset: { 'properties.log': true },\n        });\n      }\n    }\n  }\n}\n\nContainer.registerNodeType('dashboard/log', UiLogNode);\n","/**\n * Created by Derwish (derwish.pro@gmail.com) on 03.03.2017.\n * License: http://www.gnu.org/licenses/gpl-3.0.txt\n */\n\nimport { Container } from '../../container';\nimport { NodeSetting, SettingType } from '../../node-io';\nimport { UiNode } from './ui-node';\nimport { NODE_INFO } from '../../node-info';\n\n// declare let vis;\n// declare let moment;\n// declare let DataSet;\n\nexport class UiChartNode extends UiNode {\n  dataset;\n\n  constructor(container?: Container, id?: number, properties?: any) {\n    super('Chart', 'UiChartNode', properties);\n\n    this.UPDATE_INPUTS_INTERVAL = 100;\n  \n    this.title = NODE_INFO.dashboard.chart.title;\n    this.description = NODE_INFO.dashboard.chart.description;\n   \n    this.properties['log'] = [];\n    this.settings['maxRecords'] = NodeSetting.create({\n      description: 'Max Records',\n      value: 100,\n      type: SettingType.NUMBER,\n    });\n    this.settings['saveToDb'] = NodeSetting.create({\n      description: 'Save data to DB',\n      value: false,\n      type: SettingType.BOOLEAN,\n    });\n    this.settings['style'] = NodeSetting.create({ description: 'Style', value: 'bars', type: SettingType.STRING });\n    this.settings['autoscroll'] = NodeSetting.create({\n      description: 'Auto scroll',\n      value: 'continuous',\n      type: SettingType.STRING,\n    });\n\n    this.addInput('input');\n  }\n\n  onInputUpdated() {\n    let val = this.getInputData(0);\n\n    // this.sendIOValuesToEditor();\n    // this.isRecentlyActive = true;\n\n    //add to log\n    let records = this.properties['log'];\n    let record = { x: Date.now(), y: val };\n    records.push(record);\n\n    let max = this.settings['maxRecords'].value;\n    records.splice(0, records.length - max);\n\n    //send to dashboard\n    this.sendMessageToDashboardSide({ record: record });\n\n    //update in db\n    if (this.container.db && this.settings['saveToDb'].value) {\n      this.container.db.updateNode(this.id, this.container.id, {\n        $push: { 'properties.log': { $each: [record], $slice: -max } },\n      });\n    }\n  }\n\n  onGetMessageToServerSide(data) {\n    if (data == 'clear') {\n      this.isRecentlyActive = true;\n      this.properties['log'] = [];\n      this.sendMessageToDashboardSide({ log: [] });\n\n      //update in db\n      if (this.container.db && this.settings['saveToDb'].value) {\n        this.container.db.updateNode(this.id, this.container.id, {\n          $unset: { 'properties.log': true },\n        });\n      }\n    }\n\n    if (data.style) {\n      this.settings['style'].value = data.style;\n      this.sendMessageToDashboardSide({ style: data.style });\n    }\n\n    if (data == 'getLog') {\n      this.sendMessageToDashboardSide({\n        log: this.properties['log'],\n        maxRecords: this.settings['maxRecords'].value,\n      });\n    }\n  }\n\n  // createChart() {\n  //     let that = this;\n\n  //     $('#chart-clear-' + this.id).click(function () {\n  //         that.sendMessageToServerSide({ clear: true });\n  //     });\n\n  //     $('#chart-now-' + this.id).click(function () {\n  //         that.showNow();\n  //     });\n\n  //     $('#chart-all-' + this.id).click(function () {\n  //         that.showAll();\n  //     });\n\n  //     $('#chart-style-' + this.id).click(function () {\n  //         that.changeStyle();\n  //         that.sendMessageToServerSide({ style: that.settings['style'].value });\n  //     });\n\n  //     this.body = document.getElementById('chart-body-' + this.id);\n\n  //     this.options = {\n  //         height: this.CHART_HEIGHT,\n  //         style: 'bar',\n  //         drawPoints: false,\n  //         barChart: { width: 50, align: 'right', sideBySide: false }\n  //     };\n\n  //     this.dataset = new vis.DataSet();\n  //     this.graph2d = new (<any>vis).Graph2d(this.body, this.dataset, this.options);\n\n  //     this.updateChartStyle();\n\n  //     this.showNow();\n\n  //     if (this.properties['log'].length > 0) {\n  //         this.addChartData(this.properties['log']);\n  //     }\n\n  //     this.renderStep();\n\n  // }\n\n  // addChartData(data) {\n  //     this.dataset.add(data);\n\n  //     let max = this.settings['maxRecords'].value;\n  //     let unwanted = this.dataset.length - max;\n  //     if (unwanted > 0) {\n  //         let items = this.dataset.get();\n  //         for (let i = 0; i < unwanted; i++) {\n  //             this.dataset.remove(items[i]);\n  //         }\n  //     }\n  // }\n\n  // renderStep() {\n  //     // move the window (you can think of different strategies).\n  //     let now = vis.moment();\n  //     let range = this.graph2d.getWindow();\n  //     let interval = range.end - range.start;\n  //     let that = this;\n  //     switch (this.settings['autoscroll'].value) {\n  //         case 'continuous':\n  //             // continuously move the window\n  //             this.graph2d.setWindow(now - interval, now, { animation: false });\n  //             requestAnimationFrame(that.renderStep.bind(that));\n  //             break;\n\n  //         case 'discrete':\n  //             this.graph2d.setWindow(now - interval, now, { animation: false });\n  //             setTimeout(that.renderStep.bind(that), 1000);\n  //             break;\n\n  //         case 'none': // 'static'\n  //             // move the window 90% to the left when now is larger than the end of the window\n  //             // if (now > range.end) {\n  //             //     this.graph2d.setWindow(now - 0.1 * interval, now + 0.9 * interval);\n  //             // }\n  //             setTimeout(that.renderStep.bind(that), 1000);\n  //             break;\n  //     }\n  // }\n\n  //     //setOptions cause a bug when switching to dots!!!\n  //     this.graph2d.setOptions(this.options);\n  //     //thats why we need redraw:\n  //     //redrawChart(options);\n\n  // }\n\n  // redrawChart(options, ) {\n  //     let window = this.graph2d.getWindow();\n  //     options.start = window.start;\n  //     options.end = window.end;\n  //     this.graph2d.destroy();\n  //     this.graph2d = new (<any>vis).Graph2d(this.body, this.dataset, options);\n  // }\n\n  // onDashboardGetRequest(req, res) {\n  //     //render log page\n  //     if (req.params[0] == \"/log\") {\n  //         res.render('dashboard/nodes/chart/log', {\n  //             node: this,\n  //             records: this.properties['log'],\n  //             max_records: this.settings['maxRecords'].value\n  //         });\n  //     }\n\n  //     //render chart page\n  //     res.render('dashboard/nodes/chart/index', {\n  //         node: this,\n  //         range_start: req.query.start || Date.now() - 30000,\n  //         range_end: req.query.end || Date.now(),\n  //         autoscroll: req.query.autoscroll || this.settings['autoscroll'].value,\n  //         style: req.query.style || this.settings['style'].value,\n  //         max_records: this.settings['maxRecords'].value\n  //     });\n  // }\n\n  // onEditorApiGetRequest(req, res) {\n  //     //ajax get log\n  //     if (req.params[0] == \"/log\") {\n  //         res.json(this.properties['log']);\n  //     }\n  // }\n\n  // onEditorApiPostRequest(req, res) {\n  //     //ajax get log\n  //     if (req.params[0] == \"/style\") {\n  //         this.settings['style'].value = req.body.style;\n  //         this.sendMessageToDashboardSide({ style: req.body.style });\n  //         res.json(\"ok\");\n  //     }\n  //     if (req.params[0] == \"/clear\") {\n  //         this.isRecentlyActive = true;\n  //         this.properties['log'] = [];\n  //         this.sendMessageToDashboardSide({ clear: true });\n  //         res.json(\"ok\");\n  //     }\n  // }\n}\n\nContainer.registerNodeType('dashboard/chart', UiChartNode);\n","import { Colors, create } from 'logplease';\nimport { Container } from '../../container';\nimport { Node } from '../../node';\nimport { Side } from '../../node-interface';\nimport { Type } from '../../node-io';\nimport { NODE_INFO } from '../../node-info';\n\nconst log = create('node', { color: Colors.Magenta });\n\n// TODO: we don't need this all logic, background does this job\n// Show value inside the debug console\nexport class ConsoleNode extends Node {\n  MAX_MESS_PER_SEC = 11;\n  messagesPerSec = 0;\n  timer: any;\n\n  constructor() {\n    super();\n    this.title = NODE_INFO.debug.console.title;\n    this.description = NODE_INFO.debug.console.description;\n    this.addInput('input', Type.ANY);\n  }\n\n  onAdded() {\n    if (this.side == Side.server) this.updateMessPerSec();\n  }\n\n  updateMessPerSec() {\n    let that = this;\n    this.timer = setInterval(function() {\n      if (that.messagesPerSec > that.MAX_MESS_PER_SEC) {\n        let dropped = that.messagesPerSec - that.MAX_MESS_PER_SEC;\n        log.info(\n          'CONSOLE NODE [' +\n            that.container.id +\n            '/' +\n            that.id +\n            ']: dropped ' +\n            dropped +\n            ' messages (data rate limitation)',\n        );\n        that.sendMessageToEditorSide({ dropped: dropped });\n      }\n\n      that.messagesPerSec = 0;\n    }, 1000);\n  }\n\n  onInputUpdated() {\n    if (!this.inputs[0].link) return;\n\n    let val = this.getInputData(0);\n    this.isRecentlyActive = true;\n\n    this.messagesPerSec++;\n    if (this.messagesPerSec <= this.MAX_MESS_PER_SEC) {\n      log.info('CONSOLE NODE [' + this.container.id + '/' + this.id + ']: ' + val);\n      this.sendMessageToEditorSide({ value: val });\n    }\n  }\n\n  onRemoved() {\n    if (this.timer) clearInterval(this.timer);\n  }\n\n  onGetMessageToEditorSide(data) {\n    if (data.value != null) log.info('CONSOLE NODE [' + this.container.id + '/' + this.id + ']: ' + data.value);\n\n    if (data.dropped)\n      log.info(\n        'CONSOLE NODE [' +\n          this.container.id +\n          '/' +\n          this.id +\n          ']: dropped ' +\n          data.dropped +\n          ' messages (data rate limitation)',\n      );\n  }\n}\nContainer.registerNodeType('debug/console', ConsoleNode);\n","import { Container } from '../../container';\nimport { Node, NodeState } from '../../node';\nimport { NODE_INFO } from '../../node-info';\n\nclass NotesNode extends Node {\n  constructor() {\n    super();\n    this.title = NODE_INFO.debug.comments.title;\n    this.description = NODE_INFO.debug.comments.description;\n  }\n\n  onAdded() {\n    this.nodeColour();\n  }\n\n  nodeColour() {\n    this.setNodeState(NodeState.INFO);\n  }\n}\nContainer.registerNodeType('debug/comments', NotesNode);\n","import { Container } from '../../container';\nimport { Node } from '../../node';\nimport { Side } from '../../node-interface';\nimport { Type } from '../../node-io';\nimport { NODE_INFO } from '../../node-info';\n\n// TODO: we don't need this all logic, background does this job\n// Watch a value in the editor\nexport class WatchNode extends Node {\n\n  UPDATE_INTERVAL: number\n  timer: any;\n  lastData: any;\n  dataUpdated = false;\n\n  constructor() {\n    super();\n\n    this.UPDATE_INTERVAL = 300;\n\n    this.title = NODE_INFO.debug.watch.title;\n    this.description = NODE_INFO.debug.watch.description;\n    this.addInput('input', Type.ANY);\n  }\n\n  onAdded() {\n    if (this.side == Side.server) this.startSending();\n  }\n\n  startSending() {\n    let that = this;\n    this.timer = setInterval(function() {\n      if (that.dataUpdated) {\n        that.dataUpdated = false;\n        that.sendMessageToEditorSide({ value: that.lastData });\n      }\n    }, this.UPDATE_INTERVAL);\n  }\n\n  onInputUpdated() {\n    this.lastData = this.getInputData(0);\n    this.dataUpdated = true;\n  }\n\n  onRemoved() {\n    if (this.timer) clearInterval(this.timer);\n  }\n\n  onGetMessageToEditorSide(data) {\n    this.lastData = data.value;\n    this.showValueOnInput(data.value);\n  }\n\n  showValueOnInput(value: any) {\n    // show the current value\n    this.inputs[0].label = value;\n    this.setDirtyCanvas(true, false);\n  }\n\n  updateInputsLabels() {\n    this.showValueOnInput(this.lastData);\n  }\n}\nContainer.registerNodeType('debug/watch', WatchNode);\n","import { Container, ContainerRegistry } from '../../container';\nimport { Node } from '../../node';\nimport { NODE_INFO } from '../../node-info';\nimport { NodeSetting, SettingType, Type } from '../../node-io';\nimport { Link, SlimNodeIO } from '../../node-link';\n\nexport class LinkErrorCheckNode extends Node {\n  lastTrigger;\n\n  constructor() {\n    super();\n    this.title = NODE_INFO.error['link-check'].title;\n    this.description = NODE_INFO.error['link-check'].description;\n    this.addInput('trigger', Type.BOOLEAN);\n    this.addOutput('errorsCount', Type.NUMBER);\n    this.addOutput('errorsJSON', Type.STRING);\n    //this.addOutput('unresolvedErrors', Type.NUMBER);\n    //this.addOutput('progress', Type.STRING);\n\n    this.settings['allContainer'] = NodeSetting.create({\n                                                         description: 'Search All Containers?',\n                                                         value: true,\n                                                         type: SettingType.BOOLEAN,\n                                                       });\n    this.settings['subContainers'] = NodeSetting.create({\n                                                          description: 'Search Sub-Containers?',\n                                                          value: true,\n                                                          type: SettingType.BOOLEAN,\n                                                        });\n    this.setSettingsConfig({\n                             groups: [],\n                             conditions: {\n                               subContainers: setting => {\n                                 return !setting['allContainer'].value;\n                               },\n                             },\n                           });\n\n  }\n\n  init() {\n  }\n\n  onCreated() {\n  }\n\n  onAdded() {\n    this.properties['errors'] = {};\n    this.properties['errorsCount'] = 0;\n    this.lastTrigger = false;\n    this.setOutputData(0, 0);\n    this.setOutputData(1, '{}');\n    //this.setOutputData(2, null);\n    //this.onAfterSettingsChange();\n  }\n\n  onInputUpdated() {\n    let trigger = this.getInputData(0);\n    if (trigger && !this.lastTrigger) {\n      //console.log('THIS', this)\n      //console.log('this.cid', this.cid)\n      //console.log('CONTAINERS', Container.containers)\n      this.properties['errors'] = {};\n      this.properties['errorsCount'] = 0;\n      const searchThisContainer = this.settings['allContainer'].value ? ContainerRegistry.instance().rootContainer()\n                                                                      : ContainerRegistry.instance().get(this.cid);\n      const searchSubContainers = this.settings['allContainer'].value ? true : this.settings['subContainers'].value;\n      this.checkLinksForInputOutputData(searchThisContainer, searchSubContainers);\n    }\n    this.lastTrigger = trigger;\n  }\n\n  onAfterSettingsChange() {\n  }\n\n  checkLinksForInputOutputData(searchContainer, includeSubContainers = false, isTopRecursion = true) {\n    //console.log('SEARCH CONTAINER', searchContainer)\n    const currentContainer = searchContainer.id;\n    let containers = [];\n    let errors = 0;\n    const nodeList = searchContainer.getAllNodes();\n    const numNodes = nodeList.length;\n    //console.log('numNodes', numNodes)\n    //let currentNodeNum = 0;\n    for (let x = 0; x < numNodes; x++) {\n      //currentNodeNum++;\n      //this.setOutputData(2, `${currentNodeNum}/${numNodes}`);\n      console.log(x, nodeList[x]);\n      if (nodeList[x].isContainer) {\n        //console.log('FOUND CONTAINER', nodeList[x]);\n        containers.push(nodeList[x].id);\n        continue;\n      }\n      //let node: Node = this.container._nodes[`${this.inputs[i].link.target_node_id}`];\n      const node: Node = searchContainer.getNodeById(Number(nodeList[x]['id']));\n      //console.log('node', x, node);\n      if (!node.hasOwnProperty('outputs')) continue;\n\n      let outputs = node.outputs;\n      let outputLinks = [];\n      for (const output in outputs) {\n        if (outputs[output].links != null) {\n          console.log('links', output, outputs[output].links);\n          outputLinks.push([output, outputs[output].data, outputs[output].links.map(l => Link.create(l))]);\n        }\n      }\n      console.log('outputLinks', outputLinks);\n\n      outputLinks.forEach(linkInfo => {\n        console.log('linkInfo', linkInfo);\n        linkInfo[2].map(l => Link.create(l)).forEach((link: SlimNodeIO) => {\n          try {\n            let error = false;\n            const receiver: Node = searchContainer.getNodeById(link.nodeId);\n            console.log('receiver.inputs', receiver.inputs);\n            if (receiver.inputs[link.ioId].data != linkInfo[1]) {\n              console.log('LINK ERROR: output data does not match input data.');\n              error = true;\n            }\n            if (receiver.inputs[link.ioId].link.slot != linkInfo[0] &&\n                receiver.inputs[link.ioId].link.nodeId != nodeList[x]['id']) {\n              console.log('LINK ERROR: output link reference does not match input link reference.');\n              error = true;\n            }\n            if (error) {\n              errors++;\n              console.log('ERROR');\n              if (!this.properties['errors'].hasOwnProperty(\n                currentContainer)) {\n                this.properties['errors'][currentContainer] = {\n                  containerName: searchContainer.name,\n                  containerErrors: {},\n                };\n              }\n              if (!this.properties['errors'][currentContainer]['containerErrors'].hasOwnProperty(\n                nodeList[x]['id'])) {\n                this.properties['errors'][currentContainer]['containerErrors'][nodeList[x]['id']] = {\n                  nodeName: nodeList[x].name,\n                  nodeErrors: {},\n                };\n              }\n              this.properties['errors'][currentContainer]['containerErrors'][nodeList[x]['id']]['nodeErrors'][linkInfo[0]] = {\n                outputName: node.outputs[linkInfo[0]].name,\n                outputNum: linkInfo[0],\n                inputNode: receiver.id,\n                inputNodeName: receiver.name,\n                inputNodeSlot: receiver.inputs[link.ioId].link.slot,\n              };\n              // CALL onInputUpdated() ON RECEIVER NODE.  I DONT KNOW HOW TO DO IT.\n            }\n          } catch {\n            errors++;\n            console.log('UNKNOWN ERROR');\n            if (!this.properties['errors'].hasOwnProperty(\n              currentContainer)) {\n              this.properties['errors'][currentContainer] = {\n                containerName: searchContainer.name,\n                containerErrors: {},\n              };\n            }\n            if (!this.properties['errors'][currentContainer]['containerErrors'].hasOwnProperty(\n              nodeList[x]['id'])) {\n              this.properties['errors'][currentContainer]['containerErrors'][nodeList[x]['id']] = {\n                nodeName: nodeList[x].name,\n                nodeErrors: {},\n              };\n            }\n          }\n        });\n      });\n    }\n\n    this.properties['errorsCount'] += errors;\n    if (this.properties['errors'].hasOwnProperty(\n      currentContainer)) {\n      this.properties['errors'][currentContainer]['errorsCount'] = errors;\n    }\n    //console.log('containersList', containers);\n    if (includeSubContainers) {\n      containers.forEach(containerNum => {\n        //console.log('containerNum', typeof containerNum, containerNum);\n        this.checkLinksForInputOutputData(ContainerRegistry.instance().get(containerNum), includeSubContainers, false);\n      });\n    }\n    if (isTopRecursion) {\n      this.setOutputData(0, this.properties['errorsCount']);\n      this.properties['errors']['totalErrors'] = this.properties['errorsCount'];\n      this.setOutputData(1, JSON.stringify(this.properties['errors']));\n    }\n  }\n\n}\n\nContainer.registerNodeType('error/link-check', LinkErrorCheckNode);\n","import { Container, ContainerRegistry } from '../../container';\nimport { Node } from '../../node';\nimport { NODE_INFO } from '../../node-info';\nimport { NodeSetting, SettingType, Type } from '../../node-io';\n\nexport class OutputErrorCheckNode extends Node {\n  lastTrigger;\n\n  constructor() {\n    super();\n    this.title = NODE_INFO.error[\"output-check\"].title;\n    this.description = NODE_INFO.error[\"output-check\"].description;\n    this.addInput('trigger', Type.BOOLEAN);\n    this.addOutput('errorsCount', Type.NUMBER);\n    this.addOutput('errorsJSON', Type.STRING);\n    //this.addOutput('unresolvedErrors', Type.NUMBER);\n    //this.addOutput('progress', Type.STRING);\n\n    this.settings['allContainer'] = NodeSetting.create({\n      description: \"Search All Containers?\",\n      value: true,\n      type: SettingType.BOOLEAN,\n    });\n    this.settings['subContainers'] = NodeSetting.create({\n      description: \"Search Sub-Containers?\",\n      value: true,\n      type: SettingType.BOOLEAN,\n    });\n    this.setSettingsConfig({\n      groups: [],\n      conditions: {\n        subContainers: setting => {\n          return !setting['allContainer'].value;\n        },\n      },\n    });\n\n  }\n\n  init() {\n  }\n\n  onCreated() {\n  }\n\n  onAdded() {\n    this.properties['errors'] = {};\n    this.properties['errorsCount'] = 0;\n    this.lastTrigger = false;\n    this.setOutputData(0, 0);\n    this.setOutputData(1, '{}');\n    //this.onAfterSettingsChange();\n  }\n\n  onInputUpdated() {\n    let trigger = this.getInputData(0);\n    if (trigger && !this.lastTrigger) {\n      //console.log('THIS', this)\n      //console.log('this.cid', this.cid)\n      //console.log('CONTAINERS', Container.containers)\n      this.properties['errors'] = {};\n      this.properties['errorsCount'] = 0;\n      const searchThisContainer = this.settings['allContainer'].value ? ContainerRegistry.instance().rootContainer() : ContainerRegistry.instance().get(this.cid);\n      const searchSubContainers = this.settings['allContainer'].value ? true : this.settings['subContainers'].value;\n      this.checkForOutputsWithNoData(searchThisContainer, searchSubContainers);\n\n    }\n    this.lastTrigger = trigger;\n  }\n\n  onAfterSettingsChange() {\n  }\n\n  checkForOutputsWithNoData(searchContainer, includeSubContainers = false, isTopRecursion = true){\n    //console.log('SEARCH CONTAINER', searchContainer)\n    const currentContainer = searchContainer.id;\n    let containers = [];\n    let errors = 0;\n    const nodeList = searchContainer.getAllNodes();\n    const numNodes = nodeList.length;\n    //console.log('numNodes', numNodes)\n    //let currentNodeNum = 0;\n    for(let x = 0; x < numNodes; x++){\n      //currentNodeNum++;\n      //this.setOutputData(2, `${currentNodeNum}/${numNodes}`);\n      //console.log(x, nodeList[x])\n      if(nodeList[x].isContainer){\n        //console.log('FOUND CONTAINER', nodeList[x]);\n        containers.push(nodeList[x].id)\n        continue;\n      } \n      //let node: Node = this.container._nodes[`${this.inputs[i].link.target_node_id}`];\n      const node: Node = searchContainer.getNodeById(Number(nodeList[x]['id']));\n      const outputs = node.outputs;\n      for (const output in outputs){\n        //console.log('output', output, outputs[output])\n        if(!outputs[output].hasOwnProperty('data') || outputs[output].data === undefined) {\n          errors++;\n          //console.log('ERROR');\n          if(!this.properties['errors'].hasOwnProperty(currentContainer)) this.properties['errors'][currentContainer] = {containerName: searchContainer.name, containerErrors: {}};\n          if(!this.properties['errors'][currentContainer]['containerErrors'].hasOwnProperty(nodeList[x]['id'])) this.properties['errors'][currentContainer]['containerErrors'][nodeList[x]['id']] = {nodeName: nodeList[x].name, nodeErrors: {}};\n          this.properties['errors'][currentContainer]['containerErrors'][nodeList[x]['id']]['nodeErrors'][output] = {outputName: outputs[output].name, outputNum: output};\n        }\n      }\n    }\n    this.properties['errorsCount'] += errors;\n    if (this.properties['errors'].hasOwnProperty(currentContainer)) this.properties['errors'][currentContainer]['errorsCount'] = errors;\n    //console.log('containersList', containers);\n    if(includeSubContainers) {\n      containers.forEach(containerNum => {\n        //console.log('containerNum', typeof containerNum, containerNum);\n        this.checkForOutputsWithNoData(ContainerRegistry.instance().get(containerNum), includeSubContainers, false);\n      })\n    }\n    if(isTopRecursion) {\n      this.setOutputData(0, this.properties['errorsCount']);\n      this.properties['errors']['totalErrors'] = this.properties['errorsCount'];\n      this.setOutputData(1, JSON.stringify(this.properties['errors']));\n    }\n  }\n\n}\nContainer.registerNodeType('error/output-check', OutputErrorCheckNode);\n","import { Container } from '../../container';\nimport { Node } from '../../node';\nimport { Type } from '../../node-io';\nimport { NODE_INFO } from '../../node-info';\n\nclass FiltersOnlyTrueNode extends Node {\n  constructor() {\n    super();\n\n    this.title = NODE_INFO.filter[\"only-true\"].title;\n    this.description = NODE_INFO.filter[\"only-true\"].description;\n\n    this.addInput('input', Type.BOOLEAN);\n    this.addOutput('output', Type.BOOLEAN);\n  }\n\n  onAdded(){\n    this.setOutputData(0, null);\n    this.onInputUpdated();\n  }\n\n  onInputUpdated() {\n    if (this.getInputData(0) === true) this.setOutputData(0, true);\n  }\n}\nContainer.registerNodeType('filter/only-true', FiltersOnlyTrueNode);\n","import { Container } from '../../container';\nimport { Node } from '../../node';\nimport { Type } from '../../node-io';\nimport { NODE_INFO } from '../../node-info';\n\nclass FiltersOnlyFalseNode extends Node {\n  constructor() {\n    super();\n\n    this.title = NODE_INFO.filter[\"only-false\"].title;\n    this.description = NODE_INFO.filter[\"only-false\"].description;\n\n    this.addInput('input', Type.BOOLEAN);\n    this.addOutput('output', Type.BOOLEAN);\n  }\n\n  onAdded(){\n    this.setOutputData(0, null);\n    this.onInputUpdated();\n  }\n\n  onInputUpdated() {\n    if (this.getInputData(0) === false) this.setOutputData(0, false);\n  }\n}\nContainer.registerNodeType('filter/only-false', FiltersOnlyFalseNode);\n","import { Container } from '../../container';\nimport { Node } from '../../node';\nimport { Type } from '../../node-io';\nimport { NODE_INFO } from '../../node-info';\n\nclass FiltersOnlyFromRangeNode extends Node {\n  constructor() {\n    super();\n\n    this.title = NODE_INFO.filter[\"only-between\"].title;\n    this.description = NODE_INFO.filter[\"only-between\"].description;\n\n    this.addInput('value', Type.NUMBER);\n    this.addInputWithSettings('min', Type.NUMBER, 0, 'min', false);\n    this.addInputWithSettings('max', Type.NUMBER, 10, 'max', false);\n    this.addOutput('value', Type.NUMBER);\n    this.properties['value'];\n  }\n\n  onAdded(){\n    this.setOutputData(0, this.properties['value'] || null);\n    this.onInputUpdated();\n  }\n\n  onAfterSettingsChange(){\n    this.onInputUpdated();\n  }\n\n  onInputUpdated() {\n    const val = this.getInputData(0);\n    const min = this.getInputData(1);\n    const max = this.getInputData(2);\n\n    if (val == null || min == null || max == null) {\n      this.setOutputData(0, null);\n    } else if (val >= min && val <= max) {\n      this.setOutputData(0, val);\n      this.properties['value'] = val;\n      this.persistProperties(false, true);\n    }\n  }\n}\nContainer.registerNodeType('filter/only-between', FiltersOnlyFromRangeNode);\n","import { Container } from '../../container';\nimport { Node } from '../../node';\nimport { Type } from '../../node-io';\nimport { NODE_INFO } from '../../node-info';\n\nclass FiltersOnlyGreaterNode extends Node {\n  constructor() {\n    super();\n\n    this.title = NODE_INFO.filter[\"only-greater\"].title;\n    this.description = NODE_INFO.filter[\"only-greater\"].description;\n    this.addInput('input', Type.NUMBER);\n    this.addInputWithSettings('threshold', Type.NUMBER, 0, 'threshold', false);\n    this.addOutput('output', Type.NUMBER);\n    this.properties['value'];\n  }\n\n  onAdded(){\n    this.setOutputData(0, this.properties['value'] || null);\n    this.onInputUpdated();\n  }\n\n  onAfterSettingsChange(){\n    this.onInputUpdated();\n  }\n\n  onInputUpdated() {\n    let val = this.getInputData(0);\n    let threshold = this.getInputData(1);\n    if (val == null || threshold == null) {\n      this.setOutputData(0, null);\n    } else if (val > threshold) {\n      this.setOutputData(0, val);\n      this.properties['value'] = val;\n      this.persistProperties(false, true);\n    }\n  }\n}\nContainer.registerNodeType('filter/only-greater', FiltersOnlyGreaterNode);\n","import { Container } from '../../container';\nimport { Node } from '../../node';\nimport { Type } from '../../node-io';\nimport { NODE_INFO } from '../../node-info';\n\nclass FiltersOnlyLowerNode extends Node {\n  constructor() {\n    super();\n\n    this.title = NODE_INFO.filter[\"only-lower\"].title;\n    this.description = NODE_INFO.filter[\"only-lower\"].description;\n\n    this.addInput('input', Type.NUMBER);\n    this.addInputWithSettings('threshold', Type.NUMBER, 0, 'threshold', false);\n    this.addOutput('output', Type.NUMBER);\n    this.properties['value'];\n  }\n\n  onAdded(){\n    this.setOutputData(0, this.properties['value'] || null);\n    this.onInputUpdated();\n  }\n\n  onAfterSettingsChange(){\n    this.onInputUpdated();\n  }\n\n  onInputUpdated() {\n    let val = this.getInputData(0);\n    let threshold = this.getInputData(1);\n    if (val == null || threshold == null) {\n      this.setOutputData(0, null);\n    } else if (val < threshold) {\n      this.setOutputData(0, val);\n      this.properties['value'] = val;\n      this.persistProperties(false, true);\n    }\n  }\n}\nContainer.registerNodeType('filter/only-lower', FiltersOnlyLowerNode);\n","import { Container } from '../../container';\nimport { Node } from '../../node';\nimport { Type } from '../../node-io';\nimport { NODE_INFO } from '../../node-info';\n\nclass FiltersOnlyEqualNode extends Node {\n  constructor() {\n    super();\n\n    this.title = NODE_INFO.filter[\"only-equal\"].title;\n    this.description = NODE_INFO.filter[\"only-equal\"].description;\n\n    this.addInput('input', Type.ANY);\n    this.addInputWithSettings('match', Type.ANY, '', 'Match Value');\n    this.addOutput('output', Type.ANY);\n    this.properties['value'];\n  }\n\n  onAdded(){\n    this.setOutputData(0, this.properties['value'] || null);\n    this.onInputUpdated();\n  }\n\n  onAfterSettingsChange(){\n    this.onInputUpdated();\n  }\n\n  onInputUpdated() {\n    let val = this.getInputData(0);\n    val = (val || '').toString(); // making string null i.e `''` and other `null` same\n    if (val == 'false') val = false;\n    else if (val == 'true') val = true;\n\n    let match = (this.getInputData(1) || '').toString();\n    if (match == 'false') match = false;\n    else if (match == 'true') match = true;\n\n    if (val == match) {\n      this.setOutputData(0, val);\n      this.properties['value'] = val;\n      this.persistProperties(false, true);\n    }\n  }\n}\nContainer.registerNodeType('filter/only-equal', FiltersOnlyEqualNode);\n","import { isNotNull } from '../../../utils/helper';\nimport { Container } from '../../container';\nimport { Node } from '../../node';\nimport { NODE_INFO } from '../../node-info';\n\nclass FiltersPreventNullNode extends Node {\n  constructor() {\n    super();\n\n    this.title = NODE_INFO.filter[\"prevent-null\"].title;\n    this.description = NODE_INFO.filter[\"prevent-null\"].description;\n\n    this.addInput('input');\n    this.addOutput('output');\n    this.properties['value'];\n  }\n\n  onAdded(){\n    this.setOutputData(0, this.properties['value']);\n    this.onInputUpdated();\n  }\n\n  onInputUpdated() {\n    let val = this.getInputData(0);\n\n    if (isNotNull(val) && val !== '') {\n      this.setOutputData(0, val);\n      this.properties['value'] = val;\n      this.persistProperties(false, true);\n    }\n  }\n}\nContainer.registerNodeType('filter/prevent-null', FiltersPreventNullNode);\n","import { Container } from '../../container';\nimport { Node } from '../../node';\nimport { Type } from '../../node-io';\nimport { NODE_INFO } from '../../node-info';\n\nclass FiltersPreventEqualNode extends Node {\n  constructor() {\n    super();\n    \n    this.title = NODE_INFO.filter[\"prevent-equal\"].title;\n    this.description = NODE_INFO.filter[\"prevent-equal\"].description;\n\n    this.addInput('input', Type.ANY);\n    this.addInputWithSettings('match', Type.ANY, null, 'Match Value');\n    this.addOutput('output', Type.ANY);\n    this.properties['value'];\n  }\n\n  onAdded(){\n    this.setOutputData(0, this.properties['value'] || null);\n    this.onInputUpdated();\n  }\n\n  onAfterSettingsChange(){\n    this.onInputUpdated();\n  }\n\n  onInputUpdated() {\n    let val = this.getInputData(0);\n    val = (val || '').toString(); // making string null i.e `''` and other `null` same\n\n    let match = (this.getInputData(1) || '').toString();\n    if (match == 'false') match = false;\n    else if (match == 'true') match = true;\n\n    if (val != match) {\n      this.setOutputData(0, val);\n      this.properties['value'] = val;\n      this.persistProperties(false, true);\n    }\n  }\n}\nContainer.registerNodeType('filter/prevent-equal', FiltersPreventEqualNode);\n","import { Container } from '../../container';\nimport { Node } from '../../node';\nimport { NODE_INFO } from '../../node-info';\n\nclass FiltersPreventDuplicatesNode extends Node {\n  lastVal: any;\n\n  constructor() {\n    super();\n\n    this.title = NODE_INFO.filter[\"prevent-duplicates\"].title;\n    this.description = NODE_INFO.filter[\"prevent-duplicates\"].description;\n\n    this.addInput('input');\n    this.addOutput('output');\n    this.properties['value'];\n  }\n\n  onAdded(){\n    this.onInputUpdated();\n  }\n\n  onInputUpdated() {\n    let val = this.getInputData(0);\n    if (val === '') val = null;\n\n    if (this.lastVal == val) return;\n\n    this.lastVal = val;\n    this.setOutputData(0, val, true);\n    this.properties['value'] = val;\n    this.persistProperties(false, true);\n  }\n}\nContainer.registerNodeType('filter/prevent-duplicates', FiltersPreventDuplicatesNode);\n","import { Container } from '../../container';\nimport { Node } from '../../node';\nimport { Side } from '../../node-interface';\nimport { NodeSetting, SettingType, Type } from '../../node-io';\nimport Utils from '../../utils';\nimport TimeUtils from '../../utils/time-utils';\nimport { NODE_INFO } from '../../node-info';\n\nconst moment = require('moment-timezone');\n\nclass AnyDataStoreNode extends Node {\n  constructor() {\n    super();\n \n    this.title = NODE_INFO.history[\"data-store\"].title;\n    this.description = NODE_INFO.history[\"data-store\"].description;\n   \n    this.addInput('input', Type.ANY);\n    this.addInput('clear', Type.BOOLEAN);\n    this.addOutput('output', Type.ANY);\n    this.addOutput('storedCount', Type.NUMBER);\n\n    this.settings['time-conversation-enable'] = NodeSetting.create({\n      description: 'Timestamp in system timezone?',\n      value: false,\n      type: SettingType.BOOLEAN,\n    });\n    this.settings['storage-limit'] = NodeSetting.create({\n      description: 'Storage Limit (Max 50)',\n      value: 25,\n      type: SettingType.NUMBER,\n    });\n    this.settings['date-iso'] = NodeSetting.create({\n      description: 'Typestamp Format',\n      type: SettingType.DROPDOWN,\n      config: {\n        items: [\n          { value: 0, text: 'YYYY-MM-DD HH:mm:ss TZ (ISO8601)' },\n          { value: 1, text: 'YYYY-MM-DD HH:mm:ss' },\n          { value: 2, text: 'MM-DD-YYYY HH:mm:ss' },\n          { value: 3, text: 'DD-MM-YYYY HH:mm:ss' },\n          { value: 4, text: 'DAY, Month DD, YYYY HH:MM AM/PM' },\n          { value: 5, text: 'Month DD, YYYY HH:MM AM/PM' },\n          { value: 6, text: 'Unix timestamp in Milliseconds' },\n        ],\n      },\n      value: 0,\n    });\n    this.settings['outputFormat'] = NodeSetting.create({\n      description: 'Output Format',\n      type: SettingType.DROPDOWN,\n      config: {\n        items: [\n          { value: 'Array', text: 'Array' },\n          { value: 'CSV', text: 'CSV' },\n          { value: 'JSON', text: 'JSON' },\n        ],\n      },\n      value: 'Array',\n    });\n    this.settings['pointName'] = NodeSetting.create({\n      description: 'Point Name',\n      value: '',\n      type: SettingType.STRING,\n    });\n    this.settings['minuteRoundValue'] = NodeSetting.create({\n      description: 'Round minutes up in increments of',\n      value: 0,\n      type: SettingType.NUMBER,\n    });\n    //this.settings['inputs'] = NodeSetting.create({ description: 'Tag Count', value: 0, type: SettingType.NUMBER });\n    this.setSettingsConfig({\n      conditions: {\n        pointName: setting => {\n          return setting['outputFormat'].value != 'Array';\n        },\n      },\n    });\n  }\n\n  onCreated() {\n    this.properties['historyLog'] = [];\n  }\n\n  onAdded() {\n    this.setOutputData(0, this.properties['historyLog']);\n    this.setOutputData(1, this.properties['historyLog'] ? this.properties['historyLog'].length : 0);\n  }\n\n  nearestFutureMinutes(interval, someMoment) {\n    const roundedMinutes = Math.ceil(someMoment.minute() / interval) * interval;\n    return someMoment\n      .clone()\n      .minute(roundedMinutes)\n      .second(0);\n  }\n\n  formatOutputs() {\n    // Format Output based on settings\n    // System Timezone or UTC based on settings\n    const timezone = this.settings['time-conversation-enable'].value\n      ? Intl.DateTimeFormat().resolvedOptions().timeZone\n      : 'Etc/UTC';\n    let dateTz = null;\n    const pointName = this.settings['pointName'].value;\n    let timeFormatedArray = this.properties['historyLog'].map(entry => {\n      return entry;\n    });\n    timeFormatedArray = timeFormatedArray.reverse().map(entry => {\n      switch (this.settings['date-iso'].value) {\n        case 0:\n          dateTz = moment(entry.timestamp)\n            .tz(timezone)\n            .format();\n          break;\n        case 1:\n          dateTz = moment(entry.timestamp)\n            .tz(timezone)\n            .format('YYYY-MM-DD HH:mm:ss');\n          break;\n        case 2:\n          dateTz = moment(entry.timestamp)\n            .tz(timezone)\n            .format('MM-DD-YYYY HH:mm:ss');\n          break;\n        case 3:\n          dateTz = moment(entry.timestamp)\n            .tz(timezone)\n            .format('DD-MM-YYYY HH:mm:ss');\n          break;\n        case 4:\n          dateTz = moment(entry.timestamp)\n            .tz(timezone)\n            .format('LLLL');\n          break;\n        case 5:\n          dateTz = moment(entry.timestamp)\n            .tz(timezone)\n            .format('LLL');\n          break;\n        case 6:\n          dateTz = moment(entry.timestamp)\n            .tz(timezone)\n            .valueOf();\n          break;\n        default:\n          dateTz = moment(entry.timestamp)\n            .tz(timezone)\n            .format();\n      }\n      return {\n        payload: entry.payload,\n        timestamp: dateTz,\n      };\n    });\n    switch (this.settings['outputFormat'].value) {\n      case 'Array':\n        return timeFormatedArray;\n      case 'CSV':\n        let csvString = `name, timestamp, payload\\n`;\n        timeFormatedArray.forEach(log => {\n          csvString += `${pointName}, ${log.timestamp}, ${log.payload} \\n`;\n        });\n        return csvString;\n      case 'JSON':\n        return JSON.stringify({ [pointName]: timeFormatedArray });\n    }\n  }\n\n  onInputUpdated() {\n    if (this.side !== Side.server) return; // only execute on server\n    if (this.getInputData(1) && this.inputs[1].updated) {\n      this.properties['historyLog'] = []; // clear data if required\n      this.setOutputData(0, this.properties['historyLog'].reverse());\n      this.setOutputData(1, this.properties['historyLog'].length);\n    }\n    if (this.getInputData(0) == null || !this.inputs[0].updated) return;\n    // cap the amount of data that can be stored\n    const storageLimit = Utils.clamp(this.settings['storage-limit'].value, 0, 50);\n    // round the time to the nearest min. For example 15min. 1:00, 1:15\n    const minuteRound = Utils.clamp(this.settings['minuteRoundValue'].value, 0, 60);\n    const now = minuteRound ? TimeUtils.nearestFutureMinutes(minuteRound, moment()) : moment();\n\n    // object data\n    let msg = {\n      payload: this.getInputData(0),\n      timestamp: now._d,\n    };\n    // build an object\n    this.properties['historyLog'].push(msg);\n    while (this.properties['historyLog'].length > storageLimit) {\n      this.properties['historyLog'].shift();\n    }\n\n    this.persistProperties(true, true);\n\n    // Format Output based on settings\n    const newObj = this.formatOutputs() || [];\n    this.setOutputData(0, newObj);\n    this.setOutputData(1, this.properties['historyLog'].length);\n  }\n\n  onAfterSettingsChange() {\n    this.outputs[0].name = `output (${this.settings['outputFormat'].value})`;\n    this.broadcastOutputsToClients();\n    const newObj = this.formatOutputs() || [];\n    this.setOutputData(0, newObj);\n    this.setOutputData(1, this.properties['historyLog'].length);\n  }\n}\nContainer.registerNodeType('history/data-store', AnyDataStoreNode);\n","import config from '../../../config';\nimport { isNull } from '../../../utils/helper';\nimport { Container } from '../../container';\nimport { Node } from '../../node';\nimport { NODE_INFO } from '../../node-info';\nimport { Side } from '../../node-interface';\nimport { NodeSetting, SettingType, Type } from '../../node-io';\n\nlet moment = require('moment-timezone');\nconst Influx = require('influx');\n\nclass InfluxDBNode extends Node {\n  inName: number = 0;\n  inJsonInput: number = 1;\n  outError: number = 0;\n  outLastExport: number = 1;\n  outMsg: number = 2;\n  client;\n  constructor() {\n    super();\n    this.title = NODE_INFO.history[\"influx-db\"].title;\n    this.description = NODE_INFO.history[\"influx-db\"].description;\n    this.addInput('[name]', Type.STRING);\n    this.addInput('json-input', Type.JSON);\n    this.addOutput('error', Type.BOOLEAN);\n    this.addOutput('outLastExport', Type.STRING);\n    this.addOutput('outMsg', Type.STRING);\n    this.settings['enable'] = NodeSetting.create({ description: 'Enable', value: false, type: SettingType.BOOLEAN });\n    this.settings['useEnv'] = NodeSetting.create({ description: 'Dont use env settings', value: false, type: SettingType.BOOLEAN });\n    this.settings['host'] = NodeSetting.create({ description: 'Host', value: '0.0.0.0', type: SettingType.STRING });\n    this.settings['port'] = NodeSetting.create({ description: 'Port', value: '8086', type: SettingType.STRING });\n    this.settings['authentication'] = NodeSetting.create({\n      description: 'Use Authentication',\n      value: false,\n      type: SettingType.BOOLEAN,\n    });\n    this.settings['user'] = NodeSetting.create({ description: 'Username', value: '', type: SettingType.STRING });\n    this.settings['password'] = NodeSetting.create({ description: 'Password', value: '', type: SettingType.STRING });\n    this.settings['databaseName'] = NodeSetting.create({\n      description: 'Database Name',\n      value: '',\n      type: SettingType.STRING,\n    });\n    this.setSettingsConfig({\n      groups: [\n        { host: { weight: 3 }, port: { weight: 1 } },\n        { user: {}, password: {} },\n        { period: { weight: 2 }, periodUnits: {} },\n      ],\n      conditions: {\n        host: setting => {\n          return !!setting['useEnv'].value;\n        },\n        port: setting => {\n          return !!setting['useEnv'].value;\n        },\n        authentication: setting => {\n          return !!setting['useEnv'].value;\n        },\n        databaseName: setting => {\n          return !!setting['useEnv'].value;\n        },\n        user: setting => {\n          return !!setting['authentication'].value;\n        },\n        password: setting => {\n          return !!setting['authentication'].value;\n        },\n      },\n    });\n  }\n  onAdded() {\n    this.createClient();\n  }\n\n  createClient() {\n    let { protocol, host, port, databaseName, username, password } = config.influxDb;\n    if (this.settings['useEnv'].value) {\n      // dont use env\n      host = this.settings['host'].value;\n      port = this.settings['port'].value;\n      this.client = new Influx.InfluxDB({\n        host: host || 'localhost',\n        port: +(port || 8086),\n        protocol: 'http',\n        database: this.settings['databaseName'].value || 'undefined',\n        username: this.settings['authentication'].value ? this.settings['user'].value : '',\n        password: this.settings['authentication'].value ? this.settings['password'].value : '',\n      });\n    } else {\n      // use use env\n      this.client = new Influx.InfluxDB({\n        host,\n        port: +port,\n        protocol: protocol === 'https' ? 'https' : 'http',\n        database: databaseName,\n        username,\n        password,\n      });\n    }\n  }\n\n  onInputUpdated() {\n    if (this.side !== Side.server) return; // only execute on server\n    if (!this.client) return;\n    if (!this.settings['enable'].value) {\n      this.setOutputData(this.outMsg, `INFLUX-DB NODE: not not enabled`, true);\n      return;\n    }\n\n    // update node name\n    if (this.inputs[0].updated) {\n      let nodeName = this.getInputData(this.inName);\n      if (!isNull(nodeName)) {\n        this.name = nodeName;\n        this.broadcastNameToClients();\n      }\n    }\n\n    let input = this.getInputData(this.inJsonInput);\n    if (isNull(input)) return;\n    const hasMeasurement = input.hasOwnProperty('measurement');\n    const hasMeasurementTags = input.hasOwnProperty('tags');\n    const hasMeasurementFields = input.hasOwnProperty('fields');\n\n    if (isNull(input.tags)) {\n      this.setOutputData(this.outError, false, true);\n      this.setOutputData(this.outMsg, `!tags! is empty,`, true);\n      return;\n    }\n    if (isNull(input.measurement)) {\n      this.setOutputData(this.outError, false, true);\n      this.setOutputData(this.outMsg, `!measurement! is empty,`, true);\n      return;\n    }\n    if (isNull(input.fields)) {\n      this.setOutputData(this.outError, false, true);\n      this.setOutputData(this.outMsg, `!fields! is empty,`, true);\n      return;\n    }\n    if (hasMeasurement && hasMeasurementTags && hasMeasurementFields) {\n      this.setOutputData(this.outError, false, true);\n      this.setOutputData(this.outLastExport, moment().format());\n      this.setOutputData(this.outMsg, `influx write to DB`, true);\n\n      Object.keys(input.tags).forEach(key => {\n        if (!input.tags[key]) {\n          delete input.tags[key];\n        }\n      });\n      this.client.writePoints([input]).catch(err => {\n        this.debugInfo(`INFLUX-DB NODE: error on influx write, ${err}`);\n        this.setOutputData(this.outError, true, true);\n        this.setOutputData(this.outMsg, `error on influx write, ${err}`, true);\n      });\n    } else {\n      this.debugInfo(`INFLUX-DB NODE: input.hasOwnProperty is missing`);\n      this.setOutputData(this.outError, true, true);\n      this.setOutputData(this.outMsg, `input.hasOwnProperty is missing`, true);\n    }\n  }\n\n  onAfterSettingsChange() {\n    if (this.side !== Side.server) return; // only execute on server\n    this.createClient();\n    this.onInputUpdated();\n  }\n}\nContainer.registerNodeType('history/influx-db', InfluxDBNode);\n","import config from '../../../config';\nimport { isNull } from '../../../utils/helper';\nimport { NodeTypeRegistry } from '../../node-type-registry';\nimport { Node } from '../../node';\nimport { NODE_INFO } from '../../node-info';\nimport { Side } from '../../node-interface';\nimport { NodeSetting, SettingType, Type } from '../../node-io';\nimport PlatformDataSource from '../../../database/datasource/PlatformDataSource';\n\nlet moment = require('moment-timezone');\nconst {InfluxDB, Point, HttpError} = require('@influxdata/influxdb-client');\nconst {SetupAPI} = require('@influxdata/influxdb-client-apis')\n\nclass InfluxDB2Node extends Node {\n  inEnable: number = 0;\n  inJsonInput: number = 1;\n  outError: number = 0;\n  outLastExport: number = 1;\n  outMsg: number = 2;\n  client;\n  lastJSON;\n  constructor() {\n    super();\n    this.title = NODE_INFO.history[\"influx-db-2\"].title;\n    this.description = NODE_INFO.history[\"influx-db-2\"].description;\n    this.addInputWithSettings('enable', Type.BOOLEAN, false, 'Enable');\n    this.addInput('json-input', Type.JSON);\n    this.addOutput('error', Type.BOOLEAN);\n    this.addOutput('outLastExport', Type.STRING);\n    this.addOutput('outMsg', Type.STRING);\n    this.settings['useDefaultTags'] = NodeSetting.create({ description: 'useDefaultTags', value: false, type: SettingType.BOOLEAN });\n    this.settings['dontUseEnv'] = NodeSetting.create({ description: 'Dont use env settings', value: false, type: SettingType.BOOLEAN });\n    this.settings['url'] = NodeSetting.create({ description: 'URL', value: '', type: SettingType.STRING });\n    this.settings['token'] = NodeSetting.create({ description: 'Token', value: '', type: SettingType.STRING });\n    this.settings['org'] = NodeSetting.create({ description: 'Org', value: '', type: SettingType.STRING });\n    this.settings['bucket'] = NodeSetting.create({ description: 'Bucket', value: '', type: SettingType.STRING });\n\n    this.setSettingsConfig({\n      groups: [\n        //{ host: { weight: 3 }, port: { weight: 1 } },\n        //{ user: {}, password: {} },\n        { period: { weight: 2 }, periodUnits: {} },\n      ],\n      conditions: {\n        url: setting => {\n          return !!setting['dontUseEnv'].value;\n        },\n        token: setting => {\n          return !!setting['dontUseEnv'].value;\n        },\n        org: setting => {\n          return !!setting['dontUseEnv'].value;\n        },\n        bucket: setting => {\n          return !!setting['dontUseEnv'].value;\n        },\n      },\n    });\n  }\n  \n  onAdded() {\n  }\n\n  createClient() {\n    let {url, token, org, bucket} = config.influxDb2;\n    if (this.settings['dontUseEnv'].value) {\n      // dont use env\n      url = this.settings['url'].value;\n      token = this.settings['token'].value;\n      org = this.settings['org'].value;\n      bucket = this.settings['bucket'].value;\n    } \n    this.client = new InfluxDB({url: url, token: token}).getWriteApi(org, bucket);\n  }\n\n  onInputUpdated() {\n    if (this.side !== Side.server) return; // only execute on server\n    if (!this.settings['enable'].value) {\n      this.setOutputData(this.outMsg, `INFLUX-DB-2 NODE: not enabled`, true);\n      return;\n    }\n\n    // update node name - UPDATE TITLE FROM JSON INSTEAD\n    /*\n    if (this.inputs[0].updated) {\n      let nodeName = this.getInputData(this.inName);\n      if (!isNull(nodeName)) {\n        this.name = nodeName;\n        this.broadcastNameToClients();\n      }\n    }\n    */\n\n    let input = this.getInputData(this.inJsonInput);\n    console.log('INFLUX-DB-2: input = ', input)\n\n    if (isNull(input)) return;\n    const hasMeasurement = input.hasOwnProperty('measurement');\n    const hasMeasurementTags = input.hasOwnProperty('tags');\n    const hasMeasurementFields = input.hasOwnProperty('fields');\n\n    if (isNull(input.tags)) {\n      this.setOutputData(this.outError, false, true);\n      this.setOutputData(this.outMsg, `!tags! is empty,`, true);\n      return;\n    }\n    if (isNull(input.measurement)) {\n      this.setOutputData(this.outError, false, true);\n      this.setOutputData(this.outMsg, `!measurement! is empty,`, true);\n      return;\n    }\n    if (isNull(input.fields)) {\n      this.setOutputData(this.outError, false, true);\n      this.setOutputData(this.outMsg, `!fields! is empty,`, true);\n      return;\n    }\n    if (hasMeasurement && hasMeasurementTags && hasMeasurementFields) {\n      this.setOutputData(this.outError, false, true);\n      this.setOutputData(this.outLastExport, moment().format());\n      this.setOutputData(this.outMsg, `influx write to DB`, true);\n\n      Object.keys(input.tags).forEach(key => {\n        if (!input.tags[key]) {\n          delete input.tags[key];\n        }\n      });\n\n      PlatformDataSource.getPlatform().then(e => {\n        var platformInfo = e;\n        this.setOutputData(2, e)\n      }).catch(err => {\n        this.debugInfo(`INFLUXDB-2 NODE: try/catch  getPlatform info, ${err}`);\n      })\n\n      this.createClient();\n\n      if (this.settings['useDefaultTags'].value) this.client.useDefaultTags({location: 'test'})\n\n      const point = new Point(input.measurement)\n      point.timestamp(new Date());\n      for (const tag in input.tags) point.tag(tag, input.tags[tag]);\n      for (const field in input.fields) {\n        switch (typeof input.fields[field]){\n          case 'number':\n            console.log('its a number')\n            point.floatField(field, input.fields[field])\n            break;\n          case 'string':\n            console.log('its a string')\n            point.stringField(field, input.fields[field])\n            break;\n          case 'boolean':\n            console.log('its a boolean')\n            point.booleanField(field, input.fields[field])\n            break;\n          default:\n            console.log('I dont know its type')\n            point.floatField(field, input.fields[field])\n            break;\n        }\n      }\n      this.client.writePoint(point);\n      console.log(`INFLUXDB-2: ${point.toLineProtocol(this.client)}`);\n\n      this.client.close()\n        .then(() => {\n          console.log('SUCCESS')\n        })\n        .catch(e => {\n          console.error(e)\n          if (e instanceof HttpError && e.statusCode === 401) {\n            console.log('INFLUXDB-2: Run ./onboarding.js to setup a new InfluxDB database.')\n          }\n          console.log('\\n INFLUXDB-2:  Finished ERROR')\n          this.setOutputData(this.outError, true, true);\n          this.setOutputData(this.outMsg, `error on influx write, ${e}`, true);\n        })\n    } else {\n      this.debugInfo(`INFLUX-DB NODE: input.hasOwnProperty is missing`);\n      this.setOutputData(this.outError, true, true);\n      this.setOutputData(this.outMsg, `input.hasOwnProperty is missing`, true);\n    }\n  }\n\n  onAfterSettingsChange() {\n    if (this.side !== Side.server) return; // only execute on server\n    /*\n    if (this.getInputData(this.inEnable)) this.createClient();\n    else {\n      if (this.client) this.client.dispose()\n        .catch(e => {\n          console.log(`INFLUX-DB-2:`, e)\n        })\n      this.client = null;\n      this.setOutputData(this.outMsg, `INFLUX-DB-2 NODE: not enabled`, true);\n      return;\n    }\n    */\n   this.onInputUpdated();\n  }\n}\nNodeTypeRegistry.registerNodeType('history/influx-db-2', InfluxDB2Node);\n\n/*\ninfluxDb2    : {\n    protocol    : env?.INFLUX_DB_2_PROTOCOL ?? 'http',\n    url         : env?.INFLUX_DB_2_URL ?? '',\n    token       : env?.INFLUX_DB_2_TOKEN ?? '',\n    bucket      : env?.INFLUX_DB_2_BUCKET ?? '',\n    org         : env?.INFLUX_DB_2_ORG ?? '',\n    username    : env?.INFLUX_DB_2_USERNAME ?? '',\n    password    : env?.INFLUX_DB_2_PASSWORD ?? '',\n  },\n*/","module.exports = require(\"@influxdata/influxdb-client\");","module.exports = require(\"@influxdata/influxdb-client-apis\");","import { Container } from '../../container';\nimport { Type } from '../../node-io';\nimport HistoryBase from './HistoryBase';\nimport { NODE_INFO } from '../../node-info';\n\nclass HistoryNode extends HistoryBase {\n  constructor() {\n    super();\n   \n    this.title = NODE_INFO.history.history.title;\n    this.description = NODE_INFO.history.history.description;\n    \n    this.addInput('input', Type.ANY);\n    this.addHistorySettingsConfig();\n  }\n}\nContainer.registerNodeType('history/history', HistoryNode);\n","import { isNull } from '../../../utils/helper';\nimport { Container } from '../../container';\nimport { Node } from '../../node';\nimport { NODE_INFO } from '../../node-info';\nimport { NodeSetting, SettingType, Type } from '../../node-io';\nimport TimeUtils from '../../utils/time-utils';\n\nexport class PointPersistence extends Node {\n  lastInterval = 1000;\n  runState: boolean = true;\n  timeoutFunc;\n  lastTrigger;\n\n  constructor() {\n    super();\n    this.title = NODE_INFO.history.persistence.title;\n    this.description = NODE_INFO.history.persistence.description;\n    this.addInputWithSettings('enable', Type.BOOLEAN, true, 'Enable value resend timer');\n    this.addInput('input', Type.ANY);\n    this.addInputWithSettings('interval', Type.NUMBER, 30, 'Interval');\n    this.addInput('trigger', Type.BOOLEAN);\n    this.addOutput('output', Type.ANY);\n    this.properties['output'] = null;\n    this.settings['preventDuplicates'] = NodeSetting.create({\n      description: 'Prevent Duplicates)',\n      value: true,\n      type: SettingType.BOOLEAN,\n    });\n    this.settings['time'] = NodeSetting.create({\n      description: 'Units',\n      type: SettingType.DROPDOWN,\n      config: {\n        items: [\n          { value: 'milliseconds', text: 'Milliseconds' },\n          { value: 'seconds', text: 'Seconds' },\n          { value: 'minutes', text: 'Minutes' },\n          { value: 'hours', text: 'Hours' },\n        ],\n      },\n      value: 'seconds',\n    });\n    this.setSettingsConfig({\n      groups: [{ interval: { weight: 2 }, time: {} }],\n    });\n  }\n\n  onAdded() {\n    clearInterval(this.timeoutFunc);\n    this.inputs[2]['name'] = `[interval] (${this.settings['time'].value})`;\n    const enable = this.getInputData(0);\n    if (!enable) {\n      this.setOutputData(0, this.properties['output']);\n      this.runState = false;\n      return;\n    }\n    let interval = this.getInputData(2);\n    interval = TimeUtils.timeConvert(interval, this.settings['time'].value);\n    this.timeoutFunc = setInterval(() => {\n      const message = this.getInputData(1);\n      this.setOutputData(0, this.properties['output']);\n    }, interval);\n    this.onInputUpdated();\n  }\n\n  onInputUpdated() {\n    // trigger\n    let trigger = this.getInputData(3);\n    const message = this.getInputData(1); //data input\n    if (message !== undefined && message !== null && message.length) {\n      this.properties['output'] = message;\n      this.setOutputData(0, this.properties['output']);\n    }\n\n    if (trigger) {\n      if (\n        this.properties['output'] !== undefined &&\n        this.properties['output'] !== null &&\n        this.properties['output'].length\n      ) {\n        this.setOutputData(0, this.properties['output']);\n      }\n    }\n\n    //pass data on input updated\n    if (this.inputs[1].updated) {\n      const preventDuplicates = this.settings['preventDuplicates'].value\n      if(!isNull(message)){\n        this.properties['output'] = message;\n        this.setOutputData(0, this.properties['output'], preventDuplicates);\n      }\n    }\n\n    // interval\n    const enable = this.getInputData(0);\n    if (!enable && this.runState) {\n      clearInterval(this.timeoutFunc);\n      this.setOutputData(0, this.properties['output']);\n      this.runState = false;\n      return;\n    } else if (!enable && !this.runState) {\n      this.setOutputData(0, this.properties['output']);\n      this.runState = false;\n      return;\n    } else if (enable) {\n      let interval = this.getInputData(2);\n      interval = TimeUtils.timeConvert(interval, this.settings['time'].value);\n      if (this.runState) {\n        if (interval != this.lastInterval) {\n          this.lastInterval = interval;\n          clearInterval(this.timeoutFunc);\n          this.timeoutFunc = setInterval(() => {\n            this.setOutputData(0, this.properties['output']);\n          }, interval);\n        }\n        return;\n      } else if (!this.runState) {\n        this.runState = true;\n        this.timeoutFunc = setInterval(() => {\n          this.setOutputData(0, this.properties['output']);\n        }, interval);\n      }\n    }\n  }\n\n  onAfterSettingsChange() {\n    this.inputs[2]['name'] = `[interval] (${this.settings['time'].value})`;\n    this.onInputUpdated();\n  }\n}\nContainer.registerNodeType('history/persistence', PointPersistence);\n","import * as fs from 'fs';\nimport config from '../../../config';\nimport PlatformDataSource from '../../../database/datasource/PlatformDataSource';\nimport { isJSON, isNull } from '../../../utils/helper';\nimport { Container } from '../../container';\nimport { Node } from '../../node';\nimport { NODE_INFO } from '../../node-info';\nimport { Side } from '../../node-interface';\nimport { NodeSetting, SettingType, Type } from '../../node-io';\nimport tagRefs from '../../utils/points/point-ref-utils';\n\nenum TOPIC_OPTIONS {\n  NA = 'na',\n  UPPERCASE_SLASH = 'Upper case and /',\n  LOWERCASE_SLASH = 'Lower case and /',\n  UPPERCASE_UNDERSCORE = 'Upper case and _',\n  LOWERCASE_UNDERSCORE = 'Lower case and _',\n}\n\nclass PointTagNode extends Node {\n  //in nums\n  inputOneNum = 0;\n  inputTwoNum = 1;\n  inputThreeNum = 2;\n  pointFeedbackNum = 3;\n  inputJsonNum = 4;\n  pointIdNumIn = 5;\n  equipRefNumIn = 6;\n  measurementNumIn = 7;\n  manualTagsNum = 8;\n  //out nums\n  pointValNumOut = 0;\n  nameNumOut = 1;\n  topicNumOut = 2;\n  jsonNumOut = 3;\n  errorNumOut = 4;\n\n  constructor() {\n    super();\n    this.title = NODE_INFO.history[\"point-tags\"].title;\n    this.description = NODE_INFO.history[\"point-tags\"].description;\n    this.settings['point_group'] = NodeSetting.create({\n      description: 'Point Value',\n      value: '',\n      type: SettingType.GROUP,\n    });\n    this.settings['preventDuplicates'] = NodeSetting.create({\n      description: 'Prevent Duplicates)',\n      value: true,\n      type: SettingType.BOOLEAN,\n    });\n    this.addInputWithSettings('in 1', Type.NUMBER, null, 'in 1', false);\n    this.addInputWithSettings('in 2', Type.NUMBER, null, 'in 2', false);\n    this.addInputWithSettings('in 3', Type.NUMBER, null, 'in 3', false);\n    this.addInputWithSettings('point-feedback', Type.NUMBER, null, 'point-feedback', false);\n    this.addInput('json-input', Type.STRING);\n    this.settings['point_group'] = NodeSetting.create({\n      description: 'Point/Equip Settings',\n      value: '',\n      type: SettingType.GROUP,\n    });\n    this.addInputWithSettings('pointId', Type.STRING, 'point id', 'point id/name', false);\n    this.addInputWithSettings('equipRef', Type.STRING, 'FCU123', 'Equipment Reference', false);\n    this.addInputWithSettings('measurement', Type.STRING, 'points', 'InfluxDB table name', false);\n    this.settings['topicOptions'] = NodeSetting.create({\n      description: 'Enter manual (optional)',\n      value: false,\n      type: SettingType.BOOLEAN,\n    });\n    this.addOutput('output', Type.NUMBER);\n    this.addOutput('point-name', Type.STRING);\n    this.addOutput('point-topic', Type.STRING);\n    this.addOutput('output-json', Type.JSON);\n    this.addOutput('output-error', Type.ANY);\n    this.settings['tags_group'] = NodeSetting.create({\n      description: 'Auto generated  Tag Settings',\n      value: '',\n      type: SettingType.GROUP,\n    });\n    this.settings['equipType'] = NodeSetting.create({\n      description: 'Equipment Type',\n      type: SettingType.DROPDOWN,\n      config: {\n        items: tagRefs.tagCategory,\n      },\n    });\n    this.settings['tags'] = NodeSetting.create({\n      description: 'Point Type',\n      value: null,\n      type: SettingType.DROPDOWN,\n    });\n    this.settings['tags_values'] = NodeSetting.create({\n      description: 'tags values',\n      value: null,\n      type: SettingType.READONLY,\n    });\n\n    this.settings['tags_group_manual'] = NodeSetting.create({\n      description: 'Manual Tag Settings',\n      value: '',\n      type: SettingType.GROUP,\n    });\n    this.settings['manualSettings'] = NodeSetting.create({\n      description: 'Enter manual (optional)',\n      value: false,\n      type: SettingType.BOOLEAN,\n    });\n    this.settings['manualEquip'] = NodeSetting.create({\n      description: 'User equip (optional)',\n      value: 'CHILLER',\n      type: SettingType.STRING,\n    });\n    this.settings['manualSensor'] = NodeSetting.create({\n      description: 'User sensor (optional)',\n      value: 'Supply Air Zone Sensor',\n      type: SettingType.STRING,\n    });\n    this.addInputWithSettings('manualTags', Type.JSON, '[\"sensor\", \"ahu\"]', 'manual Tags', false);\n  }\n\n  onAdded() {\n    this.onAfterSettingsChange();\n    const file = `${config.dataDir}/platform.db`;\n    this.onWatchChange(file)\n  }\n\n  onWatchChange(file: string) {\n    try {\n      fs.watch(file, (eventType, filename) => {\n        this.debugInfo(`PLATFORM NODE: file watch platform db file change, ${eventType} ${filename}`);\n        this.onInputUpdated();\n      });\n    } catch (err) {\n      this.debugInfo(`PLATFORM NODE ERROR: file watch platform db file error, ${err}`);\n    }\n  }\n  async onInputUpdated() {\n    if (this.side !== Side.server) return; // only execute on server\n    let deviceId: string, clientId: string, clientName: string, siteId: string, siteName: string, siteAddress: string, state: string, city: string, zip: string, country: string, lat: string, lon: string\n    await PlatformDataSource.getPlatform().then(e => {\n      deviceId = e.deviceID\n      clientId = e.clientId\n      clientName = e.clientName\n      siteId = e.siteId\n      siteName = e.siteName\n      siteAddress = e.siteAddress\n      state = e.state\n      city = e.city\n      zip = e.zip\n      country = e.country\n      lat = e.lat\n      lon = e.lon\n    }).catch(err => {\n      this.debugInfo(`PLATFORM NODE: try/catch  getPlatform info, ${err}`);\n    })\n    const preventDuplicates = this.settings['manualEquip'].value\n    const pointFeedback = this.getInputData(this.pointFeedbackNum);\n    const measurement = this.getInputData(this.measurementNumIn);\n    let pointId = this.getInputData(this.pointIdNumIn);\n    let jsonInput = this.getInputData(this.inputJsonNum);\n    //small point priority\n    let inputOne = this.getInputData(this.inputOneNum);\n    let inputTwo = this.getInputData(this.inputTwoNum);\n    let inputThree = this.getInputData(this.inputThreeNum);\n    let pointValue: number;\n    let pointValueIsJSON = false;\n    // json input\n    if (!isNull(jsonInput)) {\n      let isJSON = true;\n      try {\n        jsonInput = JSON.parse(jsonInput);\n        const msg = `PLATFORM NODE: try/catch  JSON.parse, ${JSON.stringify(jsonInput)}`\n        this.debugInfo(msg);\n        this.setOutputData(this.errorNumOut, pointValue, true);\n      } catch {\n        isJSON = false;\n      }\n      if (isJSON && jsonInput.hasOwnProperty('pointValue') && typeof jsonInput.pointValue === Type.NUMBER) {\n        pointValue = jsonInput.pointValue\n        pointValueIsJSON = true;\n        this.debugInfo(`PLATFORM NODE: try/catch  jsonInput.hasOwnProperty('pointValue') in 3 ${inputThree}`);\n        this.setOutputData(this.pointValNumOut, pointValue, preventDuplicates);\n      }\n      if (isJSON && jsonInput.hasOwnProperty('name') && typeof jsonInput.name === Type.STRING) {\n        pointId = jsonInput.name\n        this.debugInfo(`PLATFORM NODE: try/catch  jsonInput.hasOwnProperty('name') ${pointId}`);\n      }\n    }\n    if (!isNull(inputOne)) {\n      pointValue = inputOne;\n      this.setOutputData(this.pointValNumOut, pointValue, preventDuplicates);\n    } else if (!isNull(inputTwo)) {\n      pointValue = inputTwo;\n      this.setOutputData(this.pointValNumOut, pointValue, preventDuplicates);\n    } else if (!isNull(inputThree) && pointValueIsJSON === false) {\n      pointValue = inputThree;\n      this.setOutputData(this.pointValNumOut, pointValue, preventDuplicates);\n    }\n    if(isNull(pointId)){\n      const msg = `POINT-TAG NODE: pointId is null so return`\n      this.debugInfo(msg);\n      this.setOutputData(this.errorNumOut, pointValue, true);\n      return\n    }\n    if(isNull(measurement)){\n      const msg = `POINT-TAG NODE: measurement is null so return`\n      this.debugInfo(msg);\n      this.setOutputData(this.errorNumOut, pointValue, true);\n      return\n    }\n    let pointArray = JSON.stringify({out: pointValue, in1: inputOne , in2: inputTwo,  in3: inputThree})\n    const equipRef = this.getInputData(this.equipRefNumIn);\n    let equipType = this.settings['equipType'].value;\n    let topic = `${deviceId}/${equipRef}/${pointId}`.toLocaleLowerCase()\n    this.setOutputData(this.nameNumOut, pointId, preventDuplicates);\n    this.setOutputData(this.topicNumOut, topic, preventDuplicates);\n\n    //manual settings\n    const manualSettings = this.settings['manualSettings'].value\n    const manualEquip = this.settings['manualEquip'].value\n    const manualSensor = this.settings['manualSensor'].value\n    const manualTags = this.getInputData(this.manualTagsNum);\n\n    let tagSetting;\n    if (!manualSettings) {\n      tagSetting = tagRefs.tagType(equipType)\n      if (isNull(tagSetting)) {\n        return;\n      }\n      this.settings['tags'].config = {\n        items: Object.keys(tagSetting),\n      };\n      this.broadcastSettingsToClients();\n    }\n    let pointType = this.settings['tags'].value\n    let tags: any;\n    if (manualSettings) {\n      pointType = manualSensor;\n      equipType = manualEquip;\n      tags = manualTags;\n    } else {\n      for (var key in tagSetting) {\n        if (key == pointType) {\n          tags = tagSetting[key]\n        }\n      };\n    }\n    let fields = { value: pointValue }\n    let pointArr = { topic: topic, pointType: pointType, equipRef: equipRef, pointArray:pointArray, pointFeedback: pointFeedback, equipType: equipType, deviceId: deviceId, pointId: pointId, clientId: clientId, clientName: clientName, siteId: siteId, siteName: siteName, siteAddress: siteAddress, city: city, zip: zip, state: state, country: country, lat: lat, lon: lon }\n    if (tags) {\n      if (!manualSettings) {\n        this.settings['tags_values'].value = tags.tags\n        this.broadcastSettingsToClients();\n        tags = tags.tags\n      }\n      let pointTags = {}\n      if (isJSON(tags)) {\n        if (Object.keys(tags).length > 0) { //make sure array isnt empty\n          tags.forEach(x => { pointTags[x] = x })\n          const out = { ...pointArr, ...pointTags }\n          const outOut = { tags: out, measurement: measurement, fields: fields, topic: topic }\n          this.setOutputData(this.jsonNumOut, outOut, preventDuplicates);\n        } else {\n          const msg = `PLATFORM NODE: tag array is empty`\n          this.debugInfo(msg);\n          this.setOutputData(this.errorNumOut, pointValue, true);\n        }\n      }\n    }\n  }\n  onAfterSettingsChange() {\n    this.onInputUpdated();\n  }\n}\nContainer.registerNodeType('history/point-tags', PointTagNode);\n","import { Container } from '../../container';\nimport { Node } from '../../node';\nimport { NODE_INFO } from '../../node-info';\nimport { NodeSetting, SettingType, Type } from '../../node-io';\n\nclass DeadbandNode extends Node {\n  constructor() {\n    super();\n\n    this.title = NODE_INFO.hvac.deadband.title;\n    this.description = NODE_INFO.hvac.deadband.description;\n\n    this.addInput('input', Type.NUMBER);\n    this.addInputWithSettings('setpoint', Type.NUMBER, 0, 'Setpoint');\n    this.addInputWithSettings('deadband', Type.NUMBER, 0, 'Deadband');\n    this.addOutput('out', Type.BOOLEAN);\n    this.addOutput('out not', Type.BOOLEAN);\n    this.settings['invert'] = NodeSetting.create({\n      description: 'Reverses ON direction when true',\n      value: false,\n      type: SettingType.BOOLEAN,\n    });\n  }\n\n  onAdded() {\n    this.setOutputData(0, false);\n  }\n\n  onInputUpdated() {\n    const input = this.getInputData(0);\n    const setpoint = this.getInputData(1);\n    let deadband = this.getInputData(2);\n\n    const invert = this.settings['invert'].value;\n    if (invert == true) deadband = deadband * -1;\n\n    const risingEdge = setpoint + deadband / 2;\n    const fallingEdge = setpoint - deadband / 2;\n\n    if (risingEdge > fallingEdge) {\n      if (input <= fallingEdge) {\n        this.setOutputData(0, false, true);\n      }\n      if (input >= risingEdge) {\n        this.setOutputData(0, true, true);\n      }\n    } else if (risingEdge < fallingEdge) {\n      if (input >= fallingEdge) {\n        this.setOutputData(0, false, true);\n      }\n      if (input <= risingEdge) {\n        this.setOutputData(0, true, true);\n      }\n    }\n  }\n\n  onAfterSettingsChange() {\n    this.onInputUpdated();\n  }\n}\nContainer.registerNodeType('hvac/deadband', DeadbandNode);\n","import { Container } from '../../container';\nimport { Node } from '../../node';\nimport { Type } from '../../node-io';\nimport { NODE_INFO } from '../../node-info';\n\nclass ThermostatNode extends Node {\n  clgMode: boolean;\n  htgMode: boolean;\n\n\n  constructor() {\n    super();\n\n    this.title = NODE_INFO.hvac.thermostat.title;\n    this.description = NODE_INFO.hvac.thermostat.description; \n   \n    this.addInput('input', Type.NUMBER);\n    this.addInputWithSettings('enable', Type.BOOLEAN, true, 'Enable');\n    this.addInputWithSettings('setpoint', Type.NUMBER, 20, 'Setpoint');\n    this.addInputWithSettings('CLG offset', Type.NUMBER, 1, 'CLG offset');\n    this.addInputWithSettings('HTG offset', Type.NUMBER, 1, 'HTG offset');\n    this.addOutput('CLG Mode', Type.BOOLEAN);\n    this.addOutput('HTG Mode', Type.BOOLEAN);\n    this.setOutputData(0, false);\n    this.setOutputData(1, false);\n    this.clgMode = false;\n    this.htgMode = false;\n  }\n\n  onAdded() {\n \n    this.setOutputData(0, false);\n    this.setOutputData(1, false);\n    this.onInputUpdated();\n  }\n\n  onExecute(){\n    //this.onInputUpdated();\n  }\n\n  onInputUpdated() {\n    let enable = this.getInputData(1);\n    if (!enable) {\n      this.setOutputData(0, false);\n      this.setOutputData(1, false);\n      this.clgMode = false;\n      this.htgMode = false;\n      return;\n    }\n    const input = this.getInputData(0);\n    const setpoint = this.getInputData(2);\n    const clgOffset = this.getInputData(3);\n    const htgOffset = this.getInputData(4);\n\n    const clgSP = setpoint + clgOffset;\n    const htgSP = setpoint - htgOffset;\n\n    if (input < htgSP) {\n      this.setOutputData(0, false);\n      this.setOutputData(1, true);\n      this.htgMode = true;\n      this.clgMode = false;\n    } else if (input > clgSP) {\n      this.setOutputData(0, true);\n      this.setOutputData(1, false);\n      this.clgMode = true;\n      this.htgMode = false;\n    } else if ((this.clgMode && input < setpoint) || (this.htgMode && input > setpoint)) {\n      this.setOutputData(0, false);\n      this.setOutputData(1, false);\n      this.clgMode = false;\n      this.htgMode = false;\n    }\n  }\n\n  onAfterSettingsChange() {\n    this.onInputUpdated();\n  }\n}\nContainer.registerNodeType('hvac/thermostat', ThermostatNode);\n","import { NodeTypeRegistry } from '../../node-type-registry';\nimport { Node } from '../../node';\nimport { NODE_INFO } from '../../node-info';\nimport { NodeSetting, SettingType, Type } from '../../node-io';\nimport Utils from '../../utils';\nimport TimeUtils, { TIME_TYPE } from '../../utils/time-utils';\nimport { SSL_OP_SSLEAY_080_CLIENT_DH_BUG } from 'constants';\n\nclass LeadLagStagingNode extends Node {\n  //Inputs\n  ENABLESLOT = 0;\n  ROTATESLOT = 1;\n  UPSLOT = 2;\n  DOWNSLOT = 3;\n  DELAYSLOT = 4;\n  MINONSLOT = 5;\n  FAULTSTARTSLOT = 6;\n\n  //Outputs\n  JSONSLOT = 0;\n  ORDERSLOT = 1;\n  STAGESLOT = 2;\n  OUTPUTSTARTSLOT = 3;\n\n  lastRotate;\n  lastEnable;\n\n  constructor() {\n    super();\n    this.title = NODE_INFO.hvac['lead-lag-staging'].title;\n    this.description = NODE_INFO.hvac['lead-lag-staging'].description; \n   \n    this.addInputWithSettings('enable', Type.BOOLEAN, true, 'Enable');\n    this.addInput('rotateLead', Type.BOOLEAN);\n    this.addInput('stageUp', Type.BOOLEAN);\n    this.addInput('stageDown', Type.BOOLEAN);\n    this.settings['numUnits'] = NodeSetting.create({\n      description: 'Number of Units',\n      value: 2,\n      type: SettingType.NUMBER,\n    });\n    this.addInputWithSettings('stageUpDelay (minutes)', Type.NUMBER, 10, 'Stage Up Delay (Minutes)');\n    this.addInputWithSettings('minOnTime (minutes)', Type.NUMBER, 5, 'Minimum On Time (Minutes)');\n    this.settings['stageUpOnFault'] = NodeSetting.create({\n      description: 'Stage Up On Running Unit Fault?',\n      value: false,\n      type: SettingType.BOOLEAN,\n    });\n\n    this.addOutput('outputJSON', Type.JSON);\n    this.addOutput('order', Type.STRING);\n    this.addOutput('currentStage', Type.NUMBER);\n\n    this.setSettingsConfig({\n      groups: [],\n      conditions: {},\n    });\n  }\n\n  init(){\n    this.properties['currentOrder'] = [1,2];\n    this.properties['orderIndex'] = 0;\n    this.properties['rotationsList'];\n  }\n\n  onCreated() {\n    this.onAfterSettingsChange();\n  }\n\n  onAdded() {\n    this.EXECUTE_INTERVAL = 10000;\n    this.onAfterSettingsChange();\n  }\n\n  onExecute(){\n    this.onInputUpdated();\n  }\n\n  onAfterSettingsChange() {\n    this.updateCount();\n    this.onInputUpdated();\n  }\n\n  onInputUpdated() {\n    this.initializeOutputJSON();\n    const enable = this.getInputData(this.ENABLESLOT);\n\n    const rotate = this.getInputData(this.ROTATESLOT);\n    if (rotate && !this.lastRotate){\n      this.properties['orderIndex']++;\n      if (this.properties['orderIndex'] >= this.properties['rotationsList'].length) this.properties['orderIndex'] = 0;\n      this.properties['lastRotateTime'] = Date.now();\n    }\n    this.lastRotate = rotate;\n    this.properties['currentOrder'] = this.properties['rotationsList'][this.properties['orderIndex']];\n\n    if (enable) {\n      if (!this.lastEnable) {\n        this.properties['currentStage'] = 1;\n        this.properties['stageStartTime'] = Date.now();\n      }\n\n      const stageUP = this.getInputData(this.UPSLOT);\n      const stageDOWN = this.getInputData(this.DOWNSLOT);\n      const upDelay = TimeUtils.timeConvert(this.getInputData(this.DELAYSLOT), TIME_TYPE.MINUTES);\n      const minOnDelay = TimeUtils.timeConvert(this.getInputData(this.MINONSLOT), TIME_TYPE.MINUTES);\n      const currentStage = this.properties['currentStage'];\n      var stageChange = 0;\n\n\n      if(stageUP && !stageDOWN && currentStage < this.properties['numEnableOutputs']){\n        if (Date.now() > this.properties['stageStartTime'] + upDelay) {\n          stageChange++;\n        }\n      }\n\n      if(stageDOWN && !stageUP && currentStage > 1){\n        if (Date.now() > this.properties['stageStartTime'] + minOnDelay) {\n          stageChange--;\n        }\n      }\n\n      if (this.settings['stageUpOnFault'].value){\n        var faultArray = [];\n        var fault, index;\n        for (var i = 0; i < this.settings['numUnits'].value; i++) {\n          fault = this.getInputData(this.FAULTSTARTSLOT + i);\n          index = this.properties['currentOrder'].indexOf(this.convertNumToLetter(i))\n          fault ? faultArray[index] = true : faultArray[index] = false;\n        }\n        this.properties['outputJSON']['faultArray'] = faultArray;\n        while ((currentStage + stageChange) < this.properties['numEnableOutputs'] && faultArray[currentStage + stageChange - 1]){\n          stageChange++\n        }\n      }\n \n      if (stageChange !== 0){\n        if (this.properties['currentStage'] + stageChange > this.properties['numEnableOutputs']) this.properties['currentStage'] = this.properties['numEnableOutputs'];\n        else this.properties['currentStage'] += stageChange;\n        this.properties['stageStartTime'] = Date.now();\n      }\n\n      this.setOutputs();\n    }\n    // For disabled controller\n    else this.resetController();\n\n    this.lastEnable = enable;\n    this.setOutputJSON();\n\n  }\n\n  resetController(){\n    this.properties['currentStage'] = 0;\n    this.properties['stageStartTime'] = null;\n    this.setOutputData(this.ORDERSLOT, this.properties['currentOrder'].toString());\n    this.setOutputData(this.STAGESLOT, 0);\n    for(var x = 0; x < this.properties['numEnableOutputs']; x++){\n      this.setOutputData(x + this.OUTPUTSTARTSLOT, false);\n    }\n  }\n\n  setOutputs() {\n    this.setOutputData(this.ORDERSLOT, this.properties['currentOrder'].toString());\n    this.setOutputData(this.STAGESLOT, this.properties['currentStage']);\n    var output, index;\n    for(var x = 0; x < this.properties['numEnableOutputs']; x++){\n      index = this.properties['currentOrder'].indexOf(this.convertNumToLetter(x));\n      output = this.properties['currentStage'] >= (index+1);\n      this.setOutputData(x + this.OUTPUTSTARTSLOT, output);\n    }\n  }\n\n  updateCount(){\n    if (this.properties['numEnableOutputs'] !== this.settings['numUnits'].value || this.properties['numFaultInputs'] !== this.settings['numUnits'].value){\n      this.properties['orderIndex'] = 0;\n    }\n    this.updateOutputsCount();\n    this.updateInputsCount();\n    this.generateRotations();\n    this.properties['currentOrder'] = this.properties['rotationsList'][this.properties['orderIndex']];\n  }\n\n  generateRotations(){\n    var list = [];\n    const count = this.properties['numEnableOutputs'];\n    for (var x = 0; x < count; x++) list.push(this.convertNumToLetter(x));\n    var result = [];\n    result.push(Array.from(list));\n    var shiftVal;\n    for (var y = 1; y < count; y++) {\n      shiftVal = list.shift();\n      list.push(shiftVal);\n      result.push(Array.from(list));\n    }\n    this.properties['rotationsList'] = result;\n  }\n\n  updateOutputsCount() {\n    this.settings['numUnits'].value = Math.min(Math.max(2, this.settings['numUnits'].value), 10);\n    this.properties['numEnableOutputs'] = this.getOutputsCount() - this.OUTPUTSTARTSLOT;\n    const diff = this.settings['numUnits'].value - this.properties['numEnableOutputs'];\n    if (diff == 0) return;\n    //add\n    let num = null;\n    if (diff > 0) for (let i = 0; i < diff; i++) {\n      num = this.addOutput('Unit'+ this.convertNumToLetter(this.properties['numEnableOutputs'] + i), Type.BOOLEAN);\n      this.setOutputData(num, false);\n    }\n    //remove\n    if (diff < 0) {\n      let ids = Object.keys(this.outputs);\n      for (let i = 0; i > diff; i--) {\n        let id = ids[ids.length + i - 1];\n        this.removeOutput(+id);\n      }\n    }\n    this.properties['numEnableOutputs'] = this.settings['numUnits'].value;\n    if (this.properties['currentStage'] > this.properties['numUnits']) this.properties['currentStage'] = this.properties['numUnits'];\n  }\n\n  updateInputsCount() {\n    this.settings['numUnits'].value = Math.min(Math.max(2, this.settings['numUnits'].value), 10);\n    this.properties['numFaultInputs'] = this.getInputsCount() - this.FAULTSTARTSLOT;\n    var requiredFaultInputs = 0;\n    if (this.settings['stageUpOnFault'].value) requiredFaultInputs = this.settings['numUnits'].value;\n    const diff = requiredFaultInputs - this.properties['numFaultInputs'];\n    if (diff == 0) return;\n    //add\n    let num = null;\n    if (diff > 0) for (let i = 0; i < diff; i++) {\n      num = this.addInput('Fault'+ this.convertNumToLetter(this.properties['numFaultInputs'] + i), Type.BOOLEAN);\n    }\n    //remove\n    if (diff < 0) {\n      let ids = Object.keys(this.inputs);\n      for (let i = 0; i > diff; i--) {\n        let id = ids[ids.length + i - 1];\n        this.removeInput(+id);\n      }\n    }\n    if (this.settings['stageUpOnFault'].value) this.properties['numFaultInputs'] = this.settings['numUnits'].value;\n    else this.properties['numFaultInputs'] = 0;\n  }\n\n  convertNumToLetter(convertNumber:number = 0){\n    return String.fromCharCode(65 + convertNumber);\n  }\n\n  initializeOutputJSON(){\n    this.properties['outputJSON'] = {\n      enableInput: this.getInputData(this.ENABLESLOT),\n      rotateInput: this.getInputData(this.ROTATESLOT),\n      stageUpInput: this.getInputData(this.UPSLOT),\n      stageDownInput: this.getInputData(this.DOWNSLOT),\n      stageUpDelay: this.getInputData(this.DELAYSLOT),\n      minOnTime: this.getInputData(this.MINONSLOT),\n      order: null,\n      orderIndex: null,\n      numUnits: null,\n      currentStage: null,\n      stageArray: [],\n      useFaultInputs: null,\n      faultArray: [],\n      currentTime: null,\n      stageStartTime: null,\n    };\n  }\n\n  setOutputJSON(){\n    this.properties['outputJSON']['order'] = this.properties['currentOrder'];\n    this.properties['outputJSON']['orderIndex'] = this.properties['orderIndex'];\n    this.properties['outputJSON']['numUnits'] = this.settings['numUnits'].value;\n    this.properties['outputJSON']['currentStage'] = this.properties['currentStage'];\n    this.properties['outputJSON']['useFaultInputs'] = this.settings['stageUpOnFault'].value;\n    for(var x = 0; x < this.properties['numEnableOutputs']; x++){\n      this.properties['outputJSON']['stageArray'].push(this.outputs[String(x+this.OUTPUTSTARTSLOT)].data);\n    }\n    this.properties['outputJSON']['stageStartTime'] = this.properties['stageStartTime'];\n    this.properties['outputJSON']['currentTime'] = Date.now();\n    this.setOutputData(this.JSONSLOT, this.properties['outputJSON']);\n  }\n\n}\nNodeTypeRegistry.registerNodeType('hvac/lead-lag-staging', LeadLagStagingNode);\n\n","import { NodeTypeRegistry } from '../../node-type-registry';\nimport { Node } from '../../node';\nimport { NODE_INFO } from '../../node-info';\nimport { NodeSetting, SettingType, Type } from '../../node-io';\n\nclass LeadLagSwitchNode extends Node {\n  lastRotate;\n\n  constructor() {\n    super();\n    this.title = NODE_INFO.hvac['lead-lag-switch'].title;\n    this.description = NODE_INFO.hvac['lead-lag-switch'].description; \n   \n    this.addInput('rotateLead', Type.BOOLEAN);\n    this.addInput('unit1', Type.BOOLEAN);\n    this.addInput('unit2', Type.BOOLEAN);\n\n    this.addOutput('leadUnit', Type.STRING);\n    this.addOutput('enableA', Type.BOOLEAN);\n    this.addOutput('enableB', Type.BOOLEAN);\n\n  }\n\n  init(){\n    this.properties['currentOrder'] = true;\n  }\n\n  onAdded() {\n    this.onAfterSettingsChange();\n  }\n\n  onAfterSettingsChange() {\n    this.onInputUpdated();\n  }\n\n  onInputUpdated() {\n    const rotate = this.getInputData(0);\n    if (rotate && !this.lastRotate) this.properties['currentOrder'] = !this.properties['currentOrder'];\n    this.lastRotate = rotate;\n\n    const in1 = this.getInputData(1);\n    const in2 = this.getInputData(2);\n\n    if (this.properties['currentOrder']) {\n      this.setOutputData(0, 'A'); \n      this.setOutputData(1, !!in1); \n      this.setOutputData(2, !!in2); \n    }\n    else {\n      this.setOutputData(0, 'B'); \n      this.setOutputData(1, !!in2); \n      this.setOutputData(2, !!in1); \n    }\n\n  }\n\n}\nNodeTypeRegistry.registerNodeType('hvac/lead-lag-switch', LeadLagSwitchNode);\n\n","import { NodeTypeRegistry } from '../../node-type-registry';\nimport { Node } from '../../node';\nimport { NODE_INFO } from '../../node-info';\nimport { NodeSetting, SettingType, Type } from '../../node-io';\nimport Utils from '../../utils';\nimport TimeUtils, { TIME_TYPE } from '../../utils/time-utils';\n\nclass PACUnitControl extends Node {\n  //Inputs\n  ENABLESLOT = 0;\n  ZTSLOT = 1;\n  SPSLOT = 2;\n  CLGOFSTSLOT = 3;\n  HTGOFSTSLOT = 4;\n  STGUPSLOT = 5;\n  MDLYSLOT = 6;\n  ECONOASLOT = 7;\n  OATSLOT = 8;\n  ECONHISLOT = 9;\n  ECONLOSLOT = 10;\n  FSSLOT = 11;\n\n  //Outputs\n  JSONSLOT = 0;\n  CLGMSLOT = 1;\n  HTGMSLOT = 2;\n  COMPSTGSLOT = 3;\n  ECONOMSLOT = 4;\n  OADMPSLOT = 5;\n  RVSLOT = 6;\n  COMPSTARTSLOT = 7;\n\n  constructor() {\n    super();\n    this.title = NODE_INFO.hvac['pac-unit-control'].title;\n    this.description = NODE_INFO.hvac['pac-unit-control'].description; \n   \n    this.addInputWithSettings('enable', Type.BOOLEAN, true, 'Enable');\n    this.addInput('zoneTemp', Type.NUMBER);\n    this.addInputWithSettings('setpoint', Type.NUMBER, 20, 'Setpoint');\n    this.settings['straddleSP'] = NodeSetting.create({\n      description: 'Setpoint Logic',\n      value: true,\n      type: SettingType.DROPDOWN,\n      config: {\n        items: [\n          { value: true, text: 'Condition to Setpoint' },\n          { value: false, text: 'Condition past Setpoint' },\n        ],\n      },\n    });\n    this.addInputWithSettings('CLG offset', Type.NUMBER, 1, 'CLG offset');\n    this.addInputWithSettings('HTG offset', Type.NUMBER, 1, 'HTG offset');\n    this.addInputWithSettings('stageUpDelay (minutes)', Type.NUMBER, 10, 'Stage Up Delay (Minutes)');\n    this.addInputWithSettings('modeDelay (minutes)', Type.NUMBER, 15, 'Mode Change Delay (Minutes)');\n    this.addInputWithSettings('econoAllow', Type.BOOLEAN, true, 'Allow Economy Mode');\n    this.addInput('OATemp', Type.NUMBER);\n    this.settings['compStages'] = NodeSetting.create({\n      description: '# Compressor Stages',\n      value: 2,\n      type: SettingType.NUMBER,\n    });\n    this.addInputWithSettings('econoHigh', Type.NUMBER, 22, 'Econo OA High Temp');\n    this.addInputWithSettings('econoLow', Type.NUMBER, 10, 'Econo OA Low Temp');\n    this.settings['econoDB'] = NodeSetting.create({\n      description: 'Economy Conditions Deadband',\n      value: 1,\n      type: SettingType.NUMBER,\n    });\n    this.settings['requireFS'] = NodeSetting.create({\n      description: 'Require Fan Status?',\n      value: true,\n      type: SettingType.BOOLEAN,\n    });\n    this.settings['FSdelay'] = NodeSetting.create({\n      description: 'Fan Status OFF Delay (Seconds)',\n      value: 20,\n      type: SettingType.NUMBER,\n    });\n    this.addInput('fanStatus', Type.BOOLEAN);\n\n    this.addOutput('outputJSON', Type.JSON);\n    this.addOutput('CLG Mode', Type.BOOLEAN);\n    this.addOutput('HTG Mode', Type.BOOLEAN);\n    this.addOutput('compStage', Type.NUMBER);\n    this.addOutput('econoMode', Type.BOOLEAN);\n    this.addOutput('OADamper', Type.NUMBER);\n    this.addOutput('RV', Type.BOOLEAN);\n    this.addOutput('Comp1', Type.BOOLEAN);\n    this.addOutput('Comp2', Type.BOOLEAN);\n\n    this.setSettingsConfig({\n      groups: [\n        { 'CLG offset': {}, 'HTG offset': {} },\n        { 'stageUpDelay (minutes)': {}, 'modeDelay (minutes)': {} },\n        { econoLow: {}, econoHigh: {} },\n      ],\n      conditions: {},\n    });\n  }\n\n  onCreated() {\n    this.EXECUTE_INTERVAL = 10000;\n    //this.properties['numComps'] = 2;\n    this.properties['FSInput'] = true;\n    this.properties['fanStatus'] = false;\n    this.properties['fanStatusOffTime'] = null;\n    this.properties['clgModeEnd'] = null;\n    this.properties['htgModeEnd'] = null;\n    this.resetController();\n    this.onAfterSettingsChange();\n  }\n\n  onAdded() {\n    this.EXECUTE_INTERVAL = 10000;\n    this.setOutputData(0, this.properties['clgMode']);\n    this.setOutputData(1, this.properties['htgMode']);\n    this.setOutputData(2, this.properties['compStage']);\n    this.setOutputData(3, this.properties['econoConditions']);\n    this.onAfterSettingsChange();\n  }\n\n  onExecute(){\n    this.onInputUpdated();\n  }\n\n  onAfterSettingsChange() {\n    this.updateStageCount();\n    this.updateFSInput();\n    this.onInputUpdated();\n  }\n\n  onInputUpdated() {\n    this.initializeOutputJSON();\n    const enable = this.getInputData(this.ENABLESLOT);\n    this.properties['outputJSON']['enableInput'] = enable;\n    var fanStatus = true;\n    if (this.settings['requireFS'].value){ \n      const fanStatusInput = this.getInputData(this.FSSLOT);\n      this.properties['outputJSON']['fanStatusActual'] = fanStatusInput;\n      this.properties['outputJSON']['fanStatusEffective'] = true;\n      if (fanStatusInput) {\n        fanStatus = true;\n        this.properties['fanStatus'] = true;\n      }\n      else {\n        if (this.properties['fanStatus']) {\n          this.properties['fanStatusOffTime'] = Date.now() + TimeUtils.timeConvert(this.settings['FSdelay'].value, TIME_TYPE.SECONDS);\n        }\n        this.properties['fanStatus'] = fanStatusInput;\n        if (this.properties['fanStatusOffTime'] <= Date.now()) {\n          fanStatus = false;\n          this.properties['outputJSON']['fanStatusEffective'] = false;\n        }\n        this.properties['outputJSON']['fanStatusOffTime'] = this.properties['fanStatusOffTime'];\n      }\n    } \n\n    var disable = false;\n    if (!enable || (this.settings['requireFS'].value && !fanStatus)) disable = true;\n    \n    const input = this.getInputData(this.ZTSLOT);\n    this.properties['outputJSON']['zoneTemp'] = input;\n    if (input == null || input == undefined) disable = true;\n\n    if (!disable) {\n      const setpoint = this.getInputData(this.SPSLOT);\n      const clgOffset = this.getInputData(this.CLGOFSTSLOT);\n      const htgOffset = this.getInputData(this.HTGOFSTSLOT);\n      const clgSP = setpoint + clgOffset;\n      const htgSP = setpoint - htgOffset;\n\n      if (!this.properties['clgMode'] && !this.properties['htgMode'] && input < htgSP) {\n        if (this.properties['clgModeEnd'] == null || (this.properties['clgModeEnd'] + TimeUtils.timeConvert(this.getInputData(this.MDLYSLOT), TIME_TYPE.MINUTES)) <= Date.now()){\n          this.properties['htgMode'] = true;\n          this.properties['compStage'] = 0;\n        }\n      }\n      else if (!this.properties['htgMode'] && !this.properties['clgMode'] && input > clgSP) {\n        if (this.properties['htgModeEnd'] == null || (this.properties['htgModeEnd'] + TimeUtils.timeConvert(this.getInputData(this.MDLYSLOT), TIME_TYPE.MINUTES)) <= Date.now()){\n          this.properties['clgMode'] = true;\n          this.properties['compStage'] = 0;\n        }\n      }\n\n      if (this.properties['htgMode']){\n        this.properties['econoConditions'] = false;\n        if (input < htgSP) {\n          if(this.properties['compStage'] === 0){\n            this.properties['compStage'] = 1;\n            this.properties['stageStartTime'] = Date.now();\n          }\n          else if (this.properties['compStage'] > 0 && (this.properties['stageStartTime'] + TimeUtils.timeConvert(this.getInputData(this.STGUPSLOT), TIME_TYPE.MINUTES)) <= Date.now()){\n            if (this.properties['compStage'] < this.properties['numComps']) {\n              this.properties['compStage']++;\n              this.properties['stageStartTime'] = Date.now();\n            }\n          }\n        }\n        else {\n          var offSPInterval = htgOffset / this.properties['numComps'];\n          if (this.settings['straddleSP'].value){\n            for (var s = this.properties['compStage']; s > 0; s--) {\n              if (input >= (setpoint - (offSPInterval * (s-1)))) {\n                this.properties['compStage']--;\n                this.properties['stageStartTime'] = Date.now();\n              }\n            }\n          }\n          else if (!this.settings['straddleSP'].value){\n            offSPInterval = (htgOffset*2) / this.properties['numComps'];\n            for (var s = this.properties['compStage']; s > 0; s--) {\n              if (input >= ((setpoint + htgOffset) - (offSPInterval * (s-1)))) {\n                this.properties['compStage']--;\n                this.properties['stageStartTime'] = Date.now();\n              }\n            }\n          }\n          if (this.properties['compStage'] === 0){\n            this.properties['htgMode'] = false;\n            this.properties['htgModeEnd'] = Date.now();\n            this.properties['stageStartTime'] = null;\n          }\n        }\n      }\n      else if (this.properties['clgMode']){\n        if (input > clgSP) {\n          if(this.properties['compStage'] === 0){\n            this.properties['compStage'] = 1;\n            this.properties['stageStartTime'] = Date.now();\n          }\n          else if (this.properties['compStage'] > 0 && (this.properties['stageStartTime'] + TimeUtils.timeConvert(this.getInputData(this.STGUPSLOT), TIME_TYPE.MINUTES)) <= Date.now()){\n            if (this.properties['compStage'] < this.properties['numComps']) {\n              this.properties['compStage']++;\n              this.properties['stageStartTime'] = Date.now();\n            }\n          }\n        }\n        else {\n          var offSPInterval = clgOffset / this.properties['numComps'];\n          if (this.settings['straddleSP'].value){\n            for (var s = this.properties['compStage']; s > 0; s--) {\n              if (input <= (setpoint + (offSPInterval * (s-1)))) {\n                this.properties['compStage']--;\n                this.properties['stageStartTime'] = Date.now();\n              }\n            }\n          }\n          else if (!this.settings['straddleSP'].value){\n            offSPInterval = (clgOffset*2) / this.properties['numComps'];\n            for (var s = this.properties['compStage']; s > 0; s--) {\n              if (input <= ((setpoint - clgOffset) + (offSPInterval * (s-1)))) {\n                this.properties['compStage']--;\n                this.properties['stageStartTime'] = Date.now();\n              }\n            }\n          }\n          if (this.properties['compStage'] === 0){\n            this.properties['clgMode'] = false;\n            this.properties['clgModeEnd'] = Date.now();\n            this.properties['stageStartTime'] = null;\n          }\n        }\n\n        if (this.getInputData(this.ECONOASLOT)){\n          const OATemp = this.getInputData(this.OATSLOT);\n          if (OATemp && this.checkEconoConditions(OATemp)) this.properties['econoConditions'] = true;\n          else this.properties['econoConditions'] = false;\n        }\n        else this.properties['econoConditions'] = false;\n      }\n      this.setOutputs(input, setpoint, clgSP);\n    }\n    // For disabled controller\n    else this.resetController();\n\n    this.properties['outputJSON']['disable'] = disable;\n    this.setOutputJSON();\n\n  }\n\n  setOutputs(temp:number, setpoint:number, clgSP:number) {\n    this.setOutputData(this.CLGMSLOT, this.properties['clgMode']);\n    this.setOutputData(this.HTGMSLOT, this.properties['htgMode']);\n    this.setOutputData(this.COMPSTGSLOT, this.properties['compStage']);\n    this.setOutputData(this.ECONOMSLOT, this.properties['econoConditions']);\n    if (this.properties['econoConditions'] && this.properties['clgMode']) {\n      const OAD = Utils.remap(temp, setpoint, clgSP, 0, 100)\n      this.setOutputData(this.OADMPSLOT, OAD);\n      this.properties['outputJSON']['OADamper'] = OAD;\n    }\n    else {\n      this.setOutputData(this.OADMPSLOT, 0);\n      this.properties['outputJSON']['OADamper'] = 0;\n    }\n    this.setOutputData(this.RVSLOT, this.properties['htgMode']);\n    for(var x = 0; x < this.properties['numComps']; x++){\n      if (this.properties['compStage'] >= (x+1)) this.setOutputData(x + this.COMPSTARTSLOT, true);\n      else this.setOutputData(x + this.COMPSTARTSLOT, false);\n    }\n  }\n\n  checkEconoConditions(OATemp:number) {\n    const econoHigh = this.getInputData(this.ECONHISLOT);\n    const econoLow = this.getInputData(this.ECONLOSLOT);\n    const econoDB = this.settings['econoDB'].value;\n    if (econoHigh <= (econoLow + econoDB) || econoHigh == null || econoLow == null || econoDB == null) {\n      this.properties['econoConditions'] = false;\n      return false;\n    }\n    if (OATemp < econoLow || OATemp > econoHigh) {\n      this.properties['econoConditions'] = false;\n      return false;\n    }\n    if (OATemp <= (econoHigh - econoDB) && OATemp >= (econoLow + econoDB)) {\n      this.properties['econoConditions'] = true;\n    }\n    return this.properties['econoConditions'];  //return current Econo state, or updated.\n  }\n\n  updateFSInput() {\n    if(this.settings['requireFS'].value != this.properties['FSInput']){\n      if(this.settings['requireFS'].value) this.addInput('fanStatus', Type.BOOLEAN);\n      else this.removeInput(11);\n    }\n    this.properties['FSInput'] = this.settings['requireFS'].value;\n  }\n\n  updateStageCount() {\n    const compSettings = Math.min(Math.max(1, this.settings['compStages'].value), 20);\n    if (this.settings['compStages'].value < 1) this.settings['compStages'].value = 1;\n    this.properties['numComps'] = this.getOutputsCount() - this.COMPSTARTSLOT;\n    const diff = this.settings['compStages'].value - this.properties['numComps'];\n    if (diff == 0) return;\n    //add\n    let num = null;\n    if (diff > 0) for (let i = 0; i < diff; i++) {\n      num = this.addOutput('Comp'+(this.properties['numComps'] + i + 1), Type.BOOLEAN);\n      this.setOutputData(num, false);\n    }\n    //remove\n    if (diff < 0) {\n      let ids = Object.keys(this.outputs);\n      for (let i = 0; i > diff; i--) {\n        let id = ids[ids.length + i - 1];\n        this.removeOutput(+id);\n      }\n    }\n    this.properties['numComps'] = this.settings['compStages'].value;\n    if (this.properties['compStage'] > this.properties['numComps']) this.properties['compStage'] = this.properties['numComps'];\n  }\n\n  resetController(){\n    this.properties['clgMode'] = false;\n    this.properties['htgMode'] = false;\n    this.properties['compStage'] = 0;\n    this.properties['econoMode'] = false;\n    this.properties['econoConditions'] = false;\n    this.properties['stageStartTime'] = null;\n    this.setOutputData(this.CLGMSLOT, this.properties['clgMode']);\n    this.setOutputData(this.HTGMSLOT, this.properties['htgMode']);\n    this.setOutputData(this.COMPSTGSLOT, this.properties['compStage']);\n    this.setOutputData(this.ECONOMSLOT, this.properties['econoMode']);\n    this.setOutputData(this.OADMPSLOT, 0);\n    this.setOutputData(this.RVSLOT, false);\n    for(var x = 0; x < this.properties['numComps']; x++){\n      this.setOutputData(x + this.COMPSTARTSLOT, false);\n    }\n  }\n\n  initializeOutputJSON(){\n    this.properties['outputJSON'] = {\n      disable: null,\n      enableInput: null,\n      zoneTemp: null,\n      setpoint: this.getInputData(this.SPSLOT),\n      clgOffset: this.getInputData(this.CLGOFSTSLOT),\n      htgOffset: this.getInputData(this.HTGOFSTSLOT),\n      stageUpDelay: this.getInputData(this.STGUPSLOT),\n      modeChangeDelay: this.getInputData(this.MDLYSLOT),\n      econoAllow: this.getInputData(this.ECONOASLOT),\n      OATemp: this.getInputData(this.OATSLOT),\n      econoHighLimit: this.getInputData(this.ECONHISLOT),\n      econoLowLimit: this.getInputData(this.ECONLOSLOT),\n      fanStatusActual: null,\n      fanStatusEffective: null,\n      fanStatusOffTime: null,\n      clgMode: null,\n      htgMode: null,\n      compStage: null,\n      econoMode: null,\n      OADamper: null,\n      RV: null,\n      compArray: [],\n      setpointMode: this.settings['straddleSP'].value ? 'Condition to Setpoint' : 'Condition past Setpoint',\n      numCompressors: this.properties['numComps'],\n      econoConditionsDB: this.settings['econoDB'].value,\n      requireFanStatus: this.settings['requireFS'].value,\n      fanStatusOffDelay: this.settings['FSdelay'].value,\n      currentTime: null,\n      stageStartTime: null,\n      htgModeEnd:null,\n      clgModeEnd:null,\n    };\n  }\n\n  setOutputJSON(){\n    this.properties['outputJSON']['clgMode'] = this.properties['clgMode'];\n    this.properties['outputJSON']['htgMode'] = this.properties['htgMode'];\n    this.properties['outputJSON']['compStage'] = this.properties['compStage'];\n    this.properties['outputJSON']['econoMode'] = this.properties['econoConditions'];\n    this.properties['outputJSON']['OADamper'] = this.properties['clgMode'];\n    this.properties['outputJSON']['RV'] = this.properties['htgMode'];\n    for(var x = 0; x < this.properties['numComps']; x++){\n      if (this.properties['compStage'] >= (x+1)) this.properties['outputJSON']['compArray'].push(true);\n      else this.properties['outputJSON']['compArray'].push(false);\n    }\n    this.properties['outputJSON']['stageStartTime'] = this.properties['stageStartTime'];\n    this.properties['outputJSON']['clgModeEnd'] = this.properties['clgModeEnd'];\n    this.properties['outputJSON']['htgModeEnd'] = this.properties['htgModeEnd'];\n    this.properties['outputJSON']['currentTime'] = Date.now();\n\n    this.setOutputData(this.JSONSLOT, this.properties['outputJSON']);\n  }\n\n}\nNodeTypeRegistry.registerNodeType('hvac/pac-unit-control', PACUnitControl);\n\n","import { Container } from '../../container';\nimport { Node } from '../../node';\nimport { NodeSetting, SettingType, Type } from '../../node-io';\nimport TimeUtils from '../../utils/time-utils';\nimport { NODE_INFO } from '../../node-info';\n\nconst PID = require('../../lib/pid-controller');\n\nclass PIDFunctionNode extends Node {\n  lastTime: number;\n  startTime: number;\n  lastResetVal: boolean = false;\n  pid = new PID(1, 1, 1, 0, 0, 'reverse');\n\n  constructor() {\n    super();\n\n    this.title = NODE_INFO.hvac.PID.title;\n    this.description = NODE_INFO.hvac.PID.description;\n\n    this.addInput('enable', Type.BOOLEAN); // 0\n    this.addInput('processVariable', Type.NUMBER); // 1\n    this.addInputWithSettings('setpoint', Type.NUMBER, 1, 'setpoint'); // 2\n    this.addInputWithSettings('minOut', Type.NUMBER, 0, 'minOut'); // 3\n    this.addInputWithSettings('maxOut', Type.NUMBER, 100, 'maxOut'); // 4\n    this.addInputWithSettings('inP', Type.NUMBER, 1, 'P'); // 5\n    this.addInputWithSettings('inI', Type.NUMBER, 0, 'I'); // 6\n    this.addInputWithSettings('inD', Type.NUMBER, 0, 'D'); // 7\n    //this.addInputWithSettings('direction', Type.BOOLEAN, true, 'Direction (OFF = Reverse, ON = Direct)'); // Direct or Reverse // 8\n    this.addInputWithSettings(\n      'direction',\n      Type.BOOLEAN,\n      true,\n      'Direction (OFF = Reverse, ON = Direct)',\n    ); // Direct or Reverse // 8\n    this.addInputWithSettings('interval', Type.NUMBER, 1, 'Interval (min 500ms)'); // 9\n    this.addInputWithSettings('bias', Type.NUMBER, 0, 'Bias'); // 10\n    this.addInputWithSettings('manual', Type.NUMBER, 0, \"Manual ('output' value on disabled)\"); // 11\n    this.addInput('reset', Type.BOOLEAN); // 12\n    this.addOutput('output', Type.NUMBER); // 0\n    this.settings['time'] = NodeSetting.create({\n      description: 'Time',\n      type: SettingType.DROPDOWN,\n      config: {\n        items: [\n          { value: 'milliseconds', text: 'Milliseconds' },\n          { value: 'seconds', text: 'Seconds' },\n          { value: 'minutes', text: 'Minutes' },\n          { value: 'hours', text: 'Hours' },\n        ],\n      },\n      value: 'seconds',\n    });\n    this.setSettingsConfig({\n      groups: [\n        { minOut: {}, maxOut: {} },\n        { inP: {}, inI: {}, inD: {} },\n        { time: {}, interval: { weight: 2 } },\n      ],\n    });\n    this.startTime = Date.now();\n    this.pid.setSampleTime(1000);\n    this.pid.setOutputLimits(0, 100);\n    this.pid.setMode('MANUAL');\n    this.pid.setOutput(0);\n    this.pid.setBias(0);\n  }\n\n  onAdded() {\n    this.inputs[9]['name'] = `[interval] (${this.settings['time'].value})`;\n    this.onInputUpdated();\n  }\n\n  onExecute() {\n    if (this.pid.compute()) this.setOutputData(0, this.pid.getOutput().toFixed(1), true);\n  }\n\n  onInputUpdated() {\n    const reset = this.getInputData(12);\n    if (reset && !this.lastResetVal) this.pid.initialize();\n    this.lastResetVal = reset;\n\n    let enable = this.getInputData(0);\n    if (!enable) {\n      this.pid.setMode('MANUAL');\n      const manual = this.getInputData(11) || 0;\n      this.setOutputData(0, manual.toFixed(1));\n      this.pid.setOutput(manual);\n      return;\n    }\n\n    let processVariable = this.getInputData(1);\n    if (\n      processVariable === null ||\n      processVariable === undefined ||\n      typeof processVariable !== Type.NUMBER\n    ) {\n      this.pid.setMode('MANUAL');\n      const manual = this.getInputData(11) || 0;\n      this.setOutputData(0, manual.toFixed(1), true);\n      this.pid.setOutput(manual);\n      return;\n    }\n\n    const setpoint = this.getInputData(2);\n    const minOut = this.getInputData(3);\n    const maxOut = this.getInputData(4);\n    const inP = this.getInputData(5);\n    const inI = this.getInputData(6);\n    const inD = this.getInputData(7);\n    let direction = this.getInputData(8);\n    if (direction == true) direction = 'direct';\n    else direction = 'reverse';\n    let interval = this.getInputData(9);\n    interval = TimeUtils.timeConvert(interval, this.settings['time'].value);\n    interval = Math.max(500, interval);\n    const bias = this.getInputData(10);\n\n    this.pid.setBias(bias);\n    this.pid.setSampleTime(interval);\n    this.pid.setOutputLimits(minOut, maxOut);\n    this.pid.setPoint(setpoint);\n    this.pid.setTunings(inP, inI, inD);\n    this.pid.setControllerDirection(direction);\n    this.pid.setMode('auto');\n    this.pid.setInput(processVariable);\n    this.pid.compute();\n    this.setOutputData(0, this.calculatePidOutput(), true);\n  }\n\n  onAfterSettingsChange() {\n    this.inputs[9]['name'] = `[interval] (${this.settings['time'].value})`;\n    this.onInputUpdated();\n  }\n\n  private calculatePidOutput(): number {\n    return this.pid.getOutput().toFixed(1);\n  }\n}\nContainer.registerNodeType('hvac/PID', PIDFunctionNode);\n","/**\n * pid-controller -  A node advanced PID controller based on the Arduino PID library\n * github@wilberforce.co.nz Rhys Williams\n * Based on:\n * Arduino PID Library - Version 1.0.1\n * by Brett Beauregard <br3ttb@gmail.com> brettbeauregard.com\n *\n * This Library is licensed under a GPL-3.0 License\n */\n\n'use strict';\nvar PID = function(Input, Setpoint, Kp, Ki, Kd, ControllerDirection) {\n  this.input = Input;\n  this.mySetpoint = Setpoint;\n  this.inAuto = false;\n  this.setOutputLimits(0, 255); // default output limits\n  this.SampleTime = 100; // default Controller Sample Time is 0.1 seconds\n  this.setTunings(Kp, Ki, Kd);\n  this.setControllerDirection(ControllerDirection);\n  this.lastTime = this.millis() - this.SampleTime;\n\n  this.myBias = 0;\n  this.ITerm = 0;\n  this.myOutput = 0;\n};\n\n// Constants for backward compatibility\n// PID.AUTOMATIC = 1;\n// PID.MANUAL = 0;\n// PID.DIRECT = 0;\n// PID.REVERSE = 1;\n\nPID.prototype.setInput = function(current_value) {\n  this.input = Number(current_value);\n};\n\nPID.prototype.setPoint = function(current_value) {\n  this.mySetpoint = Number(current_value);\n};\n\nPID.prototype.setBias = function(current_value) {\n  if (current_value > this.outMax) {\n    current_value = this.outMax; // POSSIBLY INCORRECT\n  } else if (current_value < this.outMin) {\n    current_value = this.outMin;\n  }\n  this.myBias = Number(current_value);\n};\n\nPID.prototype.millis = function() {\n  var d = new Date();\n  return d.getTime();\n};\n\n/**\n * Compute()\n * This, as they say, is where the magic happens.  this function should be called\n * every time \"void loop()\" executes.  the function will decide for itself whether a new\n * pid Output needs to be computed.  returns true when the output is computed,\n * false when nothing has been done.\n */\n\nPID.prototype.compute = function() {\n  if (!this.inAuto) {\n    return false;\n  }\n\n  var now = this.millis();\n  var timeChange = now - this.lastTime;\n  if (timeChange >= this.SampleTime) {\n    // Compute all the working error variables\n    var input = this.input;\n\n    //var error = this.mySetpoint - input;\n    var error = input - this.mySetpoint; // above setpoint = positive error\n    error = error * this.setDirection;\n\n    this.ITerm += this.ki * error;\n    if (this.ITerm > this.outMax - this.myBias) {\n      this.ITerm = this.outMax - this.myBias;\n    } else if (this.ITerm < this.outMin - this.myBias) {\n      this.ITerm = this.outMin - this.myBias;\n    }\n\n    var dInput = input - this.lastInput;\n\n    // Compute PID Output\n    //var output = ((this.kp * error) + this.ITerm - (this.kd * dInput)) * this.setDirection;\n    var output = this.kp * error + this.ITerm - this.kd * dInput + this.myBias;\n    //var output = ((this.kp * error) + this.ITerm - (this.kd * dInput));\n\n    if (output > this.outMax) {\n      output = this.outMax;\n    } else if (output < this.outMin) {\n      output = this.outMin;\n    }\n    this.myOutput = output;\n\n    // Remember some variables for next time\n    this.lastInput = input;\n    this.lastTime = now;\n    return true;\n  } else {\n    return false;\n  }\n};\n\n/**\n * SetTunings(...)\n * This function allows the controller's dynamic performance to be adjusted.\n * it's called automatically from the constructor, but tunings can also\n * be adjusted on the fly during normal operation\n */\nPID.prototype.setTunings = function(Kp, Ki, Kd) {\n  if (Kp < 0 || Ki < 0 || Kd < 0) {\n    return;\n  }\n\n  this.dispKp = Kp;\n  this.dispKi = Ki;\n  this.dispKd = Kd;\n\n  this.SampleTimeInSec = this.SampleTime / 1000;\n  this.kp = Kp;\n  this.ki = Ki * this.SampleTimeInSec;\n  this.kd = Kd / this.SampleTimeInSec;\n};\n\n/**\n * SetSampleTime(...)\n * sets the period, in Milliseconds, at which the calculation is performed\n */\nPID.prototype.setSampleTime = function(NewSampleTime) {\n  if (NewSampleTime > 0) {\n    var ratio = NewSampleTime / (1.0 * this.SampleTime);\n    this.ki *= ratio;\n    this.kd /= ratio;\n    this.SampleTime = Math.round(NewSampleTime);\n  }\n};\n\n/**\n * SetOutput( )\n * Set output level if in manual mode\n */\nPID.prototype.setOutput = function(val) {\n  if (val > this.outMax) {\n    val = this.outMax; // POSSIBLY INCORRECT\n  } else if (val < this.outMin) {\n    val = this.outMin;\n  }\n  this.myOutput = val;\n};\n\n/**\n * SetOutputLimits(...)\n * This function will be used far more often than SetInputLimits.  while\n * the input to the controller will generally be in the 0-1023 range (which is\n * the default already,)  the output will be a little different.  maybe they'll\n * be doing a time window and will need 0-8000 or something.  or maybe they'll\n * want to clamp it from 0-125.  who knows.  at any rate, that can all be done here.\n */\nPID.prototype.setOutputLimits = function(Min, Max) {\n  if (Min >= Max) {\n    return;\n  }\n  this.outMin = Min;\n  this.outMax = Max;\n\n  if (this.inAuto) {\n    if (this.myOutput > this.outMax) {\n      this.myOutput = this.outMax;\n    } else if (this.myOutput < this.outMin) {\n      this.myOutput = this.outMin;\n    }\n\n    if (this.ITerm > this.outMax - this.myBias) {\n      this.ITerm = this.outMax - this.myBias;\n    } else if (this.ITerm < this.outMin - this.myBias) {\n      this.ITerm = this.outMin - this.myBias;\n    }\n  }\n};\n\n/**\n * SetMode(...)\n * Allows the controller Mode to be set to manual (0) or Automatic (non-zero)\n * when the transition from manual to auto occurs, the controller is\n * automatically initialized\n */\nPID.prototype.setMode = function(Mode) {\n  var newAuto;\n  if (\n    Mode == 0 ||\n    Mode.toString().toLowerCase() == 'automatic' ||\n    Mode.toString().toLowerCase() == 'auto'\n  ) {\n    newAuto = 1;\n  } else if (Mode == 1 || Mode.toString().toLowerCase() == 'manual') {\n    newAuto = 0;\n  } else {\n    throw new Error('Incorrect Mode Chosen');\n  }\n  /*  Removed in favor of manually triggered 'Reset'(using Initialize()).\n  if (newAuto == !this.inAuto) {\n    //we just went from manual to auto\n    this.initialize();   \n  }\n  */\n  this.inAuto = newAuto;\n};\n\n/**\n * Initialize()\n * does all the things that need to happen to ensure a bumpless transfer\n * from manual to automatic mode.\n */\nPID.prototype.initialize = function() {\n  //this.ITerm = this.myOutput;\n  this.ITerm = 0;\n  this.myOutput = this.myBias;\n  this.lastInput = this.input;\n  /*\n  if (this.ITerm > this.outMax) {\n    this.ITerm = this.outMax;\n  } else if (this.ITerm < this.outMin) {\n    this.ITerm = this.outMin;\n  }\n  */\n};\n\n/**\n * SetControllerDirection(...)\n * The PID will either be connected to a DIRECT acting process (+Output leads\n * to +Input) or a REVERSE acting process(+Output leads to -Input.)  we need to\n * know which one, because otherwise we may increase the output when we should\n * be decreasing.  This is called from the constructor.\n */\nPID.prototype.setControllerDirection = function(ControllerDirection) {\n  if (ControllerDirection == 0 || ControllerDirection.toString().toLowerCase() == 'direct') {\n    this.setDirection = 1;\n  } else if (\n    ControllerDirection == 1 ||\n    ControllerDirection.toString().toLowerCase() == 'reverse'\n  ) {\n    this.setDirection = -1;\n  } else {\n    throw new Error('Incorrect Controller Direction Chosen');\n  }\n};\n\n/**\n * Status Functions\n * Just because you set the Kp=-1 doesn't mean it actually happened.  these\n * functions query the internal state of the PID.  they're here for display\n * purposes.  this are the functions the PID Front-end uses for example\n */\nPID.prototype.getKp = function() {\n  return this.dispKp;\n};\n\nPID.prototype.getKd = function() {\n  return this.dispKd;\n};\n\nPID.prototype.getKi = function() {\n  return this.dispKi;\n};\n\nPID.prototype.getMode = function() {\n  return this.inAuto ? 'Auto' : 'Manual';\n};\n\nPID.prototype.getDirection = function() {\n  return this.controllerDirection;\n};\n\nPID.prototype.getOutput = function() {\n  return this.myOutput;\n};\n\nPID.prototype.getInput = function() {\n  return this.input;\n};\n\nPID.prototype.getSetPoint = function() {\n  return this.mySetpoint;\n};\n\nPID.prototype.getBias = function() {\n  return this.myBias;\n};\n\nmodule.exports = PID;\n","import { NodeTypeRegistry } from '../../node-type-registry';\nimport { Node } from '../../node';\nimport { NodeSetting, SettingType, Type } from '../../node-io';\nimport TimeUtils, { TIME_TYPE } from '../../utils/time-utils';\nimport { NODE_INFO } from '../../node-info';\n\nclass ToggleDurationNode extends Node {\n  startTime;\n  lastTrigger;\n  runState;\n  runtimeVal;\n  timeoutFunc;\n\n  constructor() {\n    super();\n  \n    this.title = NODE_INFO.hvac[\"toggle-duration\"].title;\n    this.description = NODE_INFO.hvac[\"toggle-duration\"].description;\n   \n    this.addInput('pushButton', Type.BOOLEAN);\n    this.addInputWithSettings('runtime', Type.NUMBER, 120, 'Runtime');\n    this.addOutput('output', Type.BOOLEAN);\n    this.addOutput('remainingRuntime', Type.NUMBER);\n    \n    this.settings['time'] = NodeSetting.create({\n      description: 'Units',\n      type: SettingType.DROPDOWN,\n      config: {\n        items: [\n          { value: TIME_TYPE.SECONDS, text: 'Seconds' },\n          { value: TIME_TYPE.MINUTES, text: 'Minutes' },\n          { value: TIME_TYPE.HOURS, text: 'Hours' },\n        ],\n      },\n      value: TIME_TYPE.MINUTES,\n    });\n    this.settings['useOffDelay'] = NodeSetting.create({\n      description: 'Long Hold for OFF?',\n      value: false,\n      type: SettingType.BOOLEAN,\n    });\n    this.settings['offDelay'] = NodeSetting.create({\n      description: 'OFF Push Delay (Seconds)',\n      value: 20,\n      type: SettingType.NUMBER,\n    });\n    this.setSettingsConfig({\n      groups: [\n        { runtime: { weight: 2 }, time: {} },\n      ],\n      conditions: {\n        offDelay: setting => !!setting['useOffDelay'].value,\n      },\n    });\n  }\n\n  onCreated() {\n    this.setOutputData(0, false);\n    this.lastTrigger = false;\n    this.onAfterSettingsChange();\n  }\n\n  onAdded() {\n    this.inputs[1]['name'] = `[runtime] (${this.settings['time'].value})`;\n    this.EXECUTE_INTERVAL = 10000;\n    this.onAfterSettingsChange();\n  }\n\n  onExecute() {\n    if (this.runState) {\n      const remainingMins = (this.runtimeVal - (new Date().valueOf() - this.startTime)) * 1.6667e-5;\n      this.setOutputData(1, remainingMins.toFixed(1));\n      if (remainingMins <= 0) this.stop();\n    }\n  }\n\n  onInputUpdated() {\n    let trigger = this.getInputData(0);\n    if (trigger == null) this.lastTrigger = false;\n    if (!trigger) this.properties['offPushStartTime'] = null;\n    else if (trigger && !this.lastTrigger) {\n      let runtime = this.getInputData(1);\n      runtime = TimeUtils.timeConvert(runtime, this.settings['time'].value);\n      if (this.runState){ \n        if (this.settings['useOffDelay'].value && this.properties['offPushStartTime'] == null){\n          this.startCountdown();\n        }\n        else this.stop();\n      }\n      else this.start(runtime);\n    }\n    this.lastTrigger = trigger;\n  }\n\n  startCountdown(){\n    this.properties['offPushStartTime'] = Date.now();\n    this.timeoutFunc = setInterval(() => {\n      const trigger = this.getInputData(0);\n      console.log(\"checking if the button is till held\")\n      if (!trigger || !this.settings['useOffDelay'].value) {\n        this.properties['offPushStartTime'] = null;\n        clearInterval(this.timeoutFunc);\n      }\n      else if ((this.properties['offPushStartTime'] + TimeUtils.timeConvert(this.settings['offDelay'].value, TIME_TYPE.SECONDS)) <= Date.now()) {\n        this.properties['offPushStartTime'] = null;\n        clearInterval(this.timeoutFunc);\n        this.stop();\n      }\n    }, 1000);\n  }\n\n  start(runtime) {\n    this.runState = true;\n    this.runtimeVal = runtime;\n    this.EXECUTE_INTERVAL = Math.max(Math.min(10000, runtime / 10), 250);\n    this.startTime = new Date().valueOf();\n    this.setOutputData(0, true);\n    this.onExecute();\n  }\n\n  stop() {\n    this.runState = false;\n    this.setOutputData(0, false);\n    this.setOutputData(1, 0);\n  }\n\n  onAfterSettingsChange() {\n    this.inputs[1]['name'] = `[runtime] (${this.settings['time'].value})`;\n    this.onInputUpdated();\n  }\n}\nNodeTypeRegistry.registerNodeType('hvac/toggle-duration', ToggleDurationNode);\n","import { Container } from '../../container';\nimport { Node } from '../../node';\nimport { NodeSetting, SettingType, Type } from '../../node-io';\nimport Utils from '../../utils';\nimport { NODE_INFO } from '../../node-info';\n\nconst psychrolib = require('../../lib/psychrolib');\n\nclass PsychrometricCalculationsNode extends Node {\n  psychro = new psychrolib();\n  conversionFunction;\n\n  constructor() {\n    super();\n    this.title = NODE_INFO.hvac.psychrometrics.title;\n    this.description = NODE_INFO.hvac.psychrometrics.description;\n    this.addInput('DryBulb', Type.NUMBER);\n    this.addInput('RelHum(0-1)', Type.NUMBER);\n    this.addInput('Pressure', Type.NUMBER);\n    this.addOutput('HumRatio', Type.NUMBER);\n    this.addOutput('TWetBulb', Type.NUMBER);\n    this.addOutput('TDewPoint', Type.NUMBER);\n    this.addOutput('VapPres', Type.NUMBER);\n    this.addOutput('MoistAirEnthalpy', Type.NUMBER);\n    this.addOutput('MoistAirVolume', Type.NUMBER);\n    this.addOutput('DegreeOfSaturation', Type.NUMBER);\n    this.addOutput('error', Type.STRING);\n    this.settings['units'] = NodeSetting.create({\n      description: 'Select Units',\n      type: SettingType.DROPDOWN,\n      config: {\n        items: [\n          { value: 'SI', text: 'Metric/SI' },\n          { value: 'IP', text: 'Imperial/IP' },\n        ],\n      },\n      value: 'SI',\n    });\n    this.settings['inputsSelect'] = NodeSetting.create({\n      description: 'Select Inputs',\n      type: SettingType.DROPDOWN,\n      config: {\n        items: [\n          { value: 'DB_RH_P', text: 'Dry Bulb, Rel. Humidity, Pressure' },\n          { value: 'DB_WB_P', text: 'Dry Bulb, Wet Bulb, Pressure' },\n          { value: 'DB_DP_P', text: 'Dry Bulb, Dew Point, Pressure ' },\n        ],\n      },\n      value: 'DB_RH_P',\n    });\n    this.settings['precision'] = NodeSetting.create({ description: 'Precision', type: SettingType.NUMBER, value: 4 });\n    this.psychro.SetUnitSystem(this.psychro.SI);\n  }\n\n  onAdded() {\n    this.setConversionFunction();\n  }\n\n  onInputUpdated() {\n    this.onInputOrSettingsChange();\n  }\n\n  onAfterSettingsChange() {\n    this.setConversionFunction();\n    this.onInputOrSettingsChange();\n  }\n\n  private onInputOrSettingsChange() {\n    const input1 = this.getInputData(0);\n    const input2 = this.getInputData(1);\n    const input3 = this.getInputData(2);\n\n    if (!Utils.hasInput(input1) || !Utils.hasInput(input2) || !Utils.hasInput(input3)) {\n      this.clearOutputs();\n      this.setOutputData(7, null);\n      return;\n    }\n\n    let outputArray: number[];\n    try {\n      outputArray = this.conversionFunction(input1, input2, input3);\n    } catch (error) {\n      this.clearOutputs();\n      this.setOutputData(7, String(error));\n      return;\n    }\n    const precision = Math.abs(this.settings['precision'].value);\n    this.setOutputData(0, Number(outputArray[0]).toFixed(precision));\n    this.setOutputData(1, Number(outputArray[1]).toFixed(precision));\n    this.setOutputData(2, Number(outputArray[2]).toFixed(precision));\n    this.setOutputData(3, Number(outputArray[3]).toFixed(precision));\n    this.setOutputData(4, Number(outputArray[4]).toFixed(precision));\n    this.setOutputData(5, Number(outputArray[5]).toFixed(precision));\n    this.setOutputData(6, Number(outputArray[6]).toFixed(precision));\n    this.setOutputData(7, null);\n  }\n\n  private clearOutputs() {\n    this.setOutputData(0, null);\n    this.setOutputData(1, null);\n    this.setOutputData(2, null);\n    this.setOutputData(3, null);\n    this.setOutputData(4, null);\n    this.setOutputData(5, null);\n    this.setOutputData(6, null);\n  }\n\n  private setConversionFunction() {\n    const units = this.settings['units'].value;\n    if (units == 'IP') {\n      this.psychro.SetUnitSystem(this.psychro.IP);\n      this.title = 'Psychrometric Calcs (Imperial/IP)';\n    } else {\n      this.psychro.SetUnitSystem(this.psychro.SI);\n      this.title = 'Psychrometric Calcs (Metric/SI)';\n    }\n\n    const conversion = this.settings['inputsSelect'].value;\n    switch (conversion) {\n      case 'DB_RH_P':\n        this.inputs[0].name = 'DryBulb';\n        this.inputs[1].name = 'RelHum(0-1)';\n        this.inputs[2].name = 'Pressure';\n        this.outputs[0].name = 'HumRatio';\n        this.outputs[1].name = 'TWetBulb';\n        this.outputs[2].name = 'TDewPoint';\n        this.conversionFunction = (in1, in2, in3) => {\n          return this.psychro.CalcPsychrometricsFromRelHum(in1, in2, in3);\n        };\n        break;\n      case 'DB_WB_P':\n        this.inputs[0].name = 'DryBulb';\n        this.inputs[1].name = 'TWetBulb';\n        this.inputs[2].name = 'Pressure';\n        this.outputs[0].name = 'HumRatio';\n        this.outputs[1].name = 'TDewPoint';\n        this.outputs[2].name = 'RelHum';\n        this.conversionFunction = (in1, in2, in3) => {\n          return this.psychro.CalcPsychrometricsFromTWetBulb(in1, in2, in3);\n        };\n        break;\n      case 'DB_DP_P':\n        this.inputs[0].name = 'DryBulb';\n        this.inputs[1].name = 'TDewPoint';\n        this.inputs[2].name = 'Pressure';\n        this.outputs[0].name = 'HumRatio';\n        this.outputs[1].name = 'TWetBulb';\n        this.outputs[2].name = 'RelHum';\n        this.conversionFunction = (in1, in2, in3) => {\n          return this.psychro.CalcPsychrometricsFromTDewPoint(in1, in2, in3);\n        };\n        break;\n      default:\n        this.inputs[0].name = 'DryBulb';\n        this.inputs[1].name = 'RelHum(0-1)';\n        this.inputs[2].name = 'Pressure';\n        this.outputs[0].name = 'HumRatio';\n        this.outputs[1].name = 'TWetBulb';\n        this.outputs[2].name = 'TDewPoint';\n        this.conversionFunction = (in1, in2, in3) => {\n          return this.psychro.CalcPsychrometricsFromRelHum(in1, in2, in3);\n        };\n    }\n  }\n}\nContainer.registerNodeType('hvac/psychrometrics', PsychrometricCalculationsNode);\n","import { Container } from '../../container';\nimport { Node } from '../../node';\nimport { NodeSetting, SettingType, Type } from '../../node-io';\nimport Utils from '../../utils';\nimport { NODE_INFO } from '../../node-info';\n\nclass EnergyUnitConversionNode extends Node {\n  conversionFunction;\n\n  constructor() {\n    super();\n   \n    this.title = NODE_INFO.hvac[\"energy-conversion\"].title;\n    this.description = NODE_INFO.hvac[\"energy-conversion\"].description;\n\n    this.addInput('W·h', Type.NUMBER);\n    this.addOutput('kW·h', Type.NUMBER);\n    this.addOutput('Btu', Type.NUMBER);\n    this.addOutput('cal', Type.NUMBER);\n    this.addOutput('J', Type.NUMBER);\n    this.addOutput('kJ', Type.NUMBER);\n    this.settings['inputType'] = NodeSetting.create({\n      description: 'Input Type',\n      type: SettingType.DROPDOWN,\n      config: {\n        items: [\n          { value: 'W·h', text: 'watt-hour (W·h)' },\n          { value: 'kW·h', text: 'kilowatt-hour (kW·h)' },\n          { value: 'Btu', text: 'British Thermal Unit (Btu)' },\n          { value: 'cal', text: 'calorie (cal)' },\n          { value: 'J', text: 'joule(J)' },\n          { value: 'kJ', text: 'kilojoule(kJ)' },\n        ],\n      },\n      value: 'W·h',\n    });\n    this.settings['precision'] = NodeSetting.create({ description: 'Precision', type: SettingType.NUMBER, value: '4' });\n  }\n\n  onAdded() {\n    this.setConversionFunction();\n  }\n\n  onInputUpdated() {\n    this.onInputOrSettingsChange();\n  }\n\n  onAfterSettingsChange() {\n    this.setConversionFunction();\n    this.onInputOrSettingsChange();\n  }\n\n  private onInputOrSettingsChange() {\n    const input = this.getInputData(0);\n    if (!Utils.hasInput(input)) {\n      this.setOutputData(0, null);\n      this.setOutputData(1, null);\n      this.setOutputData(2, null);\n      this.setOutputData(3, null);\n      this.setOutputData(4, null);\n      return;\n    }\n    const output = this.conversionFunction(input);\n    const precision = Math.abs(this.settings['precision'].value);\n    this.setOutputData(0, Number(output[0]).toFixed(precision));\n    this.setOutputData(1, Number(output[1]).toFixed(precision));\n    this.setOutputData(2, Number(output[2]).toFixed(precision));\n    this.setOutputData(3, Number(output[3]).toFixed(precision));\n    this.setOutputData(4, Number(output[4]).toFixed(precision));\n  }\n\n  setConversionFunction() {\n    const inputType = this.settings['inputType'].value;\n    switch (inputType) {\n      case 'W·h':\n        this.title = 'Energy Conversion (W·h)';\n        this.inputs[0].name = 'W·h';\n        this.outputs[0].name = 'kW·h';\n        this.outputs[1].name = 'Btu';\n        this.outputs[2].name = 'cal';\n        this.outputs[3].name = 'J';\n        this.outputs[4].name = 'kJ';\n        this.conversionFunction = input => {\n          let outputArray: number[] = [null, null, null, null, null];\n          outputArray[0] = input * 0.001;\n          outputArray[1] = input * 3.4121416331;\n          outputArray[2] = input * 859.8456;\n          outputArray[3] = input * 3600;\n          outputArray[4] = input * 3.6;\n          return outputArray;\n        };\n        break;\n      case 'kW·h':\n        this.title = 'Energy Conversion (kW·h)';\n        this.inputs[0].name = 'kW·h';\n        this.outputs[0].name = 'W·h';\n        this.outputs[1].name = 'Btu';\n        this.outputs[2].name = 'cal';\n        this.outputs[3].name = 'J';\n        this.outputs[4].name = 'kJ';\n        this.conversionFunction = input => {\n          let outputArray: number[] = [null, null, null, null, null];\n          outputArray[0] = input * 1000;\n          outputArray[1] = input * 3412.1416331279;\n          outputArray[2] = input * 859845.6;\n          outputArray[3] = input * 3600000;\n          outputArray[4] = input * 3600;\n          return outputArray;\n        };\n        break;\n      case 'Btu':\n        this.title = 'Energy Conversion (Btu)';\n        this.inputs[0].name = 'Btu';\n        this.outputs[0].name = 'W·h';\n        this.outputs[1].name = 'kW·h';\n        this.outputs[2].name = 'cal';\n        this.outputs[3].name = 'J';\n        this.outputs[4].name = 'kJ';\n        this.conversionFunction = input => {\n          let outputArray: number[] = [null, null, null, null, null];\n          outputArray[0] = input * 0.2930710702;\n          outputArray[1] = input * 0.0002930711;\n          outputArray[2] = input * 251.99587;\n          outputArray[3] = input * 1055.05585262;\n          outputArray[4] = input * 1.0550558526;\n          return outputArray;\n        };\n        break;\n      case 'cal':\n        this.title = 'Energy Conversion (cal)';\n        this.inputs[0].name = 'cal';\n        this.outputs[0].name = 'W·h';\n        this.outputs[1].name = 'kW·h';\n        this.outputs[2].name = 'Btu';\n        this.outputs[3].name = 'J';\n        this.outputs[4].name = 'kJ';\n        this.conversionFunction = input => {\n          let outputArray: number[] = [null, null, null, null, null];\n          outputArray[0] = input * 0.0011629995;\n          outputArray[1] = input * 0.000001163;\n          outputArray[2] = input * 0.003968319;\n          outputArray[3] = input * 4.1867982;\n          outputArray[4] = input * 0.0041867982;\n          return outputArray;\n        };\n        break;\n      case 'J':\n        this.title = 'Energy Conversion (J)';\n        this.inputs[0].name = 'J';\n        this.outputs[0].name = 'W·h';\n        this.outputs[1].name = 'kW·h';\n        this.outputs[2].name = 'Btu';\n        this.outputs[3].name = 'cal';\n        this.outputs[4].name = 'kJ';\n        this.conversionFunction = input => {\n          let outputArray: number[] = [null, null, null, null, null];\n          outputArray[0] = input * 0.0002777778;\n          outputArray[1] = input * 0.0000002777778;\n          outputArray[2] = input * 0.0009478171;\n          outputArray[3] = input * 0.238846;\n          outputArray[4] = input * 0.001;\n          return outputArray;\n        };\n        break;\n      case 'kJ':\n        this.title = 'Energy Conversion (kJ)';\n        this.inputs[0].name = 'kJ';\n        this.outputs[0].name = 'W·h';\n        this.outputs[1].name = 'kW·h';\n        this.outputs[2].name = 'Btu';\n        this.outputs[3].name = 'cal';\n        this.outputs[4].name = 'J';\n        this.conversionFunction = input => {\n          let outputArray: number[] = [null, null, null, null, null];\n          outputArray[0] = input * 0.2777777778;\n          outputArray[1] = input * 0.0002777778;\n          outputArray[2] = input * 0.9478171203;\n          outputArray[3] = input * 238.846;\n          outputArray[4] = input * 1000;\n          return outputArray;\n        };\n        break;\n      default:\n        this.title = 'Energy Conversion (W·h)';\n        this.inputs[0].name = 'W·h';\n        this.outputs[0].name = 'kW·h';\n        this.outputs[1].name = 'Btu';\n        this.outputs[2].name = 'cal';\n        this.outputs[3].name = 'J';\n        this.outputs[4].name = 'kJ';\n        this.conversionFunction = input => {\n          let outputArray: number[] = [null, null, null, null, null];\n          outputArray[0] = input * 0.001;\n          outputArray[1] = input * 3.4121416331;\n          outputArray[2] = input * 859.8456;\n          outputArray[3] = input * 3600;\n          outputArray[4] = input * 3.6;\n          return outputArray;\n        };\n    }\n  }\n}\nContainer.registerNodeType('hvac/energy-conversion', EnergyUnitConversionNode);\n","import { Container } from '../../container';\nimport { Node } from '../../node';\nimport { NodeSetting, SettingType, Type } from '../../node-io';\nimport Utils from '../../utils';\nimport { NODE_INFO } from '../../node-info';\n\nclass PowerUnitConversionNode extends Node {\n  conversionFunction;\n\n  constructor() {\n    super();\n\n    this.title = NODE_INFO.hvac[\"power-conversion\"].title;\n    this.description = NODE_INFO.hvac[\"power-conversion\"].description;\n\n    this.addInput('kW', Type.NUMBER);\n    this.addOutput('tons', Type.NUMBER);\n    this.addOutput('Btu/h', Type.NUMBER);\n    this.addOutput('hp', Type.NUMBER);\n    this.settings['inputType'] = NodeSetting.create({\n      description: 'Input Type',\n      type: SettingType.DROPDOWN,\n      config: {\n        items: [\n          { value: 'kW', text: 'kilowatt (kW)' },\n          { value: 'tons', text: 'Tons of Refrigeration (tons)' },\n          { value: 'Btu/h', text: 'British Thermal Unit per hour (Btu/h)' },\n          { value: 'hp', text: 'Electrical Horsepower (hp)' },\n        ],\n      },\n      value: 'kW',\n    });\n    this.settings['precision'] = NodeSetting.create({ description: 'Precision', type: SettingType.NUMBER, value: '4' });\n  }\n\n  onAdded() {\n    this.setConversionFunction();\n  }\n\n  onInputUpdated() {\n    this.onInputOrSettingsChange();\n  }\n\n  onAfterSettingsChange() {\n    this.setConversionFunction();\n    this.onInputOrSettingsChange();\n  }\n\n  private onInputOrSettingsChange() {\n    const input = this.getInputData(0);\n    if (!Utils.hasInput(input)) {\n      this.setOutputData(0, null);\n      this.setOutputData(1, null);\n      this.setOutputData(2, null);\n\n      return;\n    }\n    const output = this.conversionFunction(input);\n    const precision = Math.abs(this.settings['precision'].value);\n    this.setOutputData(0, Number(output[0]).toFixed(precision));\n    this.setOutputData(1, Number(output[1]).toFixed(precision));\n    this.setOutputData(2, Number(output[2]).toFixed(precision));\n  }\n\n  setConversionFunction() {\n    const inputType = this.settings['inputType'].value;\n    switch (inputType) {\n      case 'kW':\n        this.title = 'Power Conversion (kW)';\n        this.inputs[0].name = 'kW';\n        this.outputs[0].name = 'tons';\n        this.outputs[1].name = 'Btu/h';\n        this.outputs[2].name = 'hp';\n        this.conversionFunction = input => {\n          const outputArray: number[] = [null, null, null];\n          outputArray[0] = input * 0.284345;\n          outputArray[1] = input * 3412.141635133076;\n          outputArray[2] = input * 1.340482573727;\n          return outputArray;\n        };\n        break;\n      case 'tons':\n        this.title = 'Power Conversion (tons)';\n        this.inputs[0].name = 'tons';\n        this.outputs[0].name = 'kW';\n        this.outputs[1].name = 'Btu/h';\n        this.outputs[2].name = 'hp';\n        this.conversionFunction = input => {\n          const outputArray: number[] = [null, null, null];\n          outputArray[0] = input * 3.51685;\n          outputArray[1] = input * 12000;\n          outputArray[2] = input * 4.71427613941;\n          return outputArray;\n        };\n        break;\n      case 'Btu/h':\n        this.title = 'Power Conversion (Btu/h)';\n        this.inputs[0].name = 'Btu/h';\n        this.outputs[0].name = 'kW';\n        this.outputs[1].name = 'tons';\n        this.outputs[2].name = 'hp';\n        this.conversionFunction = input => {\n          const outputArray: number[] = [null, null, null];\n          outputArray[0] = input * 0.00029307107;\n          outputArray[1] = input * 8.33333332843549e-5;\n          outputArray[2] = input * 0.000392856662;\n          return outputArray;\n        };\n        break;\n      case 'hp':\n        this.title = 'Power Conversion (hp)';\n        this.inputs[0].name = 'hp';\n        this.outputs[0].name = 'kW';\n        this.outputs[1].name = 'tons';\n        this.outputs[2].name = 'Btu/h';\n        this.conversionFunction = input => {\n          const outputArray: number[] = [null, null, null];\n          outputArray[0] = input * 0.746;\n          outputArray[1] = input * 2545.457659809275;\n          outputArray[2] = input * 0.21212147;\n          return outputArray;\n        };\n        break;\n      default:\n        this.title = 'Power Conversion (kW)';\n        this.inputs[0].name = 'kW';\n        this.outputs[0].name = 'tons';\n        this.outputs[1].name = 'Btu/h';\n        this.outputs[2].name = 'hp';\n        this.conversionFunction = input => {\n          const outputArray: number[] = [null, null, null];\n          outputArray[0] = input * 0.284345;\n          outputArray[1] = input * 3412.141635133076;\n          outputArray[2] = input * 1.340482573727;\n          return outputArray;\n        };\n    }\n  }\n}\nContainer.registerNodeType('hvac/power-conversion', PowerUnitConversionNode);\n","import { Container } from '../../container';\nimport { Node } from '../../node';\nimport { NodeSetting, SettingType, Type } from '../../node-io';\nimport Utils from '../../utils';\nimport { NODE_INFO } from '../../node-info';\n\nclass VolumeUnitConversionNode extends Node {\n  conversionFunction;\n\n  constructor() {\n    super();\n    \n    this.title = NODE_INFO.hvac[\"volume-conversion\"].title;\n    this.description = NODE_INFO.hvac[\"volume-conversion\"].description;\n   \n    this.addInput('L', Type.NUMBER);\n    this.addOutput('M³', Type.NUMBER);\n    this.addOutput('ft³', Type.NUMBER);\n    this.addOutput('gal', Type.NUMBER);\n    this.settings['inputType'] = NodeSetting.create({\n      description: 'Input Type',\n      type: SettingType.DROPDOWN,\n      config: {\n        items: [\n          { value: 'L', text: 'Litre (L)' },\n          { value: 'm³', text: 'Cubic Metre (m³)' },\n          { value: 'ft³', text: 'Cubic Foot (ft³)' },\n          { value: 'gal', text: 'Gallon (gal)' },\n        ],\n      },\n      value: 'L',\n    });\n    this.settings['precision'] = NodeSetting.create({ description: 'Precision', type: SettingType.NUMBER, value: '4' });\n  }\n\n  onAdded() {\n    this.setConversionFunction();\n  }\n\n  onInputUpdated() {\n    this.onInputOrSettingsChange();\n  }\n\n  onAfterSettingsChange() {\n    this.setConversionFunction();\n    this.onInputOrSettingsChange();\n  }\n\n  private onInputOrSettingsChange() {\n    const input = this.getInputData(0);\n    if (!Utils.hasInput(input)) {\n      this.setOutputData(0, null);\n      this.setOutputData(1, null);\n      this.setOutputData(2, null);\n\n      return;\n    }\n    const output = this.conversionFunction(input);\n    const precision = Math.abs(this.settings['precision'].value);\n    this.setOutputData(0, Number(output[0]).toFixed(precision));\n    this.setOutputData(1, Number(output[1]).toFixed(precision));\n    this.setOutputData(2, Number(output[2]).toFixed(precision));\n  }\n\n  private setConversionFunction() {\n    const inputType = this.settings['inputType'].value;\n    switch (inputType) {\n      case 'L':\n        this.title = 'Volume Conversion (L)';\n        this.inputs[0].name = 'L';\n        this.outputs[0].name = 'm³';\n        this.outputs[1].name = 'ft³';\n        this.outputs[2].name = 'gal';\n        this.conversionFunction = input => {\n          const outputArray: number[] = [null, null, null];\n          outputArray[0] = input * 0.001;\n          outputArray[1] = input * 0.0353147;\n          outputArray[2] = input * 0.2642;\n          return outputArray;\n        };\n        break;\n      case 'm³':\n        this.title = 'Volume Conversion (m³)';\n        this.inputs[0].name = 'm³';\n        this.outputs[0].name = 'L';\n        this.outputs[1].name = 'ft³';\n        this.outputs[2].name = 'gal';\n        this.conversionFunction = input => {\n          const outputArray: number[] = [null, null, null];\n          outputArray[0] = input * 1000;\n          outputArray[1] = input * 35.3147;\n          outputArray[2] = input * 264.2;\n          return outputArray;\n        };\n        break;\n      case 'ft³':\n        this.title = 'Volume Conversion (ft³)';\n        this.inputs[0].name = 'ft³';\n        this.outputs[0].name = 'm³';\n        this.outputs[1].name = 'L';\n        this.outputs[2].name = 'gal';\n        this.conversionFunction = input => {\n          const outputArray: number[] = [null, null, null];\n          outputArray[0] = input * 0.0283168;\n          outputArray[1] = input * 28.3168;\n          outputArray[2] = input * 7.481;\n          return outputArray;\n        };\n        break;\n      case 'gal':\n        this.title = 'Volume Conversion (gal)';\n        this.inputs[0].name = 'gal';\n        this.outputs[0].name = 'm³';\n        this.outputs[1].name = 'L';\n        this.outputs[2].name = 'ft³';\n        this.conversionFunction = input => {\n          const outputArray: number[] = [null, null, null];\n          outputArray[0] = input * 0.00378541;\n          outputArray[1] = input * 3.78541;\n          outputArray[2] = input * 0.133681;\n          return outputArray;\n        };\n        break;\n      default:\n        this.title = 'Volume Conversion (L)';\n        this.inputs[0].name = 'L';\n        this.outputs[0].name = 'm³';\n        this.outputs[1].name = 'ft³';\n        this.outputs[2].name = 'gal';\n        this.conversionFunction = input => {\n          const outputArray: number[] = [null, null, null];\n          outputArray[0] = input * 0.001;\n          outputArray[1] = input * 0.0353147;\n          outputArray[2] = input * 0.2642;\n          return outputArray;\n        };\n    }\n  }\n}\nContainer.registerNodeType('hvac/volume-conversion', VolumeUnitConversionNode);\n","import { Container } from '../../container';\nimport { Node } from '../../node';\nimport { NodeSetting, SettingType, Type } from '../../node-io';\nimport Utils from '../../utils';\nimport { NODE_INFO } from '../../node-info';\n\nconst psychrolib = require('../../lib/psychrolib');\n\nclass TempConvertNode extends Node {\n  conversionFunction;\n  psychro = new psychrolib();\n\n  constructor() {\n    super();\n    this.title = NODE_INFO.hvac[\"temperature-conversion\"].title;\n    this.description = NODE_INFO.hvac[\"temperature-conversion\"].description;\n    this.addInput('input', Type.NUMBER);\n    this.addOutput('output', Type.NUMBER);\n    this.settings['convertType'] = NodeSetting.create({\n      description: 'Conversion Type',\n      type: SettingType.DROPDOWN,\n      config: {\n        items: [\n          { value: 'C_to_F', text: 'Celsius to Fahrenheit' },\n          { value: 'C_to_K', text: 'Celsius to Kelvin' },\n          { value: 'C_to_R', text: 'Celsius to Rankine' },\n          { value: 'F_to_C', text: 'Fahrenheit to Celsius' },\n          { value: 'F_to_K', text: 'Fahrenheit to Kelvin' },\n          { value: 'F_to_R', text: 'Fahrenheit to Rankine' },\n          { value: 'K_to_C', text: 'Kelvin to Celsius' },\n          { value: 'K_to_F', text: 'Kelvin to Fahrenheit' },\n          { value: 'K_to_R', text: 'Kelvin to Rankine' },\n          { value: 'R_to_C', text: 'Rankine to Celsius' },\n          { value: 'R_to_F', text: 'Rankine to Fahrenheit' },\n          { value: 'R_to_K', text: 'Rankine to Kelvin' },\n        ],\n      },\n      value: 'C_to_F',\n    });\n    this.settings['precision'] = NodeSetting.create({ description: 'Precision', type: SettingType.NUMBER, value: 2 });\n  }\n\n  onAdded() {\n    this.setConversionFunction();\n  }\n\n  onInputUpdated() {\n    this.onInputOrSettingsChange();\n  }\n\n  onAfterSettingsChange() {\n    this.setConversionFunction();\n    this.onInputOrSettingsChange();\n  }\n\n  private onInputOrSettingsChange() {\n    const input = Number(this.getInputData(0));\n    if (!Utils.hasInput(input)) {\n      this.setOutputData(0, null);\n      return;\n    }\n    const precision = Math.abs(this.settings['precision'].value);\n    const output = Number(this.conversionFunction(input)).toFixed(precision);\n    this.setOutputData(0, output);\n  }\n\n  private setConversionFunction() {\n    const conversion = this.settings['convertType'].value;\n    console.log(conversion, ': converstion');\n    switch (conversion) {\n      case 'C_to_F':\n        this.title = 'Temperature Conversion (C-> F)';\n        this.conversionFunction = this.psychro.GetTFahrenheitFromTCelsius;\n        break;\n      case 'C_to_K':\n        this.title = 'Temperature Conversion (C-> K)';\n        console.log('C_to_K');\n        this.conversionFunction = this.psychro.GetTKelvinFromTCelsius;\n        break;\n      case 'C_to_R':\n        this.title = 'Temperature Conversion (C-> R)';\n        this.conversionFunction = this.psychro.GetTRankineFromTCelsius;\n        break;\n      case 'F_to_C':\n        this.title = 'Temperature Conversion (F-> C)';\n        this.conversionFunction = this.psychro.GetTCelsiusFromTFahrenheit;\n        break;\n      case 'F_to_K':\n        this.title = 'Temperature Conversion (F-> K)';\n        this.conversionFunction = this.psychro.GetTKelvinFromTFahrenheit;\n        break;\n      case 'F_to_R':\n        this.title = 'Temperature Conversion (F-> R)';\n        this.conversionFunction = this.psychro.GetTRankineFromTFahrenheit;\n        break;\n      case 'K_to_C':\n        this.title = 'Temperature Conversion (K-> C)';\n        this.conversionFunction = this.psychro.GetTCelsiusFromTKelvin;\n        break;\n      case 'K_to_F':\n        this.title = 'Temperature Conversion (K-> F)';\n        this.conversionFunction = this.psychro.GetTFahrenheitFromTKelvin;\n        break;\n      case 'K_to_R':\n        this.title = 'Temperature Conversion (K-> R)';\n        this.conversionFunction = this.psychro.GetTRankineFromTKelvin;\n        break;\n      case 'R_to_C':\n        this.title = 'Temperature Conversion (R-> C)';\n        this.conversionFunction = this.psychro.GetTCelsiusFromTRankine;\n        break;\n      case 'R_to_F':\n        this.title = 'Temperature Conversion (R-> F)';\n        this.conversionFunction = this.psychro.GetTFahrenheitFromTRankine;\n        break;\n      case 'R_to_K':\n        this.title = 'Temperature Conversion (R-> K)';\n        this.conversionFunction = this.psychro.GetTKelvinFromTRankine;\n        break;\n      default:\n        this.title = 'Temperature Conversion (C-> F)';\n        this.conversionFunction = this.psychro.GetTFahrenheitFromTCelsius;\n    }\n  }\n}\nContainer.registerNodeType('hvac/temperature-conversion', TempConvertNode);\n","import { Container } from '../../container';\nimport { Node } from '../../node';\nimport { NodeSetting, SettingType, Type } from '../../node-io';\nimport Utils from '../../utils';\nimport { NODE_INFO } from '../../node-info';\n\nconst psychrolib = require('../../lib/psychrolib');\n\nclass AtmosphericPressureNode extends Node {\n  psychro = new psychrolib();\n\n  constructor() {\n    super();\n   \n    this.title = NODE_INFO.hvac[\"atmospheric-pressure\"].title;\n    this.description = NODE_INFO.hvac[\"atmospheric-pressure\"].description;\n\n    this.addInput('altitude', Type.NUMBER);\n    this.addOutput('pressure', Type.NUMBER);\n    this.settings['units'] = NodeSetting.create({\n      description: 'Select Units',\n      type: SettingType.DROPDOWN,\n      config: {\n        items: [\n          { value: 'SI', text: 'Metric/SI (Meters-> Pa)' },\n          { value: 'IP', text: 'Imperial/IP (Feet-> Psi)' },\n        ],\n      },\n      value: 'SI',\n    });\n    this.settings['precision'] = NodeSetting.create({ description: 'Precision', type: SettingType.NUMBER, value: 2 });\n    this.psychro.SetUnitSystem(this.psychro.SI);\n  }\n\n  onAdded() {\n    this.updateTitleAndFunction();\n    this.onInputUpdated();\n  }\n\n  onInputUpdated() {\n    this.onInputOrSettingsChange();\n  }\n\n  onAfterSettingsChange() {\n    this.updateTitleAndFunction();\n    this.onInputOrSettingsChange();\n  }\n\n  private updateTitleAndFunction() {\n    const units = this.settings['units'].value;\n    if (units == 'IP') {\n      this.title = 'Atmospheric Pressure (Feet-> Psi)';\n      this.psychro.SetUnitSystem(this.psychro.IP);\n    } else {\n      this.title = 'Atmospheric Pressure (Meters-> Pa)';\n      this.psychro.SetUnitSystem(this.psychro.SI);\n    }\n  }\n\n  private onInputOrSettingsChange() {\n    const altitude = this.getInputData(0);\n    if (!Utils.hasInput(altitude)) {\n      this.setOutputData(0, null);\n      return;\n    }\n    const pressure = this.psychro.GetStandardAtmPressure(altitude);\n    const precision = Math.abs(this.settings['precision'].value);\n    this.setOutputData(0, Number(pressure).toFixed(precision));\n  }\n}\nContainer.registerNodeType('hvac/atmospheric-pressure', AtmosphericPressureNode);\n","import { Container } from '../../container';\nimport { Node } from '../../node';\nimport { NodeSetting, SettingType, Type } from '../../node-io';\nimport Utils from '../../utils';\nimport { NODE_INFO } from '../../node-info';\n\nclass PressureConvertNode extends Node {\n  conversionFunction;\n  constructor() {\n    super();\n   \n    this.title = NODE_INFO.hvac[\"pressure-conversion\"].title;\n    this.description = NODE_INFO.hvac[\"pressure-conversion\"].description;\n   \n    this.addInput('Pa', Type.NUMBER);\n    this.addOutput('atm', Type.NUMBER);\n    this.addOutput('bar', Type.NUMBER);\n    this.addOutput('lbf/in2', Type.NUMBER);\n    this.settings['inputType'] = NodeSetting.create({\n      description: 'Input Type',\n      type: SettingType.DROPDOWN,\n      config: {\n        items: [\n          { value: 'Pa', text: 'Pascal (Pa)' },\n          { value: 'atm', text: 'Standard Atmosphere (atm)' },\n          { value: 'bar', text: 'Bar (bar)' },\n          { value: 'lbf/in2', text: 'Pound-force per square inch (lbf/in2)' },\n        ],\n      },\n      value: 'Pa',\n    });\n    this.settings['precision'] = NodeSetting.create({ description: 'Precision', type: SettingType.NUMBER, value: '2' });\n  }\n\n  onAdded() {\n    this.setConversionFunction();\n  }\n\n  onInputUpdated() {\n    this.onInputOrSettingsChange();\n  }\n\n  onAfterSettingsChange() {\n    this.setConversionFunction();\n    this.onInputOrSettingsChange();\n  }\n\n  private onInputOrSettingsChange() {\n    const input = this.getInputData(0);\n    if (!Utils.hasInput(input)) {\n      this.setOutputData(0, null);\n      this.setOutputData(1, null);\n      this.setOutputData(2, null);\n      return;\n    }\n    const output = this.conversionFunction(input);\n    const precision = Math.abs(this.settings['precision'].value);\n    this.setOutputData(0, Number(output[0]).toFixed(precision));\n    this.setOutputData(1, Number(output[1]).toFixed(precision));\n    this.setOutputData(2, Number(output[2]).toFixed(precision));\n  }\n\n  setConversionFunction() {\n    const inputType = this.settings['inputType'].value;\n    switch (inputType) {\n      case 'Pa':\n        this.title = 'Pressure Conversion (Pa)';\n        this.inputs[0].name = 'Pa';\n        this.outputs[0].name = 'atm';\n        this.outputs[1].name = 'bar';\n        this.outputs[2].name = 'lbf/in2';\n        this.conversionFunction = input => {\n          let outputArray: number[] = [null, null, null];\n          outputArray[0] = input * 9.8692e-6;\n          outputArray[1] = input * 1e-5;\n          outputArray[2] = input * 0.000145038;\n          return outputArray;\n        };\n        break;\n      case 'atm':\n        this.title = 'Pressure Conversion (atm)';\n        this.inputs[0].name = 'atm';\n        this.outputs[0].name = 'Pa';\n        this.outputs[1].name = 'bar';\n        this.outputs[2].name = 'lbf/in2';\n        this.conversionFunction = input => {\n          let outputArray: number[] = [null, null, null];\n          outputArray[0] = input * 101325;\n          outputArray[1] = input * 1.01325;\n          outputArray[2] = input * 14.6959;\n          return outputArray;\n        };\n        break;\n      case 'bar':\n        this.title = 'Pressure Conversion (bar)';\n        this.inputs[0].name = 'bar';\n        this.outputs[0].name = 'Pa';\n        this.outputs[1].name = 'atm';\n        this.outputs[2].name = 'lbf/in2';\n        this.conversionFunction = input => {\n          let outputArray: number[] = [null, null, null];\n          outputArray[0] = input * 100000;\n          outputArray[1] = input * 0.986923;\n          outputArray[2] = input * 14.5038;\n          return outputArray;\n        };\n        break;\n      case 'lbf/in2':\n        this.title = 'Pressure Conversion (lbf/in2)';\n        this.inputs[0].name = 'lbf/in2';\n        this.outputs[0].name = 'Pa';\n        this.outputs[1].name = 'atm';\n        this.outputs[2].name = 'bar';\n        this.conversionFunction = input => {\n          let outputArray: number[] = [null, null, null];\n          outputArray[0] = input * 6894.76;\n          outputArray[1] = input * 0.068046;\n          outputArray[2] = input * 0.0689476;\n          return outputArray;\n        };\n        break;\n      default:\n        this.title = 'Pressure Conversion (Pa)';\n        this.inputs[0].name = 'Pa';\n        this.outputs[0].name = 'atm';\n        this.outputs[1].name = 'bar';\n        this.outputs[2].name = 'lbf/in2';\n        this.conversionFunction = input => {\n          let outputArray: number[] = [null, null, null];\n          outputArray[0] = input * 9.8692e-6;\n          outputArray[1] = input * 1e-5;\n          outputArray[2] = input * 0.000145038;\n          return outputArray;\n        };\n    }\n  }\n}\nContainer.registerNodeType('hvac/pressure-conversion', PressureConvertNode);\n","import { NodeTypeRegistry } from '../../node-type-registry';\nimport { Node } from '../../node';\nimport { NodeSetting, SettingType, Type } from '../../node-io';\nimport Utils from '../../utils';\nimport { NODE_INFO } from '../../node-info';\n\nclass ActuatorSizingNode extends Node {\n  conversionFunction;\n  constructor() {\n    super();\n   \n    this.title = NODE_INFO.hvac[\"actuator-sizing\"].title;\n    this.description = NODE_INFO.hvac[\"actuator-sizing\"].description;\n   \n    this.addInput('damperArea(m²)', Type.NUMBER);\n    this.addOutput('torque(Nm)', Type.NUMBER);\n    this.addOutput('torque(lbf-in)', Type.NUMBER);\n\n    this.settings['units'] = NodeSetting.create({\n      description: 'Input Units',\n      type: SettingType.DROPDOWN,\n      config: {\n        items: [\n          { value: true, text: 'Square Meters (m²)' },\n          { value: false, text: 'Square Feet (ft²)' },\n        ],\n      },\n      value: true,\n    });\n\n    this.settings['type'] = NodeSetting.create({\n      description: 'Damper Type',\n      type: SettingType.DROPDOWN,\n      config: {\n        items: [\n          { value: 6, text: 'No Seals (Low Resistance)' },\n          { value: 7, text: 'With Seals (Medium Resistance)' },\n          { value: 8, text: 'Fire/Smoke (High Resistance)' },\n        ],\n      },\n      value: 6,\n    });\n  }\n\n  onAdded() {\n    this.onAfterSettingsChange();\n  }\n\n  onInputUpdated() {\n    this.onInputOrSettingsChange();\n  }\n\n  onAfterSettingsChange() {\n    this.updateTitles();\n    this.onInputOrSettingsChange();\n  }\n\n  private onInputOrSettingsChange() {\n    var input = this.getInputData(0);\n    if (!Utils.hasInput(input)) {\n      this.setOutputData(0, null);\n      this.setOutputData(1, null);\n      return;\n    }\n\n    if (this.settings['units'].value) input = input * 10.7639;\n    const type = this.settings['type'].value;\n\n    // calculations are roughly based on https://controltrends.org/by-industry/commercial-hvac/actuators-and-valves/05/sizing-electronic-damper-actuators/ (with sizing reduced slightly);\n    const outputm2 = input * type * 0.112985;\n    const outputft2 = input * type;\n\n    this.setOutputData(0, outputm2.toFixed(2));\n    this.setOutputData(1, outputft2.toFixed(2));\n  }\n\n  updateTitles(){\n    if (this.settings['units'].value) this.inputs[0].name = 'ductArea(m²)';\n    else this.inputs[0].name = 'ductArea(ft²)';\n  }\n}\nNodeTypeRegistry.registerNodeType('hvac/actuator-sizing', ActuatorSizingNode);\n","import { NodeTypeRegistry } from '../../node-type-registry';\nimport { Node } from '../../node';\nimport { NodeSetting, SettingType, Type } from '../../node-io';\nimport { NODE_INFO } from '../../node-info';\n\nclass KFactorNode extends Node {\n  constructor() {\n    super();\n   \n    this.title = NODE_INFO.hvac[\"k-factor\"].title;\n    this.description = NODE_INFO.hvac[\"k-factor\"].description;\n   \n    this.addInput('ductArea(m²)', Type.NUMBER);\n    this.addInput('diffPressure(Pa)', Type.NUMBER);\n    this.addInput('airflow(L/s)', Type.NUMBER);\n    this.addOutput('Kfactor', Type.NUMBER);\n\n    this.settings['areaUnits'] = NodeSetting.create({\n      description: 'Duct Area Units',\n      type: SettingType.DROPDOWN,\n      config: {\n        items: [\n          { value: true, text: 'Square Meters (m²)' },\n          { value: false, text: 'Square Feet (ft²)' },\n        ],\n      },\n      value: true,\n    });\n\n    this.settings['DPUnits'] = NodeSetting.create({\n      description: 'Differential Pressure Units',\n      type: SettingType.DROPDOWN,\n      config: {\n        items: [\n          { value: true, text: 'Pascals (Pa)' },\n          { value: false, text: 'Inches of Water (in. w.g.)' },\n        ],\n      },\n      value: true,\n    });\n\n    this.settings['airflowUnits'] = NodeSetting.create({\n      description: 'Airflow Units',\n      type: SettingType.DROPDOWN,\n      config: {\n        items: [\n          { value: true, text: 'Litres per Second (L/s)' },\n          { value: false, text: 'Cubic Feet per Minute (cfm)' },\n        ],\n      },\n      value: true,\n    });\n  }\n\n  onAdded() {\n    this.setOutputData(0, null);\n  }\n\n  onInputUpdated() {\n    this.onInputOrSettingsChange();\n  }\n\n  onAfterSettingsChange() {\n    this.updateTitles();\n    this.onInputOrSettingsChange();\n  }\n\n  private onInputOrSettingsChange() {\n    var area = this.getInputData(0);\n    var DP = this.getInputData(1);\n    var airflow = this.getInputData(2);\n    if (area == null || DP == null || airflow == null) {\n      this.setOutputData(0, null);\n      return;\n    }\n\n    if (this.settings['areaUnits'].value) area = area * 10.7639;\n    if (this.settings['DPUnits'].value) DP = DP * 0.00401865;\n    if (this.settings['airflowUnits'].value) airflow = airflow * 2.11888;\n    \n    //Calculation reference https://cgproducts.johnsoncontrols.com/MET_PDF/6375120.PDF page 30\n    const kFactor = DP*Math.pow(((4005 * area)/airflow), 2);\n    this.setOutputData(0, kFactor.toFixed(2));\n\n  }\n\n  updateTitles(){\n    if (this.settings['areaUnits'].value) this.inputs[0].name = 'ductArea(m²)';\n    else this.inputs[0].name = 'ductArea(ft²)';\n    if (this.settings['areaUnits'].value) this.inputs[1].name = 'diffPressure(Pa)';\n    else this.inputs[1].name = 'diffPressure(in. w.g)';\n    if (this.settings['areaUnits'].value) this.inputs[0].name = 'airflow(L/s)';\n    else this.inputs[2].name = 'airflow(cfm)';\n  }\n}\nNodeTypeRegistry.registerNodeType('hvac/k-factor', KFactorNode);\n","import { NodeTypeRegistry } from '../../node-type-registry';\nimport { Node } from '../../node';\nimport { NodeSetting, SettingType, Type } from '../../node-io';\nimport { NODE_INFO } from '../../node-info';\n\nclass DPAirflowNode extends Node {\n  constructor() {\n    super();\n   \n    this.title = NODE_INFO.hvac[\"dp-airflow\"].title;\n    this.description = NODE_INFO.hvac[\"dp-airflow\"].description;\n   \n    this.addInput('ductArea(m²)', Type.NUMBER);\n    this.addInput('diffPressure(Pa)', Type.NUMBER);\n    this.addInput('Kfactor', Type.NUMBER);\n    this.addOutput('airflow(L/s)', Type.NUMBER);\n    this.addOutput('airflow(cfm)', Type.NUMBER);\n\n    this.settings['areaUnits'] = NodeSetting.create({\n      description: 'Duct Area Units',\n      type: SettingType.DROPDOWN,\n      config: {\n        items: [\n          { value: true, text: 'Square Meters (m²)' },\n          { value: false, text: 'Square Feet (ft²)' },\n        ],\n      },\n      value: true,\n    });\n\n    this.settings['DPUnits'] = NodeSetting.create({\n      description: 'Differential Pressure Units',\n      type: SettingType.DROPDOWN,\n      config: {\n        items: [\n          { value: true, text: 'Pascals (Pa)' },\n          { value: false, text: 'Inches of Water (in. w.g.)' },\n        ],\n      },\n      value: true,\n    });\n  }\n\n  onAdded() {\n    this.setOutputData(0, null);\n  }\n\n  onInputUpdated() {\n    this.onInputOrSettingsChange();\n  }\n\n  onAfterSettingsChange() {\n    this.updateTitles();\n    this.onInputOrSettingsChange();\n  }\n\n  private onInputOrSettingsChange() {\n    var area = this.getInputData(0);\n    var DP = this.getInputData(1);\n    var KFactor = this.getInputData(2);\n    if (area == null || DP == null || KFactor == null) {\n      this.setOutputData(0, null);\n      return;\n    }\n\n    if (this.settings['areaUnits'].value) area = area * 10.7639;\n    if (this.settings['DPUnits'].value) DP = DP * 0.00401865;\n    \n\n    //Calculation reference https://cgproducts.johnsoncontrols.com/MET_PDF/6375120.PDF page 30\n    const airflowCFM = (4005 * area) * Math.sqrt(DP/KFactor);\n    const airflowLS = airflowCFM * 0.4719474;\n\n    this.setOutputData(0, airflowLS.toFixed(2));\n    this.setOutputData(1, airflowCFM.toFixed(2));\n  }\n\n  updateTitles(){\n    if (this.settings['areaUnits'].value) this.inputs[0].name = 'ductArea(m²)';\n    else this.inputs[0].name = 'ductArea(ft²)';\n    if (this.settings['areaUnits'].value) this.inputs[1].name = 'diffPressure(Pa)';\n    else this.inputs[1].name = 'diffPressure(in. w.g)';\n  }\n}\nNodeTypeRegistry.registerNodeType('hvac/dp-airflow', DPAirflowNode);\n","import { Container } from '../../container';\nimport { FlexibleNode } from '../../flexible-node';\nimport { Type } from '../../node-io';\nimport { NODE_INFO } from '../../node-info';\n\nclass ArrayBuilderNode extends FlexibleNode {\n  constructor() {\n    super();\n    this.dynamicInputsType = Type.STRING;\n    this.title = NODE_INFO.json[\"array-builder\"].title;\n    this.description = NODE_INFO.json[\"array-builder\"].description; \n    this.addOutput('out', Type.STRING);\n  }\n\n  onAdded() {\n    this.size = this.computeSize();\n    this.onInputUpdated();\n  }\n\n  onInputUpdated() {\n    let out = []\n    for (let i = this.dynamicInputStartPosition; i < this.getInputsCount(); i++) {\n      out.push(this.getInputData(i))\n    }\n    this.setOutputData(0, out);\n  }\n\n  onAfterSettingsChange() {\n    super.onAfterSettingsChange();\n    this.onInputUpdated();\n  }\n}\nContainer.registerNodeType('json/array-builder', ArrayBuilderNode);\n","import { Container } from '../../container';\nimport { FlexibleNode } from '../../flexible-node';\nimport { Type } from '../../node-io';\nimport { NODE_INFO } from '../../node-info';\n\nclass ArrayBuilderNumNode extends FlexibleNode {\n  constructor() {\n    super();\n    this.dynamicInputsType = Type.NUMBER;\n    this.title = NODE_INFO.json[\"array-builder-number\"].title;\n    this.description = NODE_INFO.json[\"array-builder-number\"].description; \n    this.addOutput('out', Type.STRING);\n  }\n\n  onAdded() {\n    this.size = this.computeSize();\n    this.onInputUpdated();\n  }\n\n  onInputUpdated() {\n    let out = []\n    for (let i:any = this.dynamicInputStartPosition; i < this.getInputsCount(); i++) {\n      out.push(this.getInputData(parseInt(i)))\n    }\n    this.setOutputData(0, out);\n  }\n\n  onAfterSettingsChange() {\n    super.onAfterSettingsChange();\n    this.onInputUpdated();\n  }\n}\nContainer.registerNodeType('json/array-builder-number', ArrayBuilderNumNode);\n","import { Node } from '../../node';\nimport { Container } from '../../container';\nimport * as _ from 'lodash';\nimport { Type } from '../../node-io';\nimport { isNull } from '../../../utils/helper';\nimport { NODE_INFO } from '../../node-info';\n\nexport class ArrayCombineNode extends Node {\n  constructor() {\n    super();\n    this.title = NODE_INFO.json[\"array-combine\"].title;\n    this.description = NODE_INFO.json[\"array-combine\"].description; \n    this.addInput('input-1', Type.JSON);\n    this.addInput('input-2', Type.JSON);\n    this.addOutput('output-array', Type.JSON);\n    this.addOutput('output-object', Type.JSON);\n  }\n\n  onAdded() {\n    this.onInputUpdated();\n  }\n\n  onInputUpdated() {\n    let out = {};\n    const in1 = this.getInputData(0);\n    const in2 = this.getInputData(1);\n    if (isNull(in1)) return\n    if (isNull(in2)) return\n    try {\n      out = [...in1, ...in2]\n      this.setOutputData(0, out);\n    } catch (err) {\n      this.debugInfo(`ARRY-COMBINE NODE: try/catch concat, ${err}`);\n    }\n    try {\n      const merged = Object.assign({}, in1, in2)  \n      this.setOutputData(1, merged);\n    } catch (err) {\n      this.debugInfo(`ARRY-COMBINE NODE: try/catch assign, ${err}`);\n    }\n  }\n\n  onAfterSettingsChange() {\n    this.onInputUpdated();\n  }\n\n\n\n}\nContainer.registerNodeType('json/array-combine', ArrayCombineNode);\n","import * as _ from 'lodash';\nimport { Container } from '../../container';\nimport { Node } from '../../node';\nimport { NODE_INFO } from '../../node-info';\nimport { NodeSetting, SettingType, Type } from '../../node-io';\n\nexport class JSONBuilderNode extends Node {\n  filterKeys: string[] = [];\n\n  constructor() {\n    super();\n    this.title = NODE_INFO.json['json-builder'].title;\n    this.description = NODE_INFO.json['json-builder'].description;\n    this.settings['definition'] =NodeSetting.create({\n      description: 'payload definition (JSON)',\n      type: SettingType.STRING,\n      value: '',\n    });\n    this.addInput('trigger', Type.BOOLEAN);\n    this.addOutput('output', Type.JSON);\n  }\n\n  init() {\n    this.addInputs();\n  }\n\n  onAdded() {\n    this.filterKeys = this.getFilterKeys();\n  }\n\n  onInputUpdated() {\n    let out = {};\n    for (let i = this.dynamicOutputStartPosition(); i < this.getInputsCount(); i++) {\n      out = { ...out, ...{ [this.filterKeys[i - 1]]: this.inputs[i].data } };\n    }\n    this.setOutputData(0, out);\n  }\n\n  onAfterSettingsChange() {\n    this.updateInputs();\n    this.onInputUpdated();\n  }\n\n  private updateInputs() {\n    const filterKeys = this.getFilterKeys();\n    let diffKeyFromPos = Math.min(this.filterKeys.length, filterKeys.length);\n    for (let i = 0; i < filterKeys.length; i++) {\n      if (this.filterKeys?.[i] != filterKeys[i]) {\n        diffKeyFromPos = i;\n        break;\n      }\n    }\n    const inputsCount = this.getInputsCount();\n    for (let i = diffKeyFromPos + this.dynamicOutputStartPosition(); i < inputsCount; i++) {\n      this.removeInput(i);\n    }\n    this.addInputs(diffKeyFromPos);\n  }\n\n  private addInputs(fromPos = 0) {\n    this.filterKeys = this.getFilterKeys();\n    for (let i = fromPos; i < this.filterKeys.length; i++) {\n      let name = this.filterKeys[i];\n      this.addInput(name.toString(), Type.ANY);\n    }\n  }\n\n  private getFilterKeys(): string[] {\n    return this.settings['definition'].value\n      .replace(/\\s+/g, '')\n      .split(',')\n      .filter(x => !!x);\n  }\n\n  private dynamicOutputStartPosition() {\n    return 1;\n  }\n}\nContainer.registerNodeType('json/json-builder', JSONBuilderNode);\n","import { isEmpty, isJSON, isNull } from '../../../utils/helper';\nimport { Container } from '../../container';\nimport { Node } from '../../node';\nimport { NODE_INFO } from '../../node-info';\nimport { NodeSetting, SettingType, Type } from '../../node-io';\n\nexport class JSONEnumBuilderNode extends Node {\n  filterKeys = [];\n\n  constructor() {\n    super();\n    this.title = NODE_INFO.json[\"json-enum-builder\"].title;\n    this.description = NODE_INFO.json[\"json-enum-builder\"].description;\n    this.addInput('trigger', Type.BOOLEAN);\n    this.addInputWithSettings('definition', Type.JSON, '{\"pointOne\":22, \"pointTwo\":33}', 'JSON value');\n    this.addOutput('output', Type.ANY);\n    this.addOutput('valid-json', Type.BOOLEAN);\n    this.settings['json'] = NodeSetting.create({\n      description: 'Select output',\n      type: SettingType.DROPDOWN,\n      value: '',\n    });\n  }\n\n  onAdded() {\n    this.onAfterSettingsChange()\n  }\n\n  onInputUpdated() {\n    this.getInputData(0);\n    this.onAfterSettingsChange()\n  }\n\n  onAfterSettingsChange() {\n    const input = this.getInputData(1);\n    if (isNull(input)) return;\n    if (isJSON(input) && !isEmpty(input)) {\n      const definition = Object.entries(input).map(\n        e => {\n          return { value: e[1], text: e[0] };\n        },\n      );\n      if (definition) {\n        this.settings['json'].config = {\n          items: definition,\n        };\n        const out = this.settings['json'].value\n        this.setOutputData(0, out);\n        this.setOutputData(1, true);\n        this.broadcastSettingsToClients();\n      }\n    } else this.setOutputData(1, false);\n  }\n\n\n\n\n}\nContainer.registerNodeType('json/json-enum-builder', JSONEnumBuilderNode);\n","import { Container } from '../../container';\nimport { Node } from '../../node';\nimport { NODE_INFO } from '../../node-info';\nimport { NodeSetting, SettingType, Type } from '../../node-io';\nimport jsonStringCompare from '../../utils/string-json-compare-utils';\n\nclass JsonFilter extends Node {\n  constructor() {\n    super();\n    this.title = NODE_INFO.json[\"json-filter\"].title;\n    this.description = NODE_INFO.json[\"json-filter\"].description;\n    this.addInput('input', Type.JSON);\n    this.addOutput('output', Type.JSON);\n    this.addOutput('output-key', Type.STRING);\n    this.settings['filter'] = NodeSetting.create({\n      description: 'Example: key',\n      value: 'key',\n      type: SettingType.STRING,\n    });\n  }\n\n\n  onInputUpdated() {\n    let input = this.getInputData(0);\n    if (input === null) {\n      this.setOutputData(0, null);\n      return;\n    }\n\n    try {\n      const filter = this.settings['filter'].value;\n      const out = input[0][filter]\n      this.setOutputData(0, out);\n\n    } catch (e) {\n      this.setOutputData(0, null);\n\n    }\n  }\n\n  onAfterSettingsChange() {\n    this.onInputUpdated();\n  }\n}\nContainer.registerNodeType('json/json-filter', JsonFilter);\n","import { Container } from '../../container';\nimport { Node } from '../../node';\nimport { NODE_INFO } from '../../node-info';\nimport { NodeSetting, SettingType, Type } from '../../node-io';\n\nclass JsonObjFilter extends Node {\n  constructor() {\n    super();\n    this.title = NODE_INFO.json[\"json-obj-filter\"].title;\n    this.description = NODE_INFO.json[\"json-obj-filter\"].description;\n    this.addInput('input', Type.JSON);\n    this.addOutput('output', Type.JSON);\n    this.settings['key'] = NodeSetting.create({\n      description: 'Example: key',\n      value: 'key',\n      type: SettingType.STRING,\n    });\n    this.settings['filter'] = NodeSetting.create({\n      description: 'Example: value',\n      value: 'value',\n      type: SettingType.STRING,\n    });\n  }\n\n\n  onInputUpdated() {\n    const input = this.getInputData(0);\n    if (input === null) {\n      this.setOutputData(0, null);\n      return;\n    }\n\n    try {\n      const key = this.settings['key'].value;\n      const filter = this.settings['filter'].value;\n      const out = input.filter(obj => (obj[key] === filter)); \n      this.setOutputData(0, out);\n    } catch (e) {\n      this.setOutputData(0, null);\n    }\n  }\n\n  onAfterSettingsChange() {\n    this.onInputUpdated();\n  }\n}\nContainer.registerNodeType('json/json-obj-filter', JsonObjFilter);\n","import { Container } from '../../container';\nimport { Node } from '../../node';\nimport { NodeSetting, SettingType, Type } from '../../node-io';\nimport jsonStringCompare from '../../utils/string-json-compare-utils';\nimport { NODE_INFO } from '../../node-info';\n\nenum compareType {\n  Equals = 'Equals',\n  NotEquals = 'Not Equal',\n  GreaterThanEqual = 'Greater Than Equal',\n  GreaterThan = 'Greater Than',\n  LessThanEqual = 'Less Than Equal',\n  LessThan = 'Less Than',\n  Includes = 'Includes',\n  startsWith = 'Starts With',\n  endsWith = 'Ends With'\n}\n\nclass JsonFilterCompare extends Node {\n  conversionFunction;\n  constructor() {\n    super();\n    this.title = NODE_INFO.json[\"json-filter-compare\"].title;\n    this.description = NODE_INFO.json[\"json-filter-compare\"].description; \n    this.addInput('input', Type.STRING);\n    this.addInputWithSettings('comparison-to', Type.STRING, '', 'Comparison Value');\n    this.addOutput('output', Type.STRING);\n    this.addOutput('output-key', Type.STRING);\n    this.addOutput('match', Type.BOOLEAN);\n    this.settings['filter'] = NodeSetting.create({\n      description: 'Example: msg.myKey',\n      value: 'myKey',\n      type: SettingType.STRING,\n    });\n    this.settings['function'] = NodeSetting.create({\n      description: 'Comparison Type',\n      type: SettingType.DROPDOWN,\n      config: {\n        items: [\n          { value: compareType.Equals, text: compareType.Equals },\n          { value: compareType.NotEquals, text: compareType.NotEquals },\n          { value: compareType.GreaterThanEqual, text: compareType.GreaterThanEqual },\n          { value: compareType.GreaterThan, text: compareType.GreaterThan },\n          { value: compareType.LessThanEqual, text: compareType.LessThanEqual },\n          { value: compareType.LessThan, text: compareType.LessThan },\n          { value: compareType.Includes, text: compareType.Includes },\n          { value: compareType.startsWith, text: compareType.startsWith },\n          { value: compareType.endsWith, text: compareType.endsWith },\n        ],\n      },\n      value: compareType.Equals,\n    });\n    this.settings['isNumber'] = NodeSetting.create({\n      description: 'Comparison value is a number',\n      value: false,\n      type: SettingType.BOOLEAN,\n    });\n    this.settings['passNull'] = NodeSetting.create({\n      description: 'Send null if not a match',\n      value: false,\n      type: SettingType.BOOLEAN,\n    });\n  }\n\n  onAdded() {\n  this.onAfterSettingsChange()\n  }\n\n\n  onInputUpdated() {\n    const input = this.getInputData(0);\n    if (input === null || input === undefined) {\n      this.setOutputData(0, null);\n      this.setOutputData(1, null);\n      this.setOutputData(2, null);\n      return;\n    }\n    try {\n      const jsonCheck = JSON.parse(input);\n      const filter = this.settings['filter'].value;\n      let out = jsonStringCompare.findVal(jsonCheck, filter);\n      const string2 = this.getInputData(1);\n      if (jsonStringCompare.compare(this, out.value, string2)) {\n        this.setOutputData(0, out.value);\n        this.setOutputData(1, out.valueWithKey);\n        this.setOutputData(2, true);\n      } else if (this.settings['passNull'].value === true) {\n        this.setOutputData(0, null);\n        this.setOutputData(1, null);\n        this.setOutputData(2, false);\n      } else this.setOutputData(2, false);\n    } catch (e) {\n      this.setOutputData(0, null);\n      this.setOutputData(1, null);\n      this.setOutputData(2, true);\n    }\n  }\n  onAfterSettingsChange() {\n    this.onInputUpdated();\n    const inputType = this.settings['function'].value\n    const title = \"Json Comparison\"\n    this.title = `${title} Compare (${inputType})`;\n    this.broadcastTitleToClients();\n  }\n\n}\nContainer.registerNodeType('json/json-filter-compare', JsonFilterCompare);\n","import * as _ from 'lodash';\nimport { ErrorHandler } from '../../../utils/decorators';\nimport { Container } from '../../container';\nimport { Node } from '../../node';\nimport { NODE_INFO } from '../../node-info';\nimport { NodeSetting, SettingType, Type } from '../../node-io';\nimport Utils from '../../utils';\n\nclass JsonFilterMultiple extends Node {\n  outputsCount = 0;\n  filterKeys: Array<string> = [];\n\n  inInput: number = 0;\n\n  outError: number = 0;\n  outJsonOutput: number = 1;\n\n  constructor() {\n    super();\n    this.title = NODE_INFO.json['json-filter-multiple'].title;\n    this.description = NODE_INFO.json['json-filter-multiple'].description;\n    this.addInput('input', Type.JSON);\n    this.addOutput('error', Type.STRING);\n    this.addOutput('json-output', Type.JSON);\n    this.settings['outputs_count'] = NodeSetting.create({\n      description: 'Number of Outputs',\n      value: 1,\n      type: SettingType.NUMBER,\n    });\n\n    this.setSettingsConfig({\n      groups: [{ outputs_count: {} }],\n    });\n  }\n\n  init() {\n    this.changeOutputsAndSettings();\n  }\n\n  onCreated() {\n    this.renameInputsOutputs();\n  }\n\n  onAdded() {\n    this.outputsCount = this.settings['outputs_count'].value;\n    this.onAfterSettingsChange();\n  }\n\n  onInputUpdated() {\n    const input = this.getInputData(this.inInput);\n    if (input == null) {\n      this.setOutputData(this.outError, null);\n      return;\n    }\n    try {\n      const outputJson: any = {};\n      for (let i = 0; i < this.filterKeys.length; i++) {\n        let out = _.get(input, this.filterKeys[i]);\n        if (out !== undefined) {\n          outputJson[this.filterKeys[i]] = out;\n          this.setOutputData(i + this.dynamicOutputStartPosition(), out);\n        }\n      }\n      this.setOutputData(this.outJsonOutput, outputJson);\n      this.setOutputData(this.outError, null);\n    } catch (e) {\n      this.setOutputData(this.outError, e.toString());\n    }\n  }\n\n  onAfterSettingsChange() {\n    this.changeOutputsAndSettings();\n    this.renameInputsOutputs();\n    // update db\n    if (this.container.db)\n      this.container.db.updateNode(this.id, this.container.id, {\n        $set: { outputs: this.outputs, settings: this.settings },\n      });\n    this.onInputUpdated();\n  }\n\n  @ErrorHandler\n  changeOutputsAndSettings() {\n    let outputs = this.settings['outputs_count'].value;\n    outputs = Utils.clamp(outputs, 1, 10);\n    this.settings['outputs_count'].value = outputs;\n    // change outputs count\n    if (this.outputsCount != outputs) this.changeMyOutputsCount(outputs);\n  }\n\n  @ErrorHandler\n  changeMyOutputsCount(targetOutputCount) {\n    const diff = targetOutputCount - this.outputsCount;\n    if (diff == 0) return;\n    // add inputs, outputs\n    this.changeOutputsCount(targetOutputCount + this.dynamicOutputStartPosition(), Type.STRING);\n\n    // change settings for outputs\n    if (diff > 0) {\n      for (\n        let i = this.outputsCount + this.dynamicOutputStartPosition();\n        i < targetOutputCount + this.dynamicOutputStartPosition();\n        i++\n      ) {\n        this.settings['output' + this.getOutputNumber(i)] = NodeSetting.create({\n          description: 'Output ' + this.getOutputNumber(i),\n          value: '',\n          type: SettingType.STRING,\n        });\n      }\n    } else if (diff < 0) {\n      for (\n        let i = this.outputsCount + this.dynamicOutputStartPosition() - 1;\n        i >= targetOutputCount + this.dynamicOutputStartPosition();\n        i--\n      ) {\n        delete this.settings['output' + this.getOutputNumber(i)];\n      }\n    }\n    this.outputsCount = targetOutputCount;\n  }\n\n  @ErrorHandler\n  renameInputsOutputs() {\n    this.filterKeys = [];\n    for (let i = this.dynamicOutputStartPosition(); i < this.outputsCount + this.dynamicOutputStartPosition(); i++) {\n      this.filterKeys.push(this.settings['output' + this.getOutputNumber(i)].value);\n      const output = this.settings['output' + this.getOutputNumber(i)].value || '';\n      this.outputs[i].name = this.getOutputNumber(i) + ' | ' + output;\n      this.setOutputData(i, '');\n    }\n  }\n\n  private getOutputNumber(i: number): number {\n    return i - this.dynamicOutputStartPosition() + 1;\n  }\n\n  private dynamicOutputStartPosition() {\n    return 2;\n  }\n}\nContainer.registerNodeType('json/json-filter-multiple', JsonFilterMultiple);\n","import { Container } from '../../container';\nimport { Node } from '../../node';\nimport { Type } from '../../node-io';\nimport { NODE_INFO } from '../../node-info';\n\nclass JsonCheckerNode extends Node {\n  constructor() {\n    super();\n    this.title = NODE_INFO.json[\"json-checker\"].title;\n    this.description = NODE_INFO.json[\"json-checker\"].description; \n    this.addInput('input', Type.STRING)\n    this.addOutput('output', Type.BOOLEAN);\n    this.addOutput('msg', Type.STRING);\n  }\n\n  onAdded() {\n    this.onInputUpdated();\n  }\n\n  isJson(item: any): boolean {\n    item = typeof item !== 'string' ? JSON.stringify(item) : item;\n\n    try {\n      item = JSON.parse(item);\n    } catch (e) {\n      return false;\n    }\n\n    if (typeof item === 'object' && item !== null) {\n      return true;\n    }\n\n    return false;\n  }\n\n  onInputUpdated() {\n    const val = this.getInputData(0);\n    try {\n      if (this.isJson(val)) {\n        this.setOutputData(0, true);\n        this.setOutputData(1, 'valid JSON');\n      } else { \n        this.setOutputData(0, false);\n        this.setOutputData(1, 'invalid JSON');\n      }\n    } catch (err) {\n      this.setOutputData(0, false);\n      this.setOutputData(1, err);\n    }\n  }\n}\nContainer.registerNodeType('json/json-checker', JsonCheckerNode);\n","import { isNull } from '../../../utils/helper';\nimport { Container } from '../../container';\nimport { Node } from '../../node';\nimport { NODE_INFO } from '../../node-info';\nimport { Type } from '../../node-io';\n\nclass JsonParse extends Node {\n  constructor() {\n    super();\n    this.title = NODE_INFO.json[\"json-parse\"].title;\n    this.description = NODE_INFO.json[\"json-parse\"].description;\n    this.addInput('json-input', Type.JSON);\n    this.addOutput('output', Type.JSON);\n  }\n\n  onInputUpdated() {\n    let input = this.getInputData(0);\n    if (isNull(input)) return;\n    try {\n      this.setOutputData(0, input);\n    } catch (err) {\n      this.debugInfo(`JSON PARSE: try/catch , ${err}`);\n    };\n  }\n\n  onAfterSettingsChange() {\n    this.onInputUpdated();\n  }\n}\nContainer.registerNodeType('json/json-parse', JsonParse);\n","import { Container } from '../../container';\nimport { Node } from '../../node';\nimport { NODE_INFO } from '../../node-info';\nimport {Type } from '../../node-io';\nimport { isNull } from '../../../utils/helper';\n\n\nclass JsonPreventDuplicates extends Node {\n  older;\n  constructor() {\n    super();\n    this.title = NODE_INFO.json[\"json-prevent-duplicates\"].title;\n    this.description = NODE_INFO.json[\"json-prevent-duplicates\"].description;\n    this.addInput('input', Type.JSON);\n    this.addOutput('output', Type.JSON);\n  }\n\n  getChanges = function (oldArray: any, newArray: any) {\n    if (JSON.stringify(oldArray) === JSON.stringify(newArray)) {\n      return false;\n    } else return true;\n  \n  };\n\n\n  onInputUpdated() {\n    const input = this.getInputData(0);\n    if (input === null) {\n      this.setOutputData(0, null);\n      return;\n    }\n    try {\n      // first run\n      if(isNull(this.older)){\n        this.setOutputData(0, input);\n        this.older = input\n      }\n      const test = this.getChanges(this.older, input)\n      if(test == false) return\n      if(test == true){\n        this.older = input\n        this.setOutputData(0, input);\n      }\n    \n    } catch (e) {\n      this.setOutputData(0, null);\n    }\n  }\n\n  onAfterSettingsChange() {\n    this.onInputUpdated();\n  }\n}\nContainer.registerNodeType('json/json-prevent-duplicates', JsonPreventDuplicates);\n","import { Container } from '../../container';\nimport { Node } from '../../node';\nimport { Type } from '../../node-io';\nimport { isNull } from '../../../utils/helper';\nimport { NODE_INFO } from '../../node-info';\nconst jsonata = require('jsonata');\n\nclass JsonQueryNode extends Node {\n  constructor() {\n    super();\n    this.title = NODE_INFO.json[\"json-query\"].title;\n    this.description = NODE_INFO.json[\"json-query\"].description;\n    this.addInput('input', Type.JSON);\n    this.addInputWithSettings('query', Type.STRING, `deviceID &  ', ' & clientId`, 'Query', false);\n    this.addOutput('output', Type.JSON);\n    this.addOutput('error', Type.STRING);\n  }\n\n  onInputUpdated() {\n    let input = this.getInputData(0);\n    let queryInput = this.getInputData(1);\n    if (isNull(input)) return\n    if (isNull(queryInput)) return\n    try {\n      let expression = jsonata(queryInput);\n      let result = expression.evaluate(input);\n      this.setOutputData(0, result);\n      this.setOutputData(1, null);\n    } catch (e) {\n      this.setOutputData(0, null);\n      this.setOutputData(1, e);\n    }\n  }\n\n  onAfterSettingsChange() {\n    this.onInputUpdated();\n  }\n}\nContainer.registerNodeType('json/json-query', JsonQueryNode);\n","import { Container } from '../../container';\nimport { Node } from '../../node';\nimport { NodeSetting, SettingType, Type } from '../../node-io';\nimport Utils from '../../utils';\nimport { NODE_INFO } from '../../node-info';\n\nclass AnyLatchNode extends Node {\n  lastLatchValue: boolean;\n\n\n  constructor() {\n    super();\n    this.title = NODE_INFO.latch[\"any-latch\"].title;\n    this.description =NODE_INFO.latch[\"any-latch\"].description;\n\n    this.addInput('input', Type.ANY);\n    this.addInput('latch', Type.BOOLEAN);\n    this.addOutput('output', Type.ANY);\n    this.settings['passOnly'] = NodeSetting.create({\n      description: 'Only if input value is updated',\n      value: false,\n      type: SettingType.BOOLEAN,\n    });\n  }\n\n  onAdded() {\n \n    this.onInputUpdated();\n  }\n\n  onExecute(){\n    //this.onInputUpdated();\n  }\n\n  onInputUpdated() {\n    const passOnly = this.settings['passOnly'].value\n    let latch = this.getInputData(1);\n    if (latch == null) {\n      if (passOnly) {\n        this.setOutputData(0, null);\n      } else this.setOutputData(0, null);\n      return;\n    }\n    if (latch == this.lastLatchValue) return;\n    this.lastLatchValue = latch;\n    if (latch == true) {\n      let input = this.getInputData(0);\n      if (!Utils.hasInput(input)) {\n        if (passOnly) {\n          this.setOutputData(0, null);\n        } else this.setOutputData(0, null);\n        return;\n      }\n      if (input === '') input = null;\n      if (passOnly) {\n        this.setOutputData(0, input);\n      } else this.setOutputData(0, input);\n    }\n  }\n\n  onAfterSettingsChange() {\n    this.onInputUpdated();\n  }\n}\nContainer.registerNodeType('latch/any-latch', AnyLatchNode);\n","import { Container } from '../../container';\nimport { Node } from '../../node';\nimport { Type } from '../../node-io';\nimport Utils from '../../utils';\nimport { NODE_INFO } from '../../node-info';\n\nclass BoolLatchNode extends Node {\n  lastLatchValue: boolean;\n\n\n  constructor() {\n    super();\n    this.title = NODE_INFO.latch[\"bool-latch\"].title;\n    this.description =NODE_INFO.latch[\"bool-latch\"].description;\n    this.addInput('input', Type.BOOLEAN);\n    this.addInput('latch', Type.BOOLEAN);\n    this.addOutput('output', Type.BOOLEAN);\n    this.setOutputData(0, false);\n  }\n\n  onAdded() {\n \n    this.onInputUpdated();\n  }\n  \n  onExecute(){\n    //this.onInputUpdated();\n  }\n\n  onInputUpdated() {\n    let latch = this.getInputData(1);\n    if (latch == null) {\n      this.setOutputData(0, null);\n      return;\n    }\n    if (latch == this.lastLatchValue) return;\n    this.lastLatchValue = latch;\n    if (latch == true) {\n      let input = this.getInputData(0);\n      if (!Utils.hasInput(input)) {\n        this.setOutputData(0, null);\n        return;\n      }\n      this.setOutputData(0, input);\n    }\n  }\n\n  onAfterSettingsChange() {\n    this.onInputUpdated();\n  }\n}\nContainer.registerNodeType('latch/bool-latch', BoolLatchNode);\n","import { Container } from '../../container';\nimport { Node } from '../../node';\nimport { Type } from '../../node-io';\nimport Utils from '../../utils';\nimport { NODE_INFO } from '../../node-info';\n\nclass NumLatchNode extends Node {\n  lastLatchValue: boolean;\n\n\n  constructor() {\n    super();\n    this.title = NODE_INFO.latch[\"num-latch\"].title;\n    this.description =NODE_INFO.latch[\"num-latch\"].description;\n    this.addInput('input', Type.NUMBER);\n    this.addInput('latch', Type.BOOLEAN);\n    this.addOutput('output', Type.NUMBER);\n  }\n\n  onAdded() {\n \n    this.onInputUpdated();\n  }\n\n  onExecute(){\n    //this.onInputUpdated();\n  }\n\n  onInputUpdated() {\n    let latch = this.getInputData(1);\n    if (latch == null) {\n      this.setOutputData(0, null);\n      return;\n    }\n    if (latch == this.lastLatchValue) return;\n    this.lastLatchValue = latch;\n    if (latch == true) {\n      let input = this.getInputData(0);\n      if (!Utils.hasInput(input)) {\n        this.setOutputData(0, null);\n        return;\n      }\n      if (input === '') input = null;\n      this.setOutputData(0, input);\n    }\n  }\n\n  onAfterSettingsChange() {\n    this.onInputUpdated();\n  }\n}\nContainer.registerNodeType('latch/num-latch', NumLatchNode);\n","import { Container } from '../../container';\nimport { Node } from '../../node';\nimport { Type } from '../../node-io';\nimport Utils from '../../utils';\nimport { NODE_INFO } from '../../node-info';\n\nclass StringLatchNode extends Node {\n  lastLatchValue: boolean;\n\n\n  constructor() {\n    super();\n    this.title = NODE_INFO.latch[\"string-latch\"].title;\n    this.description =NODE_INFO.latch[\"string-latch\"].description;\n    this.addInput('input', Type.STRING);\n    this.addInput('latch', Type.BOOLEAN);\n    this.addOutput('output', Type.STRING);\n  }\n\n  onAdded() {\n \n    this.onInputUpdated();\n  }\n\n  onExecute(){\n    //this.onInputUpdated();\n  }\n\n  onInputUpdated() {\n    let latch = this.getInputData(1);\n    if (latch == null) {\n      this.setOutputData(0, null);\n      return;\n    }\n    if (latch == this.lastLatchValue) return;\n    this.lastLatchValue = latch;\n    if (latch == true) {\n      let input = this.getInputData(0);\n      if (!Utils.hasInput(input)) {\n        this.setOutputData(0, null);\n        return;\n      }\n      if (input === '') input = null;\n      this.setOutputData(0, input);\n    }\n  }\n\n  onAfterSettingsChange() {\n    this.onInputUpdated();\n  }\n}\nContainer.registerNodeType('latch/string-latch', StringLatchNode);\n","import { Container } from '../../container';\nimport { Node } from '../../node';\nimport { NODE_INFO } from '../../node-info';\nimport { NodeSetting, SettingType, Type } from '../../node-io';\n\nclass SetResetNode extends Node {\n  out = null;\n\n\n  constructor() {\n    super();\n\n    this.title = NODE_INFO.latch[\"set-reset\"].title;\n    this.description =NODE_INFO.latch[\"set-reset\"].description;\n\n    this.addInput('set', Type.BOOLEAN);\n    this.addInput('reset', Type.BOOLEAN);\n    this.addOutput('output', Type.BOOLEAN);\n    this.settings['lock'] = NodeSetting.create({\n      description: 'Reset when set=true',\n      value: true,\n      type: SettingType.BOOLEAN,\n    });\n  }\n\n  onAdded() {\n \n    this.setOutputData(0, false);\n    this.onInputUpdated();\n  }\n\n  onExecute(){\n    //this.onInputUpdated();\n  }\n\n  onInputUpdated() {\n    let set = this.inputs[0].data;\n    let reset = this.inputs[1].data;\n    let lock = this.settings['lock'].value;\n    let out = this.out;\n    if (set && !reset) {\n      this.setOutputData(0, true);\n      this.out = true;\n    } else if (lock && reset && out && set) {\n      //when lock = true\n      this.setOutputData(0, false);\n      this.out = false;\n    } else if (!set && out && reset) {\n      //when lock = false\n      this.setOutputData(0, false);\n      this.out = false;\n    }\n  }\n}\nContainer.registerNodeType('latch/set-reset', SetResetNode);\n","import { Container } from '../../container';\nimport { FlexibleNode } from '../../flexible-node';\nimport { Type } from '../../node-io';\nimport { NODE_INFO } from '../../node-info';\n\nclass AddNode extends FlexibleNode {\n  constructor() {\n    super();\n    this.dynamicInputsType = Type.NUMBER;\n    this.title = NODE_INFO.math.add.title;\n    this.description = NODE_INFO.math.add.description;\n\n    this.addOutput('output', Type.NUMBER);\n  }\n\n  onAdded() {\n    this.onInputUpdated();\n  }\n\n  onInputUpdated() {\n    const inputCount = this.getInputsCount();\n    let total = 0;\n    for (let i = this.dynamicInputStartPosition; i < inputCount; i++) {\n      total = total + this.getInputData(i);\n    }\n    this.settingOutput(total);\n  }\n\n  settingOutput(total): any {\n    this.setOutputData(0, total);\n    return total;\n  }\n\n  onAfterSettingsChange() {\n    super.onAfterSettingsChange();\n    this.onInputUpdated();\n  }\n}\nContainer.registerNodeType('math/add', AddNode);\n","import { Container } from '../../container';\nimport { FlexibleNode } from '../../flexible-node';\nimport { Type } from '../../node-io';\nimport { NODE_INFO } from '../../node-info';\n\nclass MathSubNode extends FlexibleNode {\n\n  constructor() {\n    super();\n    this.dynamicInputsType = Type.NUMBER;\n    \n    this.title = NODE_INFO.math.subtract.title;\n    this.description = NODE_INFO.math.subtract.description; \n\n    this.addOutput('output', Type.NUMBER);\n  }\n\n  onAdded() {\n \n    this.size = this.computeSize();\n    this.onInputUpdated();\n  }\n\n  onExecute(){\n    //this.onInputUpdated();\n  }\n\n  onInputUpdated() {\n    const inputCount = this.getInputsCount();\n    let total = this.getInputData(0);\n    for (let i = this.dynamicInputStartPosition + 1; i < inputCount; i++) {\n      total = total - this.getInputData(i);\n    }\n    this.setOutputData(0, total);\n  }\n\n  onAfterSettingsChange() {\n    super.onAfterSettingsChange();\n    this.onInputUpdated();\n  }\n}\nContainer.registerNodeType('math/subtract', MathSubNode);\n","import { Container } from '../../container';\nimport { FlexibleNode } from '../../flexible-node';\nimport { Type } from '../../node-io';\nimport { NODE_INFO } from '../../node-info';\n\nclass MathMultiplyNode extends FlexibleNode {\n\n  constructor() {\n    super();\n    this.dynamicInputsType = Type.NUMBER;\n    this.title = NODE_INFO.math.multiply.title;\n    this.description = NODE_INFO.math.multiply.description; \n    \n    this.addOutput('output', Type.NUMBER);\n  }\n\n  onAdded() {\n \n    this.size = this.computeSize();\n    this.onInputUpdated();\n  }\n\n  onExecute(){\n    //this.onInputUpdated();\n  }\n\n  onInputUpdated() {\n    const inputCount = this.getInputsCount();\n    let total = 1;\n    for (let i = this.dynamicInputStartPosition; i < inputCount; i++) {\n      total = total * this.getInputData(i);\n    }\n    this.setOutputData(0, total);\n  }\n\n  onAfterSettingsChange() {\n    super.onAfterSettingsChange();\n    this.onInputUpdated();\n  }\n}\nContainer.registerNodeType('math/multiply', MathMultiplyNode);\n","import { Container } from '../../container';\nimport { FlexibleNode } from '../../flexible-node';\nimport { Type } from '../../node-io';\nimport { NODE_INFO } from '../../node-info';\n\nclass MathDivideNode extends FlexibleNode {\n\n  constructor() {\n    super();\n    this.dynamicInputsType = Type.NUMBER;\n    this.title = NODE_INFO.math.divide.title;\n    this.description = NODE_INFO.math.divide.description; \n    \n    this.addOutput('output', Type.NUMBER);\n  }\n\n  onAdded() {\n \n    this.size = this.computeSize();\n    this.onInputUpdated();\n  }\n\n  onExecute(){\n    //this.onInputUpdated();\n  }\n\n  onInputUpdated() {\n    const inputCount = this.getInputsCount();\n    let total = 1;\n    let div = 0;\n    for (let i = this.dynamicInputStartPosition; i < inputCount; i++) {\n      div = this.getInputData(i);\n      if (!div) {\n        // when it's 0 or null\n        this.setOutputData(0, 0);\n        return;\n      }\n      if (i === this.dynamicInputStartPosition) {\n        total = div;\n      } else {\n        total = total / div;\n      }\n    }\n    this.setOutputData(0, total);\n  }\n\n  onAfterSettingsChange() {\n    super.onAfterSettingsChange();\n    this.onInputUpdated();\n  }\n}\nContainer.registerNodeType('math/divide', MathDivideNode);\n","import { Container } from '../../container';\nimport { Node } from '../../node';\nimport Icons from '../../node-icons';\nimport { Type } from '../../node-io';\nimport { NODE_INFO } from '../../node-info';\n\nlet uiMainIcon = Icons.uiMainIcon;\nlet uiMainColour = Icons.uiMainColour;\n\nclass MathAbsNode extends Node {\n\n  constructor() {\n    super();\n    this.title = NODE_INFO.math.absolute.title;\n    this.description = NODE_INFO.math.absolute.description;\n    //this.headerColor = uiMainIcon;\n    //this.iconImageUrl = uiMainIcon;\n\n    this.addInput('input', Type.NUMBER);\n    this.addOutput('output', Type.NUMBER);\n  }\n\n  onAdded() {\n \n    this.onInputUpdated();\n  }\n\n  onExecute(){\n    //this.onInputUpdated();\n  }\n\n  onInputUpdated() {\n    let val = this.getInputData(0);\n    if (val != null) this.setOutputData(0, Math.abs(val));\n    else this.setOutputData(0, null);\n  }\n}\nContainer.registerNodeType('math/absolute', MathAbsNode);\n","import { Container } from '../../container';\nimport { Node } from '../../node';\nimport { Type } from '../../node-io';\nimport { NODE_INFO } from '../../node-info';\n\n//import Icons from '../../node-icons';\n\n//let uiMainIcon = Icons.uiMainIcon;\n//let uiMainColour = Icons.uiMainColour;\n\nclass MathModulusNode extends Node {\n\n  constructor() {\n    super();\n\n    this.title = NODE_INFO.math.modulus.title;\n    this.description = NODE_INFO.math.modulus.description; \n   \n    this.addInputWithSettings('in 1', Type.NUMBER, 0, 'in 1');\n    this.addInputWithSettings('in 2', Type.NUMBER, 1, 'in 2');\n    this.addOutput('output', Type.NUMBER);\n  }\n\n  onAdded() {\n \n    this.onInputUpdated();\n  }\n\n  onExecute(){\n    //this.onInputUpdated();\n  }\n\n  onInputUpdated() {\n    const a = this.getInputData(0);\n    const b = this.getInputData(1);\n\n    if (a != null && b != null) this.setOutputData(0, a % b);\n    else this.setOutputData(0, null);\n  }\n}\nContainer.registerNodeType('math/modulus', MathModulusNode);\n","import { Container } from '../../container';\nimport { Node } from '../../node';\nimport { Type } from '../../node-io';\nimport { NODE_INFO } from '../../node-info';\n\n//import Icons from '../../node-icons';\n\n//let uiMainIcon = Icons.uiMainIcon;\n//let uiMainColour = Icons.uiMainColour;\n\nclass MathPowNode extends Node {\n\n  constructor() {\n    super();\n\n    this.title = NODE_INFO.math.power.title;\n    this.description = NODE_INFO.math.power.description; \n    this.addInputWithSettings('in 1', Type.NUMBER, 0, 'in 1');\n    this.addInputWithSettings('in 2', Type.NUMBER, 1, 'in 2');\n    this.addOutput('output', Type.NUMBER);\n  }\n\n  onAdded() {\n \n    this.onInputUpdated();\n  }\n\n  onExecute(){\n    //this.onInputUpdated();\n  }\n\n  onInputUpdated() {\n    let x = this.getInputData(0);\n    let y = this.getInputData(1);\n    if (x != null && y != null) this.setOutputData(0, Math.pow(x, y));\n    else this.setOutputData(0, null);\n  }\n}\nContainer.registerNodeType('math/power', MathPowNode);\n","import { Container } from '../../container';\nimport { Node } from '../../node';\nimport { Type } from '../../node-io';\nimport { NODE_INFO } from '../../node-info';\n\n//import Icons from '../../node-icons';\n\n//let uiMainIcon = Icons.uiMainIcon;\n//let uiMainColour = Icons.uiMainColour;\n\nclass MathAcosNode extends Node {\n  constructor() {\n    super();\n\n    this.title = NODE_INFO[\"math-advanced\"].acos.title;\n    this.description = NODE_INFO[\"math-advanced\"].acos.description;\n\n    this.addInput('x', Type.NUMBER);\n    this.addOutput('acos(x)', Type.NUMBER);\n  }\n\n  onAdded() {\n    this.onInputUpdated();\n  }\n\n  onInputUpdated() {\n    let val = this.getInputData(0);\n\n    if (val != null) this.setOutputData(0, Math.acos(val));\n    else this.setOutputData(0, null);\n  }\n}\nContainer.registerNodeType('math-advanced/acos', MathAcosNode);\n","import { Container } from '../../container';\nimport { Node } from '../../node';\nimport { Type } from '../../node-io';\nimport { NODE_INFO } from '../../node-info';\n\n//import Icons from '../../node-icons';\n\n//let uiMainIcon = Icons.uiMainIcon;\n//let uiMainColour = Icons.uiMainColour;\n\nclass MathAsinNode extends Node {\n  constructor() {\n    super();\n\n    this.title = NODE_INFO[\"math-advanced\"].asin.title;\n    this.description = NODE_INFO[\"math-advanced\"].asin.description;\n    this.addInput('x', Type.NUMBER);\n    this.addOutput('asin(x)', Type.NUMBER);\n  }\n\n  onAdded() {\n    this.onInputUpdated();\n  }\n\n  onInputUpdated() {\n    let val = this.getInputData(0);\n\n    if (val != null) this.setOutputData(0, Math.asin(val));\n    else this.setOutputData(0, null);\n  }\n}\nContainer.registerNodeType('math-advanced/asin', MathAsinNode);\n","import { Container } from '../../container';\nimport { Node } from '../../node';\nimport { Type } from '../../node-io';\nimport { NODE_INFO } from '../../node-info';\n//import Icons from '../../node-icons';\n\n//let uiMainIcon = Icons.uiMainIcon;\n//let uiMainColour = Icons.uiMainColour;\n\nclass MathAtanNode extends Node {\n  constructor() {\n    super();\n\n    this.title = NODE_INFO[\"math-advanced\"].atan.title;\n    this.description = NODE_INFO[\"math-advanced\"].atan.description;\n    this.addInput('x', Type.NUMBER);\n    this.addOutput('atan(x)', Type.NUMBER);\n  }\n\n  onAdded() {\n    this.onInputUpdated();\n  }\n\n  onInputUpdated() {\n    let val = this.getInputData(0);\n\n    if (val != null) this.setOutputData(0, Math.atan(val));\n    else this.setOutputData(0, null);\n  }\n}\nContainer.registerNodeType('math-advanced/atan', MathAtanNode);\n","import { Container } from '../../container';\nimport { Node } from '../../node';\nimport { Type } from '../../node-io';\nimport { NODE_INFO } from '../../node-info';\n//import Icons from '../../node-icons';\n\n//let uiMainIcon = Icons.uiMainIcon;\n//let uiMainColour = Icons.uiMainColour;\n\nclass MathCbrtNode extends Node {\n  constructor() {\n    super();\n\n    this.title = NODE_INFO[\"math-advanced\"].cbrt.title;\n    this.description = NODE_INFO[\"math-advanced\"].cbrt.description;\n    this.addInput('x', Type.NUMBER);\n    this.addOutput('cbrt(x)', Type.NUMBER);\n  }\n\n  onAdded() {\n    this.onInputUpdated();\n  }\n\n  onInputUpdated() {\n    let val = this.getInputData(0);\n\n    if (val != null) this.setOutputData(0, Math.cbrt(val));\n    else this.setOutputData(0, null);\n  }\n}\nContainer.registerNodeType('math-advanced/cbrt', MathCbrtNode);\n","import { Container } from '../../container';\nimport { Node } from '../../node';\nimport { Type } from '../../node-io';\nimport { NODE_INFO } from '../../node-info';\n//import Icons from '../../node-icons';\n\n//let uiMainIcon = Icons.uiMainIcon;\n//let uiMainColour = Icons.uiMainColour;\n\nclass MathCosNode extends Node {\n  constructor() {\n    super();\n\n    this.title = NODE_INFO[\"math-advanced\"].cos.title;\n    this.description = NODE_INFO[\"math-advanced\"].cos.description;\n    this.addInput('x', Type.NUMBER);\n    this.addOutput('cos(x)', Type.NUMBER);\n  }\n\n  onAdded() {\n    this.onInputUpdated();\n  }\n\n  onInputUpdated() {\n    let val = this.getInputData(0);\n    if (val != null) this.setOutputData(0, Math.cos(val));\n    else this.setOutputData(0, null);\n  }\n}\nContainer.registerNodeType('math-advanced/cos', MathCosNode);\n","import { Container } from '../../container';\nimport { Node } from '../../node';\nimport { Type } from '../../node-io';\nimport { NODE_INFO } from '../../node-info';\n//import Icons from '../../node-icons';\n\n//let uiMainIcon = Icons.uiMainIcon;\n//let uiMainColour = Icons.uiMainColour;\n\nclass MathExpNode extends Node {\n  constructor() {\n    super();\n\n    this.title = NODE_INFO[\"math-advanced\"].exp.title;\n    this.description = NODE_INFO[\"math-advanced\"].exp.description; \n   \n    this.addInput('x', Type.NUMBER);\n    this.addOutput('exp(x)', Type.NUMBER);\n  }\n\n  onAdded() {\n    this.onInputUpdated();\n  }\n\n  onInputUpdated() {\n    let val = this.getInputData(0);\n    if (val != null) this.setOutputData(0, Math.exp(val));\n    else this.setOutputData(0, null);\n  }\n}\nContainer.registerNodeType('math-advanced/exp', MathExpNode);\n","import { Container } from '../../container';\nimport { Node } from '../../node';\nimport { Type } from '../../node-io';\nimport { NODE_INFO } from '../../node-info';\n//import Icons from '../../node-icons';\n\n//let uiMainIcon = Icons.uiMainIcon;\n//let uiMainColour = Icons.uiMainColour;\n\nclass MathLogarithmNode extends Node {\n  constructor() {\n    super();\n\n    this.title = NODE_INFO[\"math-advanced\"].log.title;\n    this.description = NODE_INFO[\"math-advanced\"].log.description;\n    this.addInput('x', Type.NUMBER);\n    this.addOutput('log(x)', Type.NUMBER);\n  }\n\n  onAdded() {\n    this.onInputUpdated();\n  }\n\n  onInputUpdated() {\n    let val = this.getInputData(0);\n    if (val != null) this.setOutputData(0, Math.log(val));\n    else this.setOutputData(0, null);\n  }\n}\nContainer.registerNodeType('math-advanced/log', MathLogarithmNode);\n","import { Container } from '../../container';\nimport { Node } from '../../node';\nimport { Type } from '../../node-io';\nimport { NODE_INFO } from '../../node-info';\n//import Icons from '../../node-icons';\n\n//let uiMainIcon = Icons.uiMainIcon;\n//let uiMainColour = Icons.uiMainColour;\n\nclass MathLogarithmNode extends Node {\n  constructor() {\n    super();\n\n    this.title = NODE_INFO[\"math-advanced\"].log10.title;\n    this.description = NODE_INFO[\"math-advanced\"].log10.description;\n\n    this.addInput('x', Type.NUMBER);\n    this.addOutput('log10(x)', Type.NUMBER);\n  }\n\n  onAdded() {\n    this.onInputUpdated();\n  }\n\n  onInputUpdated() {\n    let val = this.getInputData(0);\n    if (val != null) this.setOutputData(0, Math.log10(val));\n    else this.setOutputData(0, null);\n  }\n}\nContainer.registerNodeType('math-advanced/log10', MathLogarithmNode);\n","import { Container } from '../../container';\nimport { Node } from '../../node';\nimport { Type } from '../../node-io';\nimport { NODE_INFO } from '../../node-info';\n//import Icons from '../../node-icons';\n\n//let uiMainIcon = Icons.uiMainIcon;\n//let uiMainColour = Icons.uiMainColour;\n\nclass MathSinNode extends Node {\n  constructor() {\n    super();\n\n    this.title = NODE_INFO[\"math-advanced\"].sin.title;\n    this.description = NODE_INFO[\"math-advanced\"].sin.description;\n    \n    this.addInput('x', Type.NUMBER);\n    this.addOutput('sin(x)', Type.NUMBER);\n  }\n\n  onAdded() {\n    this.onInputUpdated();\n  }\n\n  onInputUpdated() {\n    let val = this.getInputData(0);\n    if (val != null) this.setOutputData(0, Math.sin(val));\n    else this.setOutputData(0, null);\n  }\n}\nContainer.registerNodeType('math-advanced/sin', MathSinNode);\n","import { Container } from '../../container';\nimport { Node } from '../../node';\nimport { Type } from '../../node-io';\nimport { NODE_INFO } from '../../node-info';\n//import Icons from '../../node-icons';\n\n//let uiMainIcon = Icons.uiMainIcon;\n//let uiMainColour = Icons.uiMainColour;\n\nclass MathSqrtNode extends Node {\n  constructor() {\n    super();\n\n    this.title = NODE_INFO[\"math-advanced\"].sqrt.title;\n    this.description = NODE_INFO[\"math-advanced\"].sqrt.description;\n    this.addInput('x', Type.NUMBER);\n    this.addOutput('sqrt(x)', Type.NUMBER);\n  }\n\n  onAdded() {\n    this.onInputUpdated();\n  }\n\n  onInputUpdated() {\n    let val = this.getInputData(0);\n    if (val != null) this.setOutputData(0, Math.sqrt(val));\n    else this.setOutputData(0, null);\n  }\n}\nContainer.registerNodeType('math-advanced/sqrt', MathSqrtNode);\n","import { Container } from '../../container';\nimport { Node } from '../../node';\nimport { Type } from '../../node-io';\nimport { NODE_INFO } from '../../node-info';\n//import Icons from '../../node-icons';\n\n//let uiMainIcon = Icons.uiMainIcon;\n//let uiMainColour = Icons.uiMainColour;\n\nclass MathTanNode extends Node {\n  constructor() {\n    super();\n    this.title = NODE_INFO[\"math-advanced\"].tan.title;\n    this.description = NODE_INFO[\"math-advanced\"].tan.description;\n    this.addInput('x', Type.NUMBER);\n    this.addOutput('tan(x)', Type.NUMBER);\n  }\n\n  onAdded() {\n    this.onInputUpdated();\n  }\n\n  onInputUpdated() {\n    let val = this.getInputData(0);\n    if (val != null) this.setOutputData(0, Math.tan(val));\n    else this.setOutputData(0, null);\n  }\n}\nContainer.registerNodeType('math-advanced/tan', MathTanNode);\n","import { Container } from '../../container';\nimport { FlexibleNode } from '../../flexible-node';\nimport { Type } from '../../node-io';\nimport { NODE_INFO } from '../../node-info';\n\nclass TriggerAddNode extends FlexibleNode {\n  lastTrigger: boolean;\n\n  constructor() {\n    super();\n    this.dynamicInputsType = Type.NUMBER;\n    super.dynamicInputStartPosition = 1;\n    this.title = NODE_INFO[\"math-trigger\"][\"trigger-add\"].title;\n    this.description = NODE_INFO[\"math-trigger\"][\"trigger-add\"].description; \n   \n    this.addInput('trigger', Type.BOOLEAN);\n    this.addOutput('output', Type.NUMBER);\n  }\n\n  onAdded() {\n    this.size = this.computeSize();\n    this.lastTrigger = false;\n    this.onInputUpdated();\n  }\n\n  onInputUpdated() {\n    const trigger = this.getInputData(0);\n    if (trigger && !this.lastTrigger) {\n      const inputCount = this.getInputsCount();\n      let total = 0;\n      for (let i = this.dynamicInputStartPosition; i < inputCount; i++) {\n        total += this.getInputData(i);\n      }\n      this.setOutputData(0, total);\n    }\n    this.lastTrigger = trigger;\n  }\n\n  onAfterSettingsChange() {\n    super.onAfterSettingsChange();\n    this.onInputUpdated();\n  }\n}\nContainer.registerNodeType('math-trigger/trigger-add', TriggerAddNode);\n","import { Container } from '../../container';\nimport { FlexibleNode } from '../../flexible-node';\nimport { Type } from '../../node-io';\nimport { NODE_INFO } from '../../node-info';\n\nclass MathTriggerSubNode extends FlexibleNode {\n  lastTrigger: boolean;\n\n  constructor() {\n    super();\n    this.dynamicInputsType = Type.NUMBER;\n    super.dynamicInputStartPosition = 1;\n    this.title = NODE_INFO[\"math-trigger\"][\"trigger-subtract\"].title;\n    this.description = NODE_INFO[\"math-trigger\"][\"trigger-subtract\"].description; \n    \n    this.addInput('trigger', Type.BOOLEAN);\n    this.addOutput('output', Type.NUMBER);\n  }\n\n  onAdded() {\n    this.lastTrigger = false;\n    this.onInputUpdated();\n  }\n\n  onInputUpdated() {\n    const trigger = this.getInputData(0);\n    if (trigger && !this.lastTrigger) {\n      const inputCount = this.getInputsCount();\n      let total = this.getInputData(1);\n      for (let i = this.dynamicInputStartPosition + 1; i < inputCount; i++) {\n        total -= this.getInputData(i);\n      }\n      this.setOutputData(0, total);\n    }\n    this.lastTrigger = trigger;\n  }\n\n  onAfterSettingsChange() {\n    super.onAfterSettingsChange();\n    this.onInputUpdated();\n  }\n}\nContainer.registerNodeType('math-trigger/trigger-subtract', MathTriggerSubNode);\n","import { Container } from '../../container';\nimport { FlexibleNode } from '../../flexible-node';\nimport { Type } from '../../node-io';\nimport { NODE_INFO } from '../../node-info';\n\nclass MathTriggerMultiplyNode extends FlexibleNode {\n  lastTrigger: boolean;\n\n  constructor() {\n    super();\n    this.dynamicInputsType = Type.NUMBER;\n    super.dynamicInputStartPosition = 1;\n    this.title = NODE_INFO[\"math-trigger\"][\"trigger-multiply\"].title;\n    this.description = NODE_INFO[\"math-trigger\"][\"trigger-multiply\"].description; \n    \n    this.addInput('trigger', Type.BOOLEAN);\n    this.addOutput('output', Type.NUMBER);\n  }\n\n  onAdded() {\n    this.size = this.computeSize();\n    this.lastTrigger = false;\n    this.onInputUpdated();\n  }\n\n  onInputUpdated() {\n    const trigger = this.getInputData(0);\n    if (trigger && !this.lastTrigger) {\n      const inputCount = this.getInputsCount();\n      let total = 1;\n      for (let i = this.dynamicInputStartPosition; i < inputCount; i++) {\n        total *= this.getInputData(i);\n      }\n      this.setOutputData(0, total);\n    }\n    this.lastTrigger = trigger;\n  }\n\n  onAfterSettingsChange() {\n    super.onAfterSettingsChange();\n    this.onInputUpdated();\n  }\n}\nContainer.registerNodeType('math-trigger/trigger-multiply', MathTriggerMultiplyNode);\n","import { Container } from '../../container';\nimport { FlexibleNode } from '../../flexible-node';\nimport { Type } from '../../node-io';\nimport { NODE_INFO } from '../../node-info';\n\nclass MathTriggerDivideNode extends FlexibleNode {\n  lastTrigger: boolean;\n\n  constructor() {\n    super();\n    this.dynamicInputsType = Type.NUMBER;\n    super.dynamicInputStartPosition = 1;\n    this.title = NODE_INFO[\"math-trigger\"][\"trigger-divide\"].title;\n    this.description = NODE_INFO[\"math-trigger\"][\"trigger-divide\"].description; \n   \n    this.addInput('trigger', Type.BOOLEAN);\n    this.addOutput('output', Type.NUMBER);\n  }\n\n  onAdded() {\n    this.size = this.computeSize();\n    this.lastTrigger = false;\n    this.onInputUpdated();\n  }\n\n  onInputUpdated() {\n    const trigger = this.getInputData(0);\n    if (trigger && !this.lastTrigger) {\n      const inputCount = this.getInputsCount();\n      let total = 1;\n      let div = 0;\n      for (let i = this.dynamicInputStartPosition; i < inputCount; i++) {\n        div = this.getInputData(i);\n        if (div === 0) {\n          this.setOutputData(0, 0);\n          return;\n        }\n        if (i === this.dynamicInputStartPosition) {\n          total = div;\n        } else {\n          total = total / div;\n        }\n      }\n      this.setOutputData(0, total);\n    }\n    this.lastTrigger = trigger;\n  }\n\n  onAfterSettingsChange() {\n    super.onAfterSettingsChange();\n    this.onInputUpdated();\n  }\n}\nContainer.registerNodeType('math-trigger/trigger-divide', MathTriggerDivideNode);\n","import { Container } from '../../container';\nimport { Node } from '../../node';\nimport { Type } from '../../node-io';\nimport { NODE_INFO } from '../../node-info';\n//import Icons from '../../node-icons';\n\n//let uiMainIcon = Icons.uiMainIcon;\n//let uiMainColour = Icons.uiMainColour;\n\nclass MathTriggerModulusNode extends Node {\n  lastTrigger: boolean;\n  constructor() {\n    super();\n\n    this.title = NODE_INFO[\"math-trigger\"][\"trigger-modulus\"].title;\n    this.description = NODE_INFO[\"math-trigger\"][\"trigger-modulus\"].description; \n   \n    this.addInput('trigger', Type.BOOLEAN);\n    this.addInputWithSettings('in 1', Type.NUMBER, 0, 'in 1');\n    this.addInputWithSettings('in 2', Type.NUMBER, 2, 'in 2');\n    this.addOutput('output', Type.NUMBER);\n  }\n\n  onAdded() {\n    this.lastTrigger = false;\n    this.onInputUpdated();\n  }\n\n  onInputUpdated() {\n    const trigger = this.getInputData(0);\n    if (trigger && !this.lastTrigger) {\n      let a = this.getInputData(1);\n      let b = this.getInputData(2);\n\n      if (a != null && b != null) this.setOutputData(0, a % b);\n      else this.setOutputData(0, null);\n    }\n    this.lastTrigger = trigger;\n  }\n\n  dynamicInputStartPosition(): number {\n    return 1;\n  }\n}\nContainer.registerNodeType('math-trigger/trigger-modulus', MathTriggerModulusNode);\n","import { Container } from '../../container';\nimport { Node } from '../../node';\nimport { Type } from '../../node-io';\nimport { NODE_INFO } from '../../node-info';\n//import Icons from '../../node-icons';\n\n//let uiMainIcon = Icons.uiMainIcon;\n//let uiMainColour = Icons.uiMainColour;\n\nclass MathTriggerPowNode extends Node {\n  lastTrigger: boolean;\n  constructor() {\n    super();\n\n    this.title = NODE_INFO[\"math-trigger\"][\"trigger-power\"].title;\n    this.description = NODE_INFO[\"math-trigger\"][\"trigger-power\"].description; \n    this.addInput('trigger', Type.BOOLEAN);\n    this.addInputWithSettings('in 1', Type.NUMBER, 0, 'in 1');\n    this.addInputWithSettings('in 2', Type.NUMBER, 2, 'in 2');\n    this.addOutput('output', Type.NUMBER);\n  }\n\n  onAdded() {\n    this.lastTrigger = false;\n    this.onInputUpdated();\n  }\n\n  onInputUpdated() {\n    const trigger = this.getInputData(0);\n    if (trigger && !this.lastTrigger) {\n      const x = this.getInputData(1);\n      const y = this.getInputData(2);\n\n      if (x != null && y != null) this.setOutputData(0, Math.pow(x, y));\n      else this.setOutputData(0, null);\n    }\n    this.lastTrigger = trigger;\n  }\n\n  dynamicInputStartPosition(): number {\n    return 1;\n  }\n}\nContainer.registerNodeType('math-trigger/trigger-power', MathTriggerPowNode);\n","import { Container } from '../../container';\nimport { Node} from '../../node';\nimport { Type } from '../../node-io';\nimport {isNull } from '../../../utils/helper';\nconst geohash = require('ngeohash');\nimport { NODE_INFO } from '../../node-info';\n\nclass GeoHashNode extends Node {\n  client: any;\n  outputsCount = 0;\n  constructor() {\n    super();\n    this.title = NODE_INFO.miscellaneous[\"geo-hash\"].title;\n    this.description = NODE_INFO.miscellaneous[\"geo-hash\"].description; \n    this.addInputWithSettings('encode', Type.JSON, '151.1677778, -34.0316667', 'Lon at Lat Values Encode');\n    this.addInputWithSettings('decode', Type.STRING, 'ww8p1r4t8, ', 'Hash Decode');\n    this.addOutput('encode-out', Type.STRING);\n    this.addOutput('decode-out', Type.JSON);\n  }\n  \n\n\n  onAdded() {\n    this.onInputUpdated()\n  }\n\n  onInputUpdated(){\n    const encode = this.getInputData(0);\n    const decode = this.getInputData(1);\n\n    if (!isNull(encode)) {\n      this.setOutputData(0, geohash.encode(parseInt(encode[0]), parseInt(encode[1])))\n   \n    }\n    if (!isNull(decode)) {\n      this.setOutputData(1, geohash.decode(decode))\n  \n    }\n\n  }\n\n  onAfterSettingsChange() {\n    this.onInputUpdated()\n  }\n\n\n\n}\nContainer.registerNodeType('miscellaneous/geo-hash', GeoHashNode);\n","module.exports = require(\"ngeohash\");","import { Container } from '../../container';\nimport { FlexibleNode } from '../../flexible-node';\nimport { NODE_INFO } from '../../node-info';\nimport { NodeSetting, SettingType, Type } from '../../node-io';\n\nexport class NumSeriesGenerator extends FlexibleNode {\n  constructor() {\n    super();\n    this.dynamicOutputsExist = true;\n    this.dynamicInputsExist = false;\n    this.dynamicSettingsExist = true;\n    super.dynamicOutputsType = Type.NUMBER;\n    this.title = NODE_INFO.miscellaneous[\"num-series-generator\"].title;\n    this.description = NODE_INFO.miscellaneous[\"num-series-generator\"].description; \n    this.addInputWithSettings('startVal', Type.NUMBER, 0, 'Start Value');\n    this.addInputWithSettings('addVal', Type.NUMBER, 1, 'Added Value ');\n    this.settings['factor'] = NodeSetting.create({\n      description: 'Multiply factor',\n      value: 0,\n      type: SettingType.NUMBER,\n    });\n  }\n\n  onInputUpdated() {\n    let input = this.getInputData(0);\n    let factor = this.settings['factor'].value; \n    if (typeof input === 'undefined') return;\n    if (typeof input === 'number') {\n      const len = this.getOutputsCount();\n      let diff = this.getInputData(1);\n      if (typeof diff !== 'number') diff = 1;\n      for (let i = 0; i < len; i++) {\n        this.setOutputData(i, i + (input * diff) + (i * factor));\n      }\n    }\n  }\n\n  onAfterSettingsChange() {\n    super.onAfterSettingsChange();\n    this.onInputUpdated()\n  }\n}\nContainer.registerNodeType('miscellaneous/num-series-generator', NumSeriesGenerator);\n","import { Container } from '../../container';\nimport { Node } from '../../node';\nimport { NodeSetting, SettingType, Type } from '../../node-io';\nimport Utils from '../../utils';\nimport { NODE_INFO } from '../../node-info';\n\nclass AddressHelperString extends Node {\n  client: any;\n  outputsCount = 0;\n  constructor() {\n    super();\n    this.title = NODE_INFO.miscellaneous[\"append-to-strings\"].title;\n    this.description = NODE_INFO.miscellaneous[\"append-to-strings\"].description; \n\n    this.addInputWithSettings('prepend', Type.STRING, '', 'Prepend Value');\n    this.addInputWithSettings('append', Type.STRING, '', 'Append Value');\n\n    this.settings['outputs_count'] = NodeSetting.create({\n      description: 'Number of Outputs',\n      value: 1,\n      type: SettingType.NUMBER,\n    });\n\n    this.setSettingsConfig({\n      groups: [{ outputs_count: {} }],\n    });\n  }\n\n  init() {\n    this.changeOutputsAndSettings();\n  }\n\n  onCreated() {\n    this.renameInputsOutputs();\n  }\n\n  onAdded() {\n    this.outputsCount = this.settings['outputs_count'].value;\n    this.onAfterSettingsChange()\n  }\n\n  onInputUpdated(){\n    this.renameInputsOutputs();\n  }\n\n  onAfterSettingsChange() {\n    this.changeOutputsAndSettings();\n    this.renameInputsOutputs();\n    //update db\n    if (this.container.db)\n      this.container.db.updateNode(this.id, this.container.id, {\n        $set: { outputs: this.outputs, settings: this.settings },\n      });\n  }\n\n  private changeOutputsAndSettings() {\n    let outputs = this.settings['outputs_count'].value;\n    outputs = Utils.clamp(outputs, 1, 100);\n    this.settings['outputs_count'].value = outputs;\n    // change outputs count\n    if (this.outputsCount != outputs) this.changeMyOutputsCount(outputs);\n  }\n\n  changeMyOutputsCount(target_count) {\n    const diff = target_count - this.outputsCount;\n    if (diff == 0) return;\n\n    // add inputs, outputs\n    this.changeOutputsCount(target_count + 1, Type.STRING);\n\n    // change settings for outputs\n    if (diff > 0) {\n      for (let i = this.outputsCount + 1; i <= target_count; i++) {\n        this.settings['output' + i] = NodeSetting.create({\n          description: 'Output ' + i,\n          value: '',\n          type: SettingType.STRING,\n        });\n        for (let i = this.outputsCount + 1; i <= target_count; i++) {\n          this.settingConfigs.groups.push({\n            [`output${i}`]: { weight: 5 },\n          });\n        }\n      }\n    } else if (diff < 0) {\n      for (let i = this.outputsCount; i > target_count; i--) {\n        delete this.settings['output' + i];\n        this.settingConfigs.groups.pop();\n      }\n    }\n\n    this.outputsCount = target_count;\n  }\n\n  renameInputsOutputs() {\n    const prepend = this.getInputData(0);\n    const append = this.getInputData(1);\n    for (let i = 1; i <= this.outputsCount; i++) {\n      const output = this.settings['output' + i].value || '';\n      this.outputs[i].name = '' + i + ' | ' + output;\n      this.setOutputData(i, '' + prepend + output + append);\n    }\n  }\n}\nContainer.registerNodeType('miscellaneous/append-to-strings', AddressHelperString);\n","import axios from 'axios';\nimport config from '../../../config';\nimport { Container } from '../../container';\nimport { Node } from '../../node';\nimport { NODE_INFO } from '../../node-info';\nimport { Side } from '../../node-interface';\nimport { NodeSetting, SettingType, Type } from '../../node-io';\nimport TimeUtils, { TIME_TYPE } from '../../utils/time-utils';\nimport SystemUtils from '../system/system-utils';\n\nconst btoa = require('btoa');\n\nclass GetSchedulesNode extends Node {\n  enable;\n\n  constructor() {\n    super();\n    this.title = NODE_INFO.nube[\"get-schedules\"].title;\n    this.description = NODE_INFO.nube[\"get-schedules\"].description;\n    this.addInputWithSettings('enable', Type.BOOLEAN, true, 'Enable');\n    this.addOutput('data', Type.JSON);\n    this.addOutput('error', Type.BOOLEAN);\n\n    this.settings['interval'] = NodeSetting.create({\n      description: 'Update Interval (min 10 seconds)',\n      type: SettingType.NUMBER,\n      value: 60,\n    });\n    this.settings['time'] = NodeSetting.create({\n      description: 'Units',\n      type: SettingType.DROPDOWN,\n      config: {\n        items: [\n          { value: TIME_TYPE.SECONDS, text: 'Seconds' },\n          { value: TIME_TYPE.MINUTES, text: 'Minutes' },\n          { value: TIME_TYPE.HOURS, text: 'Hours' },\n        ],\n      },\n      value: TIME_TYPE.SECONDS,\n    });\n    this.setSettingsConfig({\n      groups: [{ interval: { weight: 2 }, time: {} }],\n    });\n  }\n\n  async onAdded() {\n    if (this.properties['scheduleData']) this.setOutputData(0, this.properties['scheduleData']);\n    await this.onAfterSettingsChange();\n  }\n\n  async onAfterSettingsChange() {\n    this.setExecuteInterval();\n    await this.onInputUpdated();\n  }\n\n  async onInputUpdated() {\n    await this.getDittoSchedules();\n  }\n\n  async onExecute() {\n    await this.getDittoSchedules();\n  }\n \n  async getDittoSchedules() {\n    if (this.side !== Side.server || !this.getInputData(0)) return;\n    try {\n      const deviceIdFromPlat = await SystemUtils.getDeviceIdDb();\n      const { username, password } = config.ditto;\n      const dittoUrl =  config.ditto.baseURL\n      const response = await axios({\n        method: 'get',\n        url:\n        dittoUrl + deviceIdFromPlat + '/features/schedules/properties',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Basic ${btoa(`${username}:${password}`)}`,\n        },\n      });\n      this.setOutputData(0, response.data, false);\n      this.setOutputData(1, false);\n      this.properties['scheduleData'] = response.data;\n      this.persistProperties(false, true);\n    } catch (error) {\n      this.setOutputData(0, null);\n      this.setOutputData(1, error);\n      this.debugErr(error);\n      return;\n    }\n  }\n\n  setExecuteInterval() {\n    let interval = this.settings['interval'].value;\n    interval = TimeUtils.timeConvert(interval, this.settings['time'].value);\n    interval = Math.max(interval, 10000);\n    this.EXECUTE_INTERVAL = interval;\n  }\n}\nContainer.registerNodeType('nube/get-schedules', GetSchedulesNode);\n","module.exports = require(\"btoa\");","import { Container } from '../../container';\nimport { Node } from '../../node';\nimport { NODE_INFO } from '../../node-info';\nimport { NodeSetting, SettingType, Type } from '../../node-io';\n\nclass MathDecimalPlaceNode extends Node {\n\n  constructor() {\n    super();\n\n    this.title = NODE_INFO[\"num-transform\"].round.title;\n    this.description = NODE_INFO[\"num-transform\"].round.description; this.addInput('input', Type.NUMBER);\n\n    this.addOutput('output', Type.NUMBER);\n    this.settings['decimals'] = NodeSetting.create({\n      description: 'Decimal Places (Limit 5)',\n      value: 1,\n      type: SettingType.NUMBER,\n    });\n  }\n\n  onAdded() {\n \n    this.onInputUpdated();\n  }\n\n  onExecute(){\n    //this.onInputUpdated();\n  }\n\n  onInputUpdated() {\n    let decimals = this.settings['decimals'].value;\n    if (decimals > 5) decimals = 5;\n    this.emitTransformedInput(x => x.toFixed(decimals));\n  }\n\n  onAfterSettingsChange() {\n    this.onInputUpdated();\n  }\n}\nContainer.registerNodeType('num-transform/round', MathDecimalPlaceNode);\n","import { Container } from '../../container';\nimport { Node } from '../../node';\nimport { Type } from '../../node-io';\nimport { NODE_INFO } from '../../node-info';\n\nclass MathFloorNode extends Node {\n\n  constructor() {\n    super();\n\n    this.title = NODE_INFO[\"num-transform\"].floor.title;\n    this.description = NODE_INFO[\"num-transform\"].floor.description; \n\n    this.addInput('input', Type.NUMBER);\n    this.addOutput('output', Type.NUMBER);\n  }\n\n  onAdded() {\n \n    this.onInputUpdated();\n  }\n\n  onExecute(){\n    //this.onInputUpdated();\n  }\n\n  onInputUpdated() {\n    this.emitTransformedInput(x => Math.floor(x));\n  }\n}\nContainer.registerNodeType('num-transform/floor', MathFloorNode);\n","import { Container } from '../../container';\nimport { Node } from '../../node';\nimport { Type } from '../../node-io';\nimport { NODE_INFO } from '../../node-info';\n\nclass MathCeilNode extends Node {\n\n  constructor() {\n    super();\n\n    this.title = NODE_INFO[\"num-transform\"].ceil.title;\n    this.description = NODE_INFO[\"num-transform\"].ceil.description; \n\n    this.addInput('input', Type.NUMBER);\n    this.addOutput('output', Type.NUMBER);\n  }\n\n  onAdded() {\n \n    this.onInputUpdated();\n  }\n\n  onExecute(){\n    //this.onInputUpdated();\n  }\n\n  onInputUpdated() {\n    this.emitTransformedInput(x => Math.ceil(x));\n  }\n}\nContainer.registerNodeType('num-transform/ceil', MathCeilNode);\n","import { Container } from '../../container';\nimport { Node } from '../../node';\nimport { Type } from '../../node-io';\nimport { NODE_INFO } from '../../node-info';\n\nclass LimitNode extends Node {\n\n  constructor() {\n    super();\n\n    this.title = NODE_INFO[\"num-transform\"].limit.title;\n    this.description = NODE_INFO[\"num-transform\"].limit.description; \n    this.addInput('input', Type.NUMBER);\n    this.addInputWithSettings('min', Type.NUMBER, 0, 'min', false);\n    this.addInputWithSettings('max', Type.NUMBER, 5, 'max', false);\n    this.addOutput('output', Type.NUMBER);\n  }\n\n  onCreated() {\n    this.setOutputData(0, this.settings['min'].value);\n  }\n\n  onAdded() {\n \n    this.onInputUpdated();\n  }\n\n  onExecute(){\n    //this.onInputUpdated();\n  }\n\n  onInputUpdated() {\n    const val = this.getInputData(0);\n\n    const min = this.getInputData(1);\n    const max = this.getInputData(2);\n\n    if (val >= max) {\n      this.setOutputData(0, max);\n    } else if (val <= min) {\n      this.setOutputData(0, min);\n    } else {\n      this.setOutputData(0, val);\n    }\n  }\n\n  onAfterSettingsChange() {\n    this.onInputUpdated();\n  }\n}\nContainer.registerNodeType('num-transform/limit', LimitNode);\n","import { Container } from '../../container';\nimport { Node } from '../../node';\nimport { Type } from '../../node-io';\nimport Utils from '../../utils';\nimport { NODE_INFO } from '../../node-info';\n\nclass ScaleNode extends Node {\n  lastTime: number;\n  interval: number = 250;\n\n  constructor() {\n    super();\n    this.title = NODE_INFO[\"num-transform\"].scale.title;\n    this.description = NODE_INFO[\"num-transform\"].scale.description; \n    this.addInput('input', Type.NUMBER);\n    this.addInputWithSettings('in-min', Type.NUMBER, 0, 'Minimum Input', false);\n    this.addInputWithSettings('in-max', Type.NUMBER, 100, 'Maximum Input', false);\n    this.addInputWithSettings('out-min', Type.NUMBER, 0, 'Minimum Output', false);\n    this.addInputWithSettings('out-max', Type.NUMBER, 10, 'Maximum Output', false);\n    this.addOutput('output', Type.NUMBER);\n    this.lastTime = Date.now();\n  }\n\n  onAdded() {\n \n    this.onInputUpdated();\n  }\n\n  onExecute(){\n    //this.onInputUpdated();\n  }\n\n  onAfterSettingsChange(){\n    this.onInputUpdated();\n  }\n\n  onInputUpdated() {\n    let now = Date.now();\n    if (now - this.lastTime >= this.interval) {\n      this.lastTime = now;\n      let val = this.getInputData(0);\n      const inMin = this.getInputData(1);\n      const inMax = this.getInputData(2);\n      const outMin = this.getInputData(3);\n      const outMax = this.getInputData(4);\n\n      if (val == null) {\n        this.setOutputData(0, 0);\n      } else {\n        val = Utils.remap(val, inMin, inMax, outMin, outMax);\n        this.setOutputData(0, val.toFixed(1));\n      }\n    }\n  }\n}\nContainer.registerNodeType('num-transform/scale', ScaleNode);\n","import { Container } from '../../container';\nimport { Node } from '../../node';\nimport { Side } from '../../node-interface';\nimport { NodeSetting, SettingType, Type } from '../../node-io';\nimport Utils from '../../utils';\nimport { NODE_INFO } from '../../node-info';\n\nclass LinearShaperNode extends Node {\n  constructor() {\n    super();\n    this.title = NODE_INFO[\"num-transform\"][\"linear-shaper\"].title;\n    this.description = NODE_INFO[\"num-transform\"][\"linear-shaper\"].description; \n    this.addInput('input', Type.NUMBER);\n    this.settings['inputs'] = NodeSetting.create({\n      description: 'Inflection Points Count',\n      value: 3,\n      type: SettingType.NUMBER,\n    });\n    this.settings['in1'] = NodeSetting.create({\n      description: 'output value @ input = 0',\n      value: 0,\n      type: SettingType.NUMBER,\n    });\n    this.settings['in2'] = NodeSetting.create({\n      description: 'output value @ input = 50',\n      value: 0,\n      type: SettingType.NUMBER,\n    });\n    this.settings['in3'] = NodeSetting.create({\n      description: 'output value @ input = 100',\n      value: 0,\n      type: SettingType.NUMBER,\n    });\n    this.addInput('[0]', Type.NUMBER);\n    this.addInput('[50]', Type.NUMBER);\n    this.addInput('[100]', Type.NUMBER);\n    this.addOutput('output', Type.NUMBER);\n  }\n\n  onAfterSettingsChange() {\n    const inputCountBefore = this.getInputsCount();\n    let inputs = this.settings['inputs'].value;\n    inputs = Utils.clamp(inputs, 3, 100);\n    inputs = inputs + 1;\n    if (inputs == inputCountBefore) return;\n    this.changeInputsCount(inputs, Type.NUMBER);\n\n    if (inputs > 4) {\n      for (let i = 4; i < inputs; i++) {\n        if (!this.settings['in' + i]) {\n          this.settings['in' + i] = NodeSetting.create({\n            description: 'in ' + i,\n            value: 0,\n            type: SettingType.NUMBER,\n          });\n        }\n      }\n    }\n    for (let j = inputs; j < inputCountBefore; j++) {\n      delete this.settings['in' + j];\n    }\n    this.renameInputsAndSettings(inputs);\n\n    if (this.side == Side.editor) this.updateInputsLabels();\n    this.onInputUpdated();\n  }\n\n  renameInputsAndSettings(count) {\n    count = count - 1;\n    this.inputs[1].name = '[0]';\n    for (let i = 1; i < count; i++) {\n      let point = (100.0 / (count - 1)) * i;\n      let pointFormatted = point.toFixed(2).replace(/[.,]00$/, '');\n      this.inputs[i + 1].name = '[' + pointFormatted + ']';\n      this.settings['in' + (i + 1)] = NodeSetting.create({\n        description: 'output value @ input = ' + pointFormatted,\n        value: 0,\n        type: SettingType.NUMBER,\n      });\n    }\n    this.updateNodeInput();\n  }\n\n  onInputUpdated() {\n    const input = this.getInputData(0);\n    if (input == null) {\n      this.setOutputData(0, null, true);\n      return;\n    }\n    const position = Utils.clamp(input, 0, 100);\n    const pointsCount = this.getInputsCount() - 1;\n    const stepSize = 100.0 / (pointsCount - 1);\n    const stepIndex = position / stepSize;\n    if (position % stepSize == 0) {\n      let valueAtPosition = this.getInputData(stepIndex + 1);\n      if (!Utils.hasInput(valueAtPosition)) {\n        valueAtPosition = this.settings['in' + (stepIndex + 1)].value;\n      }\n      valueAtPosition = Number(valueAtPosition);\n      this.setOutputData(0, valueAtPosition);\n      return;\n    }\n    const positionInStep = stepIndex - Math.floor(stepIndex);\n    const startValueIndex = Math.floor(stepIndex);\n    console.log(stepIndex, 'stepIndex');\n    console.log(startValueIndex, 'startValueIndex');\n    console.log('in' + (startValueIndex + 1), \"'in' + (startValueIndex + 1)\");\n    let startValue = this.getInputData(startValueIndex + 1);\n    if (!Utils.hasInput(startValue)) startValue = this.settings['in' + (startValueIndex + 1)].value;\n    let endValue = this.getInputData(startValueIndex + 2);\n    if (!Utils.hasInput(endValue)) endValue = this.settings['in' + (startValueIndex + 2)].value;\n    let output = Utils.remap(positionInStep, 0, 1, startValue, endValue);\n    this.setOutputData(0, output, true);\n  }\n}\nContainer.registerNodeType('num-transform/linear-shaper', LinearShaperNode);\n","import { Container } from '../../container';\nimport { Node } from '../../node';\nimport { NodeSetting, SettingType, Type } from '../../node-io';\nimport TimeUtils from '../../utils/time-utils';\nimport { NODE_INFO } from '../../node-info';\n\nclass TimeFadeNode extends Node {\n  updateInterval: number = 500;\n  stepSize: number;\n  lastEnable: boolean;\n  timerFinished: boolean;\n  currentVal: number;\n  timeoutFunc;\n\n\n  constructor() {\n    super();\n    this.title = NODE_INFO[\"num-transform\"].fade.title;\n    this.description = NODE_INFO[\"num-transform\"].fade.description; \n   \n    this.addInput('enable', Type.BOOLEAN);\n    this.addInputWithSettings('interval', Type.NUMBER, 1, 'Interval', false);\n    this.settings['time'] = NodeSetting.create({\n      description: 'Units',\n      type: SettingType.DROPDOWN,\n      config: {\n        items: [\n          { value: 'milliseconds', text: 'Milliseconds' },\n          { value: 'seconds', text: 'Seconds' },\n          { value: 'minutes', text: 'Minutes' },\n          { value: 'hours', text: 'Hours' },\n        ],\n      },\n      value: 'seconds',\n    });\n    this.setSettingsConfig({\n      groups: [{ interval: { weight: 2 }, time: {} }],\n    });\n    this.addInputWithSettings('from', Type.NUMBER, 0, 'To Value', false);\n    this.addInputWithSettings('to', Type.NUMBER, 100, 'From Value', false);\n    this.addOutput('output');\n    this.addOutput('out=to');\n\n    this.updateInterval = 250;\n  }\n\n  onAdded() {\n \n    this.lastEnable = false;\n    this.timerFinished = false;\n    this.setOutputData(1, false);\n    this.inputs[1]['name'] = `[interval] (${this.settings['time'].value})`;\n    this.onInputUpdated();\n  }\n\n  onExecute(){\n    //this.onInputUpdated();\n  }\n\n  onAfterSettingsChange() {\n    this.inputs[1]['name'] = `[interval] (${this.settings['time'].value})`;\n  }\n\n  onInputUpdated() {\n    const enable = this.getInputData(0);\n    if (!enable && this.lastEnable) {\n      clearInterval(this.timeoutFunc);\n      this.setOutputData(0, 0);\n      this.setOutputData(1, false);\n      this.timerFinished = false;\n      this.lastEnable = enable;\n      return;\n    } else if (!enable) {\n      this.setOutputData(0, 0);\n      this.setOutputData(1, false);\n      return;\n    }\n    const to = this.getInputData(3);\n    if (enable && this.timerFinished) {\n      this.setOutputData(0, to);\n      this.setOutputData(1, true);\n      return;\n    }\n\n    const from = this.getInputData(2);\n    let interval = this.getInputData(1);\n    interval = TimeUtils.timeConvert(interval, this.settings['time'].value);\n    if (enable && !this.lastEnable) {\n      this.stepSize = (to - from) / (interval / this.updateInterval);\n      this.currentVal = from;\n      this.timeoutFunc = setInterval(() => {\n        this.update();\n      }, this.updateInterval);\n    } else if (!enable && this.lastEnable) {\n      clearInterval(this.timeoutFunc);\n      this.setOutputData(0, 0);\n      this.timerFinished = false;\n    }\n    this.lastEnable = enable;\n  }\n\n  update() {\n    let to = this.getInputData(3);\n    const val = this.currentVal + this.stepSize;\n    if (val >= to) {\n      clearInterval(this.timeoutFunc);\n      this.setOutputData(0, to);\n      this.setOutputData(1, true);\n      this.timerFinished = true;\n      this.currentVal = 0;\n      return;\n    } else {\n      this.currentVal = val;\n      this.setOutputData(0, val);\n    }\n  }\n}\nContainer.registerNodeType('num-transform/fade', TimeFadeNode);\n","import { Container } from '../../container';\nimport { Node } from '../../node';\nimport { NodeSetting, SettingType, Type } from '../../node-io';\nimport TimeUtils from '../../utils/time-utils';\nimport { NODE_INFO } from '../../node-info';\n\nclass RateLimitNode extends Node {\n  lastEnable: boolean;\n  lastInterval: number;\n  currentVal: number;\n  timeoutFunc;\n\n\n  constructor() {\n    super();\n    this.title = NODE_INFO[\"num-transform\"][\"rate-limit\"].title;\n    this.description = NODE_INFO[\"num-transform\"][\"rate-limit\"].description; \n    this.addInput('input', Type.NUMBER);\n    this.addInputWithSettings('enable', Type.BOOLEAN, true, 'Enable', false);\n    this.addInputWithSettings('step', Type.NUMBER, 1, 'Step Size', false);\n    this.addInputWithSettings('interval', Type.NUMBER, 1, 'Update Interval', false);\n    this.settings['time'] = NodeSetting.create({\n      description: 'Units',\n      type: SettingType.DROPDOWN,\n      config: {\n        items: [\n          { value: 'milliseconds', text: 'Milliseconds' },\n          { value: 'seconds', text: 'Seconds' },\n          { value: 'minutes', text: 'Minutes' },\n          { value: 'hours', text: 'Hours' },\n        ],\n      },\n      value: 'seconds',\n    });\n    this.setSettingsConfig({\n      groups: [{ interval: { weight: 2 }, time: {} }],\n    });\n    this.addOutput('output', Type.NUMBER);\n    this.lastInterval = 1000;\n    this.lastEnable = true;\n    this.currentVal = 0;\n  }\n\n  onAdded() {\n \n    this.lastInterval = 1000;\n    this.lastEnable = true;\n    this.currentVal = 0;\n    this.setOutputData(0, null);\n    this.inputs[3]['name'] = `[interval] (${this.settings['time'].value})`;\n    this.timeoutFunc = setInterval(() => {\n      this.step();\n    }, this.lastInterval);\n  }\n\n  onExecute(){\n    //this.onInputUpdated();\n  }\n\n  onInputUpdated() {\n    let input = this.getInputData(0);\n    if (input == null) {\n      clearInterval(this.timeoutFunc);\n      this.setOutputData(0, null);\n      this.lastEnable = false;\n      return;\n    }\n    let interval = this.getInputData(3);\n    interval = TimeUtils.timeConvert(interval, this.settings['time'].value);\n    const enable = this.getInputData(1);\n    if (enable && !this.lastEnable) {\n      this.currentVal = 0;\n      this.timeoutFunc = setInterval(() => {\n        this.step();\n      }, interval);\n    } else if (!enable && this.lastEnable) {\n      clearInterval(this.timeoutFunc);\n      this.setOutputData(0, null);\n    } else if (enable && this.lastEnable && interval !== this.lastInterval) {\n      clearInterval(this.timeoutFunc);\n      this.timeoutFunc = setInterval(() => {\n        this.step();\n      }, interval);\n    }\n    this.lastInterval = interval;\n    this.lastEnable = enable;\n  }\n\n  step() {\n    const step = this.getInputData(2);\n    let input = this.getInputData(0);\n    if (input >= this.currentVal) {\n      this.currentVal = this.currentVal + step;\n      if (this.currentVal > input) this.currentVal = input;\n      this.setOutputData(0, this.currentVal);\n    } else if (input < this.currentVal) {\n      this.currentVal = this.currentVal - step;\n      if (this.currentVal < input) this.currentVal = input;\n      this.setOutputData(0, this.currentVal);\n    }\n  }\n\n  onAfterSettingsChange() {\n    this.inputs[3]['name'] = `[interval] (${this.settings['time'].value})`;\n    this.onInputUpdated();\n  }\n}\nContainer.registerNodeType('num-transform/rate-limit', RateLimitNode);\n","import { Container } from '../../container';\nimport { Node } from '../../node';\nimport { NODE_INFO } from '../../node-info';\nimport { Side } from '../../node-interface';\nimport { NodeSetting, SettingType, Type } from '../../node-io';\n\n//Bool Constant\nclass BoolConstantNode extends Node {\n\n  constructor() {\n    super();\n    this.title = NODE_INFO.point[\"bool-constant\"].title;\n    this.description = NODE_INFO.point[\"bool-constant\"].description;\n\n    this.settings['value'] = NodeSetting.create({\n      description: 'Payload',\n      type: SettingType.DROPDOWN,\n      config: {\n        items: [\n          { value: false, text: 'false' },\n          { value: true, text: 'true' },\n          { value: null, text: 'null' },\n        ],\n      },\n      value: null,\n    });\n\n    this.addOutput('output', Type.BOOLEAN);\n  }\n\n  onAdded() {\n \n    if (this.side != Side.server) return;\n    let val = this.settings['value'].value;\n    this.setOutputData(0, val);\n  }\n\n  onExecute(){\n    // this.onAfterSettingsChange();\n  }\n\n  onAfterSettingsChange() {\n    let val = this.settings['value'].value;\n    this.setOutputData(0, val);\n  }\n}\nContainer.registerNodeType('point/bool-constant', BoolConstantNode);\n","import { Container } from '../../container';\nimport { Node } from '../../node';\nimport { NodeSetting, SettingType, Type } from '../../node-io';\nimport Utils from '../../utils';\nimport { NODE_INFO } from '../../node-info';\n\n//Numeric Constant\nclass NumConstantNode extends Node {\n\n  constructor() {\n    super();\n    this.title = NODE_INFO.point[\"num-constant\"].title;\n    this.description = NODE_INFO.point[\"num-constant\"].description; \n    this.settings['value'] = NodeSetting.create({ description: 'Value', value: null, type: SettingType.NUMBER });\n    this.addOutput('output', Type.NUMBER);\n  }\n\n  onAdded() {\n \n    this.onAfterSettingsChange();\n  }\n\n  onExecute(){\n    // this.onAfterSettingsChange();\n  }\n\n  onAfterSettingsChange() {\n    const val = this.settings['value'].value;\n    this.setOutputData(0, Utils.parseValue(val, Type.NUMBER));\n  }\n}\nContainer.registerNodeType('point/num-constant', NumConstantNode);\n","import { Container } from '../../container';\nimport { Node } from '../../node';\nimport { NODE_INFO } from '../../node-info';\nimport { NodeSetting, SettingType, Type } from '../../node-io';\nimport Utils from '../../utils';\n\n//String\nclass StringConstantNode extends Node {\n\n  constructor() {\n    super();\n    this.title = NODE_INFO.point[\"string-constant\"].title;\n    this.description = NODE_INFO.point[\"string-constant\"].description;\n    this.settings['value'] = NodeSetting.create({ description: 'Value', value: '', type: SettingType.STRING });\n    this.addOutput('output', Type.STRING);\n  }\n\n  onAdded() {\n \n    this.onAfterSettingsChange();\n  }\n\n  onExecute(){\n    // this.onAfterSettingsChange();\n  }\n\n  onAfterSettingsChange() {\n    const val = this.settings['value'].value;\n    this.setOutputData(0, Utils.parseValue(val, Type.STRING));\n  }\n}\nContainer.registerNodeType('point/string-constant', StringConstantNode);\n","import { isEmpty, isJSON } from '../../../utils/helper';\nimport { Container } from '../../container';\nimport { Node } from '../../node';\nimport { NODE_INFO } from '../../node-info';\nimport { NodeSetting, SettingType, Type } from '../../node-io';\n\nclass JsonConstantNode extends Node {\n\n  constructor() {\n    super();\n    this.title = NODE_INFO.point[\"json-constant\"].title;\n    this.description = NODE_INFO.point[\"json-constant\"].description;\n     this.addInputWithSettings('value', Type.JSON, '{ \"measurement\": 22 }', 'JSON value');\n    this.settings['passNull'] = NodeSetting.create({\n      description: 'Send null if not a match',\n      value: false,\n      type: SettingType.BOOLEAN,\n    });\n    this.addOutput('output', Type.JSON);\n    this.addOutput('valid-json', Type.BOOLEAN);\n    this.addOutput('msg', Type.STRING);\n  }\n\n  onAdded() {\n    this.onAfterSettingsChange();\n  }\n\n  onInputUpdated() {\n    let val = this.getInputData(0);\n    const passNull = this.settings['passNull'].value;\n    try {\n      if (isJSON(val) && !isEmpty(val)) {\n        this.setOutputData(0, val);\n        this.setOutputData(1, true);\n        this.setOutputData(2, 'valid JSON');\n      } else if(passNull) {\n        this.setOutputData(0, null);\n        this.setOutputData(1, false);\n        this.setOutputData(2, 'invalid JSON');\n      } else {\n        this.setOutputData(1, false);\n        this.setOutputData(2, 'invalid JSON');\n      }\n    } catch (err) {\n      this.setOutputData(1, false);\n      this.setOutputData(2, err);\n    }\n  }\n\n  onAfterSettingsChange() {\n    this.onInputUpdated()\n  }\n}\nContainer.registerNodeType('point/json-constant', JsonConstantNode);\n","import { Container } from '../../container';\nimport { FlexibleNode } from '../../flexible-node';\nimport { Type } from '../../node-io';\nimport { NODE_INFO } from '../../node-info';\n\nclass BoolPriorityNode extends FlexibleNode {\n\n  constructor() {\n    super();\n    this.dynamicInputsType = Type.BOOLEAN;\n    this.title = NODE_INFO.point[\"bool-writable\"].title;\n    this.description = NODE_INFO.point[\"bool-writable\"].description; \n    this.addOutput('out', Type.BOOLEAN);\n  }\n\n  onAdded() {\n    this.size = this.computeSize();\n    this.onInputUpdated();\n  }\n\n  onInputUpdated() {\n    const inputs = this.getInputsCount();\n    for (let i = this.dynamicInputStartPosition; i < inputs; i++) {\n      let inputValue = this.getInputData(i);\n      if (inputValue != null) {\n        this.setOutputData(0, inputValue);\n        return;\n      }\n    }\n    this.setOutputData(0, null);\n  }\n\n  onAfterSettingsChange() {\n    super.onAfterSettingsChange();\n    this.onInputUpdated();\n  }\n}\nContainer.registerNodeType('point/bool-writable', BoolPriorityNode);\n","import { Container } from '../../container';\nimport { FlexibleNode } from '../../flexible-node';\nimport { Type } from '../../node-io';\nimport { NODE_INFO } from '../../node-info';\n\nclass NumWritableNode extends FlexibleNode {\n\n  constructor() {\n    super();\n    this.dynamicInputsType = Type.NUMBER;\n    this.title = NODE_INFO.point[\"num-writable\"].title;\n    this.description = NODE_INFO.point[\"num-writable\"].description; \n   \n    this.addOutput('out', Type.NUMBER);\n  }\n\n  onAdded() {\n    this.onInputUpdated();\n    this.size = this.computeSize();\n  }\n\n  onInputUpdated() {\n    const inputs = this.getInputsCount();\n    for (let i = this.dynamicInputStartPosition; i < inputs; i++) {\n      let inputValue = this.getInputData(i);\n      if (inputValue != null) {\n        this.setOutputData(0, inputValue);\n        return;\n      }\n    }\n    this.setOutputData(0, null);\n  }\n\n  onAfterSettingsChange() {\n    super.onAfterSettingsChange();\n    this.onInputUpdated();\n  }\n}\n\nContainer.registerNodeType('point/num-writable', NumWritableNode);\n","import { Container } from '../../container';\nimport { FlexibleNode } from '../../flexible-node';\nimport { Type } from '../../node-io';\nimport { NODE_INFO } from '../../node-info';\n\nclass StringPriorityNode extends FlexibleNode {\n\n  constructor() {\n    super();\n    this.dynamicInputsType = Type.STRING;\n    this.title = NODE_INFO.point[\"string-writable\"].title;\n    this.description = NODE_INFO.point[\"string-writable\"].description; \n   \n    this.addOutput('out', Type.STRING);\n  }\n\n  onAdded() {\n    this.size = this.computeSize();\n    this.onInputUpdated();\n  }\n\n  onInputUpdated() {\n    for (let i = this.dynamicInputStartPosition; i < this.getInputsCount(); i++) {\n      let inputValue = this.getInputData(i);\n      if (inputValue) {\n        this.setOutputData(0, inputValue);\n        return;\n      }\n    }\n    this.setOutputData(0, '');\n  }\n\n  onAfterSettingsChange() {\n    super.onAfterSettingsChange();\n    this.onInputUpdated();\n  }\n}\nContainer.registerNodeType('point/string-writable', StringPriorityNode);\n","import { Container } from '../../container';\nimport { Node } from '../../node';\nimport { Side } from '../../node-interface';\nimport HistoryConfig from '../../utils/points/history-config';\nimport PriorityConfig from '../../utils/points/priority-config';\nimport { NODE_INFO } from '../../node-info';\n\n// TODO change history config to HistoryBase\nclass GenericNode extends Node {\n\n  constructor() {\n    super();\n    this.title = NODE_INFO.point[\"generic-point\"].title;\n    this.description = NODE_INFO.point[\"generic-point\"].description; \n\n    PriorityConfig.addPrioritySettings(this);\n    HistoryConfig.addHistorySettings(this);\n    this.setSettingsConfig({ groups: [], conditions: {} });\n    PriorityConfig.addPrioritySettingsConfig(this);\n    HistoryConfig.addHistorySettingsConfig(this, 0, false);\n  }\n\n  onCreated() {\n    PriorityConfig.priorityOnCreated(this);\n    HistoryConfig.historyOnCreated(this);\n  }\n\n  onAdded() {\n    //this.size = this.computeSize();\n    this.onAfterSettingsChange();\n  }\n\n  onInputUpdated() {\n    PriorityConfig.doPriorityFunctions(this);\n    if (this.side !== Side.server) return; // only execute on server\n    HistoryConfig.doHistoryFunctions(this);\n  }\n\n  onAfterSettingsChange() {\n    PriorityConfig.priorityFunctionsForAfterSettingsChange(this);\n    HistoryConfig.historyFunctionsForAfterSettingsChange(this, this.settings['pointName'].value);\n    PriorityConfig.doPriorityFunctions(this);\n    if (this.side !== Side.server) return; // only execute on server\n    HistoryConfig.doHistoryFunctions(this);\n    /*\n    super.onAfterSettingsChange();\n    this.onInputUpdated();\n    */\n  }\n}\n\nContainer.registerNodeType('point/generic-point', GenericNode);\n","/******************************************************\n *\n * Node Constructor should include the following:\n * Add this line in the settings setup, where the history settings should appear:\n *      HistoryConfig.addHistorySettings(this);\n *\n * Add this line at the end after this.setSettingsConfig() has been called,\n * or if this.setSettingsConfig() has not been used, then add this line after settings setup in Node Constructor:\n *      HistoryConfig.addHistorySettingsConfig(this);\n *\n *\n * Node Functions should include the following:\n *     async onInputUpdated() {\n *       if (this.side !== Side.server) return; // only execute on server\n *       HistoryConfig.doHistoryFunctions(this, 0, this.settings['pointName'].value);\n *     }\n *\n *     onAfterSettingsChange() {\n *       HistoryConfig.historyFunctionsForAfterSettingsChange(this, this.settings['pointName'].value);\n *       this.onInputUpdated();\n *       if (this.side !== Side.server) return; // HISTORY FUNCTONS MUST BE DONE ON BOTH SIDES\n *     }\n *\n */\n\nimport { Side } from '../../node-interface';\nimport { SettingType, Type } from '../../node-io';\nimport Utils from '../../utils';\nimport TimeUtils from '../time-utils';\nimport SettingUtils from '../setting-utils';\nimport CryptoUtils from '../crypto-utils';\nimport NodeUtils from '../../utils/node-utils';\nimport axios from 'axios';\nimport config from '../../../config';\nimport SystemUtils from '../../nodes/system/system-utils';\nconst Influx = require('influx');\nconst moment = require('moment-timezone');\n\n\n\n/**\n * @Deprecated: Use HistoryBase instead of this one\n */\nexport default class HistoryConfig {\n  static addHistorySettings(self) {\n    self.addInput('histTrigger', Type.BOOLEAN);\n    self.addOutput('histError', Type.ANY);\n    self.addOutput('storedHistCount', Type.NUMBER);\n    self.addOutput('lastHistExport', Type.STRING);\n    for (let input in self.inputs) {\n      if (self.inputs.hasOwnProperty(input)) {\n        if (self.inputs[input].name == 'histTrigger') self.histTriggerInput = input;\n      }\n    }\n\n    for (let output in self.outputs) {\n      if (self.outputs.hasOwnProperty(output)) {\n        if (self.outputs[output].name == 'histError') self.histErrorOutput = output;\n        else if (self.outputs[output].name == 'storedHistCount') self.storedHistCountOutput = output;\n        else if (self.outputs[output].name == 'lastHistExport') self.lastHistExportOutput = output;\n      }\n    }\n\n    /**\n     * History settings\n     */\n    self.settings['history_group'] = {\n      description: 'History Settings',\n      value: '',\n      type: SettingType.GROUP,\n    };\n\n    self.settings['databaseType'] = {\n      description: 'Database Type',\n      type: SettingType.DROPDOWN,\n      config: {\n        items: [\n          { value: 0, text: 'Nube DB (Postgres)' },\n          { value: 1, text: 'InfluxDB' },\n        ],\n      },\n      value: 0,\n    };\n\n    // THESE SETTINGS FOR INFLUX HISTORY STORAGE\n\n    self.settings['enable'] = {\n      description: 'History Enable',\n      value: false,\n      type: SettingType.BOOLEAN,\n    };\n    self.settings['host'] = { description: 'Host', value: '', type: SettingType.STRING };\n    self.settings['port'] = { description: 'Port', value: '', type: SettingType.STRING };\n\n    self.settings['authentication'] = {\n      description: 'Use Authentication',\n      value: false,\n      type: SettingType.BOOLEAN,\n    };\n    self.settings['user'] = { description: 'Username', value: '', type: SettingType.STRING };\n    self.settings['password'] = { description: 'Password', value: '', type: SettingType.STRING };\n\n    self.settings['databaseName'] = {\n      description: 'Database Name',\n      value: '',\n      type: SettingType.STRING,\n    };\n\n    self.settings['tableName'] = {\n      description: 'Measurement Name',\n      value: '',\n      type: SettingType.STRING,\n    };\n\n    // END OF INFLUX SPECIFIC SETTINGS\n\n    self.settings['pointName'] = {\n      description: 'Point Name',\n      value: '',\n      type: SettingType.STRING,\n    };\n\n    self.settings['historyMode'] = {\n      description: 'History Logging Mode',\n      type: SettingType.DROPDOWN,\n      config: {\n        items: [\n          { value: 0, text: 'Change Of Value (COV)' },\n          { value: 1, text: 'Periodic' },\n          { value: 2, text: 'Trigger Only' },\n        ],\n      },\n      value: 0,\n    };\n\n    self.settings['threshold'] = {\n      description: 'COV Threshold',\n      value: 0,\n      type: SettingType.NUMBER,\n    };\n\n    self.settings['period'] = {\n      description: 'Logging Interval',\n      value: 15,\n      type: SettingType.NUMBER,\n    };\n    self.settings['periodUnits'] = {\n      description: 'Units',\n      type: SettingType.DROPDOWN,\n      config: {\n        items: [\n          { value: 'milliseconds', text: 'Milliseconds' },\n          { value: 'seconds', text: 'Seconds' },\n          { value: 'minutes', text: 'Minutes' },\n          { value: 'hours', text: 'Hours' },\n        ],\n      },\n      value: 'minutes',\n    };\n\n    self.settings['storage-limit'] = {\n      description: 'Local Storage Limit (Max 50)',\n      value: 25,\n      type: SettingType.NUMBER,\n    };\n    self.settings['minuteRoundValue'] = {\n      description: 'Round minutes up in increments of',\n      value: 0,\n      type: SettingType.NUMBER,\n    };\n\n    self.settings['decimals'] = {\n      description: 'Decimal Places (Limit 5)',\n      value: 3,\n      type: SettingType.NUMBER,\n    };\n\n    self.settings['timeAsString'] = {\n      description: 'Display Timestamp as:',\n      type: SettingType.DROPDOWN,\n      config: {\n        items: [\n          { value: false, text: 'Numeric' },\n          { value: true, text: 'String' },\n        ],\n      },\n      value: true,\n    };\n\n    /**\n     * Alarm settings\n     */\n    self.settings['alarm_group'] = {\n      description: 'Alarm Settings',\n      value: '',\n      type: SettingType.GROUP,\n    };\n\n    self.settings['alarms_count'] = {\n      description: 'Alarms Count (Max 10)',\n      value: 0,\n      type: SettingType.NUMBER,\n    };\n\n    /**\n     * Tag settings\n     */\n    self.settings['tags_group'] = {\n      description: 'Tag Settings',\n      value: '',\n      type: SettingType.GROUP,\n    };\n\n    self.settings['tags_count'] = {\n      description: 'Tag Count (Max 10)',\n      value: 0,\n      type: SettingType.NUMBER,\n    };\n  }\n\n  static addHistorySettingsConfig(self, valueInput: number = 0, isOutput: boolean = true) {\n    if (!self.settingConfigs.hasOwnProperty('groups') && !self.settingConfigs.hasOwnProperty('conditions'))\n      self.setSettingsConfig({ groups: [], conditions: {} });\n    self.settingConfigs.groups.push({ history_group: {} });\n    self.settingConfigs.groups.push({ databaseType: {} });\n    self.settingConfigs.groups.push({ host: { weight: 3 }, port: { weight: 1 } });\n    self.settingConfigs.groups.push({ user: {}, password: {} });\n    self.settingConfigs.groups.push({ period: { weight: 2 }, periodUnits: {} });\n    self.settingConfigs.conditions['authentication'] = setting => {\n      return setting['databaseType'].value == 1;\n    };\n    self.settingConfigs.conditions['host'] = setting => {\n      return setting['databaseType'].value == 1;\n    };\n    self.settingConfigs.conditions['port'] = setting => {\n      return setting['databaseType'].value == 1;\n    };\n    self.settingConfigs.conditions['databaseName'] = setting => {\n      return setting['databaseType'].value == 1;\n    };\n    self.settingConfigs.conditions['tableName'] = setting => {\n      return setting['databaseType'].value == 1;\n    };\n    self.settingConfigs.conditions['user'] = setting => {\n      return !!setting['authentication'].value && setting['databaseType'].value == 1;\n    };\n    self.settingConfigs.conditions['password'] = setting => {\n      return !!setting['authentication'].value && setting['databaseType'].value == 1;\n    };\n    self.settingConfigs.conditions['threshold'] = setting => {\n      return !setting['historyMode'].value;\n    };\n    self.settingConfigs.conditions['period'] = setting => {\n      return setting['historyMode'].value == 1;\n    };\n    self.settingConfigs.conditions['periodUnits'] = setting => {\n      return setting['historyMode'].value == 1;\n    };\n    self.settingConfigs.conditions['alarm_group'] = setting => {\n      return setting['databaseType'].value == 1;\n    };\n    self.settingConfigs.conditions['alarms_count'] = setting => {\n      return setting['databaseType'].value == 1;\n    };\n    self.settingConfigs.conditions['tags_group'] = setting => {\n      return setting['databaseType'].value == 1;\n    };\n    self.settingConfigs.conditions['tags_count'] = setting => {\n      return setting['databaseType'].value == 1;\n    };\n    if (self.settings['authentication']) {\n      self.settingConfigs.groups.push({ host: { weight: 3 }, port: { weight: 1 } });\n      self.settingConfigs.groups.push({ user: {}, password: {} });\n      self.settingConfigs.conditions['user'] = setting => {\n        return !!setting['authentication'].value;\n      };\n      self.settingConfigs.conditions['password'] = setting => {\n        return !!setting['authentication'].value;\n      };\n    }\n\n    self.properties['alarmsCount'] = self.settings['alarms_count'].value;\n    self.properties['tagsCount'] = self.settings['tags_count'].value;\n    self.properties['valueInput'] = valueInput || 0;\n    self.properties['isOutput'] = isOutput;\n  }\n\n  static historyOnCreated(self) {\n    self.useInterval = false;\n    self.properties['alarmsCount'] = 0;\n    self.properties['tagsCount'] = 0;\n    self.properties['valueInput'] = 0;\n    self.properties['isOutput'] = true;\n    self.properties['pointName'] = 'undefined';\n    self.properties['obj'] = [];\n    self.properties['lastHistoryValue'] = null;\n    self.properties['dynamicInputStartPosition'] = 2;\n  }\n\n  //static async doHistoryFunctions(self, valueInput:number, histTrigger:number, histErrorOutput:number, storedHistCountOutput:number, lastHistExportOutput:number) {\n  static async doHistoryFunctions(self) {\n    let input = null;\n    if (self.properties['isOutput']) input = self.getInputData(self.properties['valueInput']);\n    else input = self.outputs[self.properties['valueInput']].data;\n    if (self.getInputData(self.histTriggerInput) && self.inputs[self.histTriggerInput].updated)\n      await HistoryConfig.storeLogEntry(self, input);\n    else if (input != null && (await HistoryConfig.checkCOV(self, input))) {\n      await HistoryConfig.storeLogEntry(self, input);\n    }\n    if (self.properties['obj'].length > 0) await HistoryConfig.trySendStoredData(self);\n    self.setOutputData(self.storedHistCountOutput, self.properties['obj'].length);\n  }\n\n  static async trySendStoredData(self) {\n    let decimals = self.settings['decimals'].value;\n    if (decimals > 5) decimals = 5;\n\n    var points = [];\n    self.properties['obj'].forEach(log => {\n      if (typeof log.payload == 'number') log.payload = log.payload.toFixed(decimals);\n      var tagList = {};\n      tagList['point'] = self.properties['pointName'] || 'undefined';\n      for (var j = 2; j < Object.keys(log).length - 1; j++) {\n        var key = Object.keys(log)[j];\n        tagList[key] = log[key];\n      }\n      for (var i = 0; i < 10; i++) {\n        tagList['tag' + (i + 1)] = log['tags'][i] || null;\n      }\n      // this.getInputData(2), //tableName\n      points.push({\n        measurement: self.getInputData(2),\n        fields: {\n          val: log.payload,\n          //ts: log.timestamp.valueOf(), // check that self is the correct DATE format.\n        },\n        tags: tagList,\n        time: log.timestamp, // check that self is the correct DATE format.\n      });\n      /* \n        measurement: self.settings['tableName'].value,\n        fields: {\n          val: log.payload,\n          //ts: log.timestamp.valueOf(), // check that self is the correct DATE format.\n        },\n        alarms: {\n          point: pointName || 'undefined',\n        },\n        time: log.timestamp.valueOf(), // check that self is the correct DATE format.\n      });\n      */\n    });\n    var errorFlag = false;\n\n    /////////////////////////////////////////////////////////////\n    // This section should be replaced with the history storage mode of choice.\n\n    // FOR POSTGRESQL DB (NUBE DATABASE)\n    if (self.settings['databaseType'].value == 0) {\n      //USING AXIOS\n      // For Multiple points in 1 push\n      var multiPointPost = [];\n      const clientIDfromPlat = await SystemUtils.getDeviceIdDb();\n      const deviceIDfromPlat = await SystemUtils.getDeviceIdDb();\n      let foundDeviceID = false;\n      let foundClientID = false;\n      typeof deviceIDfromPlat == 'string' ? (foundDeviceID = true) : null;\n      typeof deviceIDfromPlat == 'string' ? (foundClientID = true) : null;\n      var inputVal;\n      var typeOfVal;\n      var valAsNum;\n      const pgUrl = config.pg.baseURL;\n      points.forEach(point => {\n        inputVal = point['fields']['val'];\n        typeOfVal = typeof inputVal;\n        if (typeOfVal === 'string' || typeOfVal === 'boolean') valAsNum = Number(point['fields']['val']);\n        else valAsNum = inputVal;\n        multiPointPost.push({\n          deviceid: foundDeviceID ? deviceIDfromPlat : 'unknownDeviceID',\n          clientid: foundClientID ? clientIDfromPlat : 'unknownClientID',\n          val: valAsNum,\n          point: point['tags']['point'],\n          ts: moment(point['time'])._d,\n        });\n      });\n\n      axios({\n        method: 'post',\n        url: pgUrl,\n        data: multiPointPost,\n      })\n        .then(function() {})\n        .catch(function(error) {\n          self.setOutputData(self.histErrorOutput, String(error));\n          errorFlag = true;\n        });\n    }\n\n    // FOR INFLUX DB\n    if (self.settings['databaseType'].value == 1) {\n      const host = self.settings['host'].value || 'localhost';\n      const port = self.settings['port'].value || 8086;\n      var writeOptions = {};\n\n      var client = new Influx.InfluxDB({\n        host: self.settings['host'].value || 'localhost',\n        port: self.settings['port'].value || 8086,\n        protocol: 'http', //self.influxdbConfig.usetls ? \"https\" : \"http\",\n        database: self.settings['databaseName'].value || 'undefined',\n        username: self.settings['authentication'].value ? self.settings['user'].value : '',\n        password: self.settings['authentication'].value ? CryptoUtils.decrypt(self.settings['password'].value) : '',\n        /*\n      schema: [\n        {\n          measurement: self.settings['tableName'].value,\n          fields: {\n            point: Influx.FieldType.STRING,\n            val: Influx.FieldType.ANY,\n            ts: Influx.FieldType.TIMESTAMP\n          },\n          tags: [],\n        }\n      ]\n      */\n      });\n      await client.writePoints(points, writeOptions).catch(err => {\n        self.setOutputData(self.histErrorOutput, String(err.code));\n        errorFlag = true;\n        //console.log('err', err);\n      });\n    }\n\n    /////////////////////////////////////////////////////////////\n\n    if (!errorFlag) {\n      self.properties['obj'] = [];\n      self.setOutputData(self.histErrorOutput, '');\n      self.settings['timeAsString'].value\n        ? self.setOutputData(self.lastHistExportOutput, moment().format(), true)\n        : self.setOutputData(self.lastHistExportOutput, moment().valueOf(), true);\n    }\n  }\n\n  static historyFunctionsForAfterSettingsChange(self, pointName: string, save: boolean = true) {\n    self.properties['pointName'] = pointName;\n    if (self.settings['databaseType'].value == 0) {\n      self.settings['alarms_count'].value = 0;\n      self.settings['tags_count'].value = 0;\n    }\n    HistoryConfig.changeAlarmsCount(self, self.settings['alarms_count'].value);\n    // Alarms settings values gets inserted after certain time -- Container.setSettings(properties, node);\n    setTimeout(() => {\n      HistoryConfig.renameAlarmInputs(self);\n    }, 100);\n    HistoryConfig.changeTagsCount(self, self.settings['tags_count'].value);\n    HistoryConfig.setPeriodicLogging(self);\n    if (save) {\n      NodeUtils.persistProperties(self, true, true, true);\n    }\n    if (self.properties['isOutput']) self.onInputUpdated();\n  }\n\n  static async storeLogEntry(self, input) {\n    if (input == null) return -1;\n    // cap the amount of data that can be stored\n    const storageLimit = Utils.clamp(self.settings['storage-limit'].value, 0, 50);\n    // round the time to the nearest min. For example 15min. 1:00, 1:15\n    const minuteRound = Utils.clamp(self.settings['minuteRoundValue'].value, 0, 60);\n    const now = minuteRound ? await self.nearestFutureMinutes(minuteRound, moment()) : moment();\n\n    // object data\n    let msg = {\n      payload: input,\n      timestamp: now._d,\n    };\n    // add alarm values\n    for (\n      var i = self.properties['dynamicInputStartPosition'];\n      i < self.properties['dynamicInputStartPosition'] + Number(self.properties['alarmsCount']);\n      i++\n    ) {\n      let alarmNum = i - self.properties['dynamicInputStartPosition'] + 1;\n      let alarmName = self.settings['alarm' + alarmNum].value || 'alarm' + alarmNum;\n      msg[alarmName] = self.getInputData(i) || 'null';\n    }\n    // add tags\n    var tags = [];\n    var j = 1;\n    while (j <= Number(self.properties['tagsCount'])) {\n      if (self.settings['tag' + j].value) tags.push(self.settings['tag' + j].value);\n      j++;\n    }\n    msg['tags'] = tags;\n\n    // build an object\n    self.properties['obj'].push(msg);\n    while (self.properties['obj'].length > storageLimit) {\n      self.properties['obj'].shift();\n    }\n    self.properties['lastHistoryValue'] = input;\n    NodeUtils.persistProperties(self, true, true, true);\n    //HistoryConfig.persistProperties(self);\n    return self.properties['obj'].length;\n  }\n\n  static async checkCOV(self, input) {\n    if (!self.settings['historyMode'].value) {\n      // if COV mode\n      const threshold = self.settings['threshold'].value;\n      if (threshold === 0 && input !== self.properties['lastHistoryValue']) return true;\n      const isNumber = typeof input === 'number';\n      if (input !== self.properties['lastHistoryValue']) {\n        if (\n          typeof self.properties['lastHistoryValue'] !== 'number' ||\n          !isNumber ||\n          (isNumber && Math.abs(input - self.properties['lastHistoryValue']) >= self.settings['threshold'].value)\n        )\n          return true;\n      }\n    }\n    return false;\n  }\n\n  static setPeriodicLogging(self) {\n    if (self.settings['historyMode'].value == 1 && !self.useInterval) {\n      self.useInterval = true;\n      let interval = self.settings['period'].value;\n      interval = TimeUtils.timeConvert(interval, self.settings['periodUnits'].value);\n      self.timeoutFunc = setInterval(async () => {\n        let input = null;\n        if (self.properties['isOutput']) input = self.getInputData(self.properties['valueInput']);\n        else input = self.outputs[self.properties['valueInput']].data;\n        await HistoryConfig.storeLogEntry(self, input);\n        if (self.properties['obj'].length > 0) await HistoryConfig.trySendStoredData(self);\n        self.setOutputData(self.storedHistCountOutput, self.properties['obj'].length);\n        // add status output\n      }, interval);\n    } else if (self.settings['historyMode'].value != 1 && self.useInterval) {\n      self.useInterval = false;\n      clearInterval(self.timeoutFunc);\n    }\n  }\n\n  static nearestFutureMinutes(interval, someMoment) {\n    const roundedMinutes = Math.ceil(someMoment.minute() / interval) * interval;\n    return someMoment\n      .clone()\n      .minute(roundedMinutes)\n      .second(0);\n  }\n\n  static changeAlarmsCount(self, target_count) {\n    if (target_count > 10) {\n      target_count = 10;\n      self.settings['alarms_count'].value = 10;\n    } else if (target_count < 0) {\n      target_count = 0;\n      self.settings['alarms_count'].value = 0;\n    }\n    self.properties['alarmsCount'] = Number(self.properties['alarmsCount']);\n    let diff = target_count - self.properties['alarmsCount'];\n    if (diff == 0) return;\n\n    //add inputs\n    self.changeInputsCount(target_count + self.properties['dynamicInputStartPosition'], Type.STRING);\n\n    //change settings for topics\n    var alarmsToAdd = {};\n    if (diff > 0) {\n      for (let i = self.properties['alarmsCount'] + 1; i <= target_count; i++) {\n        alarmsToAdd['alarm' + i] = {\n          description: 'Alarm ' + i,\n          value: '',\n          type: SettingType.STRING,\n        };\n      }\n      if (self.properties['alarmsCount'] <= 0)\n        self.settings = SettingUtils.insertIntoObjectAtPosition(self.settings, alarmsToAdd, 'alarms_count');\n      else\n        self.settings = SettingUtils.insertIntoObjectAtPosition(\n          self.settings,\n          alarmsToAdd,\n          'alarm' + self.properties['alarmsCount'],\n        );\n    } else if (diff < 0) {\n      for (let i = self.properties['alarmsCount']; i > target_count; i--) {\n        delete self.settings['alarm' + i];\n      }\n    }\n    self.properties['alarmsCount'] = target_count;\n  }\n\n  static renameAlarmInputs(self) {\n    for (let i = 1; i <= self.properties['alarmsCount']; i++) {\n      //this.inputs[i].name = '[' + i + ']';\n      let alarm = self.settings['alarm' + i].value;\n      if (alarm.length > 20) alarm = '...' + alarm.substr(alarm.length - 20, 20);\n      self.inputs[self.properties['dynamicInputStartPosition'] + i - 1].name = 'alarm' + i + ' | ' + alarm;\n    }\n\n    if (self.side == Side.editor) {\n      for (let i = 1; i <= self.properties['alarmsCount']; i++) {\n        self.inputs[self.properties['dynamicInputStartPosition'] + i - 1].label =\n          self.inputs[self.properties['dynamicInputStartPosition'] + i - 1].name;\n      }\n      self.setDirtyCanvas(true, true);\n    }\n  }\n\n  static changeTagsCount(self, target_count) {\n    if (target_count > 10) {\n      target_count = 10;\n      self.settings['tags_count'].value = 10;\n    } else if (target_count < 0) {\n      target_count = 0;\n      self.settings['tags_count'].value = 0;\n    }\n    self.properties['tagsCount'] = Number(self.properties['tagsCount']);\n    let diff = target_count - self.properties['tagsCount'];\n    if (diff == 0) return;\n\n    //change settings for topics\n    var tagsToAdd = {};\n    if (diff > 0) {\n      for (let i = self.properties['tagsCount'] + 1; i <= target_count; i++) {\n        tagsToAdd['tag' + i] = {\n          description: 'Tag ' + i,\n          value: '',\n          type: SettingType.STRING,\n        };\n      }\n      if (self.properties['tagsCount'] == 0)\n        self.settings = SettingUtils.insertIntoObjectAtPosition(self.settings, tagsToAdd, 'tags_count');\n      else\n        self.settings = SettingUtils.insertIntoObjectAtPosition(\n          self.settings,\n          tagsToAdd,\n          'tag' + self.properties['tagsCount'],\n        );\n    } else if (diff < 0) {\n      for (let i = self.properties['tagsCount']; i > target_count; i--) {\n        delete self.settings['tag' + i];\n      }\n    }\n    self.properties['tagsCount'] = target_count;\n  }\n\n  // static getDeviceID(self): Promise<Array<any>> {\n  //   return new Promise((resolve, reject) => {\n  //     try {\n  //       HistoryConfig.findMainContainer(self).db.getNodeType('system/platform', (err, docs) => {\n  //         if (!err) {\n  //           let output = [];\n  //           output.push(docs);\n  //           if (output[0] && output[0][0] && output[0][0].properties) {\n  //             resolve(output[0][0].properties['deviceID'].trim());\n  //             return output[0][0].properties['deviceID'].trim();\n  //           } else {\n  //           }\n  //           resolve(output);\n  //           return output;\n  //         } else {\n  //           console.log(err);\n  //           reject(err);\n  //         }\n  //       });\n  //     } catch (error) {\n  //       console.log(error);\n  //     }\n  //   });\n  // }\n\n  // static getClientID(self): Promise<Array<any>> {\n  //   return new Promise((resolve, reject) => {\n  //     try {\n  //       HistoryConfig.findMainContainer(self).db.getNodeType('system/platform', (err, docs) => {\n  //         if (!err) {\n  //           let output = [];\n  //           output.push(docs);\n  //           if (output[0] && output[0][0] && output[0][0].settings) {\n  //             resolve(output[0][0].settings['clientId'].value.trim());\n  //             return output[0][0].settings['clientId'].value.trim();\n  //           } else {\n  //           }\n  //           resolve(output);\n  //           return output;\n  //         } else {\n  //           console.log(err);\n  //           reject(err);\n  //         }\n  //       });\n  //     } catch (error) {\n  //       console.log(error);\n  //     }\n  //   });\n  // }\n\n  static findMainContainer(self) {\n    if (self.hasOwnProperty('container')) return HistoryConfig.findMainContainer(self.container);\n    else return self;\n  }\n\n  static persistProperties(self) {\n    if (!self.container.db) return;\n    self.container.db.updateNode(self.id, self.container.id, {\n      $set: {\n        properties: self.properties,\n        inputs: self.inputs,\n        settings: self.settings,\n      },\n    });\n  }\n}\n","/******************************************************\n *\n * Node Constructor should include the following:\n * Add this line in the settings setup, where the history settings should appear:\n *      PriorityConfig.addPrioritySettings(this);\n *\n * Add this line at the end after this.setSettingsConfig() has been called,\n * or if this.setSettingsConfig() has not been used, then add this line after settings setup in Node Constructor:\n *      PriorityConfig.addPrioritySettingsConfig(this);\n *\n *\n * Node Functions should include the following:\n *     async onInputUpdated() {\n *       if (this.side !== Side.server) return; // only execute on server\n *       PriorityConfig.doPriorityFunctions(this);\n *     }\n *\n *     onAfterSettingsChange() {\n *       PriorityConfig.priorityFunctionsForAfterSettingsChange(this);\n         PriorityConfig.doPriorityFunctions(this);\n *       if (this.side !== Side.server) return; // HISTORY FUNCTONS MUST BE DONE ON BOTH SIDES\n *     }\n *\n */\n\nimport { SettingType, Type } from '../../node-io';\nimport NodeUtils from '../../utils/node-utils';\n//import { tagsAll } from './tags';\n\nexport default class PriorityConfig {\n  static addPrioritySettings(self) {\n    self.properties['priorityStartInput'] = self.getFreeInputId();\n    self.properties['priorityStartOutput'] = self.getFreeOutputId();\n    self.addInput('inputValue', Type.ANY);\n    self.addInput('inputPriority', Type.NUMBER);\n    self.addOutput('outputValue', Type.ANY);\n    self.addOutput('outputPriority', Type.NUMBER);\n    self.addOutput('outputJSON', Type.STRING);\n\n    for (let input in self.inputs) {\n      if (self.inputs[input].name == 'inputValue') {\n        self.properties['valueInput'] = input;\n      } else if (self.inputs[input].name == 'inputPriority') self.properties['priorityInput'] = input;\n    }\n\n    for (let output in self.outputs) {\n      if (self.outputs[output].name == 'outputValue') {\n        self.properties['valueOutput'] = output;\n      } else if (self.outputs[output].name == 'outputPriority') {\n        self.properties['priorityOutput'] = output;\n      } else if (self.outputs[output].name == 'outputJSON') self.properties['jsonOutput'] = output;\n    }\n\n    /**\n     Point settings\n     */\n    self.settings['input_group'] = {\n      description: 'Input Settings',\n      value: '',\n      type: SettingType.GROUP,\n    };\n\n    self.settings['decimals'] = {\n      description: 'Decimal Places (Limit 5)',\n      value: 3,\n      type: SettingType.NUMBER,\n    };\n\n    self.settings['inputMethod'] = {\n      description: 'Input Method',\n      type: SettingType.DROPDOWN,\n      config: {\n        items: [\n          { value: 0, text: 'Value and Priority' },\n          { value: 1, text: 'Priority Array' },\n          { value: 2, text: 'JSON' },\n        ],\n      },\n      value: 0,\n    };\n\n    // SETTINGS FOR \"VALUE AND PRIORITY\"\n    self.properties['priorityLevelItems'] = Array(16)\n      .fill(null)\n      .map((_, i) => ({ value: i + 1, text: (i + 1).toString() }));\n\n    self.settings['priorityLevel'] = {\n      description: 'Write Priority Level',\n      type: SettingType.DROPDOWN,\n      config: {\n        items: self.properties['priorityLevelItems'],\n      },\n      value: 16,\n    };\n\n    // SETTINGS FOR \"PRIORITY ARRAY\"\n    self.settings['in1'] = {\n      description: 'in1',\n      value: false,\n      type: SettingType.BOOLEAN,\n    };\n    self.settings['in2'] = {\n      description: 'in2',\n      value: false,\n      type: SettingType.BOOLEAN,\n    };\n    self.settings['in3'] = {\n      description: 'in3',\n      value: false,\n      type: SettingType.BOOLEAN,\n    };\n    self.settings['in4'] = {\n      description: 'in4',\n      value: false,\n      type: SettingType.BOOLEAN,\n    };\n    self.settings['in5'] = {\n      description: 'in5',\n      value: false,\n      type: SettingType.BOOLEAN,\n    };\n    self.settings['in6'] = {\n      description: 'in6',\n      value: false,\n      type: SettingType.BOOLEAN,\n    };\n    self.settings['in7'] = {\n      description: 'in7',\n      value: false,\n      type: SettingType.BOOLEAN,\n    };\n    self.settings['in8'] = {\n      description: 'in8',\n      value: false,\n      type: SettingType.BOOLEAN,\n    };\n    self.settings['in9'] = {\n      description: 'in9',\n      value: false,\n      type: SettingType.BOOLEAN,\n    };\n    self.settings['in10'] = {\n      description: 'in10',\n      value: false,\n      type: SettingType.BOOLEAN,\n    };\n    self.settings['in11'] = {\n      description: 'in11',\n      value: false,\n      type: SettingType.BOOLEAN,\n    };\n    self.settings['in12'] = {\n      description: 'in12',\n      value: false,\n      type: SettingType.BOOLEAN,\n    };\n    self.settings['in13'] = {\n      description: 'in13',\n      value: false,\n      type: SettingType.BOOLEAN,\n    };\n    self.settings['in14'] = {\n      description: 'in14',\n      value: false,\n      type: SettingType.BOOLEAN,\n    };\n    self.settings['in15'] = {\n      description: 'in15',\n      value: false,\n      type: SettingType.BOOLEAN,\n    };\n    self.settings['in16'] = {\n      description: 'in16',\n      value: false,\n      type: SettingType.BOOLEAN,\n    };\n  }\n\n  static addPrioritySettingsConfig(self) {\n    if (!self.settingConfigs.hasOwnProperty('groups') && !self.settingConfigs.hasOwnProperty('conditions')) {\n      self.setSettingsConfig({ groups: [], conditions: {} });\n    }\n    self.settingConfigs.groups.push({ input_group: {} });\n    self.settingConfigs.conditions['priorityLevel'] = setting => {\n      return setting['inputMethod'].value == 0;\n    };\n    self.settingConfigs.conditions['in1'] = setting => {\n      return setting['inputMethod'].value == 1;\n    };\n    self.settingConfigs.conditions['in2'] = setting => {\n      return setting['inputMethod'].value == 1;\n    };\n    self.settingConfigs.conditions['in3'] = setting => {\n      return setting['inputMethod'].value == 1;\n    };\n    self.settingConfigs.conditions['in4'] = setting => {\n      return setting['inputMethod'].value == 1;\n    };\n    self.settingConfigs.conditions['in5'] = setting => {\n      return setting['inputMethod'].value == 1;\n    };\n    self.settingConfigs.conditions['in6'] = setting => {\n      return setting['inputMethod'].value == 1;\n    };\n    self.settingConfigs.conditions['in7'] = setting => {\n      return setting['inputMethod'].value == 1;\n    };\n    self.settingConfigs.conditions['in8'] = setting => {\n      return setting['inputMethod'].value == 1;\n    };\n    self.settingConfigs.conditions['in9'] = setting => {\n      return setting['inputMethod'].value == 1;\n    };\n    self.settingConfigs.conditions['in10'] = setting => {\n      return setting['inputMethod'].value == 1;\n    };\n    self.settingConfigs.conditions['in11'] = setting => {\n      return setting['inputMethod'].value == 1;\n    };\n    self.settingConfigs.conditions['in12'] = setting => {\n      return setting['inputMethod'].value == 1;\n    };\n    self.settingConfigs.conditions['in13'] = setting => {\n      return setting['inputMethod'].value == 1;\n    };\n    self.settingConfigs.conditions['in14'] = setting => {\n      return setting['inputMethod'].value == 1;\n    };\n    self.settingConfigs.conditions['in15'] = setting => {\n      return setting['inputMethod'].value == 1;\n    };\n    self.settingConfigs.conditions['in16'] = setting => {\n      return setting['inputMethod'].value == 1;\n    };\n\n    //self.properties['priorityArray'] = new Array<Object>(16).fill(null);\n    self.properties['priorityArray'] = {};\n    for (var i = 1; i < 16; i++) {\n      self.properties['priorityArray'][String(i)] = null;\n    }\n    self.properties['inputMethod'] = self.settings['inputMethod'].value;\n    self.properties['prioritySettingsArray'] = new Array<Object>(16).fill(false);\n  }\n\n  static priorityOnCreated(self) {\n    self.properties['dynamicInputStartPosition'] = self.getInputsCount();\n    NodeUtils.persistProperties(self, true, true, true, true);\n  }\n\n  static async doPriorityFunctions(self) {\n    let input = null;\n    let priority = null;\n    switch (self.properties['inputMethod']) {\n      case 0:\n        input = self.getInputData(self.properties['priorityStartInput']);\n        if (input == undefined) input = null;\n        priority = self.getInputData(self.properties['priorityStartInput'] + 1) || 16;\n        if (priority > 16 || priority == null) priority = 16;\n        //self.properties['priorityArray'][`${priority-1}`] = input;\n        self.properties['priorityArray'][String(priority)] = input;\n        break;\n      case 1:\n        var inputsCount = 0;\n        self.properties['prioritySettingsArray'].forEach(setting => {\n          if (setting) inputsCount++;\n        });\n        for (var i = 0; i < inputsCount; i++) {\n          input = self.getInputData(self.properties['priorityStartInput'] + i);\n          if (input == undefined) input = null;\n          const inputName = self.inputs[self.properties['priorityStartInput'] + i].name;\n          if (inputName.startsWith('in')) {\n            const inputNumber = Number(inputName.replace(/\\D/g, ''));\n            if (!isNaN(inputNumber)) {\n              self.properties['priorityArray'][`${inputNumber}`] = input;\n            }\n          }\n        }\n        break;\n      case 2:\n        input = self.getInputData(self.properties['priorityStartInput']);\n        if (typeof input === 'string') {\n          try {\n            self.properties['priorityArray'] = JSON.parse(input);\n          } catch (e) {\n            console.log('PRIORITY ARRAY JSON ERROR: ', e);\n          }\n        }\n        break;\n    }\n\n    // CODE FOR A FUTURE INPUT METHOD\n    /*\n    if (payload.hasOwnProperty('priority') && payload.hasOwnProperty('value')) {\n      const priority = parseInt(payload['priority']);\n      if (isNaN(priority) || priority < 1 || priority > 16) {\n        this.debugErr('Invalid priority');\n        return;\n      }\n      // Release override\n      if (payload.value === '' || payload.value === null) {\n        this.priorityArray[priority - 1] = {}; // 1 priority on 0 position, 2 on 1 and so on...\n      } else {\n        this.priorityArray[priority - 1] = payload;\n      }\n    }\n    */\n\n    //const highestPriorityIndex = self.properties['priorityArray'].findIndex(\n    const highestPriorityIndex =\n      Object.values(self.properties['priorityArray']).findIndex(element => element != null) + 1;\n\n    if (highestPriorityIndex <= 0) {\n      self.setOutputData(self.properties['priorityStartOutput'], null);\n      self.setOutputData(self.properties['priorityStartOutput'] + 1, null);\n      self.setOutputData(self.properties['priorityStartOutput'] + 2, null);\n    } else {\n      self.setOutputData(\n        self.properties['priorityStartOutput'],\n        self.properties['priorityArray'][String(highestPriorityIndex)],\n      );\n      self.setOutputData(self.properties['priorityStartOutput'] + 1, highestPriorityIndex);\n      self.setOutputData(self.properties['priorityStartOutput'] + 2, self.properties['priorityArray']);\n    }\n  }\n\n  static async priorityFunctionsForAfterSettingsChange(self) {\n    if (self.properties['inputMethod'] !== self.settings['inputMethod'].value) {\n      PriorityConfig.initializePriorityArray(self);\n      switch (self.settings['inputMethod'].value) {\n        case 0:\n          if (self.properties['inputMethod'] == 2) {\n            self.removeInputAtPosition(self.properties['priorityStartInput']);\n          } else if (self.properties['inputMethod'] == 1) {\n            PriorityConfig.updatePriorityInputsFromSettings(self, true);\n          }\n          self.addInputAtPosition(self.properties['priorityStartInput'], 'inputValue', Type.ANY);\n          self.addInputAtPosition(self.properties['priorityStartInput'] + 1, 'inputPriority', Type.NUMBER);\n          break;\n        case 1:\n          if (self.properties['inputMethod'] == 2) {\n            self.removeInputAtPosition(self.properties['priorityStartInput']);\n          } else if (self.properties['inputMethod'] == 0) {\n            self.removeInputAtPosition(self.properties['priorityStartInput']);\n            self.removeInputAtPosition(self.properties['priorityStartInput']);\n          }\n          PriorityConfig.updatePriorityInputsFromSettings(self);\n          break;\n        case 2:\n          if (self.properties['inputMethod'] == 1) {\n            PriorityConfig.updatePriorityInputsFromSettings(self, true);\n          } else if (self.properties['inputMethod'] == 0) {\n            self.removeInputAtPosition(self.properties['priorityStartInput']);\n            self.removeInputAtPosition(self.properties['priorityStartInput']);\n          }\n          self.addInputAtPosition(self.properties['priorityStartInput'], 'inputJSON', Type.ANY);\n          break;\n      }\n    } else if (self.properties['inputMethod'] == 1) PriorityConfig.updatePriorityInputsFromSettings(self);\n    self.properties['inputMethod'] = self.settings['inputMethod'].value;\n    NodeUtils.persistProperties(self, true, true, true);\n  }\n\n  static async updatePriorityInputsFromSettings(self, removeAll = false) {\n    const startPosition = self.properties['priorityStartInput'];\n    var settingsArray = new Array(16).fill(false);\n    var inputsArray = new Array(16).fill(-1);\n    //console.log('INPUTS BEFORE', self.inputs)\n\n    for (var i = 0; i < 16; i++) {\n      removeAll ? (settingsArray[i] = false) : (settingsArray[i] = self.settings['in' + (i + 1)].value);\n      if (self.inputs.hasOwnProperty(`${startPosition + i}`)) {\n        const inputName = self.inputs[`${startPosition + i}`].name;\n        if (inputName.startsWith('in')) {\n          const inputNumber = Number(inputName.replace(/\\D/g, ''));\n          if (!isNaN(inputNumber)) {\n            inputsArray[i] = inputNumber;\n          }\n        }\n      }\n      self.properties['prioritySettingsArray'] = settingsArray;\n    }\n    //console.log('settingsArray', settingsArray)\n    //console.log('inputsArray', inputsArray)\n\n    for (var j = 0; j < 16; j++) {\n      //console.log('J', j)\n      if (settingsArray[j]) {\n        for (var y = 0; y <= j; y++) {\n          //console.log('Y', y)\n          const inputArrayatY = inputsArray[y];\n          //console.log('inputArrayatY', inputArrayatY)\n          if (inputArrayatY == j + 1) break;\n          //console.log('pastBreak')\n          if (inputArrayatY == -1 || inputArrayatY > j + 1) {\n            self.addInputAtPosition(startPosition + y, 'in' + (j + 1), Type.ANY);\n            inputsArray.splice(y, 0, j + 1);\n            inputsArray.pop();\n            //console.log('inputsArray', inputsArray);\n            //console.log('INPUTS', self.inputs)\n            break;\n          }\n        }\n      } else if (!settingsArray[j]) {\n        for (var x = 0; x <= j; x++) {\n          //console.log('X', x)\n          const inputArrayatX = inputsArray[x];\n          if (inputArrayatX == -1 || inputArrayatX > j + 1) {\n            break;\n          } else if (inputsArray[x] == j + 1) {\n            self.removeInputAtPosition(startPosition + x);\n            inputsArray.splice(x, 1);\n            inputsArray.push(-1);\n            //console.log('inputsArray', inputsArray)\n            //console.log('INPUTS', self.inputs)\n            break;\n          }\n        }\n      }\n    }\n  }\n\n  static async initializePriorityArray(self) {\n    self.properties['priorityArray'] = {};\n    for (var i = 1; i < 16; i++) {\n      self.properties['priorityArray'][String(i)] = null;\n    }\n  }\n}\n","import * as nodemailer from 'nodemailer';\nimport { Container } from '../../../container';\nimport { Node } from '../../../node';\nimport { NODE_INFO } from '../../../node-info';\nimport { Side } from '../../../node-interface';\nimport { NodeSetting, SettingType, Type } from '../../../node-io';\nimport Utils from '../../../utils';\nimport CryptoUtils from '../../../utils/crypto-utils';\n\nclass EmailNode extends Node {\n  lastTrigger: boolean;\n  // Supported services: https://github.com/nodemailer/nodemailer/blob/master/lib/well-known/services.json\n  services = ['Gmail', 'Hotmail', 'Outlook365', 'Yahoo'].map(service => {\n    return { value: service, text: service };\n  });\n  constructor() {\n    super();\n    this.title = NODE_INFO[\"protocols/misc\"].email.title;\n    this.description = NODE_INFO[\"protocols/misc\"].email.description;\n    this.settings['service'] = NodeSetting.create({\n      description: 'Service',\n      value: this.services[0].value,\n      type: SettingType.DROPDOWN,\n      config: {\n        items: this.services,\n      },\n    });\n    this.settings['user'] = NodeSetting.create({ description: 'Email', value: '', type: SettingType.STRING });\n    this.settings['pass'] = NodeSetting.create({ description: 'Password', value: '', type: SettingType.PASSWORD });\n    this.addInput('trigger', Type.BOOLEAN);\n    this.addInputWithSettings('recipient', Type.STRING, '', 'To', false);\n    this.addInputWithSettings('subject', Type.STRING, '', 'Subject', false);\n    this.addInputWithSettings('message', Type.STRING, '', 'Message', false);\n    this.addOutput('response', Type.STRING);\n    this.addOutput('error', Type.STRING);\n  }\n\n  onInputUpdated() {\n    if (this.side !== Side.server) return; // only execute on server\n\n    let trigger = this.getInputData(0);\n    if (!Utils.hasInput(trigger)) trigger = false;\n    if (trigger == this.lastTrigger) return;\n    else this.lastTrigger = trigger;\n    if (trigger == false) return;\n\n    const service = this.settings['service'].value;\n    const user = this.settings['user'].value;\n    const from = user;\n    const pass = this.settings['pass'].value;\n    const to = this.getInputData(1);\n    const subject = this.getInputData(2);\n    const text = this.getInputData(3);\n\n    const transporter = nodemailer.createTransport({\n      service,\n      auth: { user, pass: CryptoUtils.decrypt(pass) },\n    });\n\n    transporter.sendMail({ from, to, subject, text }, error => {\n      if (error) {\n        this.emitError(error.message);\n      } else {\n        this.emitResult(true);\n      }\n    });\n  }\n\n  emitResult(result) {\n    this.setOutputData(0, result);\n    this.setOutputData(1, null);\n  }\n\n  emitError(body) {\n    this.setOutputData(0, null);\n    this.setOutputData(1, body);\n  }\n}\n\nContainer.registerNodeType('protocols/misc/email', EmailNode);\n","module.exports = require(\"nodemailer\");","import { default as axios, Method } from 'axios';\nimport { Container } from '../../../container';\nimport { Node } from '../../../node';\nimport { NODE_INFO } from '../../../node-info';\nimport { NodeSetting, SettingType } from '../../../node-io';\n\nenum HttpMethod {\n  GET = 'GET',\n  POST = 'POST',\n  PUT = 'PUT',\n  DELETE = 'DELETE',\n  PATCH = 'PATCH',\n}\n\nclass HttpClientNode extends Node {\n  constructor() {\n    super();\n    this.title = NODE_INFO[\"protocols/http\"][\"http-client\"].title;\n    this.description = NODE_INFO[\"protocols/http\"][\"http-client\"].description;\n    this.addInput('request body');\n    this.addOutput('response');\n    this.settings['enable'] = NodeSetting.create({ description: 'Enable', value: true, type: SettingType.BOOLEAN });\n    this.settings['method'] = NodeSetting.create({\n      description: 'Request Method',\n      value: HttpMethod.GET,\n      type: SettingType.DROPDOWN,\n      config: {\n        items: Object.keys(HttpMethod),\n      },\n    });\n    this.settings['url'] = NodeSetting.create({ description: 'HTTP URL', value: 'http://', type: SettingType.STRING });\n  }\n\n  onInputUpdated() {\n    if (!this.isEnabled()) return;\n    const methodsWithBody = [HttpMethod.PATCH, HttpMethod.PUT, HttpMethod.POST].map(v =>\n      v.toString().toLowerCase(),\n    );\n    const url = this.getSanitizedUrl();\n    const method = this.getSanitizedMethod();\n    const input_data = this.inputs[0].data;\n    const data =\n      methodsWithBody.includes(method) && typeof input_data === 'object' ? input_data : undefined;\n    try {\n      this.validateMethod(method);\n      axios.request({ url, method, data }).then(\n        r => this.setOutputData(0, r.data),\n        e => this.debugErr(e.message),\n      );\n    } catch (e) {\n      this.debugErr(e.message);\n    }\n  }\n\n  isEnabled(): boolean {\n    return this.settings['enable'].value;\n  }\n\n  getSanitizedUrl(): string {\n    return this.settings['url'].value.trim();\n  }\n\n  getSanitizedMethod(): Method {\n    return this.settings['method'].value.trim().toLowerCase();\n  }\n\n  validateMethod(method: string) {\n    if (Object.keys(HttpMethod).indexOf(method.toUpperCase()) === -1) {\n      throw new Error('Unknown HTTP request method: ' + method);\n    }\n  }\n\n  onCreated() {}\n  onAdded() {}\n  onAfterSettingsChange() {}\n}\n\nContainer.registerNodeType('protocols/http-client', HttpClientNode);\n","import axios from 'axios';\nimport { EDGE_28_NETWORK } from '../../../constants';\nimport { Container } from '../../../container';\nimport { ContainerNode } from '../../../container-node';\nimport { Node } from '../../../node';\nimport Icons from '../../../node-icons';\nimport { NODE_INFO } from '../../../node-info';\nimport { Side } from '../../../node-interface';\nimport { NodeSetting, SettingType, Type } from '../../../node-io';\nimport Utils from '../../../utils';\nimport TimeUtils from '../../../utils/time-utils';\nimport { ADD_POINT, edgeApiVer, edgeIp, edgePort, REMOVE_POINT } from './edge-constant';\nimport Edge28Utils from './edge-utils';\n\nclass Edge28ApiNode extends ContainerNode {\n  // point object\n  pointNodes: Array<Node> = [];\n  edgeReadDI_Store: {};\n  edgeReadUI_Store: {};\n\n  // node inputs\n  inAlarmTrigger = 0;\n  inHistoryTrigger = 1;\n  inInput = 2;\n\n  // node outputs\n  outVal = 0;\n  outError = 1;\n  outMessageJson = 2;\n  outAlarm = 3;\n\n  lastInterval = 1000;\n  runState: boolean = true;\n  UI_timeoutFunc;\n  DI_timeoutFunc;\n  _ui = 'ui';\n  _di = 'di';\n\n  constructor() {\n    super();\n    this.title = NODE_INFO[\"protocols/nube\"][\"edge-28-network\"].title;\n    this.description = NODE_INFO[\"protocols/nube\"][\"edge-28-network\"].description;\n    if (this.side !== Side.server) {\n      this.iconImageUrl = NODE_INFO[\"protocols/nube\"][\"edge-28-network\"].iconImageUrl;\n    }\n\n    this.addInputWithSettings('enable', Type.BOOLEAN, true, 'Enable');\n    this.addInputWithSettings('interval', Type.NUMBER, 2, 'Polling Interval');\n    this.addOutput('connected', Type.BOOLEAN);\n    this.addOutput('error', Type.STRING);\n\n    this.headerColor = '#184840';\n    this.settings['time'] = NodeSetting.create({\n      description: 'Polling Interval Time Setting',\n      type: SettingType.DROPDOWN,\n      config: {\n        items: [\n          // { value: 'milliseconds', text: 'Milliseconds' },\n          { value: 'seconds', text: 'Seconds' },\n          { value: 'minutes', text: 'Minutes' },\n          { value: 'hours', text: 'Hours' },\n        ],\n      },\n      value: 'seconds',\n    });\n    this.setSettingsConfig({\n      groups: [{ interval: { weight: 2 }, time: {} }],\n    });\n  }\n\n  async fetchPointValue(host: string, port: number, apiVer: string, pointType: string): Promise<any> {\n    const url = `${Utils.buildUrl(host, port)}/api/${apiVer}/read/all/${pointType}`;\n    const pointValue = await axios.get(url);\n    return pointValue.data;\n  }\n\n  async onAdded() {\n    super.onAdded();\n    this.inputs[1]['name'] = `[interval] (${this.settings['time'].value})`;\n    clearInterval(this.UI_timeoutFunc);\n    clearInterval(this.DI_timeoutFunc);\n    let enable = this.getInputData(0);\n    if (!enable) {\n      this.setOutputData(0, false); //connected\n      this.runState = false;\n      return;\n    }\n    let interval = this.getInputData(1);\n    interval = TimeUtils.timeConvert(interval, this.settings['time'].value);\n    this.startInputPolling(interval);\n    await this.onInputUpdated();\n  }\n\n  async onRemoved() {\n    super.onRemoved();\n    clearInterval(this.UI_timeoutFunc);\n    clearInterval(this.DI_timeoutFunc);\n  }\n\n  startInputPolling(interval: number) {\n    if (this.side !== Side.server) return;\n    this.UI_timeoutFunc = setInterval(async () => {\n      // get UIs\n      await this.pollUIs();\n      this.sendPayloadToPointNodesFunc();\n    }, interval);\n    this.DI_timeoutFunc = setInterval(async () => {\n      // get DIs\n      await this.pollDIs();\n      this.sendPayloadToPointNodesFunc();\n    }, interval + 5);\n  }\n\n  async pollUIs() {\n    try {\n      this.edgeReadUI_Store = await this.fetchPointValue(edgeIp, edgePort, edgeApiVer, this._ui);\n      this.setOutputData(0, true); //connected\n      this.setOutputData(1, false); //error\n      // NodeColours.nodeColourChange(this, NodeState.ONLINE);\n    } catch (err) {\n      this.debugInfo(`ERROR: getting edge point type: ${this._ui} ${err}`);\n      this.setOutputData(0, false); //connected\n      this.setOutputData(1, true); //error\n      // NodeColours.nodeColourChange(this, NodeState.OFFLINE);\n    }\n  }\n\n  async pollDIs() {\n    try {\n      this.edgeReadDI_Store = await this.fetchPointValue(edgeIp, edgePort, edgeApiVer, this._di);\n      this.setOutputData(0, true); //connected\n      this.setOutputData(1, false); //error\n      // NodeColours.nodeColourChange(this, NodeState.ONLINE);\n    } catch (err) {\n      this.debugInfo(`ERROR: getting edge point type: ${this._di} ${err}`);\n      this.setOutputData(0, false); //connected\n      this.setOutputData(1, true); //error\n      // NodeColours.nodeColourChange(this, NodeState.OFFLINE);\n    }\n  }\n\n  async pollInputsAndSend() {\n    if (this.side !== Side.server) return;\n    await this.pollUIs();\n    await this.pollDIs();\n    this.sendPayloadToPointNodesFunc();\n  }\n\n  sendPayloadToPointNodesFunc() {\n    if (this.side !== Side.server) return;\n    for (let pointNode of this.pointNodes) {\n      Edge28Utils.sendPayloadToChild(pointNode, {\n        pointsDI: this.edgeReadDI_Store,\n        pointsUI: this.edgeReadUI_Store,\n      });\n    }\n  }\n\n  subscribe({ action, payload }) {\n    switch (action) {\n      case ADD_POINT:\n        this.pointNodes.push(payload);\n        break;\n      case REMOVE_POINT:\n        this.pointNodes = this.pointNodes.filter(pointNode => pointNode.id !== payload.id);\n        break;\n      default:\n        this.debugWarn(\"Request action doesn't match\");\n    }\n  }\n\n  async onInputUpdated() {\n    if (this.side !== Side.server) return;\n    let enable = this.getInputData(0);\n    if (!enable && this.runState) {\n      clearInterval(this.UI_timeoutFunc);\n      clearInterval(this.DI_timeoutFunc);\n      this.setOutputData(0, false, true); //connected\n      this.runState = false;\n      return;\n    } else if (!enable && !this.runState) {\n      this.setOutputData(0, false, true); //connected\n      this.runState = false;\n      return;\n    } else if (enable) {\n      let interval = this.getInputData(1);\n      interval = TimeUtils.timeConvert(interval, this.settings['time'].value);\n      if (this.runState) {\n        if (interval != this.lastInterval) {\n          this.lastInterval = interval;\n          clearInterval(this.UI_timeoutFunc);\n          clearInterval(this.DI_timeoutFunc);\n          this.startInputPolling(interval);\n        }\n        return;\n      } else if (!this.runState) {\n        this.runState = true;\n        this.startInputPolling(interval);\n        return;\n      }\n      await this.pollInputsAndSend();\n    }\n  }\n\n  async onAfterSettingsChange(oldSettings: any) {\n    super.onAfterSettingsChange(oldSettings);\n    if (this.side !== Side.server) return;\n    await this.onInputUpdated();\n  }\n}\n\nContainer.registerNodeType(EDGE_28_NETWORK, Edge28ApiNode);\n","import { EDGE_28_INPUT, EDGE_28_NETWORK } from '../../../constants';\nimport { Container } from '../../../container';\nimport { NodeState } from '../../../node';\nimport { NODE_INFO } from '../../../node-info';\nimport { Side } from '../../../node-interface';\nimport { NodeSetting, SettingType, Type } from '../../../node-io';\nimport Utils from '../../../utils';\nimport MathUtils, { MATH_FUNC_TYPE } from '../../../utils/MathUtils';\nimport BACnetEnumsUnits from '../../../utils/points/BACnet-enums-units';\nimport HistoryBase from '../../history/HistoryBase';\nimport Edge10kSensorUtils from './edge-10k-sensor-calc';\nimport { SEND_PAYLOAD_TO_CHILD } from './edge-constant';\nimport EdgeGPIOUtils from './edge-gpio-utils';\nimport Edge28Utils from './edge-utils';\n\nenum POINT_TYPE {\n  DIGITAL = 1,\n  UI_DIGITAL = 2,\n  _0_10DC = 3,\n  _0_20MA = 4,\n  _4_20MA = 5,\n  _10K_THERMISTOR = 6,\n}\n\nenum POINT_TYPE_TEXT {\n  DIGITAL = 'Digital',\n  UI_DIGITAL = `UI-Digital`,\n  _0_10DC = `0-10dc`,\n  _0_20MA = `0-20ma`,\n  _4_20MA = `4-20ma`,\n  _10K_THERMISTOR = `10k-thermistor`,\n}\n\nclass Edge28InputPointNode extends HistoryBase {\n  out: any;\n  constructor() {\n    super();\n    this.title = NODE_INFO['protocols/nube']['edge-28-input'].title;\n    this.description = NODE_INFO['protocols/nube']['edge-28-input'].description;\n    this.addOutput('output', Type.NUMBER);\n    this.addOutput('output-json', Type.STRING);\n    this.addOutput('error', Type.STRING);\n\n    /**\n      Default point Settings (Will be in point class)\n   */\n    this.settings['pointEnable'] = NodeSetting.create({\n      description: 'Point enable',\n      value: false,\n      type: SettingType.BOOLEAN,\n    });\n    this.settings['pointDebug'] = NodeSetting.create({\n      description: 'Point Debug',\n      value: false,\n      type: SettingType.BOOLEAN,\n    });\n    this.settings['pointNumber'] = NodeSetting.create({\n      description: 'Point',\n      value: 'DI1',\n      type: SettingType.DROPDOWN,\n      config: {\n        items: [\n          { value: 'DI1', text: `DI1` },\n          { value: 'DI2', text: `DI2` },\n          { value: 'DI3', text: `DI3` },\n          { value: 'DI4', text: `DI4` },\n          { value: 'DI5', text: `DI5` },\n          { value: 'DI6', text: `DI6` },\n          { value: 'DI7', text: `DI7` },\n          { value: 'UI1', text: `UI1` },\n          { value: 'UI2', text: `UI2` },\n          { value: 'UI3', text: `UI3` },\n          { value: 'UI4', text: `UI4` },\n          { value: 'UI5', text: `UI5` },\n          { value: 'UI6', text: `UI6` },\n          { value: 'UI7', text: `UI7` },\n        ],\n      },\n    });\n    this.settings['pointType'] = NodeSetting.create({\n      description: 'Point Type',\n      value: 1,\n      type: SettingType.DROPDOWN,\n      config: {\n        items: [\n          { value: POINT_TYPE.DIGITAL, text: `Digital` },\n          { value: POINT_TYPE.UI_DIGITAL, text: `UI-Digital` },\n          { value: POINT_TYPE._0_10DC, text: `0-10dc` },\n          { value: POINT_TYPE._0_20MA, text: `0-20ma` },\n          { value: POINT_TYPE._4_20MA, text: `4-20ma` },\n          { value: POINT_TYPE._10K_THERMISTOR, text: `10k-thermistor` },\n        ],\n        value: POINT_TYPE.DIGITAL,\n      },\n    });\n\n    this.settings['value_group'] = NodeSetting.create({\n      description: 'Point Settings',\n      value: '',\n      type: SettingType.GROUP,\n    });\n    this.settings['lowScale'] = NodeSetting.create({\n      description: 'Low scale',\n      value: 0,\n      type: SettingType.NUMBER,\n    });\n    this.settings['highScale'] = NodeSetting.create({\n      description: 'High scale',\n      value: 100,\n      type: SettingType.NUMBER,\n    });\n    this.settings['decimals'] = NodeSetting.create({\n      description: 'Out value precision',\n      value: 2,\n      type: SettingType.NUMBER,\n    });\n    this.settings['offset'] = NodeSetting.create({\n      description: 'Out value offset',\n      value: 0,\n      type: SettingType.NUMBER,\n    });\n    /**\n        Point Math settings\n     */\n    this.settings['mathFunc'] = NodeSetting.create({\n      description: 'Math on output value (optional)',\n      type: SettingType.DROPDOWN,\n      config: {\n        items: [\n          { value: MATH_FUNC_TYPE.NA, text: 'na' },\n          { value: MATH_FUNC_TYPE.ADD, text: 'add' },\n          { value: MATH_FUNC_TYPE.SUBTRACT, text: 'subtract' },\n          { value: MATH_FUNC_TYPE.MULTIPLY, text: 'multiply' },\n          { value: MATH_FUNC_TYPE.DIVIDE, text: 'divide' },\n          { value: MATH_FUNC_TYPE.NUMBER_INVERT, text: 'invert' },\n        ],\n      },\n      value: MATH_FUNC_TYPE.NA,\n    });\n    this.settings['mathValue'] = NodeSetting.create({\n      description: 'Enter a value',\n      value: 1,\n      type: SettingType.NUMBER,\n    });\n\n    this.settings['units_group'] = NodeSetting.create({\n      description: 'Units (Save to get units)',\n      type: SettingType.GROUP,\n    });\n    this.settings['unitsType'] = NodeSetting.create({\n      description: 'Units',\n      type: SettingType.DROPDOWN,\n      config: {\n        items: BACnetEnumsUnits.unitCategory,\n      },\n    });\n    this.settings['units'] = NodeSetting.create({\n      description: 'Units',\n      value: BACnetEnumsUnits.COMMON_METRIC.NO_UNITS,\n      type: SettingType.DROPDOWN,\n    });\n\n    const isDigitalType = [POINT_TYPE.DIGITAL, POINT_TYPE.UI_DIGITAL];\n\n    this.setSettingsConfig({\n      groups: [\n        { pointEnable: {}, pointDebug: {} },\n        { pointNumber: {}, pointType: {} },\n        { decimals: {}, offset: {} },\n        { lowScale: {}, highScale: {} },\n        { mathFunc: {}, mathValue: {} },\n        { unitsType: {}, units: {} },\n      ],\n      conditions: {\n        decimals: setting => {\n          const val = setting['pointType'].value;\n          return !isDigitalType.includes(val);\n        },\n        offset: setting => {\n          const val = setting['pointType'].value;\n          return !isDigitalType.includes(val);\n        },\n        lowScale: setting => {\n          const val = setting['pointType'].value;\n          return !isDigitalType.includes(val);\n        },\n        highScale: setting => {\n          const val = setting['pointType'].value;\n          return !isDigitalType.includes(val);\n        },\n        mathValue: setting => {\n          const val = setting['mathFunc'].value;\n          return ![MATH_FUNC_TYPE.NUMBER_INVERT, MATH_FUNC_TYPE.NA].includes(val);\n        },\n      },\n    });\n    this.addHistorySettingsConfig(0, false);\n  }\n\n  async onAdded() {\n    this.updateTitle();\n    super.onAdded();\n    if (this.side !== Side.server) return;\n    await Utils.sleep(1000); // TODO: Since this node should start after network, import may shows issue if we don't have this\n    Edge28Utils.addPoint(this.getParentNode(), this);\n  }\n\n  async onAfterSettingsChange() {\n    await super.onAfterSettingsChange();\n    if (this.side !== Side.server) return;\n    this.updateTitle();\n    // this.nodeColour();\n    const unitsType = this.settings['unitsType'].value;\n    this.settings['units'].config = {\n      items: BACnetEnumsUnits.unitType(unitsType),\n    };\n    this.sendPointValue(this.out);\n    this.broadcastSettingsToClients();\n\n    setTimeout(() => {\n      this.settings['pointDebug'].value = false;\n      // this.broadcastSettingsToClients(); // TODO is not updating the settings to false.. fuck knows why\n    }, 120 * 1000); // stop debug after 120 sec\n  }\n\n  onRemoved() {\n    super.onRemoved();\n    Edge28Utils.removePoint(this.getParentNode(), this);\n  }\n\n  sendJson() {\n    return {\n      name: this.name,\n      pointValue: this.out,\n      enable: this.settings['pointEnable'].value,\n      units: this.settings['units'].value,\n      pointNumber: this.settings['pointNumber'].value,\n      pointType: this.settings['pointType'].value,\n      pointOffset: this.settings['offset'].value,\n    };\n  }\n\n  nodeColour() {\n    if (this.settings['pointEnable'].value === false) {\n      this.setNodeState(NodeState.INFO);\n    } else this.setNodeState(NodeState.NORMAL);\n  }\n\n  sendPointValue(val) {\n    const debug = this.settings['pointDebug'].value;\n    if (debug) {\n      this.setOutputData(0, val);\n      this.setOutputData(1, this.sendJson());\n    } else {\n      this.setOutputData(0, val);\n      this.setOutputData(1, this.sendJson());\n    }\n  }\n\n  pointOffset(val: any) {\n    let offset = this.settings['offset'].value;\n    if (offset === null) {\n      offset = 0;\n    }\n    return parseFloat(val) + parseFloat(offset);\n  }\n\n  pointTypeText(type) {\n    switch (type) {\n      case POINT_TYPE.DIGITAL:\n        return POINT_TYPE_TEXT.DIGITAL;\n      case POINT_TYPE.UI_DIGITAL:\n        return POINT_TYPE_TEXT.UI_DIGITAL;\n      case POINT_TYPE._0_10DC:\n        return POINT_TYPE_TEXT._0_10DC;\n      case POINT_TYPE._0_20MA:\n        return POINT_TYPE_TEXT._0_20MA;\n      case POINT_TYPE._4_20MA:\n        return POINT_TYPE_TEXT._4_20MA;\n      case POINT_TYPE._10K_THERMISTOR:\n        return POINT_TYPE_TEXT._10K_THERMISTOR;\n\n      default:\n        this.debugWarn('Unknown type of object');\n    }\n  }\n\n  updateTitle() {\n    const pointNumber = this.settings['pointNumber'].value;\n    this.title = `Edge-28-Input: (${pointNumber} as ${this.pointTypeText(this.settings['pointType'].value)})`;\n    this.broadcastTitleToClients();\n  }\n\n  pointCalcs(val: number) {\n    const mathFunc = this.settings['mathFunc'].value;\n    const mathValue = this.settings['mathValue'].value;\n    const decimals = this.settings['decimals'].value;\n    const pointType = this.settings['pointType'].value;\n    const isDigitalType = [POINT_TYPE.DIGITAL, POINT_TYPE.UI_DIGITAL];\n    if (MathUtils.validateNumbers(val, mathValue)) {\n      if (mathFunc !== MATH_FUNC_TYPE.NA) {\n        if (!isDigitalType.includes(pointType)) {\n          this.out = MathUtils.mathSwitch(mathFunc, val, mathValue);\n          this.out = MathUtils.decimals(this.out, decimals);\n          this.out = this.pointOffset(this.out);\n          this.sendPointValue(this.out);\n        } else {\n          this.out = MathUtils.mathSwitch(mathFunc, val, mathValue);\n          this.out = this.pointOffset(this.out);\n          this.sendPointValue(this.out);\n        }\n      } else {\n        if (!isDigitalType.includes(pointType)) {\n          this.out = MathUtils.decimals(val, decimals);\n          this.out = this.pointOffset(this.out);\n        } else {\n          this.out = val;\n        }\n        this.sendPointValue(this.out);\n      }\n    }\n  }\n\n  uiType(type: number, val: number, min_range?: number, max_range?: number) {\n    const lowScale = this.settings['lowScale'].value;\n    const highScale = this.settings['highScale'].value;\n    switch (type) {\n      case POINT_TYPE.DIGITAL:\n        this.pointCalcs(EdgeGPIOUtils.diInvert(val));\n        break;\n      case POINT_TYPE.UI_DIGITAL:\n        this.pointCalcs(EdgeGPIOUtils.uiAsDI(val));\n        break;\n      case POINT_TYPE._0_10DC:\n        const limitValDc = Utils.clamp(val, 0, highScale);\n        this.pointCalcs(EdgeGPIOUtils.scaleFromGPIOValue(limitValDc, lowScale, highScale));\n        break;\n      case POINT_TYPE._0_20MA:\n        const limitValMaZero = Utils.clamp(val, 0, highScale);\n        this.pointCalcs(EdgeGPIOUtils.scaleFromGPIOValue(limitValMaZero, lowScale, highScale));\n        break;\n      case POINT_TYPE._4_20MA:\n        const limitValMaFour = EdgeGPIOUtils.scaleUI420ma(val, min_range, max_range);\n        this.pointCalcs(EdgeGPIOUtils.scale420maToRange(limitValMaFour, lowScale, highScale));\n        break;\n      case POINT_TYPE._10K_THERMISTOR:\n        this.pointCalcs(Edge10kSensorUtils.calc10kThermistor(val));\n        break;\n    }\n  }\n\n  subscribe({ action, payload }) {\n    switch (action) {\n      case SEND_PAYLOAD_TO_CHILD:\n        if (this.settings['pointEnable'].value === false) return;\n        const pointType = this.settings['pointType'].value;\n        const pointNumber = this.settings['pointNumber'].value;\n        let out: number;\n        let min_range: number;\n        let max_range: number;\n        if (pointType === POINT_TYPE.DIGITAL) {\n          if (!['DI1', 'DI2', 'DI3', 'DI4', 'DI5', 'DI6', 'DI7'].includes(pointNumber)) return;\n          try {\n            for (let val of [payload]) {\n              out = val.pointsDI['4_val'][this.settings['pointNumber'].value].val;\n            }\n            this.uiType(pointType, out, payload);\n          } catch (err) {\n            this.debugErr(err);\n          }\n        } else {\n          if (!['UI1', 'UI2', 'UI3', 'UI4', 'UI5', 'UI6', 'UI7'].includes(pointNumber)) return;\n          try {\n            for (let val of [payload]) {\n              out = val.pointsUI['4_val'][this.settings['pointNumber'].value].val;\n              min_range = val.pointsUI['6_min_range'][this.settings['pointNumber'].value];\n              max_range = val.pointsUI['7_max_range'][this.settings['pointNumber'].value];\n            }\n            this.uiType(pointType, out, min_range, max_range);\n          } catch (err) {\n            this.debugErr(err);\n          }\n        }\n        break;\n      default:\n        this.debugWarn(\"Request action doesn't match\");\n    }\n  }\n}\n\nContainer.registerNodeType(EDGE_28_INPUT, Edge28InputPointNode, EDGE_28_NETWORK);\n","export default class Edge10kSensorUtils {\n  /*\n    used for scaling a UO from a float to a 10K temp reading\n    */\n  static calc10kThermistor = (val: number): number => {\n    const raw10K = [\n      0.9556905617,\n      0.9540427367,\n      0.9523006917,\n      0.9504602339,\n      0.9485172744,\n      0.946467535,\n      0.944306865,\n      0.9420290739,\n      0.9396319594,\n      0.9371093311,\n      0.9344568928,\n      0.9316708217,\n      0.9287447039,\n      0.9256742939,\n      0.9224557261,\n      0.91908403,\n      0.9155539628,\n      0.9118616967,\n      0.9080003267,\n      0.9039690867,\n      0.8997620283,\n      0.8953731717,\n      0.8908015628,\n      0.8860418194,\n      0.8810918183,\n      0.8759457717,\n      0.8706035044,\n      0.8650596894,\n      0.8593146611,\n      0.8533643761,\n      0.8472041872,\n      0.8408402328,\n      0.8342674089,\n      0.8274824028,\n      0.8204910228,\n      0.8132897394,\n      0.8058858472,\n      0.7982715539,\n      0.7904548383,\n      0.7824349294,\n      0.7742229339,\n      0.7658146322,\n      0.7572185678,\n      0.7484302572,\n      0.7394743383,\n      0.73033582,\n      0.7210303644,\n      0.7115748456,\n      0.7019597739,\n      0.6922074256,\n      0.6823111222,\n      0.6722912061,\n      0.6621575094,\n      0.6519178717,\n      0.6415775039,\n      0.6311526306,\n      0.6206437806,\n      0.6100630156,\n      0.5994548717,\n      0.588779615,\n      0.5780593139,\n      0.5673369194,\n      0.5565970278,\n      0.5458604304,\n      0.5351246092,\n      0.5244065761,\n      0.513722581,\n      0.5030878249,\n      0.4924882451,\n      0.4819615594,\n      0.4714876446,\n      0.4611024332,\n      0.450811465,\n      0.4405833684,\n      0.4304850415,\n      0.4204801987,\n      0.4106001113,\n      0.4008382911,\n      0.3912252038,\n      0.3817085907,\n      0.3723569356,\n      0.3631557389,\n      0.3540861978,\n      0.3451724444,\n      0.3363907538,\n      0.3277628108,\n      0.3193109318,\n      0.3110054108,\n      0.3028656927,\n      0.2949116408,\n      0.2871070734,\n      0.2794687028,\n      0.272013505,\n      0.264698569,\n      0.2575375869,\n      0.2505444204,\n      0.2437330494,\n      0.2370527064,\n      0.2305799944,\n      0.2242619327,\n      0.2180410733,\n      0.2119941474,\n      0.2061319159,\n      0.2003937116,\n      0.1948594611,\n      0.1893929343,\n      0.1841473882,\n      0.1789825137,\n      0.1739791116,\n      0.1691445094,\n      0.1644078283,\n      0.1597735289,\n      0.1553259162,\n      0.1509105486,\n      0.1466923378,\n      0.1425957094,\n      0.1386248913,\n      0.1347001575,\n      0.1309926256,\n      0.1273378137,\n      0.1237375067,\n      0.1202802759,\n      0.116969961,\n      0.1137221844,\n      0.1105386486,\n      0.107421042,\n      0.1044610471,\n      0.1015715166,\n      0.09875404639,\n      0.09610194494,\n      0.09343384,\n      0.09084241711,\n      0.0884225005,\n      0.08598938206,\n      0.08363729444,\n      0.08136762256,\n      0.07918171356,\n      0.07698514917,\n      0.07497021833,\n      0.07294627961,\n      0.07091327239,\n      0.06906601989,\n      0.06721124833,\n      0.06544711883,\n      0.06367616028,\n      0.061997282,\n      0.06041153422,\n      0.05882030111,\n      0.05722355406,\n      0.05572157039,\n      0.05431530289,\n      0.05290475159,\n      0.05148989689,\n      0.05017223272,\n      0.04895260508,\n      0.04762772774,\n      0.04640141447,\n      0.045274458,\n      0.04414477874,\n      0.04301236682,\n      0.04187721228,\n      0.04084286529,\n      0.03980623591,\n      0.03887131178,\n      0.03793452726,\n      0.03699587678,\n      0.03605535477,\n      0.03511295563,\n      0.03427368709,\n      0.03343292697,\n      0.03269603518,\n      0.03185246761,\n      0.03111311315,\n      0.03037260522,\n      0.02963094111,\n      0.02888811812,\n      0.02825048826,\n      0.02761200327,\n      0.02697266141,\n      0.02633246097,\n      0.02569140021,\n      0.02504947741,\n      0.02451388196,\n      0.02397768566,\n      0.02333345552,\n      0.02279593374,\n      0.02236548142,\n      0.02182687151,\n      0.02128765566,\n      0.02085584601,\n      0.02042364737,\n    ];\n    const temps10K = [\n      -40,\n      -39,\n      -38,\n      -37,\n      -36,\n      -35,\n      -34,\n      -33,\n      -32,\n      -31,\n      -30,\n      -29,\n      -28,\n      -27,\n      -26,\n      -25,\n      -24,\n      -23,\n      -22,\n      -21,\n      -20,\n      -19,\n      -18,\n      -17,\n      -16,\n      -15,\n      -14,\n      -13,\n      -12,\n      -11,\n      -10,\n      -9,\n      -8,\n      -7,\n      -6,\n      -5,\n      -4,\n      -3,\n      -2,\n      -1,\n      0,\n      1,\n      2,\n      3,\n      4,\n      5,\n      6,\n      7,\n      8,\n      9,\n      10,\n      11,\n      12,\n      13,\n      14,\n      15,\n      16,\n      17,\n      18,\n      19,\n      20,\n      21,\n      22,\n      23,\n      24,\n      25,\n      26,\n      27,\n      28,\n      29,\n      30,\n      31,\n      32,\n      33,\n      34,\n      35,\n      36,\n      37,\n      38,\n      39,\n      40,\n      41,\n      42,\n      43,\n      44,\n      45,\n      46,\n      47,\n      48,\n      49,\n      50,\n      51,\n      52,\n      53,\n      54,\n      55,\n      56,\n      57,\n      58,\n      59,\n      60,\n      61,\n      62,\n      63,\n      64,\n      65,\n      66,\n      67,\n      68,\n      69,\n      70,\n      71,\n      72,\n      73,\n      74,\n      75,\n      76,\n      77,\n      78,\n      79,\n      80,\n      81,\n      82,\n      83,\n      84,\n      85,\n      86,\n      87,\n      88,\n      89,\n      90,\n      91,\n      92,\n      93,\n      94,\n      95,\n      96,\n      97,\n      98,\n      99,\n      100,\n      101,\n      102,\n      103,\n      104,\n      105,\n      106,\n      107,\n      108,\n      109,\n      110,\n      111,\n      112,\n      113,\n      114,\n      115,\n      116,\n      117,\n      118,\n      119,\n      120,\n      121,\n      122,\n      123,\n      124,\n      125,\n      126,\n      127,\n      128,\n      129,\n      130,\n      131,\n      132,\n      133,\n      134,\n      135,\n      136,\n      137,\n      138,\n      139,\n      140,\n      141,\n      142,\n      143,\n      144,\n      145,\n      146,\n      147,\n      148,\n      149,\n      150,\n    ];\n    let value = val;\n    for (let i = 0; i < 190; i++) {\n      if (value <= raw10K[i] && value > raw10K[i + 1]) {\n        value = temps10K[i + 1] - (value - raw10K[i + 1]) / (raw10K[i] - raw10K[i + 1]);\n        break;\n      }\n    }\n    return value;\n  };\n}\n","import { isNull } from '../../../../utils/helper';\nimport { EDGE_28_NETWORK, EDGE_28_OUTPUT } from '../../../constants';\nimport { Container } from '../../../container';\nimport { NODE_INFO } from '../../../node-info';\nimport { Side } from '../../../node-interface';\nimport { NodeSetting, SettingType, Type } from '../../../node-io';\nimport BACnetEnumsUnits from '../../../utils/points/BACnet-enums-units';\nimport HistoryBase from '../../history/HistoryBase';\nimport { edgeApiVer, edgeIp, edgePort } from './edge-constant';\nimport EdgeGPIOUtils from './edge-gpio-utils';\nimport Edge28Utils from './edge-utils';\n\nenum OUTPUT_POINT_TYPE {\n  DO = 1,\n  UO_AS_DIGITAL = 2,\n  UO_AS_0_10DC = 3,\n}\n\nenum OUTPUT_POINT_TYPE_TEXT {\n  DO = 'DO',\n  UO_AS_DIGITAL = 'UO As Digital',\n  UO_AS_0_10DC = 'UO As 0-10dc',\n}\n\nclass Edge28OutputPointNode extends HistoryBase {\n  uuid: Number = null;\n  deviceContainerID: Number = null;\n  topic: string = null;\n  newSetting = false;\n  lastSendTime;\n  lastInput;\n  resendTime = 120000; //resend output every 120 seconds even if it hasn't changed.\n\n  // node inputs\n  inInput: number = 0;\n  inAlarmTrigger: number = 1;\n  inHistoryTrigger: number = 2;\n\n  constructor() {\n    super();\n    this.title = NODE_INFO[\"protocols/nube\"][\"edge-28-output\"].title;\n    this.description = NODE_INFO[\"protocols/nube\"][\"edge-28-output\"].description;\n\n    this.addInput('input', Type.ANY);\n    this.addOutput('output', Type.NUMBER);\n    this.addOutput('output-json', Type.JSON);\n    this.properties['pointVal'] = null;\n\n    // Default point Settings (Will be in point class)\n    this.settings['pointEnable'] = NodeSetting.create({\n      description: 'Point enable',\n      value: false,\n      type: SettingType.BOOLEAN,\n    });\n    this.settings['pointType'] = NodeSetting.create({\n      description: 'Point Type',\n      value: OUTPUT_POINT_TYPE.DO,\n      type: SettingType.DROPDOWN,\n      config: {\n        items: [\n          { value: OUTPUT_POINT_TYPE.DO, text: OUTPUT_POINT_TYPE_TEXT.DO },\n          { value: OUTPUT_POINT_TYPE.UO_AS_DIGITAL, text: OUTPUT_POINT_TYPE_TEXT.UO_AS_DIGITAL },\n          { value: OUTPUT_POINT_TYPE.UO_AS_0_10DC, text: OUTPUT_POINT_TYPE_TEXT.UO_AS_0_10DC },\n        ],\n      },\n    });\n    this.settings['inputType'] = NodeSetting.create({\n      description: 'Input Type',\n      value: true,\n      type: SettingType.DROPDOWN,\n      config: {\n        items: [\n          { value: true, text: 'Percent (0-100 -> 0-10vdc)' },\n          { value: false, text: 'Voltage (0-10 -> 0-10vdc)' },\n        ],\n      },\n    });\n    this.settings['pointNumber'] = NodeSetting.create({\n      description: 'Point',\n      value: 'UO1',\n      type: SettingType.DROPDOWN,\n      config: {\n        items: [\n          { value: 'UO1', text: `UO1` },\n          { value: 'UO2', text: `UO2` },\n          { value: 'UO3', text: `UO3` },\n          { value: 'UO4', text: `UO4` },\n          { value: 'UO5', text: `UO5` },\n          { value: 'UO6', text: `UO6` },\n          { value: 'UO7', text: `UO7` },\n          { value: 'DO1', text: `DO1` },\n          { value: 'DO2', text: `DO2` },\n          { value: 'DO3', text: `DO3` },\n          { value: 'DO4', text: `DO4` },\n          { value: 'DO5', text: `DO5` },\n          { value: 'R1', text: `R1` },\n          { value: 'R2', text: `R2` },\n        ],\n      },\n    });\n    this.settings['units_group'] = NodeSetting.create({\n      description: 'Units (Save to get units)',\n      type: SettingType.GROUP,\n    });\n    this.settings['unitsType'] = NodeSetting.create({\n      description: 'Units Category',\n      type: SettingType.DROPDOWN,\n      config: {\n        items: BACnetEnumsUnits.unitCategory,\n      },\n    });\n    this.settings['units'] = NodeSetting.create({\n      description: 'Units Type',\n      value: BACnetEnumsUnits.COMMON_METRIC.NO_UNITS,\n      type: SettingType.DROPDOWN,\n    });\n\n    this.setSettingsConfig({\n      groups: [\n        { pointNumber: {}, pointType: {} },\n        { mathFunc: {}, mathValue: {} },\n        { unitsType: {}, units: {} },\n      ],\n      conditions: {\n        mathValue: setting => {\n          const val = setting['mathFunc'].value;\n          return ![10, 0].includes(val);\n        },\n        inputType: setting => {\n          return setting['pointType'].value === OUTPUT_POINT_TYPE.UO_AS_0_10DC;\n        },\n      },\n    });\n\n    this.addHistorySettingsConfig();\n  }\n\n  onAdded() {\n    super.onAdded();\n    this.updateTitle();\n    if (this.side !== Side.server) return;\n    this.EXECUTE_INTERVAL = 60000;\n    this.lastSendTime = new Date().valueOf();\n    this.lastInput = null\n    this.inputChange();\n  }\n\n  async onExecute() {\n    if (this.side !== Side.server) return;\n    if (new Date().valueOf() - this.resendTime > this.lastSendTime) {\n      this.lastInput = null; //to trigger output rewrite\n      await this.onInputUpdated();\n    }\n  }\n\n  pointType(type) {\n    switch (type) {\n      case OUTPUT_POINT_TYPE.DO:\n        return 'do';\n      case OUTPUT_POINT_TYPE.UO_AS_DIGITAL:\n        return 'uo';\n      case OUTPUT_POINT_TYPE.UO_AS_0_10DC:\n        return 'uo';\n      default:\n        this.debugWarn('Unknown type of object');\n    }\n  }\n\n  pointTypeText(type) {\n    switch (type) {\n      case OUTPUT_POINT_TYPE.DO:\n        return OUTPUT_POINT_TYPE_TEXT.DO;\n      case OUTPUT_POINT_TYPE.UO_AS_DIGITAL:\n        return OUTPUT_POINT_TYPE_TEXT.UO_AS_DIGITAL;\n      case OUTPUT_POINT_TYPE.UO_AS_0_10DC:\n        return OUTPUT_POINT_TYPE_TEXT.UO_AS_0_10DC;\n      default:\n        this.debugWarn('Unknown type of object');\n    }\n  }\n\n  async onInputUpdated() {\n    await super.onInputUpdated();\n    this.inputChange();\n  }\n\n  onRemoved() {\n    super.onRemoved();\n  }\n\n  async onAfterSettingsChange() {\n    await super.onAfterSettingsChange();\n    this.updateTitle();\n    const unitsType = this.settings['unitsType'].value;\n    this.settings['units'].config = {\n      items: BACnetEnumsUnits.unitType(unitsType),\n    };\n    this.broadcastSettingsToClients();\n    this.inputChange();\n  }\n\n  inputChange() {\n    if (this.side !== Side.server) return;\n    const inputVal: number = this.getInputData(this.inInput);\n    if (this.lastInput == null || inputVal !== this.lastInput) this.apiCall(inputVal);\n  }\n\n  updateTitle() {\n    const pointNumber = this.settings['pointNumber'].value;\n    if (this.settings['pointType'].value == OUTPUT_POINT_TYPE.UO_AS_0_10DC) {\n      const inputType = this.settings['inputType'].value ? '0-100 -> 0-10vdc' : '0-10 -> 0-10vdc';\n      this.title = `Edge-28-Output: [${pointNumber}] ${this.pointTypeText(this.settings['pointType'].value)} (${inputType})`;\n    }\n    else this.title = `Edge-28-Output: [${pointNumber}] ${this.pointTypeText(this.settings['pointType'].value)}`;\n    this.broadcastTitleToClients();\n  }\n\n  sendJson() {\n    const pointIsUO0to10 = this.settings['pointType'].value == OUTPUT_POINT_TYPE.UO_AS_0_10DC;\n    var inputType = null;\n    if (pointIsUO0to10) inputType = this.settings['inputType'].value ? 'Percent (0-100 -> 0-10vdc)' : 'Voltage (0-10 -> 0-10vdc)';\n\n    return {\n      name: this.name,\n      pointValue: this.properties['pointVal'],\n      enable: this.settings['pointEnable'].value,\n      units: this.settings['units'].value,\n      pointNumber: this.settings['pointNumber'].value,\n      pointType: this.settings['pointType'].value,\n      inputType: inputType,\n    };\n  }\n\n  apiCall(inputVal: number) {\n    this.lastInput = inputVal;\n    if (this.side !== Side.server) return;\n    if (this.settings['pointEnable'].value === false) return;\n    const pointNumber = this.settings['pointNumber'].value;\n    let outVal: number = null;\n    const nodeVal = inputVal;\n    if (inputVal === undefined || inputVal === null) return;\n\n    if (this.settings['pointType'].value === OUTPUT_POINT_TYPE.DO) {\n      // if type = DO 0 is off 1 is on\n      if (typeof inputVal === 'boolean') {\n        outVal = inputVal ? 1 : 0;\n      } else if (typeof inputVal === 'string') {\n        if (inputVal === '1' || inputVal === 'true') {\n          outVal = 1;\n        } else if (inputVal === '0' || inputVal === 'false') {\n          outVal = 0;\n        }\n      } else if (typeof inputVal === 'number') {\n        if (inputVal >= 1) {\n          outVal = 1;\n        } else if (inputVal < 1) outVal = 0; // drive to 0vdc\n      } else this.debugInfo(`ERROR: input value must be a int 1 or 0 or a bool`);\n    } else if (this.settings['pointType'].value === OUTPUT_POINT_TYPE.UO_AS_DIGITAL) {\n      // UO as a DO\n      // if type = DO\n      if (typeof inputVal === 'boolean') {\n        if (inputVal) {\n          outVal = 0;\n        } else outVal = 100;\n      } else if (typeof inputVal === 'string') {\n        if (inputVal === '1' || inputVal === 'true') {\n          outVal = 0;\n        } else if (inputVal === '0' || inputVal === 'false') {\n          outVal = 100;\n        }\n      } else if (typeof inputVal === 'number') {\n        if (inputVal >= 1) {\n          outVal = 0; // drive to 12vdc\n        } else if (inputVal < 1) outVal = 100; // drive to 0vdc\n      } else this.debugInfo(`ERROR: input value must be a int 1 or 0 or a bool`);\n    } else if (this.settings['pointType'].value === OUTPUT_POINT_TYPE.UO_AS_0_10DC) {\n      // if type = UO\n      if (typeof inputVal === 'number') {\n        if (!this.settings['inputType'].value) inputVal = inputVal * 10; //scale from 0-10 to 0-100\n        if (inputVal >= 100) outVal = EdgeGPIOUtils.scaleToGPIOValue(100, 0, 100);\n        // this is to cap writing a value > 12vdc\n        else {\n          inputVal = inputVal * 0.9839; // * 0.9839 this is to software cal the UOs\n          outVal = EdgeGPIOUtils.scaleToGPIOValue(inputVal, 0, 100);\n        }\n      } else if (typeof inputVal === 'string') {\n        this.debugInfo(`ERROR: input value must be a float`);\n      }\n    }\n\n    if (isNull(outVal)) return;\n    const pointType = this.pointType(this.settings['pointType'].value);\n    Edge28Utils.writePointValue(edgeIp, edgePort, edgeApiVer, pointType, pointNumber, outVal, 16)\n      .then(e => {\n        this.properties['pointVal'] = nodeVal;\n        this.setOutputData(0, nodeVal);\n        this.setOutputData(1, this.sendJson()); // json\n        this.lastSendTime = new Date().valueOf();\n      })\n      .catch(err => {\n        this.debugInfo(`ERROR: getting edge point type: ${pointType} ${err}`);\n      });\n  }\n}\n\nContainer.registerNodeType(EDGE_28_OUTPUT, Edge28OutputPointNode, EDGE_28_NETWORK);\n","import axios from 'axios';\nimport { Container } from '../../../container';\nimport { Node } from '../../../node';\nimport { NODE_INFO } from '../../../node-info';\nimport { Side } from '../../../node-interface';\nimport { NodeSetting, SettingType, Type } from '../../../node-io';\nimport Utils from '../../../utils';\nimport TimeUtils from '../../../utils/time-utils';\nimport { edgeApiVer, edgeIp, edgePort } from './edge-constant';\nimport Edge28Utils from './edge-utils';\n\nexport class Edge28LORAResetNode extends Node {\n  lastSendTime;\n  lastTrigger;\n  timeoutFunc;\n\n  constructor() {\n    super();\n    this.title = NODE_INFO[\"protocols/nube\"][\"edge-28-lora-reset\"].title;\n    this.description = NODE_INFO[\"protocols/nube\"][\"edge-28-lora-reset\"].description;\n    this.addInputWithSettings('enableInterval', Type.BOOLEAN, false, 'Enable Interval Reset');\n    this.addInputWithSettings('interval', Type.NUMBER, 15, 'Interval');\n    this.addInput('trigger', Type.BOOLEAN);\n    this.addOutput('lastReset');\n\n    this.settings['time'] = NodeSetting.create({\n      description: 'Units',\n      type: SettingType.DROPDOWN,\n      config: {\n        items: [\n          { value: 'milliseconds', text: 'Milliseconds' },\n          { value: 'seconds', text: 'Seconds' },\n          { value: 'minutes', text: 'Minutes' },\n          { value: 'hours', text: 'Hours' },\n        ],\n      },\n      value: 'minutes',\n    });\n    this.setSettingsConfig({\n      groups: [{ interval: { weight: 2 }, time: {} }],\n    });\n  }\n\n  async writePointValue(\n    host: string,\n    port: number,\n    apiVer: string,\n    pointType: string,\n    pointId: string,\n    val: number,\n    priority: number,\n  ): Promise<any> {\n    const url = `${Utils.buildUrl(host, port)}/api/${apiVer}/write/${pointType}/${pointId}/${val}/${priority}`;\n    //console.log(url);\n    const pointValue = await axios.get(url);\n    //console.log('writePointValue()', pointValue)\n    return pointValue.data;\n  }\n\n  onAdded() {\n    this.inputs[1]['name'] = `[interval] (${this.settings['time'].value})`;\n    if (this.side !== Side.server) return;\n    let interval = this.getInputData(1);\n    interval = TimeUtils.timeConvert(interval, this.settings['time'].value);\n    this.EXECUTE_INTERVAL = interval;\n    try {\n      Edge28Utils.addPoint(this.getParentNode(), this);\n    } catch (error) {}\n  }\n\n  onExecute() {\n    if (this.side !== Side.server) return;\n    if (!this.getInputData(0)) return;\n    this.resetLORAConnect();\n  }\n\n  onInputUpdated() {\n    if (this.side !== Side.server) return;\n    let interval = this.getInputData(1);\n    interval = TimeUtils.timeConvert(interval, this.settings['time'].value);\n    this.EXECUTE_INTERVAL = interval;\n    let trigger = this.getInputData(2);\n    //if (trigger && this.inputs[2].updated) {\n    if (trigger && !this.lastTrigger) this.resetLORAConnect();\n    this.lastTrigger = trigger;\n  }\n\n  resetLORAConnect() {\n    if (this.side !== Side.server) return;\n    const pointType = 'do';\n    const pointNumber = 'lc';\n    this.writePointValue(edgeIp, edgePort, edgeApiVer, pointType, pointNumber, 0, 16)\n      .then(e => {\n        this.setOutputData(0, new Date().valueOf(), true);\n        this.timeoutFunc = setTimeout(() => {\n          this.writePointValue(edgeIp, edgePort, edgeApiVer, pointType, pointNumber, 1, 16);\n        }, 2000);\n      })\n      .catch(err => this.debugInfo(`ERROR: LoRa Edge-28 Reset - ${err}`));\n  }\n\n  onAfterSettingsChange() {\n    this.inputs[1]['name'] = `[interval] (${this.settings['time'].value})`;\n    if (this.side !== Side.server) return;\n    this.onInputUpdated();\n  }\n}\n\nContainer.registerNodeType('protocols/nube/edge-28-lora-reset', Edge28LORAResetNode);\n","import * as Bacnet from 'node-bacnet';\nimport { BACNET_NETWORK } from '../../../constants';\nimport { Container } from '../../../container';\nimport { ContainerNode } from '../../../container-node';\nimport { Node } from '../../../node';\nimport { NODE_INFO } from '../../../node-info';\nimport { Side } from '../../../node-interface';\nimport { NodeSetting, SettingType, Type } from '../../../node-io';\nimport { ADD_DEVICE, GET_BACNET_CLIENT, GET_NETWORK_NODE, REMOVE_DEVICE } from './bacnet-constant';\nimport BacnetUtils from './bacnet-utils';\n\nexport class BACnetNetwork extends ContainerNode {\n  bacnetClient: Bacnet = null;\n  deviceNodes: Array<Node> = [];\n\n  // node input\n  inNetworkEnable: number = 0;\n  inDiscover: number = 1;\n\n  // node outputs\n  outMsg: number = 0;\n\n  constructor() {\n    super();\n    this.title = NODE_INFO['protocols/bacnet']['bacnet-network'].title;\n    this.description = NODE_INFO['protocols/bacnet']['bacnet-network'].description;\n\n    this.addInputWithSettings('enable', Type.BOOLEAN, false, 'Network Enable', false);\n    this.addInput('discover', Type.BOOLEAN);\n    this.addOutput('msg', Type.STRING);\n    this.settings['interface'] = NodeSetting.create({\n      description: 'interface',\n      value: '0.0.0.0',\n      type: SettingType.STRING,\n    });\n    this.settings['port'] = NodeSetting.create({\n      description: 'port',\n      value: 47808,\n      type: SettingType.NUMBER,\n    });\n    this.settings['broadcastAddress'] = NodeSetting.create({\n      description: 'broadcastAddress',\n      value: '255.255.255.255',\n      type: SettingType.STRING,\n    });\n    this.settings['apduTimeout'] = NodeSetting.create({\n      description: 'BACnet apduTimeout',\n      value: 6000,\n      type: SettingType.NUMBER,\n    });\n    this.settings['networkNumber'] = NodeSetting.create({\n      description: 'BACnet network Number (Set to -1 to disable)',\n      value: -1,\n      type: SettingType.NUMBER,\n    });\n    this.settings['networkNumberWhoIs'] = NodeSetting.create({\n      description: 'BACnet Network Number for Discover',\n      type: SettingType.DROPDOWN,\n      config: {\n        items: [\n          { value: 0, text: 'This network number' },\n          { value: 1, text: 'Global (0xFFFF)' },\n          { value: 2, text: 'Blank' },\n        ],\n      },\n      value: 0,\n    });\n    this.settings['devicePolling'] = NodeSetting.create({\n      description: 'Polling time setting in ms',\n      value: 2000, // TODO add validation range later\n      type: SettingType.NUMBER,\n    });\n  }\n\n  onAdded() {\n    super.onAdded();\n    // this.name = `BACnet Network:  cid_${this.container.id.toString()}_sid_${this.sub_container.id.toString()}_id${this.id.toString()}`; //set default node name\n    this.initializeBacnetClient();\n  }\n\n  onAfterSettingsChange(oldSettings: any) {\n    super.onAfterSettingsChange(oldSettings);\n    if (this.side !== Side.server) return;\n    this.initializeBacnetClient();\n  }\n\n  onInputUpdated() {\n    if (this.inputs[this.inDiscover].updated) {\n      this.iAm();\n      this.whoIs();\n    }\n    if (this.inputs[this.inNetworkEnable].updated) {\n      this.initializeBacnetClient();\n    }\n  }\n\n  whoIs() {\n    if (this.side !== Side.server) return;\n    const iface = this.settings['interface'].value;\n    const networkNumber = this.settings['networkNumber'].value;\n    const networkNumberWhoIs = this.settings['networkNumberWhoIs'].value;\n    if (this.bacnetClient) {\n      if (networkNumberWhoIs === 0) {\n        this.bacnetClient.whoIs({ net: networkNumber, interface: iface });\n        this.setOutputData(this.outMsg, `INFO: Send a WhoIs on net: ${networkNumber} interface: ${iface}`);\n      } else if (networkNumberWhoIs === 1) {\n        this.bacnetClient.whoIs({ net: 0xffff, interface: iface });\n        this.setOutputData(this.outMsg, `INFO: Send a WhoIs on net: ${0xffff} interface: ${iface}`);\n      } else if (networkNumberWhoIs === 2) {\n        this.bacnetClient.whoIs({ interface: iface });\n        this.setOutputData(this.outMsg, `INFO: Send a WhoIs on net: BLANK interface: ${iface}`);\n      }\n    } else this.setOutputData(this.outMsg, `ERROR: Failed to send whoIs`);\n  }\n\n  iAm() {\n    if (this.side !== Side.server) return;\n    this.setOutputData(this.outMsg, `INFO: On iAm replay`);\n    this.bacnetClient.on('iAm', device => {\n      this.setOutputData(this.outMsg, `INFO: On iAm replay from device: ${device.payload.deviceId}`);\n    });\n  }\n\n  subscribe({ action, payload }) {\n    switch (action) {\n      case ADD_DEVICE:\n        this.deviceNodes.push(payload);\n        break;\n      case REMOVE_DEVICE:\n        this.deviceNodes = this.deviceNodes.filter(pointNode => pointNode.id !== payload.id);\n        break;\n      case GET_BACNET_CLIENT:\n        return this.bacnetClient;\n      case GET_NETWORK_NODE:\n        return this;\n      default:\n        this.debugWarn(\"Request action doesn't match\");\n    }\n  }\n\n  onRemoved() {\n    super.onRemoved();\n    this.closeBacnetClient();\n  }\n\n  private closeBacnetClient() {\n    if (this.bacnetClient) {\n      this.setOutputData(this.outMsg, `INFO: Closing BACnet client...`);\n      this.bacnetClient.close();\n    }\n  }\n\n  initializeBacnetClient() {\n    if (this.side !== Side.server) return; // only execute on server\n    this.closeBacnetClient();\n    this.setOutputData(this.outMsg, `INFO: Initializing BACnet...`);\n    this.bacnetClient = new Bacnet({\n      apduTimeout: this.settings['apduTimeout'].value,\n      interface: this.settings['interface'].value,\n      port: this.settings['port'].value,\n      broadcastAddress: this.settings['broadcastAddress'].value,\n    });\n    if (this.bacnetClient) {\n      this.setOutputData(this.outMsg, `INFO: Started BACnet Stack :)`);\n    } else this.setOutputData(this.outMsg, `ERROR: Failed to started BACnet Stack :(`);\n\n    for (let deviceNode of this.deviceNodes) {\n      BacnetUtils.sendPayloadToChild(deviceNode, {\n        bacnetClient: this.bacnetClient,\n        networkNode: this,\n      });\n    }\n  }\n}\nContainer.registerNodeType(BACNET_NETWORK, BACnetNetwork);\n","import * as Bacnet from 'node-bacnet';\nimport { BACNET_DEVICE, BACNET_NETWORK } from '../../../constants';\nimport { Container } from '../../../container';\nimport { ContainerNode } from '../../../container-node';\nimport { Node } from '../../../node';\nimport { NODE_INFO } from '../../../node-info';\nimport { Side } from '../../../node-interface';\nimport { NodeSetting, SettingType, Type } from '../../../node-io';\nimport Utils from '../../../utils';\nimport {\n  ADD_POINT,\n  GET_NETWORK_NODE,\n  GET_POINTS,\n  GET_PRESENT_VALUE,\n  REMOVE_POINT,\n  SEND_PAYLOAD_TO_CHILD,\n  WRITE_PRESENT_VALUE,\n} from './bacnet-constant';\nimport { BACnetNetwork } from './bacnet-network';\nimport BacnetUtils, { singleton as actor } from './bacnet-utils';\nimport { DeviceObject } from './interface';\n\nenum Poll {\n  STOP = 0,\n  START = 1,\n}\n\nclass BACnetDevice extends ContainerNode {\n  bacnetClient: Bacnet = null;\n  networkNode: BACnetNetwork = null;\n  points: Array<DeviceObject> = [];\n  pointNodes: Array<Node> = [];\n  isFirst: boolean = true;\n  isPolling: boolean = false;\n  shouldPoll: boolean = true;\n  delayBetweenDevice: number = 100;\n  delayBetweenPoint: number = 30;\n  outputMsg: 1;\n  networkNumber: number = null;\n  constructor() {\n    super();\n    this.title = NODE_INFO['protocols/bacnet']['bacnet-device'].title;\n    this.description = NODE_INFO['protocols/bacnet']['bacnet-device'].description;\n    this.addInput('get-point-list', Type.BOOLEAN);\n    this.addOutput('out', Type.STRING);\n    this.addOutput('out msg', Type.STRING);\n    this.addOutput('error', Type.STRING);\n    this.addOutput('points-discovered', Type.STRING);\n    this.addOutput('points-to-poll', Type.STRING);\n    this.properties['pointsList'] = null;\n    this.settings['deviceEnable'] = NodeSetting.create({\n      description: 'Device enable',\n      value: false,\n      type: SettingType.BOOLEAN,\n    });\n\n    // device\n    this.settings['ip'] = NodeSetting.create({ description: 'ip', value: '192.168.13.13', type: SettingType.STRING });\n    this.settings['deviceId'] = NodeSetting.create({ description: 'deviceId', value: 2508, type: SettingType.NUMBER });\n    this.settings['port'] = NodeSetting.create({ description: 'port', value: 47808, type: SettingType.NUMBER });\n\n    // device mac address if under a IP to MS/TP router\n    this.settings['deviceTypeMstp'] = NodeSetting.create({\n      description: 'BACnet MS/TP device',\n      value: false,\n      type: SettingType.BOOLEAN,\n    });\n    // device mac address if under a IP to MS/TP router\n    this.settings['macAddress'] = NodeSetting.create({\n      description: 'BACnet Mac address',\n      value: 1,\n      type: SettingType.NUMBER,\n    });\n\n    this.settings['networkNumber'] = NodeSetting.create({\n      description: 'BACnet network number ',\n      // value: null,\n      type: SettingType.READONLY,\n    });\n  }\n\n  async onAdded() {\n    super.onAdded();\n    // this.name = `BACnet Device: cid_${this.container.id.toString()}_sid_${this.sub_container.id.toString()}_id${this.id.toString()}`; //set default node name\n    await Utils.sleep(1000); // TODO: Since device should start after network, import may shows issue if we don't have this\n    this.setBacnetClient();\n    this.setPayloadsToPointNodes();\n    if (this.side !== Side.server) return;\n    BacnetUtils.addDevice(this.getParentNode(), this);\n    this.updateNetworkSettings();\n    await this.requestPoll();\n  }\n\n  onAfterSettingsChange(oldSettings: any) {\n    super.onAfterSettingsChange(oldSettings);\n    this.setPayloadsToPointNodes();\n    this.requestPoll().then(); // don't await, it will unable to set setting value\n  }\n\n  onRemoved() {\n    super.onRemoved();\n    this.shouldPoll = false;\n    BacnetUtils.removeDevice(this.getParentNode(), this);\n  }\n\n  updateNetworkSettings() {\n    if (this.side !== Side.server) return;\n    this.networkNode = BacnetUtils.getNetworkNode(this.getParentNode());\n    this.networkNumber = this.networkNode.settings['networkNumber'].value;\n    this.settings['networkNumber'].value = this.networkNumber;\n    this.broadcastSettingsToClients();\n    this.persistSettings();\n  }\n\n  onInputUpdated() {\n    let pntList = [];\n    for (let pointNode of this.pointNodes) {\n      const settings = pointNode.settings;\n      const id = pointNode.id;\n      const cid = pointNode.id;\n      const name = pointNode.name;\n      let a = {\n        id: id,\n        cid: cid,\n        name: name,\n        settings: settings,\n      };\n      pntList.push(a);\n    }\n    this.setOutputData(4, JSON.stringify(pntList));\n    this.setOutputData(3, JSON.stringify(this.points));\n  }\n\n  async requestPoll() {\n    if (this.currentPollValue() === Poll.START && !this.isPolling) {\n      this.isPolling = true;\n      await this.polling();\n    }\n  }\n\n  // check if network and device are enabled\n  currentPollValue(): Poll {\n    return this.settings['deviceEnable'].value && this.networkNode.getInputData(this.networkNode.inNetworkEnable)\n      ? Poll.START\n      : Poll.STOP;\n  }\n  // send points list to point node\n  setPayloadsToPointNodes() {\n    if (this.side !== Side.server) return; // only execute on server\n    this.setOutputData(this.outputMsg, `INFO: Scan devices`);\n    actor\n      .process<Array<DeviceObject>>(() => this.scanDeviceFunc())\n      .then(points => {\n        this.points = points;\n        this.sendPayloadToPointNodesFunc();\n      });\n    actor.process(async () => await Utils.sleep(this.delayBetweenDevice)).then();\n  }\n\n  // send points list to point node\n  sendPayloadToPointNodesFunc() {\n    for (let pointNode of this.pointNodes) {\n      BacnetUtils.sendPayloadToChild(pointNode, {\n        points: this.points,\n        networkNode: this.networkNode,\n      });\n    }\n  }\n\n  // get bacnet client from network node\n  setBacnetClient() {\n    if (this.side !== Side.server) return;\n    this.bacnetClient = BacnetUtils.getBacnetClient(this.getParentNode());\n  }\n\n  // bacnet lib point write function\n  writePresentValue(deviceAddress, type, instance, value, priority, tag) {\n    if (!this.bacnetClient) return;\n    if (this.settings['deviceTypeMstp'].value) {\n      this.bacnetClient.writeProperty(\n        {\n          address: deviceAddress,\n          net: this.networkNumber,\n          adr: [this.settings['macAddress'].value],\n        },\n        { type: type, instance: instance },\n        85,\n        [{ type: tag, value: value }],\n        { priority: priority },\n        (err, value) => {\n          console.log(err, value);\n        },\n      );\n    } else {\n      this.bacnetClient.writeProperty(\n        deviceAddress,\n        { type: type, instance: instance },\n        85,\n        [{ type: tag, value: value }],\n        { priority: priority },\n        (err, value) => {},\n      );\n    }\n  }\n  // bacnet lib get points list function\n  readObjectList(deviceAddress, deviceId, callback) {\n    // Read Device Object\n    const requestArray = [\n      {\n        objectId: { type: Bacnet.enum.ObjectType.DEVICE, instance: deviceId },\n        properties: [{ id: Bacnet.enum.PropertyIdentifier.OBJECT_LIST }],\n      },\n    ];\n    if (!this.bacnetClient) return;\n    if (this.settings['deviceTypeMstp'].value) {\n      this.bacnetClient.readPropertyMultiple(\n        {\n          address: deviceAddress,\n          net: this.networkNumber,\n          adr: [this.settings['macAddress'].value],\n        },\n        requestArray,\n        requestArray,\n        callback,\n      );\n    } else this.bacnetClient.readPropertyMultiple(deviceAddress, requestArray, callback);\n  }\n\n  readObjectFull(deviceAddress, type): Promise<any> {\n    return this.readObject(deviceAddress, type, [\n      { id: Bacnet.enum.PropertyIdentifier.OBJECT_IDENTIFIER },\n      { id: Bacnet.enum.PropertyIdentifier.OBJECT_NAME },\n      { id: Bacnet.enum.PropertyIdentifier.OBJECT_TYPE },\n      { id: Bacnet.enum.PropertyIdentifier.DESCRIPTION },\n      { id: Bacnet.enum.PropertyIdentifier.UNITS },\n      { id: Bacnet.enum.PropertyIdentifier.PRESENT_VALUE },\n      // { id: Bacnet.enum.PropertyIdentifier.PRIORITY_ARRAY },\n      // { id: Bacnet.enum.PropertyIdentifier.PRIORITY_FOR_WRITING },\n    ]);\n  }\n  // bacnet lib point read function\n  readObject(deviceAddress, obj, properties): Promise<any> {\n    return new Promise(resolve => {\n      const requestArray = [\n        {\n          objectId: { type: obj.type, instance: obj.instance },\n          properties: properties,\n        },\n      ];\n      if (!this.bacnetClient) return;\n      if (this.settings['deviceTypeMstp'].value) {\n        this.bacnetClient.readPropertyMultiple(\n          {\n            address: deviceAddress,\n            net: this.networkNumber,\n            adr: [this.settings['macAddress'].value],\n          },\n          requestArray,\n          (error, value) => {\n            resolve({\n              error: error,\n              value: value,\n            });\n          },\n        );\n      } else {\n        this.bacnetClient.readPropertyMultiple(deviceAddress, requestArray, (error, value) => {\n          resolve({\n            error: error,\n            value: value,\n          });\n        });\n      }\n    });\n  }\n\n  // bacnet lib point read function\n  readProperty(deviceAddress, obj): Promise<any> {\n    return new Promise(resolve => {\n      if (this.settings['deviceTypeMstp'].value) {\n        this.bacnetClient.readProperty(\n          { address: deviceAddress, net: this.networkNumber, adr: [this.settings['macAddress'].value] },\n          { type: obj.type, instance: obj.instance },\n          Bacnet.enum.PropertyIdentifier.PRESENT_VALUE,\n          (error, value) => {\n            resolve({\n              error: error,\n              value: value,\n            });\n          },\n        );\n      } else {\n        this.bacnetClient.readProperty(\n          deviceAddress,\n          { type: obj.type, instance: obj.instance },\n          Bacnet.enum.PropertyIdentifier.PRESENT_VALUE,\n          (error, value) => {\n            resolve({\n              error: error,\n              value: value,\n            });\n          },\n        );\n      }\n    });\n  }\n\n  readPresentValue(obj): any {\n    return this.readProperty(this.settings['ip'].value, obj);\n  }\n\n  findValueById(properties, id) {\n    const property = properties.find(function(element) {\n      return element.id === id;\n    });\n    if (property && property.value && property.value.length > 0) {\n      if (property.value[0].value.errorClass) {\n        return null;\n      }\n      return property.value[0].value;\n    } else {\n      return null;\n    }\n  }\n\n  mapToDeviceObject(object): DeviceObject {\n    if (!object || !object.values) {\n      return null;\n    }\n    const objectInfo = object.values[0].objectId.instance;\n    const objectProperties = object.values[0].values;\n    const name = this.findValueById(objectProperties, Bacnet.enum.PropertyIdentifier.OBJECT_NAME);\n    const description = this.findValueById(objectProperties, Bacnet.enum.PropertyIdentifier.DESCRIPTION);\n    const type = this.findValueById(objectProperties, Bacnet.enum.PropertyIdentifier.OBJECT_TYPE);\n    const units = this.findValueById(objectProperties, Bacnet.enum.PropertyIdentifier.UNITS);\n    const presentValue = this.findValueById(objectProperties, Bacnet.enum.PropertyIdentifier.PRESENT_VALUE);\n\n    return { objectInfo, name, description, type, units, presentValue };\n  }\n\n  async scanDeviceFunc(): Promise<Array<DeviceObject>> {\n    const device = {\n      deviceId: this.settings['deviceId'].value,\n      address: this.settings['ip'].value,\n    };\n    this.setOutputData(1, `INFO: Scan device ID: ${JSON.stringify(device)}`);\n    this.setOutputData(2, ``);\n    return new Promise((resolve, reject) => {\n      this.readObjectList(device.address, device.deviceId, async (err, result) => {\n        if (!err) {\n          const objectArray = result.values[0].values[0].value;\n\n          this.setOutputData(1, `INFO: Scan device ID: ${JSON.stringify(device)}`);\n          this.setOutputData(2, ``);\n          const outputs = [];\n          for (const object of objectArray) {\n            try {\n              const output = await this.readObjectFull(device.address, {\n                type: object.value.type,\n                instance: object.value.instance,\n              });\n              outputs.push(output);\n            } catch (error) {\n              this.setOutputData(1, ``);\n              this.setOutputData(2, `ERROR: while fetching objects: ${JSON.stringify(error)}`);\n              reject(error);\n            }\n            await Utils.sleep(this.delayBetweenDevice);\n          }\n          const successfulResults = outputs.filter(element => !element.error);\n          const deviceObjects = successfulResults.map(element => {\n            return this.mapToDeviceObject(element.value);\n          });\n          this.debugInfo(`BACNET-NETWORK-POINT-NODE: msg from device ${JSON.stringify(deviceObjects)}`);\n          this.setOutputData(1, `INFO: Scan device ID: ${JSON.stringify(deviceObjects)}`);\n          resolve(deviceObjects);\n        } else {\n          this.setOutputData(1, ``);\n          this.setOutputData(2, `ERROR: while fetching objects: ${JSON.stringify(err)}`);\n          reject(err);\n        }\n      });\n    });\n  }\n\n  subscribe({ action, payload }) {\n    switch (action) {\n      case ADD_POINT:\n        this.pointNodes.push(payload);\n        break;\n      case REMOVE_POINT:\n        this.pointNodes = this.pointNodes.filter(pointNode => pointNode.id !== payload.id);\n        break;\n      case GET_NETWORK_NODE:\n        return BacnetUtils.getNetworkNode(this.getParentNode());\n      case GET_POINTS:\n        return this.points;\n      case GET_PRESENT_VALUE:\n        return this.readPresentValue(payload);\n      case SEND_PAYLOAD_TO_CHILD:\n        this.bacnetClient = payload.bacnetClient;\n        this.networkNode = payload.networkNode;\n        this.updateNetworkSettings();\n        if (!this.isFirst) {\n          // We can check settings with older settings if we want\n          this.setPayloadsToPointNodes();\n        }\n        this.isFirst = false;\n        this.requestPoll().then();\n        break;\n      case WRITE_PRESENT_VALUE:\n        this.writePresentValue(this.settings['ip'].value, payload[0], payload[1], payload[2], payload[3], payload[4]);\n\n        break;\n      default:\n        this.debugWarn(\"Request action doesn't match\");\n    }\n  }\n\n  persistSettings() {\n    if (!this.container.db) return;\n    this.container.db.updateNode(this.id, this.container.id, {\n      $set: {\n        settings: this.settings,\n        properties: this.properties,\n      },\n    });\n  }\n\n  async polling() {\n    if (this.currentPollValue() !== Poll.START || !this.shouldPoll) {\n      this.isPolling = false;\n      return;\n    }\n    await actor.process<any>(() => this.pollingFuncOrTimeout());\n    await actor.process<any>(async () => await Utils.sleep(this.delayBetweenDevice));\n    await Utils.sleep(this.networkNode.settings['devicePolling'].value);\n    await this.polling();\n  }\n\n  /**\n   * If any reason await function got to wait indefinitely long then timeout such function\n   */\n  pollingFuncOrTimeout(): Promise<any> {\n    const that = this;\n    return Promise.race([\n      this.pollingFunc(),\n      new Promise((_, reject) =>\n        setTimeout(() => reject(new Error('timeout')), this.networkNode.settings['devicePolling'].value),\n      ),\n    ]).catch(function(err) {\n      that.debugErr(`Error: ${err}`);\n    });\n  }\n\n  async pollingFunc() {\n    for (let pointNode of this.pointNodes) {\n      let selectPoint = pointNode.settings['pointsList'].value;\n      const manualPoint = pointNode.settings['manualPoint'].value;\n      const objectType = pointNode.settings['objectType'].value;\n      const objectInstance = pointNode.settings['objectInstance'].value;\n      if (manualPoint) {\n        selectPoint = { type: objectType, instance: objectInstance };\n      }\n      if (selectPoint) {\n        const value = await this.readPresentValue(selectPoint);\n        this.debugInfo(`BACNET-NETWORK-DEVICE-NODE: msg from readPresentValue ${JSON.stringify(value)}`);\n        BacnetUtils.sendPointValue(pointNode, value);\n        await Utils.sleep(this.delayBetweenPoint);\n      }\n    }\n  }\n}\nContainer.registerNodeType(BACNET_DEVICE, BACnetDevice, BACNET_NETWORK);\n","import { isNull } from '../../../../utils/helper';\nimport { BACNET_DEVICE, BACNET_POINT } from '../../../constants';\nimport { Container } from '../../../container';\nimport { NODE_INFO } from '../../../node-info';\nimport { Side } from '../../../node-interface';\nimport { NodeSetting, SettingType, Type } from '../../../node-io';\nimport Utils from '../../../utils';\nimport HistoryBase from '../../history/HistoryBase';\nimport { SEND_PAYLOAD_TO_CHILD, SEND_POINT_VALUE } from './bacnet-constant';\nimport { BACnetNetwork } from './bacnet-network';\nimport BacnetUtils from './bacnet-utils';\nimport { DeviceObject } from './interface';\n\nclass BACnetPoint extends HistoryBase {\n  networkNumber: number;\n  points: Array<DeviceObject> = [];\n  // poll count\n  pollCount = 0;\n  pollCountFail = 0;\n\n  // node input nums\n  inputInNum = 0;\n\n  // node output nums\n  outputOutNum = 0;\n  jsonOutNum = 1;\n  errorOutNum = 2;\n  logsOutNum = 3;\n\n  constructor() {\n    super();\n    this.title = NODE_INFO['protocols/bacnet']['bacnet-point'].title;\n    this.description = NODE_INFO['protocols/bacnet']['bacnet-point'].description;\n    this.addInput('input', Type.ANY);\n    this.addOutput('output', Type.STRING);\n    this.addOutput('output json', Type.STRING);\n    this.addOutput('error', Type.STRING);\n    this.addOutput('logs', Type.STRING);\n    this.settings['pointEnable'] = NodeSetting.create({\n      description: 'Point enable',\n      value: false,\n      type: SettingType.BOOLEAN,\n    });\n    this.settings['pointWriteEnable'] = NodeSetting.create({\n      description: 'Point write enable',\n      value: false,\n      type: SettingType.BOOLEAN,\n    });\n    this.settings['manualPoint'] = NodeSetting.create({\n      description: 'Add point manually',\n      value: false,\n      type: SettingType.BOOLEAN,\n    });\n\n    this.settings['pointsList'] = NodeSetting.create({\n      description: 'Select a point',\n      value: null,\n      type: SettingType.DROPDOWN,\n      config: {\n        items: [],\n      },\n    });\n    this.settings['objectType'] = NodeSetting.create({\n      description: 'Output type',\n      type: SettingType.DROPDOWN,\n      config: {\n        items: [\n          { value: 0, text: 'analog-input' },\n          { value: 1, text: 'analog-output' },\n          { value: 2, text: 'analog-value' },\n          { value: 3, text: 'binary-input' },\n          { value: 4, text: 'binary-output' },\n          { value: 5, text: 'binary-value' },\n          { value: 13, text: 'multi-state-input' },\n          { value: 14, text: 'multi-state-output' },\n          { value: 19, text: 'multi-state-value' },\n        ],\n      },\n      value: 0,\n    });\n    // The data-type of the value to be written.\n    this.settings['objectTag'] = NodeSetting.create({ //The data-type of the value to be written.\n      description: 'Data type value to be written',\n      type: SettingType.DROPDOWN,\n      config: {\n        items: [\n          { value: 0, text: 'NULL(0)' },\n          { value: 1, text: 'BOOLEAN(1)' },\n          { value: 2, text: 'UNSIGNED_INTEGER(2)' },\n          { value: 3, text: 'SIGNED_INTEGER(3)' },\n          { value: 4, text: 'REAL(4)' },\n          { value: 5, text: 'DOUBLE(5)' },\n          { value: 6, text: 'OCTET_STRING(6)' },\n          { value: 7, text: 'CHARACTER_STRING(7)' },\n          { value: 8, text: 'BIT_STRING(8)' },\n          { value: 9, text: 'ENUMERATED(9)' },\n          { value: 10, text: 'DATE(10)' },\n          { value: 11, text: 'TIME(11)' },\n          { value: 12, text: 'OBJECTIDENTIFIER(12)' },\n        ],\n      },\n      value: 1,\n    });\n\n    this.settings['objectInstance'] = NodeSetting.create({\n      description: 'Point ID',\n      value: 1,\n      type: SettingType.NUMBER,\n    });\n\n    this.settings['priority'] = NodeSetting.create({\n      description: 'Priority Number',\n      value: 16,\n      type: SettingType.NUMBER,\n    });\n    this.settings['logs'] = NodeSetting.create({\n      description: 'Return full bacnet payload',\n      value: false,\n      type: SettingType.BOOLEAN,\n    });\n    this.setSettingsConfig({\n      conditions: {\n        pointsList: setting => {\n          return !setting['manualPoint'].value;\n        },\n        objectType: setting => {\n          return setting['manualPoint'].value;\n        },\n      },\n    });\n    this.addHistorySettingsConfig(0, false);\n  }\n\n  async onAdded() {\n    super.onAdded();\n    // this.name = `BACnet Point: cid_${this.container.id.toString()}_id${this.id.toString()}`; //set default node name\n    if (this.side !== Side.server) return; // only execute on server\n    await Utils.sleep(2000); // TODO: Since device should start after network > device, import may shows issue if we don't have this\n    this.points = BacnetUtils.getPoints(this.getParentNode());\n    this.setPointsListItems();\n    this.getPresentValue();\n    BacnetUtils.addPoint(this.getParentNode(), this);\n  }\n\n  async onInputUpdated() {\n    // this.setOutputData(0, 1);\n    await super.onInputUpdated();\n    if (this.side !== Side.server) return; // only execute on server\n    let objectType: number;\n    let objectInstance: number;\n    const value = this.getInputData(0);\n    const priority = this.settings['priority'].value;\n    const manualPoint = this.settings['manualPoint'].value;\n    const selectPoint = this.settings['pointsList'].value;\n    const objectTag = this.settings['objectTag'].value;\n    let pointWriteEnable = this.settings['pointWriteEnable'].value;\n    if (manualPoint) {\n      objectType = this.settings['objectType'].value;\n      objectInstance = this.settings['objectInstance'].value;\n    }\n    if (selectPoint) {\n      objectType = selectPoint.type;\n      objectInstance = selectPoint.instance;\n    }\n    if (isNull(value)) return;\n    if (pointWriteEnable === false) return;\n    // write point value\n    BacnetUtils.writePresentValue(this.getParentNode(), [objectType, objectInstance, value, priority, objectTag]);\n  }\n\n  async onAfterSettingsChange() {\n    await super.onAfterSettingsChange();\n    this.getPresentValue();\n    const networkNode: BACnetNetwork = BacnetUtils.getNetworkNode(this.getParentNode());\n    if (networkNode.settings?.networkNumber?.value) {\n      this.networkNumber = networkNode.settings?.networkNumber?.value;\n    }\n  }\n\n  onRemoved() {\n    super.onRemoved();\n    BacnetUtils.removePoint(this.getParentNode(), this);\n  }\n\n  getPresentValue() {\n    if (this.side !== Side.server) return; // only execute on serve\n    let selectPoint = this.settings['pointsList'].value;\n    const manualPoint = this.settings['manualPoint'].value;\n    const objectType = this.settings['objectType'].value;\n    const objectInstance = this.settings['objectInstance'].value;\n    if (manualPoint) {\n      selectPoint = { type: objectType, instance: objectInstance };\n    }\n    if (selectPoint) {\n      BacnetUtils.getPresentValue(this.getParentNode(), selectPoint).then(msg => {\n        this.setPointValue(msg);\n      });\n    }\n  }\n\n  setPointValue(msg) {\n    const logs = this.settings['logs'].value;\n    if (logs) {\n      this.setOutputData(this.logsOutNum, true, true);\n      this.debugInfo(`BACNET-NETWORK-POINT-NODE: msg from device ${JSON.stringify(msg)}`);\n    }\n    if (msg?.value?.values?.[0]?.value === undefined) {\n      this.setOutputData(this.errorOutNum, true, true);\n      this.debugErr(`BACNET-NETWORK-POINT-NODE: msg from device node is invalid ${JSON.stringify(msg)}`);\n      return;\n    }\n    let pointValue = msg.value.values[0].value;\n    let objectType: number;\n    let objectInstance: number;\n    let pointEnable = this.settings['pointEnable'].value;\n    let pointWriteEnable = this.settings['pointWriteEnable'].value;\n    const priority = this.settings['priority'].value;\n    const manualPoint = this.settings['manualPoint'].value;\n    const selectPoint = this.settings['pointsList'].value;\n    const pointsList = this.settings['pointsList'].config.items;\n    let bacnetPointName;\n\n    if (manualPoint) {\n      objectType = this.settings['objectType'].value;\n      objectInstance = this.settings['objectInstance'].value;\n    }\n    if (selectPoint) {\n      objectType = selectPoint.type;\n      objectInstance = selectPoint.instance;\n      // get bacnet point name\n      if (pointsList) {\n        let obj = pointsList;\n        for (let key in obj) {\n          if (\n            obj.hasOwnProperty(key) &&\n            obj[key].value.type === selectPoint.type &&\n            obj[key].value.instance === selectPoint.instance\n          ) {\n            bacnetPointName = obj[key];\n          }\n        }\n      }\n    }\n\n    if (msg.value) {\n      this.pollCount++;\n      const json = {\n        name: this.name,\n        pointValue: pointValue,\n        enable: pointEnable,\n        pointWriteEnable: pointWriteEnable,\n        objectType: objectType,\n        objectInstance: objectInstance,\n        priority: priority,\n        bacnetPointName: bacnetPointName,\n        pollCount: this.pollCount,\n        pollCountFail: this.pollCountFail,\n      };\n      this.setOutputData(this.outputOutNum, pointValue);\n      this.setJsonOutput(json);\n      this.setOutputData(this.errorOutNum, null, true);\n    } else {\n      this.setOutputData(this.outputOutNum, null, true);\n      this.setJsonOutput(null);\n      if (msg.error) {\n        this.setOutputData(this.errorOutNum, 'Error on reading value');\n        this.pollCountFail++;\n      }\n    }\n  }\n\n  setJsonOutput(json) {\n    this.setOutputData(this.jsonOutNum, json);\n    return json;\n  }\n\n  setPointsListItems() {\n    this.settings['pointsList'].config.items = this.points.map(point => {\n      return {\n        value: { type: point.type, instance: point.objectInfo },\n        text: point.name,\n      };\n    });\n    this.persistConfiguration();\n    this.broadcastSettingsToClients();\n  }\n\n  subscribe({ action, payload }) {\n    switch (action) {\n      case SEND_PAYLOAD_TO_CHILD:\n        this.points = payload.points;\n        this.setPointsListItems();\n        break;\n      case SEND_POINT_VALUE:\n        this.setPointValue(payload);\n        break;\n      default:\n        this.debugWarn(\"Request action doesn't match\");\n    }\n  }\n}\nContainer.registerNodeType(BACNET_POINT, BACnetPoint, BACNET_DEVICE);\n","import { Enumify } from 'enumify';\n\nexport class InputMethod extends Enumify {\n  static VALUE_PRIORITY = new InputMethod('Value and Priority');\n  static PRIORITY_ARRAY_LOT = new InputMethod('Priority Array');\n  static PRIORITY_ARRAY_JSON = new InputMethod('JSON');\n  static _ = InputMethod.closeEnum();\n\n  readonly label: string;\n\n  constructor(label: string) {\n    super();\n    this.label = label;\n  }\n\n  static items(): { text: string; value: any }[] {\n    return InputMethod.enumKeys.map(k => {\n      return { value: k, text: (<InputMethod>InputMethod.enumValueOf(k)).label };\n    });\n  }\n}\n","//\n// BACnet device implementation.\n// Top level structure for a device object.\n//\n\nconst assert = require('assert');\nconst bacnet = require('node-bacnet');\nconst logger = require('logplease').create('bacnet', { color: 4 });\n\nconst BE = bacnet && bacnet.enum;\nconst PI = BE && BE.PropertyIdentifier;\n\nconst BACnetObject         = require('./bacnet-object');\nconst BACnetObjectProperty = require('./bacnet-object-property');\nconst Util                 = require('./util');\n\nclass BACnetDevice extends BACnetObject {\n  /**\n   * Create a new BACnet device and listen for BACnet traffic.\n   *\n   * @param deviceInfo\n   *   Must contain all members in `devicePropMap`, plus:\n   *   - `name`: Device friendly name for user display.\n   *   - `deviceId`: BACnet device instance.  Must be a unique number on the\n   *     BACnet network.\n   *\n   * @param hostInfo\n   *   - port: BACnet port to listen on, omit for default 47808.\n   *   - ip: If functioning as a BBMD, this is our own IP address.  Must be\n   *     reachable by the BMS, which will contact us directly on the IP after\n   *     locating us by using the BBMD to forward us broadcasts.\n   *   - interface: Optional IP address to bind to.\n   * @param covListener BACnet change of value listener\n   */\n  constructor(deviceInfo, hostInfo = {}, covListener) {\n    super(null, deviceInfo.deviceId, BE.ObjectType.DEVICE, deviceInfo.name);\n    this.dev         = this;\n    this.deviceInfo  = deviceInfo;\n    this.hostInfo    = hostInfo;\n    this.client      = null;\n    this.covListener = covListener;\n  }\n\n  getProperty(propertyId) {\n    switch (propertyId) {\n      case PI.APDU_TIMEOUT: {\n        // Get the timeout value from node-bacstack\n        const prop  = new BACnetObjectProperty(this, propertyId, undefined, true);\n        prop._value = this.client._settings.apduTimeout;\n        return prop;\n      }\n      default:\n        return super.getProperty(propertyId);\n    }\n  }\n\n  /**\n   * The default code will respond to unhandled messages with an error, however\n   * the error will be broadcasted to the local subnet.  Since we are\n   * functioning as a hybrid device+BBMD, we need to examine the message and if\n   * it has been sent to us as if we're a BBMD, then we need to respond in BBMD\n   * mode instead, otherwise the error response won't make it to the caller and\n   * they will think we have gone offline.\n   */\n  onUnhandledEvent(msg) {\n    if (msg.header.expectingReply) {\n      if (msg.header.sender.forwardedFrom) {\n        // Message came from a BBMD, so need to reply as if we're a BBMD.\n        msg.header.sender.forwardedFrom = this.ip;\n      }\n      const enumType = msg.header.confirmedService ? BE.ConfirmedServiceChoice : BE.UnconfirmedServiceChoice;\n      logger.debug('Replying with error for unhandled service:' + BE.getEnumName(enumType, msg.service));\n      this.client.errorResponse(msg.header.sender, msg.service, msg.invokeId, BE.ErrorClass.SERVICES,\n                                BE.ErrorCode.REJECT_UNRECOGNIZED_SERVICE);\n    }\n  }\n\n  onRegisterForeignDevice(msg) {\n    logger.debug('[recv] Register foreign device:', msg.header.sender.address, 'for TTL', msg.payload.ttl);\n    // Add to device table\n    // TODO: Use a date + TTL so we don't have to keep checking it\n    this.bdt[msg.header.sender.address] = msg.payload.ttl;\n    this.client.resultResponse(msg.header.sender, BE.BvlcResultFormat.SUCCESSFUL_COMPLETION);\n  }\n\n  onWhoIs(msg) {\n    logger.debug('onWhoIs');\n    if (msg.payload.lowLimit === undefined || msg.payload.highLimit === undefined ||\n        (msg.payload.lowLimit <= this.instance && msg.payload.highLimit >= this.instance)) {\n      if (msg.header.sender.forwardedFrom) {\n        // Message came from a BBMD, so need to reply as if we're a BBMD.\n        //msg.header.sender.forwardedFrom = this.ip;\n\n        // Actually it seems like responses should be returned direct to the\n        // caller by the device, bypassing the BBMD.\n        msg.header.sender.forwardedFrom = null;\n      }\n\n      logger.debug(msg.header.sender, this.instance, this.getProperty(PI.SEGMENTATION_SUPPORTED).value,\n                   this.getProperty(PI.VENDOR_IDENTIFIER).value);\n\n      logger.debug(\n        `[send] Replying to whoIs(${msg.payload.lowLimit}..` + `${msg.payload.highLimit}): iAm ${this.instance} -> ` +\n        `${msg.header.sender.address}/${msg.header.sender.forwardedFrom}`);\n      this.client.iAmResponse(msg.header.sender, this.instance, this.getProperty(PI.SEGMENTATION_SUPPORTED).value,\n                              this.getProperty(PI.VENDOR_IDENTIFIER).value);\n    }\n  }\n\n  onWriteProperty(data) {\n    logger.debug(`onWriteProperty: ${JSON.stringify(data)}`);\n    const object = this.getObject(data.payload.objectId.instance, data.payload.objectId.type);\n    if (!object) {\n      return this.client.errorResponse(data.header.sender, data.service, data.invokeId, BE.ErrorClass.OBJECT,\n                                       BE.ErrorCode.UNKNOWN_OBJECT);\n    }\n    let property  = object.getProperty(data.payload.value.property.id);\n    let property3 = object.getProperty(PI.PRIORITY_ARRAY);\n    let value2    = this.encodePropValue(property3);\n\n    if (!property) {\n      return this.client.errorResponse(data.header.sender, data.service, data.invokeId, BE.ErrorClass.PROPERTY,\n                                       BE.ErrorCode.UNKNOWN_PROPERTY);\n    }\n    if (data.payload.value.property.index === 0xffffffff) {\n      let pri = data.payload.value.priority;\n      let val = data.payload.value.value[0].value;\n\n      function arrType(arr, pri, value) {\n        let i;\n        for (i in arr) {\n          let arrNum = parseInt(i) + 1;\n          if (arrNum === pri) {\n            arr[i].value = value;\n            // break;\n          }\n        }\n        return arr;\n      }\n\n      let aa  = arrType(value2, pri, val);\n      let arr = [];\n      let p;\n      for (p in aa) {\n        arr.push(aa[p].value);\n      }\n\n      let priorityValue;\n      let priorityNum;\n      let priorityArr;\n      let q;\n      for (q in arr) {\n        priorityValue = arr[q];\n        priorityNum   = parseInt(q) + 1;\n        priorityArr   = { priorityNum: parseInt(q) + 1, val: arr[q] };\n\n        if (arr[q] != null) {\n          break;\n        }\n      }\n      const inpPresentValue2 = object.addProperty(PI.PRIORITY_ARRAY, BE.ApplicationTags.REAL);\n      inpPresentValue2.value = arr;\n\n      const inpPresentValue23 = object.addProperty(PI.PRESENT_VALUE, BE.ApplicationTags.REAL);\n      inpPresentValue23.value = priorityValue;\n\n      this.client.simpleAckResponse(data.header.sender, data.service, data.invokeId);\n      this.covListener({\n                         objectType   : data.payload.objectId.type,\n                         objectId     : data.payload.objectId.instance,\n                         presentValue : priorityValue,\n                         priority     : priorityNum,\n                         priorityArray: arr,\n                       });\n    } else {\n      let slot = data.payload.value.property.index;\n      if (!slot) {\n        return this.client.errorResponse(data.header.sender, data.service, data.invokeId, BE.ErrorClass.PROPERTY,\n                                         BE.ErrorCode.INVALID_ARRAY_INDEX);\n      }\n      this.client.simpleAckResponse(data.header.sender, data.service, data.invokeId);\n    }\n  }\n\n  onReadProperty(msg) {\n    logger.debug('onReadProperty', msg);\n    const propertyName = Util.getEnumName(PI, msg.payload.property.id);\n    const typeName     = Util.getEnumName(BE.ObjectType, msg.payload.objectId.type);\n    const objectIdName = typeName + ':' + msg.payload.objectId.instance;\n    logger.debug(`[recv/${msg.header.sender.address}] readProperty: ${objectIdName}/${propertyName}`);\n\n    const object = this.getObject(msg.payload.objectId.instance, msg.payload.objectId.type);\n    if (!object) {\n      logger.debug(\n        `[send/${msg.header.sender.address}] Requested non-existent ` + `object ${objectIdName}, responding with error`,\n      );\n      return this.client.errorResponse(msg.header.sender, BE.ConfirmedServiceChoice.READ_PROPERTY, msg.invokeId,\n                                       BE.ErrorClass.OBJECT, BE.ErrorCode.UNKNOWN_OBJECT);\n    }\n\n    let property = object.getProperty(msg.payload.property.id);\n    if (!property) {\n      logger.debug(\n        `[send/${msg.header.sender.address}] Requested non-existent ` +\n        `property ${propertyName} for object ${objectIdName}, responding ` +\n        `with error`,\n      );\n      return this.client.errorResponse(msg.header.sender, BE.ConfirmedServiceChoice.READ_PROPERTY, msg.invokeId,\n                                       BE.ErrorClass.PROPERTY, BE.ErrorCode.UNKNOWN_PROPERTY);\n    }\n\n    if (msg.payload.property.index === 0xffffffff) {\n      const content = this.encodePropValue(property);\n      // const inpPresentValue = object.addProperty(\n      // \tPI.PRESENT_VALUE,\n      // \tBE.ApplicationTags.REAL\n      // );\n      // inpPresentValue.value = Math.floor(Math.random() * 100);  //FOR TESTING\n      this.client.readPropertyResponse(msg.header.sender, msg.invokeId, msg.payload.objectId, msg.payload.property,\n                                       content);\n      logger.debug(\n        `[send/${msg.header.sender.address}] readPropertyResponse@all: ${objectIdName}/${propertyName} => %O`, content);\n    } else {\n      const slot = property.value[msg.payload.property.index];\n      if (!slot) {\n        return this.client.errorResponse(msg.header.sender, BE.ConfirmedServiceChoice.READ_PROPERTY, msg.invokeId,\n                                         BE.ErrorClass.PROPERTY, BE.ErrorCode.INVALID_ARRAY_INDEX);\n      }\n\n      this.client.readPropertyResponse(msg.header.sender, msg.invokeId, msg.payload.objectId, msg.payload.property,\n                                       this.encodePropValue(slot));\n      logger.debug(\n        `[send/${msg.header.sender.address}] readPropertyResponse@${msg.payload.property.index}: ${objectIdName}/${propertyName}`,\n      );\n    }\n  }\n\n  onReadPropertyMultiple(msg) {\n    logger.debug(`onReadPropertyMultiple: ${msg}`);\n    logger.debug(`[recv/${msg.header.sender.address}] readPropertyMultiple`);\n    const responseList = [];\n    const propGroups   = msg.payload.properties;\n\n    propGroups.forEach(propGroup => {\n      const typeName         = Util.getEnumName(BE.ObjectType, propGroup.objectId.type);\n      const objectIdName     = typeName + ':' + propGroup.objectId.instance;\n      const propListFriendly = propGroup.properties.map(prop => Util.getEnumName(PI, prop.id));\n      logger.debug(\n        `[recv/${msg.header.sender.address}] readPropertyMultiple: object ${objectIdName}/%o`,\n        propListFriendly,\n      );\n\n      // BACnet spec 15.7.2\n      // If a device ID of 4194303 is given for a DEVICE(8) read, it should be\n      // treated as if the correct device instance was supplied, to allow\n      // discovering a device that does not respond with I-Am messages.\n      logger.debug(\n        `[BE.ObjectTypesSupported.DEVICE ${propGroup.objectId.instance}] readPropertyMultiple: instance ${BE.ASN1_MAX_PROPERTY_ID}`,\n      );\n      if (propGroup.objectId.type === BE.ObjectTypesSupported.DEVICE &&\n          propGroup.objectId.instance === BE.ASN1_MAX_PROPERTY_ID) {\n        propGroup.objectId.instance = this.instance;\n      }\n      const object   = this.getObject(propGroup.objectId.instance, propGroup.objectId.type);\n      const propList = [];\n\n      propGroup.properties.forEach(item => {\n        let content;\n        if (!object) {\n          // Object was invalid, so every prop is going to be an error.\n          content = [{\n            type : 0,\n            value: {\n              type      : 'BacnetError',\n              errorClass: BE.ErrorClass.OBJECT,\n              errorCode : BE.ErrorCode.UNKNOWN_OBJECT,\n            },\n          }];\n        } else {\n          if (item.id === PI.ALL) {\n            // Caller wants all properties for this object.\n            object.getAllPropertyIds().forEach(propertyId => {\n              // BACnet spec 15.7.3.1.2\n              // ALL and REQUIRED bulk property requests omit PROPERTY_LIST.\n              if (propertyId === PI.PROPERTY_LIST) return;\n\n              const prop = object.getProperty(propertyId);\n              propList.push(\n                { property: { id: propertyId, index: BE.ASN1_ARRAY_ALL }, value: this.encodePropValue(prop) });\n            });\n            return;\n          }\n\n          // Specific properties are listed, so just get those.\n          const property = object.getProperty(item.id);\n          if (!property) {\n            // Property doesn't exist, include an error for this property but\n            // still allow other valid ones to be returned.\n            content = [{\n              type : 0,\n              value: {\n                type      : 'BacnetError',\n                errorClass: BE.ErrorClass.PROPERTY,\n                errorCode : BE.ErrorCode.UNKNOWN_PROPERTY,\n              },\n            }];\n          } else if (item.index === BE.ASN1_ARRAY_ALL) {\n            content = this.encodePropValue(property);\n          } else {\n            const slot = Array.isArray(property.value) && property.value[item.index];\n            if (!slot) {\n              // This array index within the property is invalid.\n              content = [{\n                type : 0,\n                value: {\n                  type      : 'BacnetError',\n                  errorClass: BE.ErrorClass.PROPERTY,\n                  errorCode : BE.ErrorCode.INVALID_ARRAY_INDEX,\n                },\n              }];\n            } else {\n              content = this.encodePropValue(slot);\n            }\n          }\n        }\n\n        // Add the requested property to the list we will be returning, along\n        // with either its value or an error code.\n        assert(Array.isArray(content));\n        propList.push({ property: { id: item.id, index: item.index }, value: content });\n      });\n\n      // Add the object's props (along with any errors for invalid props), or\n      // the single error object if an invalid object instance was given.\n      responseList.push(\n        { objectId: { type: propGroup.objectId.type, instance: propGroup.objectId.instance }, values: propList });\n    });\n\n    logger.debug(\n      `[send/${msg.header.sender.address}] readPropertyMultiple response: %d objects, %d total properties`,\n      responseList.length,\n      responseList.map(o => o.values.length).reduce((a, b) => a + b),\n    );\n    this.client.readPropertyMultipleResponse(msg.header.sender, msg.invokeId, responseList);\n  }\n\n  onSubscribeCov(msg) {\n    logger.debug('onSubscribeCov');\n    const typeName     = Util.getEnumName(BE.ObjectType, msg.payload.monitoredObjectId.type);\n    const objectIdName = typeName + ':' + msg.payload.monitoredObjectId.instance;\n    logger.debug(`[recv/${msg.header.sender.address}] subscribeCov: object ${objectIdName}`);\n\n    const object = this.getObject(msg.payload.monitoredObjectId.instance, msg.payload.monitoredObjectId.type);\n    if (!object) {\n      // Invalid object\n      logger.debug(`${msg.header.sender.address} tried to subscribe to non-existent object ${objectIdName}`);\n      logger.debug(`[send/${msg.header.sender.address}] Returning error OBJECT:UNKNOWN_OBJECT`);\n      this.client.errorResponse(msg.header.sender, msg.service, msg.invokeId, BE.ErrorClass.OBJECT,\n                                BE.ErrorCode.UNKNOWN_OBJECT);\n      return;\n    }\n\n    // Remove any existing subscription for this property and device, as well as\n    // any expired ones.\n    object.subscriptions = object.subscriptions.filter(\n      sub => sub.subscriberAddress !== msg.header.sender && sub.subscriberProcessId !==\n             msg.payload.subscriberProcessId && sub.lifetime > 0);\n\n    // Add the new subscription if a non-zero lifetime is given (as a zero or\n    // missing lifetime means 'unsubscribe').\n    if (msg.payload.lifetime) {\n      const sub = {\n        subscriberAddress          : msg.header.sender,\n        monitoredObjectId          : msg.payload.monitoredObjectId,\n        subscriberProcessId        : msg.payload.subscriberProcessId,\n        issueConfirmedNotifications: true,\n        invokeId                   : msg.invokeId,\n        lifetime                   : msg.payload.lifetime,\n      };\n      object.subscriptions.push(sub);\n      logger.debug(\n        `Adding subscription to object ${objectIdName} for ${msg.header.sender.address}#${msg.payload.subscriberProcessId}`,\n      );\n\n      // We have to send an update immediately after the subscription, even if\n      // the value hasn't changed.\n      let propList = [];\n      // Get all property values.\n      object.getAllPropertyIds().forEach(propertyId => {\n        const property = object.getProperty(propertyId);\n        propList.push({ property: { id: propertyId }, value: this.encodePropValue(property) });\n      });\n      this.sendPropertyCov(sub, propList);\n    } else {\n      logger.debug(\n        `Removing subscription to object ${objectIdName} by ${msg.header.sender.address}#${msg.payload.subscriberProcessId}`,\n      );\n    }\n\n    logger.debug(`[send/${msg.header.sender.address}] simpleAckResponse for subscribeCov`);\n    this.client.simpleAckResponse(msg.header.sender, msg.service, msg.invokeId);\n  }\n\n  onSubscribeProperty(msg) {\n    logger.debug('onSubscribeProperty');\n    const typeName     = Util.getEnumName(BE.ObjectType, msg.payload.monitoredObjectId.type);\n    const objectIdName = typeName + ':' + msg.payload.monitoredObjectId.instance;\n    logger.debug(`[recv/${msg.header.sender.address}] subscribeCovProperty: object ${objectIdName}`);\n\n    if (!msg.payload.issueConfirmedNotifications) {\n      // Unconfirmed notifications aren't yet implemented in bacstack\n      logger.debug(\n        `Returning error to ${msg.header.sender.address} - unable to subscribe with unconfirmed notifications`,\n      );\n      logger.debug(`[send/${msg.header.sender.address}] Returning error OBJECT:OPTIONAL_FUNCTIONALITY_NOT_SUPPORTED`);\n      this.client.errorResponse(msg.header.sender, msg.service, msg.invokeId, BE.ErrorClass.OBJECT,\n                                BE.ErrorCode.OPTIONAL_FUNCTIONALITY_NOT_SUPPORTED);\n      return;\n    }\n\n    const object = this.getObject(msg.payload.monitoredObjectId.instance, msg.payload.monitoredObjectId.type);\n    if (!object) {\n      // Invalid object\n      logger.debug(`${msg.header.sender.address} tried to subscribe to non-existent object ${objectIdName}`);\n      logger.debug(`[send/${msg.header.sender.address}] Returning error OBJECT:UNKNOWN_OBJECT`);\n      this.client.errorResponse(msg.header.sender, msg.service, msg.invokeId, BE.ErrorClass.OBJECT,\n                                BE.ErrorCode.UNKNOWN_OBJECT);\n      return;\n    }\n\n    const property     = object.getProperty(msg.payload.monitoredProperty.id);\n    const propertyName = Util.getPropName(msg.payload.monitoredProperty.id);\n    if (!property) {\n      // Invalid property\n      logger.debug(\n        `${msg.header.sender.address} tried to subscribe to non-existent property ${objectIdName}/${propertyName}`,\n      );\n      logger.debug(`[send/${msg.header.sender.address}] Returning error PROPERTY:UNKNOWN_PROPERTY`);\n      this.client.errorResponse(msg.header.sender, msg.service, msg.invokeId, BE.ErrorClass.PROPERTY,\n                                BE.ErrorCode.UNKNOWN_PROPERTY);\n      return;\n    }\n\n    // Remove any existing subscription for this property and device, as well as\n    // any expired ones.\n    property.subscriptions = property.subscriptions.filter(\n      sub => sub.subscriberAddress !== msg.header.sender && sub.subscriberProcessId !==\n             msg.payload.subscriberProcessId && sub.lifetime > 0);\n\n    // Add the new subscription if a non-zero lifetime is given (as a zero or\n    // missing lifetime means 'unsubscribe').\n    if (msg.payload.lifetime) {\n      const sub = {\n        subscriberAddress          : msg.header.sender,\n        monitoredObjectId          : msg.payload.monitoredObjectId,\n        subscriberProcessId        : msg.payload.subscriberProcessId,\n        issueConfirmedNotifications: msg.payload.issueConfirmedNotifications,\n        monitoredIndex             : msg.payload.monitoredProperty.index,\n        invokeId                   : msg.invokeId,\n        lifetime                   : msg.payload.lifetime,\n      };\n      property.subscriptions.push(sub);\n      logger.debug(\n        `Adding subscription to property ${objectIdName}/${propertyName} for ${msg.header.sender.address}#${msg.payload.subscriberProcessId}`);\n\n      // We have to send an update immediately after the subscription, even if\n      // the value hasn't changed.\n      let propList = [];\n      propList.push({ property: { id: property.propertyId }, value: this.encodePropValue(property) });\n      this.sendPropertyCov(sub, propList);\n    } else {\n      logger.debug(\n        `Removing subscription to ${objectIdName}/${propertyName} by ${msg.header.sender.address}#${msg.payload.subscriberProcessId}`);\n    }\n\n    logger.debug(`[send/${msg.header.sender.address}] simpleAckResponse for subscribeCovProperty`);\n    this.client.simpleAckResponse(msg.header.sender, msg.service, msg.invokeId);\n  }\n\n  /**\n   * Top-level callback function when any property is changed.  We need to look\n   * up any subscriptions and send messages out as needed.\n   */\n  onObjectPropertyChanged(object, property) {\n    // logger.debug(\"onObjectPropertyChanged\")\n    let propList = [];\n\n    propList.push({ property: { id: property.propertyId }, value: this.encodePropValue(property) });\n\n    if (object.subscriptions) {\n      // TODO: add batch/transaction start/stop functions to collect all changes\n      // up into small number of messages, instead of one per property.\n      object.subscriptions.forEach(sub => {\n        const typeName     = Util.getEnumName(BE.ObjectType, sub.monitoredObjectId.type);\n        const objectIdName = typeName + ':' + sub.monitoredObjectId.instance;\n        this.sendPropertyCov(sub, propList);\n      });\n    }\n\n    if (property.subscriptions) {\n      property.subscriptions.forEach(sub => {\n        const typeName     = Util.getEnumName(BE.ObjectType, sub.monitoredObjectId.type);\n        const objectIdName = typeName + ':' + sub.monitoredObjectId.instance;\n        const propertyName = Util.getPropName(property.propertyId);\n        logger.debug(\n          `[send/${sub.subscriberAddress.address}] confirmedCOVNotification: property ${objectIdName}/${propertyName}`,\n        );\n        this.sendPropertyCov(sub, propList);\n      });\n    }\n  }\n\n  /**\n   * Send a COV notification.\n   *\n   * This is a separate function as we need to send the same message both when\n   * the value changes, as well as when a subscription request comes through.\n   */\n  sendPropertyCov(sub, propList) {\n    logger.debug('sendPropertyCov');\n    const typeName     = Util.getEnumName(BE.ObjectType, sub.monitoredObjectId.type);\n    const objectIdName = typeName + ':' + sub.monitoredObjectId.instance;\n    logger.debug(\n      `[send/${sub.subscriberAddress.address}] confirmedCOVNotification: object ${objectIdName}, ${propList.length} items`,\n    );\n    if (sub.issueConfirmedNotifications) {\n      this.client.confirmedCOVNotification(sub.subscriberAddress, sub.monitoredObjectId, sub.subscriberProcessId,\n                                           this.instance, sub.lifetime, propList, { invokeId: sub.invokeId }, err => {\n          if (err) {\n            logger.debug(`[recv/${sub.subscriberAddress.address}] confirmedCOVNotification was rejected:`, err);\n          } else {\n            logger.debug(`[recv/${sub.subscriberAddress.address}] confirmedCOVNotification was ACKed`);\n          }\n        },\n      );\n    } else {\n      // Sending unsubscribedCOV notifications is not yet implemented in bacstack\n    }\n  }\n\n  /**\n   * Encode a property value so that it matches the requested type.\n   *\n   * This is because we store some values differently to the way they are\n   * transmitted via BACnet.  For example we store a bit string as an array of\n   * enum items, so this needs to be encoded into an integer value before\n   * it can be sent in a readProperty response.\n   *\n   * @param BACnetObjectProperty property\n   *   Property class instance to encode.  This must be an instance of\n   *   BACnetObjectProperty as we need to access the property data type.\n   *\n   * @return Object suitable for passing to node-bacstack in a BACnet message\n   *   response.\n   */\n  encodePropValue(property) {\n    // logger.debug(\"encodePropValue\")\n\n    let encodedValue = property.value;\n    if (!Array.isArray(encodedValue)) encodedValue = [encodedValue];\n\n    // These types need the whole array\n    switch (property.typeId) {\n      case BE.ApplicationTags.BIT_STRING:\n        return [\n          {\n            value: bacnet.createBitstring(encodedValue),\n            type : property.typeId,\n          },\n        ];\n    }\n\n    // These types encode per item within the array.\n    return encodedValue.map(item => ({\n      value: (() => {\n        switch (property.typeId) {\n          case BE.ApplicationTags.NULL:\n          case BE.ApplicationTags.BOOLEAN:\n          case BE.ApplicationTags.UNSIGNED_INTEGER:\n          case BE.ApplicationTags.SIGNED_INTEGER:\n          case BE.ApplicationTags.REAL:\n          case BE.ApplicationTags.DOUBLE:\n          case BE.ApplicationTags.CHARACTER_STRING:\n          case BE.ApplicationTags.ENUMERATED:\n            // Nothing to do\n            return item;\n          //TODO case BE.ApplicationTags.OCTET_STRING:\n          // BIT_STRING is handled above\n          //TODO case BE.ApplicationTags.DATE:\n          //TODO case BE.ApplicationTags.TIME:\n          case BE.ApplicationTags.OBJECTIDENTIFIER:\n            // This comes from the structure used in BACnetObject.getProperty()\n            // for the OBJECT_LIST dynamic property handler.\n            return {\n              type    : item.typeId,\n              instance: item.instance,\n            };\n          default:\n            const typeName = Util.getEnumName(BE.ApplicationTags, property.typeId);\n            logger.debug(`No encoding for data type ${typeName}`);\n            throw new Error(`Encoding for data type ${typeName} has not been implemented in bacnet-device yet.`);\n        }\n      })(),\n      type : property.typeId,\n    }));\n  }\n\n  start() {\n    assert(this.deviceInfo.deviceId, 'Cannot create a new device without a deviceId');\n    assert(this.deviceInfo.name, 'Cannot create a new device without a name');\n\n    // Set some defaults to ensure we comply with BACnet standards\n    this.addProperty(PI.SYSTEM_STATUS).value                = BE.DeviceStatus.OPERATIONAL;\n    this.addProperty(PI.VENDOR_NAME).value                  = 'Nube iO Operations';\n    this.addProperty(PI.VENDOR_IDENTIFIER).value            = 1173;\n    this.addProperty(PI.MODEL_NAME).value                   = 'nube-io-bacnet';\n    this.addProperty(PI.FIRMWARE_REVISION).value            = 1;\n    this.addProperty(PI.APPLICATION_SOFTWARE_VERSION).value = 1;\n    this.addProperty(PI.PROTOCOL_VERSION).value             = 1;\n    this.addProperty(PI.PROTOCOL_REVISION).value            = 1;\n    this.addProperty(PI.PROTOCOL_SERVICES_SUPPORTED).value  = [\n      // These are the BACnet calls we support.\n\n      // BE.ServicesSupported.ACKNOWLEDGE_ALARM,\n      BE.ServicesSupported.CONFIRMED_COV_NOTIFICATION,\n      // BE.ServicesSupported.CONFIRMED_EVENT_NOTIFICATION,\n      // BE.ServicesSupported.GET_ALARM_SUMMARY,\n      // BE.ServicesSupported.GET_ENROLLMENT_SUMMARY,\n      BE.ServicesSupported.SUBSCRIBE_COV,\n      // BE.ServicesSupported.ATOMIC_READ_FILE,\n      // BE.ServicesSupported.ATOMIC_WRITE_FILE,\n      // BE.ServicesSupported.ADD_LIST_ELEMENT,\n      // BE.ServicesSupported.REMOVE_LIST_ELEMENT,\n      // BE.ServicesSupported.CREATE_OBJECT,\n      // BE.ServicesSupported.DELETE_OBJECT,\n      BE.ServicesSupported.READ_PROPERTY,\n      BE.ServicesSupported.READ_PROPERTY_MULTIPLE,\n      BE.ServicesSupported.WRITE_PROPERTY,\n      // BE.ServicesSupported.WRITE_PROPERTY_MULTIPLE,\n      // BE.ServicesSupported.DEVICE_COMMUNICATION_CONTROL,\n      // BE.ServicesSupported.CONFIRMED_PRIVATE_TRANSFER,\n      // BE.ServicesSupported.CONFIRMED_TEXT_MESSAGE,\n      // BE.ServicesSupported.REINITIALIZE_DEVICE,\n      // BE.ServicesSupported.VT_OPEN,\n      // BE.ServicesSupported.VT_CLOSE,\n      // BE.ServicesSupported.VT_DATA,\n      // BE.ServicesSupported.READ_PROPERTY_CONDITIONAL,\n      // BE.ServicesSupported.AUTHENTICATE,\n      // BE.ServicesSupported.REQUEST_KEY,\n      BE.ServicesSupported.I_AM,\n      // BE.ServicesSupported.I_HAVE,\n      // BE.ServicesSupported.UNCONFIRMED_COV_NOTIFICATION,\n      // BE.ServicesSupported.UNCONFIRMED_EVENT_NOTIFICATION,\n      // BE.ServicesSupported.UNCONFIRMED_PRIVATE_TRANSFER,\n      // BE.ServicesSupported.UNCONFIRMED_TEXT_MESSAGE,\n      // BE.ServicesSupported.TIME_SYNCHRONIZATION,\n      // BE.ServicesSupported.WHO_HAS,\n      BE.ServicesSupported.WHO_IS,\n      // BE.ServicesSupported.READ_RANGE,\n      // BE.ServicesSupported.UTC_TIME_SYNCHRONIZATION,\n      // BE.ServicesSupported.LIFE_SAFETY_OPERATION,\n      BE.ServicesSupported.SUBSCRIBE_COV_PROPERTY,\n      // BE.ServicesSupported.GET_EVENT_INFORMATION,\n      // BE.ServicesSupported.WRITE_GROUP,\n      // BE.ServicesSupported.SUBSCRIBE_COV_PROPERTY_MULTIPLE,\n      // BE.ServicesSupported.CONFIRMED_COV_NOTIFICATION_MULTIPLE,\n      // BE.ServicesSupported.UNCONFIRMED_COV_NOTIFICATION_MULTIPLE,\n    ];\n    // PROTOCOL_OBJECT_TYPES_SUPPORTED is handled by our parent class.\n    // OBJECT_LIST is handled by our parent class.\n    this.addProperty(PI.MAX_APDU_LENGTH_ACCEPTED).value = 1482;\n    this.addProperty(PI.SEGMENTATION_SUPPORTED).value   = BE.Segmentation.SEGMENTED_BOTH;\n    // APDU_TIMEOUT is handled by getProperty().\n    this.addProperty(PI.NUMBER_OF_APDU_RETRIES).value   = 3;\n    this.addProperty(PI.DEVICE_ADDRESS_BINDING).value   = [];\n    this.addProperty(PI.DATABASE_REVISION).value        = 1;\n\n    // This property is dynamic since we override getProperty() and provide a\n    // value there.  We have to add it to the list of dynamic properties so that\n    // it gets included when lists of properties are requested, as it will never\n    // appear in `this.properties`.\n    this.dynamicProperties.push(PI.APDU_TIMEOUT);\n\n    // Add ourself to the object list.  We can't use addObject() here as that\n    // will create a new object (with no child properties), whereas we need\n    // this same device object as a child object in order for the OBJECT_LIST\n    // property to be correctly constructed.\n    if (!this.objects[BE.ObjectType.DEVICE]) {\n      this.objects[BE.ObjectType.DEVICE] = {};\n    }\n    this.objects[BE.ObjectType.DEVICE][this.instance] = this;\n\n    this.ip     = this.hostInfo.address;\n    this.client = new bacnet({\n                               adpuTimeout     : this.hostInfo.adpuTimeout,\n                               port            : this.hostInfo.port,\n                               interface       : this.hostInfo.address,\n                               broadcastAddress: this.hostInfo.broadcast,\n                             });\n    // Start with an empty Broadcast Distribution Table.\n    this.bdt    = {};\n\n    // And and empty list of SubscribeCov entries.\n    this.subscriptions = [];\n\n    // Set up BACnet callbacks\n    this.client.on('unhandledEvent', this.onUnhandledEvent.bind(this));\n    this.client.on('registerForeignDevice', this.onRegisterForeignDevice.bind(this));\n    this.client.on('whoIs', this.onWhoIs.bind(this));\n    this.client.on('writeProperty', this.onWriteProperty.bind(this));\n    this.client.on('readProperty', this.onReadProperty.bind(this));\n    this.client.on('readPropertyMultiple', this.onReadPropertyMultiple.bind(this));\n    this.client.on('subscribeCov', this.onSubscribeCov.bind(this));\n    this.client.on('subscribeProperty', this.onSubscribeProperty.bind(this));\n    this.client.reinitializeDevice(this.ip, BE.ReinitializedState.COLDSTART, (err, value) => {\n      //TODO check why client report timeout\n      logger.debug('err: ', err);\n      logger.debug('info: ', value);\n    });\n  }\n\n  stop() {\n    if (this.client !== null) {\n      this.client.close();\n    }\n  }\n\n  /**\n   * Add a new object to the device, such as a sensor reading.\n   *\n   * @param bacnetPoint bacnet point\n   * @return BACnetObject\n   */\n  addPoint(bacnetPoint) {\n    if (!bacnetPoint) {\n      return null;\n    }\n    logger.info(`Adding BACnet point ${bacnetPoint.objectType.label}:${bacnetPoint.objectInstance}...`);\n    logger.info(`Adding BACnet point ${bacnetPoint.objectType.label}:${bacnetPoint.objectInstance}...`);\n    assert(Number.isInteger(bacnetPoint.objectType.value), 'Object type must be a BE.ObjectType value.');\n    assert(Number.isInteger(bacnetPoint.objectInstance), 'Instance ID must be an integer.');\n\n    if (!this.objects[bacnetPoint.objectType.value]) this.objects[bacnetPoint.objectType.value] = {};\n    let object = new BACnetObject(this, bacnetPoint.objectInstance, bacnetPoint.objectType.value, bacnetPoint.objectName);\n    return (this.objects[bacnetPoint.objectType.value][bacnetPoint.objectInstance] = object);\n  }\n\n  updatePoint(bacnetPoint) {\n    if (!bacnetPoint) {\n      return null;\n    }\n    let object = this.getObject(bacnetPoint.objectInstance, bacnetPoint.objectType.value);\n    logger.info(`Updating BACNet point properties ${bacnetPoint.objectType.label}:${bacnetPoint.objectInstance}...`);\n    if (!object) {\n      return this.addPoint(bacnetPoint);\n    }\n    object.addProperty(bacnet.enum.PropertyIdentifier.OBJECT_NAME).value = bacnetPoint.objectName;\n    return (this.objects[bacnetPoint.objectType.value][bacnetPoint.objectInstance] = object);\n  }\n\n  updateValue(bacnetPoint) {\n    if (!bacnetPoint) {\n      return null;\n    }\n    logger.info(`Pushing BACNet point Value ${bacnetPoint.objectType.label}:${bacnetPoint.objectInstance}...`);\n    let object = this.getObject(bacnetPoint.objectInstance, bacnetPoint.objectType.value);\n    if (!object) {\n      return null;\n    }\n    let pv                                                                   = bacnetPoint.pointValue;\n    object.addProperty(PI.PRESENT_VALUE, BE.ApplicationTags.REAL).value      = pv.presentValue;\n    object.addProperty(PI.PRIORITY, BE.ApplicationTags.SIGNED_INTEGER).value = pv.priority;\n    object.addProperty(PI.PRIORITY_ARRAY, BE.ApplicationTags.REAL).value     = Object.values(pv.priorityArray);\n    return pv;\n  }\n\n  delObject(instance, objectTypeId) {\n    assert(Number.isInteger(instance), 'Instance ID must be an integer.');\n    assert(Number.isInteger(objectTypeId), 'Object type must be a BE.ObjectType value.');\n    logger.debug(`BACNet delete object ${objectTypeId}:${instance}`);\n    if (this.objects[objectTypeId]) {\n      delete this.objects[objectTypeId][instance];\n    }\n  }\n}\n\nexport default BACnetDevice;\n","module.exports = require(\"assert\");","//\n// BACnet device implementation.\n// Objects attached to devices.\n//\nconst bacnet = require('node-bacnet');\nconst logger = require('logplease').create('bacnet', { color: 6 });\n\nconst BACnetObjectProperty = require('./bacnet-object-property');\nconst MandatoryProperties  = require('./mandatory-properties');\nconst Util                 = require('./util');\n\nclass BACnetObject {\n  constructor(dev, instance, typeId, name) {\n    this.dev           = dev;\n    this.instance      = instance;\n    this.objects       = {};\n    this.properties    = {};\n    this.subscriptions = [];\n\n    // This is a list of dynamic properties provided by getProperty().  It is\n    // an instance variable so that subclasses can append to it if they override\n    // getProperty().\n    this.dynamicProperties = [\n      bacnet.enum.PropertyIdentifier.OBJECT_IDENTIFIER,\n      bacnet.enum.PropertyIdentifier.PROPERTY_LIST,\n      bacnet.enum.PropertyIdentifier.OBJECT_LIST,\n      bacnet.enum.PropertyIdentifier.PROTOCOL_OBJECT_TYPES_SUPPORTED,\n    ];\n\n    // Set some defaults to ensure we comply with BACnet standards\n    this.addProperty(bacnet.enum.PropertyIdentifier.OBJECT_TYPE).value = typeId;\n    this.addProperty(bacnet.enum.PropertyIdentifier.OBJECT_NAME).value = name;\n    // We don't set PRESENT_VALUE in case the user wants to, and wants to set\n    // it to a different type to the one we might use (e.g. analogue values\n    // are REAL while digital values are BOOLEAN.)\n    this.addProperty(bacnet.enum.PropertyIdentifier.STATUS_FLAGS).value   = [];\n    this.addProperty(bacnet.enum.PropertyIdentifier.EVENT_STATE).value    =\n      bacnet.enum.EventState.NORMAL;\n    this.addProperty(bacnet.enum.PropertyIdentifier.OUT_OF_SERVICE).value = false;\n    this.addProperty(bacnet.enum.PropertyIdentifier.UNITS).value          = bacnet.enum.EngineeringUnits.NO_UNITS;\n  }\n\n  /**\n   * Add a new property if it doesn't already exist, and return it either way.\n   */\n  addProperty(propertyId, typeId = undefined) {\n    propertyId = parseInt(propertyId);\n    if (this.dynamicProperties.includes(propertyId)) {\n      const propertyName = Util.getPropName(propertyId);\n      throw new Error(`Property ${propertyName} is generated on-the-fly and cannot be set.`);\n    }\n    return (\n      this.properties[propertyId] ||\n      (this.properties[propertyId] = new BACnetObjectProperty(this, propertyId, typeId))\n    );\n  }\n\n  /**\n   * Add multiple properties and set their values at the same time.\n   *\n   * This is typically used to set static values like names and descriptions.\n   *\n   * @param object propList\n   *   Associative array.  Array key is PropertyIdentifier enum, and the array\n   *   value is used as the property value.\n   */\n  addPropertyBulk(propList) {\n    Object.keys(propList).forEach(p => {\n      this.addProperty(p).value = propList[p];\n    });\n  }\n\n  /**\n   * Remove a property, since properties can't have 'undefined' as a value.\n   */\n  delProperty(propertyId, index = undefined) {\n    if (index !== undefined) {\n      delete this.properties[propertyId][index];\n    } else {\n      delete this.properties[propertyId];\n    }\n  }\n\n  getProperty(propertyId) {\n    propertyId = parseInt(propertyId);\n    // Some properties are generated dynamically\n    switch (propertyId) {\n      case bacnet.enum.PropertyIdentifier.OBJECT_IDENTIFIER: {\n        // Construct this one from the other properties.\n        const prop  = new BACnetObjectProperty(this, propertyId, undefined, true);\n        prop._value = {\n          // Object type, e.g. BE.ObjectTypesSupported.DEVICE\n          typeId  : this.getProperty(bacnet.enum.PropertyIdentifier.OBJECT_TYPE).value,\n          // Instance number.\n          instance: this.instance,\n        };\n        return prop;\n      }\n\n      case bacnet.enum.PropertyIdentifier.PROPERTY_LIST: {\n        // Return a list of all properties.\n\n        // These properties are not included per the BACnet standard.\n        const ignoreProps  = [\n          bacnet.enum.PropertyIdentifier.OBJECT_NAME,\n          bacnet.enum.PropertyIdentifier.OBJECT_TYPE,\n          bacnet.enum.PropertyIdentifier.OBJECT_IDENTIFIER,\n          bacnet.enum.PropertyIdentifier.PROPERTY_LIST,\n        ];\n        const prop         = new BACnetObjectProperty(this, propertyId, undefined, true);\n        const propertyList = this.getAllPropertyIds();\n        prop._value        = propertyList.filter(p => !ignoreProps.includes(p));\n\n        // Check to ensure all the mandatory properties are included, and warn\n        // the user if not.  This is not required but will help users of this\n        // library create confirmant BACnet devices.\n        const selfTypeId = this.getProperty(bacnet.enum.PropertyIdentifier.OBJECT_TYPE).value;\n        if (MandatoryProperties[selfTypeId]) {\n          const missingProperties = MandatoryProperties[selfTypeId].filter(\n            p => !prop._value.includes(p),\n          );\n          if (missingProperties.length > 0) {\n            const selfName             = this.getProperty(bacnet.enum.PropertyIdentifier.OBJECT_NAME).value;\n            const missingPropertyNames = missingProperties.map(p => Util.getPropName(p));\n            logger.error(\n              `Object #${this.instance}(\"${selfName}\") is missing these mandatory properties: %o`,\n              missingPropertyNames,\n            );\n          }\n        } else {\n          const typeName = Util.getEnumName(bacnet.enum.ObjectType, selfTypeId);\n          logger.error(\n            `TODO: No mandatory properties have been defined for the object type ${typeName}`,\n          );\n        }\n        return prop;\n      }\n\n      case bacnet.enum.PropertyIdentifier.OBJECT_LIST: {\n        let objectList = [];\n        Object.keys(this.objects).forEach(objType => {\n          const objectsOfType = this.objects[objType];\n          Object.keys(objectsOfType).forEach(objectInstance => {\n            const obj = objectsOfType[objectInstance];\n            objectList.push({\n                              typeId  : obj.getProperty(bacnet.enum.PropertyIdentifier.OBJECT_TYPE).value,\n                              instance: obj.instance,\n                            });\n          });\n        });\n        const prop  = new BACnetObjectProperty(this, propertyId, undefined, true);\n        prop._value = objectList;\n        return prop;\n      }\n\n      case bacnet.enum.PropertyIdentifier.PROTOCOL_OBJECT_TYPES_SUPPORTED: {\n        // Run through all our objects and return just the types in use.\n        let typeList = {};\n        Object.keys(this.objects).forEach(objType => {\n          const objectsOfType = this.objects[objType];\n          Object.keys(objectsOfType).forEach(objectInstance => {\n            const obj      = objectsOfType[objectInstance];\n            const type     = obj.getProperty(bacnet.enum.PropertyIdentifier.OBJECT_TYPE).value;\n            typeList[type] = true;\n          });\n        });\n        const prop  = new BACnetObjectProperty(this, propertyId, undefined, true);\n        prop._value = Object.keys(typeList).map(t => parseInt(t));\n        return prop;\n      }\n\n      default:\n        break;\n    }\n    return this.properties[propertyId];\n  }\n\n  getAllPropertyIds() {\n    const propertyList = [\n      ...Object.keys(this.properties),\n      // Also add the dynamic properties generated by this function, since\n      // they won't be in this.properties.\n      ...this.dynamicProperties,\n    ];\n    // Convert the string keys back into integer values that will match enums.\n    return propertyList.map(p => parseInt(p));\n  }\n\n  /**\n   * Called when a child property's value has changed, so that we can notify\n   * any object-level subscribers.\n   */\n  onPropertyChanged(property) {\n    if (!this.dev) return; // happens during init on Device object\n    this.dev.onObjectPropertyChanged(this, property);\n  }\n\n  /**\n   * Return an object with the properties as string keys, suitable for passing\n   * to console.log() to check the current state of the object.\n   *\n   * This is more useful than dumping `this.properties`, as this function will\n   * convert the enums from integers into strings.\n   */\n  dumpProperties() {\n    let fullPropList = Object.keys(this.properties).map(p => parseInt(p));\n\n    // Include dynamic props in the dump\n    fullPropList.push(bacnet.enum.PropertyIdentifier.PROTOCOL_OBJECT_TYPES_SUPPORTED);\n    fullPropList.push(bacnet.enum.PropertyIdentifier.OBJECT_IDENTIFIER);\n    fullPropList.push(bacnet.enum.PropertyIdentifier.PROPERTY_LIST);\n    fullPropList.push(bacnet.enum.PropertyIdentifier.OBJECT_LIST);\n\n    let props = {};\n    fullPropList.forEach(key => {\n      const property = this.getProperty(key);\n      const keyName  = Util.getPropName(key);\n      props[keyName] = property.valueAsString();\n    });\n    return props;\n  }\n\n  /**\n   * Get the sub-object identified by the given instance ID, optionally matching\n   * the given type as well.\n   *\n   * @param instance ID number for the object.\n   *\n   * @param objectTypeId bacnet.enum.ObjectType objectTypeId\n   *   Object type, such as an analogue input or digital output.  This must be\n   *   specified because it is possible to have multiple objects with the same\n   *   instance ID, differing only by type (such as Analogue Input #1 and\n   *   Digital Output #1).\n   *\n   * @return If `instance` and `objectTypeId` are valid, the `BACnetObject` is\n   *   returned.  If `instance` or `objectTypeId` are invalid, `undefined` is\n   *   returned.\n   */\n  getObject(instance, objectTypeId) {\n    const typeGroup = this.objects[objectTypeId];\n    if (!typeGroup) return undefined;\n\n    return typeGroup[instance];\n  }\n}\n\nmodule.exports = BACnetObject;\n","//\n// BACnet device implementation.\n// Mapping between properties and default types.\n//\n\nconst bacnet = require('node-bacnet');\n\nconst pi   = bacnet && bacnet.enum.PropertyIdentifier;\nconst type = bacnet && bacnet.enum.ApplicationTags;\n\nconst propertyTypeMap = bacnet && {\n  [pi.APPLICATION_SOFTWARE_VERSION]   : type.CHARACTER_STRING,\n  [pi.APDU_TIMEOUT]                   : type.UNSIGNED_INTEGER,\n  [pi.DATABASE_REVISION]              : type.UNSIGNED_INTEGER,\n  [pi.DESCRIPTION]                    : type.CHARACTER_STRING,\n  [pi.DEVICE_ADDRESS_BINDING]         : type.CHARACTER_STRING,\n  [pi.DEVICE_TYPE]                    : type.CHARACTER_STRING,\n  [pi.EVENT_STATE]                    : type.ENUMERATED,\n  [pi.FIRMWARE_REVISION]              : type.CHARACTER_STRING,\n  [pi.DEVICE_ADDRESS_BINDING]         : type.OCTET_STRING, // just a guess\n  [pi.MAX_APDU_LENGTH_ACCEPTED]       : type.UNSIGNED_INTEGER,\n  [pi.MODEL_NAME]                     : type.CHARACTER_STRING,\n  [pi.NUMBER_OF_APDU_RETRIES]         : type.UNSIGNED_INTEGER,\n  [pi.OBJECT_IDENTIFIER]              : type.OBJECTIDENTIFIER,\n  [pi.OBJECT_LIST]                    : type.OBJECTIDENTIFIER,\n  [pi.OBJECT_NAME]                    : type.CHARACTER_STRING,\n  [pi.OBJECT_TYPE]                    : type.ENUMERATED,\n  [pi.OUT_OF_SERVICE]                 : type.BOOLEAN,\n  //[pi.PRESENT_VALUE]: Not set as this depends on the object type\n  [pi.PROPERTY_LIST]                  : type.ENUMERATED,\n  [pi.PROTOCOL_OBJECT_TYPES_SUPPORTED]: type.BIT_STRING,\n  [pi.PROTOCOL_REVISION]              : type.UNSIGNED_INTEGER,\n  [pi.PROTOCOL_SERVICES_SUPPORTED]    : type.BIT_STRING,\n  [pi.PROTOCOL_VERSION]               : type.UNSIGNED_INTEGER,\n  [pi.RELIABILITY]                    : type.ENUMERATED,\n  [pi.SEGMENTATION_SUPPORTED]         : type.ENUMERATED,\n  [pi.STATUS_FLAGS]                   : type.BIT_STRING,\n  [pi.SYSTEM_STATUS]                  : type.ENUMERATED,\n  [pi.UNITS]                          : type.ENUMERATED,\n  [pi.UPDATE_INTERVAL]                : type.UNSIGNED_INTEGER,\n  [pi.VENDOR_IDENTIFIER]              : type.UNSIGNED_INTEGER,\n  [pi.VENDOR_IDENTIFIER]              : type.UNSIGNED_INTEGER,\n  [pi.VENDOR_NAME]                    : type.CHARACTER_STRING,\n};\n\nmodule.exports = propertyTypeMap;\n","const bacnet = require('node-bacnet');\n\nconst BE = bacnet && bacnet.enum;\nconst PI = bacnet && BE.PropertyIdentifier;\n\n// Note that OBJECT_IDENTIFIER, OBJECT_NAME, OBJECT_TYPE and PROPERTY_LIST are\n// not included in the lists below, as they are not returned by the\n// PROPERTY_LIST request.  They are also handled internally so should never be\n// omitted by accident.\nmodule.exports = bacnet && {\n  [BE.ObjectType.ANALOG_OUTPUT]: [\n    // PAGE 161 of spec\n    // Object_Identifier  PROP_OBJECT_IDENTIFIER  Type is 12 for a // ASHRE 135-2016 - 20.2.1.4 Application Tags - Enumerators\n    // Object_Name  // CharacterString // type.CHARACTER_STRING,\n    // Object_Type  // BACnetObjectType // type.ENUMERATED,\n    PI.PRESENT_VALUE, // PROP_PRESENT_VALUE Type 4 is  REAL: 4,\n    PI.STATUS_FLAGS, // BACnetStatusFlags  // type.BIT_STRING\n    PI.EVENT_STATE, // BACnetEventState  //  type.ENUMERATED,\n    PI.OUT_OF_SERVICE, //BOOLEAN\n    PI.UNITS, // PAGE 156 of spec Example milliamperes (2),   // type.ENUMERATED\n    PI.PRIORITY_ARRAY, //Type BACnetPriorityArray // PAGE 831 of spec. // depands on the data type. So for an AO its type: 4 and the value is real\n    PI.RELINQUISH_DEFAULT, //REAL\n  ],\n  [BE.ObjectType.ANALOG_INPUT] : [\n    // PAGE 156 of spec\n    // Object_Identifier\n    // Object_Name\n    // Object_Type\n    PI.PRESENT_VALUE,\n    PI.STATUS_FLAGS,\n    PI.EVENT_STATE,\n    PI.OUT_OF_SERVICE,\n    PI.UNITS,\n  ],\n  [BE.ObjectType.DEVICE]       : [\n    PI.SYSTEM_STATUS,\n    PI.VENDOR_NAME,\n    PI.VENDOR_IDENTIFIER,\n    PI.MODEL_NAME,\n    PI.FIRMWARE_REVISION,\n    PI.APPLICATION_SOFTWARE_VERSION,\n    PI.PROTOCOL_VERSION,\n    PI.PROTOCOL_REVISION,\n    PI.PROTOCOL_SERVICES_SUPPORTED,\n    PI.PROTOCOL_OBJECT_TYPES_SUPPORTED,\n    PI.OBJECT_LIST,\n    PI.MAX_APDU_LENGTH_ACCEPTED,\n    PI.SEGMENTATION_SUPPORTED,\n    PI.APDU_TIMEOUT,\n    PI.NUMBER_OF_APDU_RETRIES,\n    PI.DEVICE_ADDRESS_BINDING,\n    PI.DATABASE_REVISION,\n  ],\n};\n","import { PointOutput, PointValueCreator } from '../../../../backend/models/point-model';\nimport { isNull } from '../../../../utils/helper';\nimport { IdGenerator } from '../../../../utils/id-generator';\nimport {\n  DefaultObservable,\n  HasCentralizedListener,\n  ICentralizedListener,\n  MockCentralizedListener,\n  NodeStoreItem,\n  Observer,\n} from '../../../../utils/pattern';\nimport { Container } from '../../../container';\nimport { Node } from '../../../node';\nimport { Side } from '../../../node-interface';\nimport { NodeInput, NodeSetting, SettingType, Type } from '../../../node-io';\nimport { DependantConnectionNode, DependantConnectionNodeMixin } from '../connection-node-mixin';\nimport {\n  DataPointFlowHandler,\n  HasDataPointFlowHandler,\n  HasPointOutputObservers,\n  MockHasPointOutputObservers,\n  PointNodeMixin,\n} from '../model/point-node';\nimport {\n  BACNET_SERVER_NODE_TYPE,\n  PUSH_BACNET_POINT_VALUE,\n  REGISTER_BACNET_POINT,\n  UNREGISTER_BACNET_POINT,\n  UPDATE_BACNET_POINT,\n} from './bacnet-server-node';\nimport { BacnetPoint, BacnetPointCreator, PointKind } from './core/bacnet-model';\n\nclass BACnetServerPointNode extends DependantConnectionNodeMixin(PointNodeMixin(Node))\n  implements HasPointOutputObservers<BacnetPoint>, HasDataPointFlowHandler<BacnetPoint>, DataPointFlowHandler<BacnetPoint>,\n    DependantConnectionNode, HasCentralizedListener {\n  constructor() {\n    super();\n    this.title = 'BACnet Server Point';\n    this.description =\n      'Bacnet-server-point nodes should be added within a bacnet-server container node. ' +\n      'BACnet point details should be set in settings. BACnet point settings include ID, Type, and Name.';\n    this.mixinEnableInputSetting();\n    this.mixinConnectionStatusOutput();\n    this.addInputWithSettings('point-id', Type.NUMBER, 1, 'BACnet Object Id');\n    this.settings['point-kind'] = NodeSetting.create({\n      description: 'BACnet Object Type',\n      type       : SettingType.DROPDOWN,\n      config     : { items: PointKind.items() },\n      value      : PointKind.ANALOG_INPUT.enumKey,\n    });\n    this.addInputWithSettings('point-name', Type.STRING, 'bacnet-point', 'BACnet Point Name');\n    this.setSettingsConfig(this.mixinPointValueInputOutput());\n  }\n\n  flowHandler(): DataPointFlowHandler<BacnetPoint> {\n    return this;\n  }\n\n  listener(): ICentralizedListener {\n    return MockCentralizedListener.cast(this.getParentNode());\n  }\n\n  pointObservers(): Observer<PointOutput<BacnetPoint>>[] {\n    return [...super.pointObservers(),\n            ...MockHasPointOutputObservers.cast(this.getParentNode()).pointObservers()];\n  }\n\n  notifyOutput(point: BacnetPoint, observers: Observer<PointOutput<BacnetPoint>>[]): void {\n    let cp = this.initializePointBySettingObject() ?? point;\n    if (isNull(cp)) {\n      return;\n    }\n    point.pointValue = isNull(point?.pointValue) ? PointValueCreator.by() : point?.pointValue.merge(cp.pointValue);\n    this.settings[this.modelSettingKey()].value = point;\n    new DefaultObservable(observers).notify({ point: point, connStatus: { status: this.getConnectionStatus() } });\n  }\n\n  onRemoved() {\n    if (this.listener() === MockCentralizedListener.LISTENER) {\n      return;\n    }\n    let event = {\n      action : UNREGISTER_BACNET_POINT,\n      payload: this.createPayload(this.initializePointBySettingObject()),\n    };\n    this.listener().listen(event);\n  }\n\n  handleOnUpdate(current: BacnetPoint, prev?: BacnetPoint): BacnetPoint {\n    if (this.side !== Side.server || (!prev?.objectInstance && !current?.objectInstance)) {\n      return null;\n    }\n    let payload = this.createPayload(current);\n    if (!prev || this.getConnectionStatus().isError()) {\n      this.listener().listen({ action: REGISTER_BACNET_POINT, payload });\n    } else if (!current.mightOnlyValueChanged(prev)) {\n      if (!current.equals(prev)) {\n        current.pointValue = PointValueCreator.by();\n      }\n      payload.prev = this.createPayload(prev);\n      this.listener().listen({ action: UPDATE_BACNET_POINT, payload });\n    }\n    if (!current.enabled || (isNull(current?.pointValue?.presentValue) &&\n                             (prev && !current.equals(prev) || isNull(prev?.pointValue?.presentValue)))) {\n      return current;\n    }\n    let cov = current.pointValue.changedOfValue(prev?.pointValue);\n    if (cov) {\n      payload.data.pointValue = cov;\n    }\n    current.pointValue = this.listener().listen({ action: PUSH_BACNET_POINT_VALUE, payload });\n    return current;\n  }\n\n  initializePointBySettingObject(settings?: { [name: string]: NodeSetting }): BacnetPoint {\n    let st = (settings ?? this.settings) as { [name: string]: NodeSetting };\n    return BacnetPointCreator.from(st[this.modelSettingKey()].value);\n  }\n\n  initializePointBySettingInput(settings?: { [name: string]: NodeSetting }): BacnetPoint {\n    let st = (settings ?? this.settings) as { [name: string]: NodeSetting };\n    let kind = <PointKind>PointKind.enumValueOf(st['point-kind'].value);\n    return BacnetPointCreator.by(this.isEnabled(), st['point-id'].value, kind, st['point-name'].value,\n                                 this.createPointValue(st));\n  }\n\n  reEvaluateSettingByInput(inputs: { [p: number]: NodeInput }, settings: { [name: string]: NodeSetting }) {\n    settings['point-id'].value = inputs[1].updated ? inputs[1].data : settings['point-id'].value;\n    settings['point-name'].value = inputs[2].updated ? inputs[2].data : settings['point-name'].value;\n    super.reEvaluateSettingByInput(inputs, settings);\n  }\n\n  onReceiveMessage(point: BacnetPoint): void {\n    this.notifyOutput(point, this.pointObservers());\n  }\n\n  protected statusOutputIdx(): number {\n    return 0;\n  }\n\n  protected enableDescription(): string {\n    return 'Enable BACnet Point';\n  }\n\n  protected modelSettingKey(): string {\n    return 'bp';\n  }\n\n  protected valueInputIdx(): number {\n    return 3;\n  }\n\n  protected valueOutputIdx(): number {\n    return this.errorOutputIdx() + 1;\n  }\n\n  protected computeTitle(): string {\n    let kind = <PointKind>PointKind.enumValueOf(this.settings['point-kind'].value);\n    return `BACnet Point (ObjectType: ${kind.label}, ObjectId: ${this.settings['point-id'].value})`;\n  }\n\n  private createPayload(point: BacnetPoint) {\n    return {\n      identifier: point?.identifier(),\n      enabled   : point?.enabled,\n      data      : point,\n      nodeId    : IdGenerator.createNodeId(this.cid, this.id),\n      callback  : (p: BacnetPoint) => this.onReceiveMessage(p),\n    } as NodeStoreItem;\n  }\n}\n\nContainer.registerNodeType('protocols/bacnet-server/bacnet-server-point', BACnetServerPointNode,\n                           BACNET_SERVER_NODE_TYPE);\n","import Utils from '../../../utils';\nimport { isNull } from '../../../../utils/helper';\nimport { Container } from '../../../container';\nimport { Node } from '../../../node';\nimport { NODE_INFO } from '../../../node-info';\nimport { NodeSetting, SettingType, Type } from '../../../node-io';\nimport { Side } from '../../../node-interface';\nimport config from '../../../../config';\nimport axios from 'axios';\nconst matchMQTT = require('mqtt-match');\nimport * as mqtt from 'mqtt';\n\ninterface MQTTMessage {\n  topic: string;\n  message: string;\n}\n\n\n/*\n- on created call api to get all points\n- on added try connected to mqtt broker\n- on save settings \n-- set MQTT topic if user selected a point\n-- set readonly setting for selectedPoint\n-- call api to get all points as user my have CRUD a new/existing point in backend\n-- set node name as the bacnet point name\n*/\n\n/*\n on input updated send down new value\n*/\n\n/*\n pointsList: is all the points return from the backend api call\n point_object: is the whole point\n selected_point: selected point is to show the point select in the settings as read only\n topic: is the MQTT topic to subtribe from, The objectIdentifier form the topic, It is the combination of the point address and the objectType\n*/\n\n\nexport class BACnetServerRest extends Node {\n  //in nums\n  inputFault = 0;\n  inputOneNum = 1;\n  inputTwoNum = 2;\n  inputThreeNum = 3;\n\n  //out nums\n  outConnection = 0;\n  outNum = 1;\n  outJson = 2;\n\n  //MQTT\n  enable: boolean\n  client: any;\n  messageQueue: Array<MQTTMessage> = [];\n  topic: any;\n  rateLimitMS = 200;\n\n  // bacnet\n  selectedPoint:string\n  pointName:string\n\n  // for stopping sending same value twice to backend\n  lastInput = null;\n  lastSendTime;\n  resendTime = Math.floor(Math.random() * 60) + 1;\n\n  //ip\n  host = '0.0.0.0'\n  port = 1717\n\n  enableDebug = false\n\n  constructor() {\n    super();\n    this.title = NODE_INFO['protocols/bacnet-server']['bacnet-server-api'].title;\n    this.description = NODE_INFO['protocols/bacnet-server']['bacnet-server-api'].description;\n    this.properties['pointObject'] = null;\n    this.settings['selected_point'] = NodeSetting.create({ description: 'Point Object Id', value: '', type: SettingType.READONLY });\n    this.settings['selected_point_name'] = NodeSetting.create({ description: 'Point Name', value: '', type: SettingType.READONLY });\n    this.settings['pointsList'] = NodeSetting.create({\n      description: 'Points List',\n      type: SettingType.AUTOCOMPLETE,\n      config: {\n        items: [],\n      },\n    });\n    this.settings['enable'] = NodeSetting.create({ description: 'Enable', value: true, type: SettingType.BOOLEAN });\n    this.addInput('fault', Type.BOOLEAN);\n    this.addInput('in 1', Type.NUMBER);\n    this.addInput('in 10', Type.NUMBER);\n    this.addInput('in 16', Type.NUMBER);\n    this.addOutput('connection', Type.ANY);\n    this.addOutput('output', Type.ANY);\n    this.addOutput('output-json', Type.JSON);\n  }\n\n  async setTopic() {\n    const point_object = this.getObjectIdentifier()\n    this.topic = `bacnet/server/points/ao/${point_object}`\n  }\n\n  getTopic() {\n    return this.topic\n  }\n\n  getPointUUID() {\n   const obj = this.getPointObject()\n   if (isNull(obj)) return\n   return obj.uuid\n  }\n\n  async getPoints() {\n    await this.fetchPoints(this.host, this.port)\n  }\n\n  async setEnable() {\n    this.enable = this.settings['enable'].value\n  }\n\n  getEnable() {\n    return this.enable\n  }\n\n\n  getPointObject() {\n    return this.properties['pointObject']\n  }\n\n  async setSelectedPoint() {\n    const selectedPoint = this.getPointObject()\n    if (isNull(selectedPoint)) return;\n    const objectName = selectedPoint.object_name\n    const objectType = selectedPoint.object_type;\n    const address = selectedPoint.address;\n    const objectIdentifier =   `${objectType.substring(10)}-${address}`\n    this.settings['selected_point'].value = objectIdentifier\n    this.pointName = `${objectIdentifier} -> ${objectName}`\n    this.settings['selected_point_name'].value = objectName\n    this.broadcastSettingsToClients();\n  }\n\n  getSelectedPoint() {\n    return this.selectedPoint\n  }\n\n  getObjectIdentifier() {\n    return this.settings['selected_point'].value\n  }\n\n\n  updateTitle() {\n    this.title = `BACnet-Server: ${this.pointName}`;\n    this.broadcastTitleToClients();\n  }\n\n\n   onExecute() {\n    if (this.side !== Side.server) return;\n    const pointValueIn1: number = this.getInputData(this.inputOneNum);\n    const pointValueIn10 = this.getInputData(this.inputTwoNum);\n    const pointValueIn16 = this.getInputData(this.inputThreeNum);\n    this.doPointWrite(pointValueIn1, pointValueIn10, pointValueIn16)\n  }\n\n\n\n  inputChange() {\n    if (this.side !== Side.server) return;\n    const pointValueIn1: number = this.getInputData(this.inputOneNum);\n    const pointValueIn10 = this.getInputData(this.inputTwoNum);\n    const pointValueIn16 = this.getInputData(this.inputThreeNum);\n    if (this.lastInput == null || pointValueIn16 !== this.lastInput){\n      const uuid = this.getPointUUID()\n      if(isNull(uuid))return \n      this.doPointWrite(pointValueIn1, pointValueIn10, pointValueIn16)\n    }\n  }\n\n \n  doPointWrite(pointValueIn1, pointValueIn10, pointValueIn16){\n    const host =  this.host\n    const port = this.port\n    const uuid = this.getPointUUID()\n    if (this.enableDebug) this.debugInfo(`BACNET-SERVER NODE: doPointWrite ${[host, port, uuid, pointValueIn1, pointValueIn10, pointValueIn16]}`);\n    if(isNull(uuid))return \n    this.writePointValue(host, port, uuid, pointValueIn1, pointValueIn10, pointValueIn16).then(e => {\n      if (this.enableDebug) this.debugInfo(`BACNET-SERVER NODE: doPointWrite did HTTP post ${e}`);\n    }).catch(err=> {\n      if (this.enableDebug) this.debugInfo(`BACNET-SERVER NODE: doPointWrite tried HTTP POTS AND GOT ERROR ${err}`);\n\n    })\n  }\n\n\n  onInputUpdated() {\n    this.inputChange()\n\n  }\n\n  persistSettings() {\n    if (!this.container.db) return;\n    this.container.db.updateNode(this.id, this.container.id, {\n      $set: {\n        settings: this.settings,\n        properties: this.properties,\n      },\n    });\n  }\n\n async onAfterSettingsChange() {\n    const pointsList = this.settings['pointsList'].value;\n    await this.setEnable()\n    this.properties['pointObject'] = pointsList\n    await this.setSelectedPoint()\n    await this.setTopic()\n    const enable = this.getEnable()\n    if (this.side == Side.server) {\n      this.disconnectFromBroker();\n      if (enable) {\n        this.connectToBroker();\n        if (this.enableDebug) this.debugInfo(`BACNET-SERVER NODE: connect to Broker from settings`);\n      }\n    }\n    this.getPoints()\n    this.updateTitle()\n    this.inputChange()\n  }\n\n  onRemoved() {\n    this.disconnectFromBroker();\n  }\n\n  async fetchPoints(host: string, port: number) {\n    const url = `${Utils.buildUrl(host, port)}/api/bacnet/points`;\n    const response = await axios.get(url);\n    let res = response.data.points\n    const points = res.map(point => {\n      return { value: point, text: point.object_name };\n    });\n    this.settings['pointsList'].config.items = points;\n    if(isNull(points)) return\n    this.broadcastSettingsToClients();\n\n\n  }\n\n  async writePointValue(host: string, port: number, point: string, pointValueIn1:number, pointValueIn10:number, pointValueIn16:number): Promise<any> {\n    const url = `${Utils.buildUrl(host, port)}/api/bacnet/points/${point}`;\n    this.lastInput = pointValueIn1;\n    const body = {\n      \"priority_array_write\": {\n        // \"_1\": pointValueIn1,\n        // \"_10\": pointValueIn10,\n        \"_16\": pointValueIn16\n      }\n    }\n    if (this.enableDebug) this.debugInfo(`BACNET-SERVER NODE:  writePointValue, url:${url} body:${body} host:${host} port:${port} lastInput:${this.lastInput}`);\n    await axios.patch(url, body, {\n      headers: {\n        'Content-Type': 'application/json'\n      },\n    });\n    return null;\n  }\n\n\n  onAdded() {\n    this.onAfterSettingsChange() \n    if (this.side !== Side.server) return;\n    const time = (this.resendTime * 1000) + 200 * 1000 //try and make the resend time a little more random\n    this.EXECUTE_INTERVAL = time\n  }\n\n\n  processMessage(mqttMessage: MQTTMessage) {\n    // look into using mqtt-match library. (https://www.npmjs.com/package/mqtt-match)\n    const top = this.topic;\n    if (matchMQTT(top, mqttMessage.topic)) {\n      this.setOutputData(this.outNum, mqttMessage.message);\n      this.setOutputData(this.outJson, mqttMessage);\n    }\n  }\n\n\n  connectToBroker() {\n    let { host, port, username, password } = config.mqtt;\n    let options: any = {};\n    //use use env\n    if (isNull(host)) return;\n    if (isNull(port)) return;\n    if (isNull(this.getTopic())) return;\n    if (this.getEnable() === false) return;\n    options.host = host;\n    options.port = port;\n\n    this.disconnectFromBroker();\n    this.client = mqtt.connect(options);\n    this.client.on('connect', () => {\n      if (this.enableDebug) this.debugInfo(`BACNET-SERVER NODE: this.client = mqtt.connect options: ${JSON.stringify(options)}`);\n      this.setOutputData(this.outConnection, true, true);\n      let topic = this.getTopic()\n      // if no json topic use input 2 topic\n      if (!isNull(topic)) {\n        if (this.enableDebug) this.debugInfo(`BACNET-SERVER NODE:  subscribe on node input topic ${topic}`);\n        this.client.subscribe(topic);\n      }\n\n    });\n    this.client.on('close', () => {\n      if (this.enableDebug) this.debugInfo(`BACNET-SERVER NODE:  MQTT CLIENT close WAS CALLED`);\n      this.setOutputData(this.outConnection, false, true);\n    });\n\n    this.client.on('error', error => {\n      this.debugWarn(error);\n    });\n    this.client.on('message', (topic, message) => {\n      let obj: MQTTMessage = { topic: topic, message: message.toString() };\n      if (this.enableDebug) this.debugInfo(`BACNET-SERVER NODE:  this.client.on('message' ${JSON.stringify(obj)}`);\n      this.processMessage(obj);\n    });\n  }\n\n  disconnectFromBroker() {\n    if (this.client) this.client.end();\n  }\n\n\n\n}\nContainer.registerNodeType('protocols/bacnet-server/bacnet-server-api', BACnetServerRest);\n","import { Container } from '../../../container';\nimport { Node } from '../../../node';\nimport { NODE_INFO } from '../../../node-info';\nimport { NodeSetting, SettingType, Type } from '../../../node-io';\nimport TimeUtils from '../../../utils/time-utils';\n\ninterface LoraSensor {\n  id: string;\n  voltage: number;\n  rssi: number;\n  snr: number;\n  nodeName: string;\n  topic: {}\n  lastMessage: any\n}\ninterface AASensor extends LoraSensor {\n  pulses: number;\n  a1: number;\n  a2: number;\n  a3: number;\n}\ninterface B0Sensor extends LoraSensor {\n  temp: number;\n  pressure: number;\n  humidity: number;\n}\ninterface B1Sensor extends B0Sensor {\n  lux: number;\n}\ninterface B2Sensor extends B1Sensor {\n  movement: boolean;\n}\n\nenum SensorType {\n  Droplet = 'Droplet',\n  MicroEdge = 'MicroEdge',\n}\n\nexport class LoraSensorDecoderNode extends Node {\n  watchdogDelay = 3600000;\n  nodeID = '';\n  timeoutFunc;\n  sensorType: string;\n\n  constructor() {\n    super();\n    this.title = NODE_INFO[\"protocols/lora-raw\"][\"lora-sensor-decoder\"].title;\n    this.description = NODE_INFO[\"protocols/lora-raw\"][\"lora-sensor-decoder\"].description;\n    this.settings['sensorType'] = NodeSetting.create({\n      description: 'LORA Sensor Type',\n      type: SettingType.DROPDOWN,\n      config: {\n        items: [\n          { value: SensorType.Droplet, text: SensorType.Droplet },\n          { value: SensorType.MicroEdge, text: SensorType.MicroEdge },\n        ],\n      },\n      value: SensorType.Droplet,\n    });\n    this.addInput('rawInput', Type.STRING);\n    this.addInputWithSettings('nodeID', Type.STRING, '', 'NodeID');\n    this.addInputWithSettings('topic', Type.STRING, '', 'Set topic for use elsewhere in wires');\n    this.addOutput('json', Type.STRING);\n    this.addOutput('id', Type.STRING);\n    this.addOutput('voltage', Type.NUMBER);\n    this.addOutput('rssi', Type.NUMBER);\n    this.addOutput('lowBatteryAlm', Type.BOOLEAN);\n    this.addOutput('watchdog', Type.BOOLEAN);\n    this.addOutput('temperature', Type.NUMBER);\n    this.addOutput('humidity', Type.NUMBER);\n    this.addOutput('lux', Type.NUMBER);\n    this.addOutput('pressure', Type.NUMBER);\n    this.addOutput('movement', Type.BOOLEAN);\n    this.settings['microEdgeA1'] = NodeSetting.create({\n      description: 'MicroEdge a1 Input Type',\n      type: SettingType.DROPDOWN,\n      config: {\n        items: [\n          { value: '10k', text: '10k Thermistor' },\n          { value: '10vdc', text: '0-10vdc' },\n          { value: 'digital', text: 'Digital' },\n        ],\n      },\n      value: '10vdc',\n    });\n    this.settings['microEdgeA2'] = NodeSetting.create({\n      description: 'MicroEdge a2 Input Type',\n      type: SettingType.DROPDOWN,\n      config: {\n        items: [\n          { value: '10k', text: '10k Thermistor' },\n          { value: '10vdc', text: '0-10vdc' },\n          { value: 'digital', text: 'Digital' },\n        ],\n      },\n      value: '10vdc',\n    });\n    this.settings['microEdgeA3'] = NodeSetting.create({\n      description: 'MicroEdge a3 Input Type',\n      type: SettingType.DROPDOWN,\n      config: {\n        items: [\n          { value: '10k', text: '10k Thermistor' },\n          { value: '10vdc', text: '0-10vdc' },\n          { value: 'digital', text: 'Digital' },\n        ],\n      },\n      value: '10vdc',\n    });\n    this.settings['battery-warn'] = NodeSetting.create({\n      description: 'Low battery warning voltage',\n      value: 3.5,\n      type: SettingType.NUMBER,\n    });\n    this.settings['watchdog'] = NodeSetting.create({\n      description: 'Watchdog (No message warning) Delay',\n      value: 60,\n      type: SettingType.NUMBER,\n    });\n    this.settings['time'] = NodeSetting.create({\n      description: 'Time',\n      type: SettingType.DROPDOWN,\n      config: {\n        items: [\n          { value: 'milliseconds', text: 'Milliseconds' },\n          { value: 'seconds', text: 'Seconds' },\n          { value: 'minutes', text: 'Minutes' },\n          { value: 'hours', text: 'Hours' },\n        ],\n      },\n      value: 'minutes',\n    });\n    this.setSettingsConfig({\n      groups: [{ time: {}, watchdog: { weight: 2 } }],\n      conditions: {\n        microEdgeA1: setting => {\n          return setting['sensorType'].value === SensorType.MicroEdge;\n        },\n        microEdgeA2: setting => {\n          return setting['sensorType'].value === SensorType.MicroEdge;\n        },\n        microEdgeA3: setting => {\n          return setting['sensorType'].value === SensorType.MicroEdge;\n        },\n      },\n    });\n  }\n\n  onAdded() {\n    this.sensorType = this.settings['sensorType'].value;\n    if (this.sensorType === SensorType.MicroEdge) {\n      /**\n       * Issue: #552\n       * On frontend side:\n       * Removing this one here, because constructor() and onAdded() function gets called while doing each refresh\n       * And always 'movement' slot (slot number: 10) gets displayed even when it shouldn't\n       * It's because when sensorType === 'MicroEdge', we are replacing slots 6-9 with new one and leaving 0-5 as is,\n       * But we are doing nothing for node 10, so on it displays on frontend side even it doesn't have real value on backend\n       */\n      this.removeOutput(10);\n    }\n    this.clearOutputs();\n    let nodeID = this.getInputData(1).toUpperCase() || '';\n    if (nodeID != this.nodeID) {\n      this.nodeID = nodeID;\n    }\n    this.updateTitle();\n  }\n\n  onInputUpdated() {\n    const sensorType = this.settings['sensorType'].value;\n    let nodeID = this.getInputData(1).toUpperCase() || '';\n    if (nodeID != this.nodeID) {\n      this.nodeID = nodeID;\n      this.updateTitle(); // Update title is also related with nodeID update so\n      this.broadcastTitleToClients();\n      this.clearOutputs();\n      this.resetWatchdog();\n    }\n    let data: string = this.getInputData(0) || '';\n    if (!data) return;\n    else if (data.length % 2 === 1 && (data[data.length - 1] === '\\r' || data[data.length - 1] === '\\n')) {\n      data = data.substring(0, data.length - 1);\n    } else if (data.substring(data.length - 2, data.length) === '\\r\\n') {\n      data = data.substring(0, data.length - 2);\n    }\n\n    if (\n      data.length !== 36 &&\n      data.length !== 44 &&\n      data.substring(2, 4) !== 'AA' &&\n      data.substring(2, 4) !== 'B0' &&\n      data.substring(2, 4) !== 'B1' &&\n      data.substring(2, 4) !== 'B2'\n    ) {\n      return;\n    }\n\n    if (nodeID == data.substring(0, 8) || nodeID == '') {\n      if (\n        sensorType === SensorType.MicroEdge &&\n        data.substring(2, 4) === 'AA' &&\n        (data.length === 44 || data.length === 36)\n      ) {\n        if (this.inputs[0].updated) this.resetWatchdog();\n        this.writeOutputs(this.microEdgeDecode(data));\n      } else if (\n        sensorType === SensorType.Droplet &&\n        data.substring(2, 3) === 'B' &&\n        (data.length === 44 || data.length === 36)\n      ) {\n        if (this.inputs[0].updated) this.resetWatchdog();\n        this.writeOutputs(this.dropletDecode(data));\n      }\n    }\n  }\n\n  onAfterSettingsChange() {\n    let watchdogTime = this.settings['watchdog'].value;\n    watchdogTime = TimeUtils.timeConvert(watchdogTime, this.settings['time'].value);\n    if (this.watchdogDelay != watchdogTime) {\n      this.resetWatchdog();\n    }\n    this.setOutputs();\n    this.updateNodeOutput();\n    this.onInputUpdated();\n  }\n\n  private writeOutputs(output: LoraSensor) {\n    switch (this.settings['sensorType'].value) {\n      case SensorType.Droplet:\n        this.setOutputData(0, JSON.stringify(output));\n        this.setOutputData(1, output['id'] == null ? null : output['id']);\n        this.setOutputData(2, output['voltage'] == null ? null : output['voltage']);\n        this.setOutputData(3, output['rssi'] == null ? null : output['rssi']);\n        this.setOutputData(4, output['voltage'] < this.settings['battery-warn'].value);\n        this.setOutputData(6, output['temp'] == null ? null : output['temp']);\n        this.setOutputData(7, output['humidity'] == null ? null : output['humidity']);\n        this.setOutputData(8, output['lux'] == null ? null : output['lux']);\n        this.setOutputData(9, output['pressure'] == null ? null : output['pressure']);\n        this.setOutputData(10, output['movement'] == null ? null : output['movement']);\n        break;\n\n      case SensorType.MicroEdge:\n        this.setOutputData(0, JSON.stringify(output));\n        this.setOutputData(1, output['id'] == null ? null : output['id']);\n        this.setOutputData(2, output['voltage'] == null ? null : output['voltage']);\n        this.setOutputData(3, output['rssi'] == null ? null : output['rssi']);\n        this.setOutputData(4, output['voltage'] < this.settings['battery-warn'].value);\n        this.setOutputData(6, output['pulses'] == null ? null : output['pulses']);\n        const microEdgeOutputs = this.MicroEdgeAnalogs([output['a1'], output['a2'], output['a3']]);\n        this.setOutputData(7, microEdgeOutputs[0] == null ? null : microEdgeOutputs[0]);\n        this.setOutputData(8, microEdgeOutputs[1] == null ? null : microEdgeOutputs[1]);\n        this.setOutputData(9, microEdgeOutputs[2] == null ? null : microEdgeOutputs[2]);\n        break;\n    }\n  }\n\n  private MicroEdgeAnalogs(analogInputs) {\n    let output = [];\n    for (var i = 0; i < 3; i++) {\n      if (typeof analogInputs[i] == 'number') {\n        switch (this.settings[`microEdgeA${i + 1}`].value) {\n          case '10k':\n            const Vref = 3.34;\n            const V = (analogInputs[i] / 1024) * Vref;\n            const R0 = 10000;\n            const R = (R0 * V) / (Vref - V);\n            const T0 = 273 + 25;\n            const B = 3850;\n            const T = 1 / (1 / T0 + (1 / B) * Math.log(R / R0));\n            const temp = T - 273.15;\n            output.push(Math.round(temp * 100) / 100);\n            break;\n\n          case '10vdc':\n            output.push((analogInputs[i] / 1024) * 10);\n            break;\n\n          case 'digital':\n            if (analogInputs[i] === undefined || analogInputs[i] >= 1000) {\n              output.push(false);\n            } else {\n              output.push(true);\n            }\n            break;\n        }\n      } else output.push(null);\n    }\n    return output;\n  }\n\n  lastMessageTimeStamp(){\n    return  new Date()\n  }\n\n  microEdgeDecode(data: string): AASensor {\n    const topic = this.getInputData(2)\n    const topicsBuilder = {\n      id : topic+\"/id\",\n      pulses: topic+\"/pulses\",\n      voltage: topic+\"/voltage\",\n      a1: topic+\"/a1\",\n      a2: topic+\"/a2\",\n      a3: topic+\"/a3\",\n      rssi: topic+\"/rssi\",\n      snr: topic+\"/snr\"\n    }\n    let lastMessage = null;\n    lastMessage = this.lastMessageTimeStamp()\n    return {\n      id: data.substring(0, 8),\n      pulses: parseInt(data.substring(8, 16), 16),\n      voltage: parseInt(data.substring(16, 18), 16) / 50,\n      a1: parseInt(data.substring(18, 22), 16),\n      a2: parseInt(data.substring(22, 26), 16),\n      a3: parseInt(data.substring(26, 30), 16),\n      rssi: parseInt(data.substring(data.length - 4, data.length - 2), 16) * -1,\n      snr: parseInt(data.substring(data.length - 2, data.length), 16) / 10,\n      nodeName: this.name,\n      topic: topicsBuilder,\n      lastMessage: lastMessage\n    };\n  }\n\n  dropletDecode(data: string): B0Sensor {\n    const topic = this.getInputData(2)\n    const topicsBuilder = {\n      id : topic+\"/id\",\n      temp: topic+\"/temp\",\n      pressure: topic+\"/pressure\",\n      humidity: topic+\"/humidity\",\n      lux: topic+\"/lux\",\n      movement: topic+\"/movement\",\n      voltage: topic+\"/voltage\",\n      rssi: topic+\"/rssi\",\n      snr: topic+\"/snr\"\n    }\n    let lastMessage = null;\n    lastMessage = this.lastMessageTimeStamp()\n\n    let output: B0Sensor = {\n      id: data.substring(0, 8),\n      temp: parseInt(data.substring(10, 12) + data.substring(8, 10), 16) / 100,\n      pressure: parseInt(data.substring(14, 16) + data.substring(12, 14), 16) / 10,\n      humidity: parseInt(data.substring(16, 18), 16) % 128,\n      voltage: parseInt(data.substring(22, 24), 16) / 50,\n      rssi: parseInt(data.substring(data.length - 4, data.length - 2), 16) * -1,\n      snr: parseInt(data.substring(data.length - 2, data.length), 16) / 10,\n      nodeName: this.name,\n      topic: topicsBuilder,\n      lastMessage: lastMessage\n    };\n    if (data.substring(2, 4) === 'B1' || data.substring(2, 4) === 'B2') {\n      const b1Sensor: B1Sensor = output as B1Sensor;\n      b1Sensor.lux = parseInt(data.substring(20, 22) + data.substring(18, 20), 16);\n      output = b1Sensor;\n      if (data.substring(2, 4) == 'B2') {\n        const b2_sensor: B2Sensor = b1Sensor as B2Sensor;\n        b2_sensor.movement = parseInt(data.substring(16, 18), 16) > 127;\n        output = b2_sensor;\n      }\n    }\n    return output;\n  }\n\n  resetWatchdog() {\n    this.setOutputData(5, false, true);\n    clearInterval(this.timeoutFunc);\n    let watchdogTime = this.settings['watchdog'].value;\n    watchdogTime = TimeUtils.timeConvert(watchdogTime, this.settings['time'].value);\n    this.watchdogDelay = watchdogTime;\n    this.timeoutFunc = setTimeout(() => {\n      this.setOutputData(5, true, true);\n    }, watchdogTime);\n  }\n\n  setOutputs() {\n    const currentSensorType = this.settings['sensorType'].value;\n    if (this.sensorType != currentSensorType) {\n      switch (currentSensorType) {\n        case SensorType.Droplet:\n          this.removeOutput(6);\n          this.removeOutput(7);\n          this.removeOutput(8);\n          this.removeOutput(9);\n          if (this.outputs[10]) this.removeOutput(10);\n          this.addOutput('temperature', Type.NUMBER);\n          this.addOutput('humidity', Type.NUMBER);\n          this.addOutput('lux', Type.NUMBER);\n          this.addOutput('pressure', Type.NUMBER);\n          this.addOutput('movement', Type.BOOLEAN);\n          this.clearOutputs();\n          break;\n\n        case SensorType.MicroEdge:\n          this.removeOutput(6);\n          this.removeOutput(7);\n          this.removeOutput(8);\n          this.removeOutput(9);\n          this.removeOutput(10);\n          if (this.outputs[11]) this.removeOutput(11);\n          this.addOutput('pulses', Type.NUMBER);\n          this.addOutput('a1', Type.NUMBER);\n          this.addOutput('a2', Type.NUMBER);\n          this.addOutput('a3', Type.NUMBER);\n          this.clearOutputs();\n          break;\n      }\n    }\n    if (currentSensorType == SensorType.MicroEdge) {\n      this.outputs[7].name = `a1 (${this.settings['microEdgeA1'].value})`;\n      this.outputs[8].name = `a2 (${this.settings['microEdgeA2'].value})`;\n      this.outputs[9].name = `a3 (${this.settings['microEdgeA3'].value})`;\n    }\n    this.sensorType = currentSensorType;\n    this.updateTitle();\n  }\n\n  updateTitle() {\n    if (this.nodeID) this.title = `Lora Sensor Decoder (${this.sensorType} | ${this.nodeID})`;\n    else this.title = `Lora Sensor Decoder (${this.sensorType} | ALL)`;\n  }\n\n  clearOutputs() {\n    this.setOutputData(0, null);\n    this.setOutputData(1, null);\n    this.setOutputData(2, null);\n    this.setOutputData(3, null);\n    this.setOutputData(4, null);\n    this.setOutputData(5, null);\n    this.setOutputData(6, null);\n    this.setOutputData(7, null);\n    this.setOutputData(8, null);\n    this.setOutputData(9, null);\n    if (this.settings['sensorType'].value === SensorType.Droplet) this.setOutputData(10, null);\n  }\n}\nContainer.registerNodeType('protocols/lora-raw/lora-sensor-decoder', LoraSensorDecoderNode);\n","import { Container } from '../../../container';\nimport { Node } from '../../../node';\nimport { NODE_INFO } from '../../../node-info';\nimport { NodeSetting, SettingType, Type } from '../../../node-io';\nimport { LORA_DATA_TYPE_LENGTHS, LORA_DATA_TYPE_NAMES } from './lora-two-way-in';\n\nexport class LoRaRawTwoWayOutput extends Node {\n  payloadDefinition: Array<LORA_DATA_TYPE_NAMES> = [];\n  inputsUpdated: Array<boolean> = [];\n\n  constructor() {\n    super();\n    this.title = NODE_INFO[\"protocols/lora-raw\"][\"lora-raw-two-way-out\"].title;\n    this.description = NODE_INFO[\"protocols/lora-raw\"][\"lora-raw-two-way-out\"].description;\n    this.settings['enable'] = NodeSetting.create({\n      description: 'enable',\n      type: SettingType.BOOLEAN,\n      value: false,\n    });\n    this.settings['senderId'] = NodeSetting.create({\n      description: 'sender Id',\n      type: SettingType.NUMBER,\n      value: 0,\n    });\n    this.settings['port'] = NodeSetting.create({\n      description: 'port number',\n      type: SettingType.NUMBER,\n      value: 0,\n    });\n    // this.settings['sendUpdatedOnly'] = {\n    //   description: 'send only updated inputs',\n    //   type: SettingType.BOOLEAN,\n    //   value: true,\n    // },\n    this.settings['types'] = NodeSetting.create({\n      description: 'Types',\n      type: SettingType.READONLY,\n      value: 'INT8, INT16, INT32, FLOAT',\n      // value: 'INT8, UINT8, INT16, UINT16, INT32, UINT32, FLOAT',\n    });\n    this.settings['definition'] = NodeSetting.create({\n      description: 'payload definition (JSON)',\n      type: SettingType.STRING,\n      value: '',\n    });\n    this.addInput('trigger', Type.BOOLEAN);\n    this.addOutput('error', Type.STRING);\n    this.addOutput('output', Type.ANY);\n  }\n\n  init() {\n    this.updateOutputs();\n  }\n\n  onAdded() {\n    this.payloadDefinition = this.stringToDataTypes(this.settings['definition'].value);\n    this.inputsUpdated = new Array<boolean>(this.payloadDefinition.length);\n    this.inputsUpdated.fill(false);\n  }\n\n  onInputUpdated() {\n    for (let i = 1; i < this.getInputsCount(); i++) {\n      if (this.inputs[i].updated) {\n        this.inputsUpdated[i - 1] = true;\n      }\n    }\n    if (this.settings['enable'].value === false) return;\n    if (!this.inputs[0].updated || this.getInputData(0) === false) {\n      return;\n    }\n\n    // PARSING\n    const parseError = msg => {\n      this.setOutputData(1, 'parse error: ' + msg);\n    };\n\n    const checkInputAndType = (value, type) => {\n      let isOk = true;\n      switch (type) {\n        case LORA_DATA_TYPE_NAMES.INT8:\n          isOk = value >= -128 && value <= 127;\n          break;\n\n        case LORA_DATA_TYPE_NAMES.UINT8:\n          isOk = value >= 0 && value <= 0xff;\n          break;\n\n        case LORA_DATA_TYPE_NAMES.INT16:\n          isOk = value >= -32768 && value <= 32767;\n          break;\n\n        case LORA_DATA_TYPE_NAMES.UINT16:\n          isOk = value >= 0 && value <= 0xffff;\n          break;\n\n        case LORA_DATA_TYPE_NAMES.INT32:\n          isOk = value >= -2147483648 && value <= 2147483647;\n          break;\n\n        case LORA_DATA_TYPE_NAMES.UINT32:\n          isOk = value >= 0 && value <= 0xffffffff;\n          break;\n      }\n      return isOk;\n    };\n\n    // if (!this.settings['sendUpdatedOnly'].value) {\n    //   this.inputsUpdated.fill(true);\n    // }\n    this.inputsUpdated.fill(true);\n    let data_lengths = 0;\n    for (let i = 0; i < this.payloadDefinition.length; i++) {\n      if (this.inputsUpdated[i]) {\n        data_lengths += LORA_DATA_TYPE_LENGTHS[this.payloadDefinition[i]] + 1;\n      }\n    }\n    if (data_lengths === 0) {\n      parseError('No input updates');\n      return;\n    }\n    let buffer = Buffer.alloc(data_lengths + 2);\n\n    buffer.writeUInt8(this.settings['senderId'].value, 0);\n    buffer.writeUInt8(this.settings['port'].value, 1);\n\n    let point = 0;\n    for (let i = 2; i < buffer.length; ) {\n      if (!this.inputsUpdated[point]) {\n        point++;\n        continue;\n      }\n      let type = this.payloadDefinition[point];\n      let value = this.getInputData(point + 1);\n\n      if (!checkInputAndType(value, type)) {\n        parseError('invalid value input ' + point);\n        return;\n      }\n\n      buffer.writeUInt8(point, i++);\n\n      switch (type) {\n        case LORA_DATA_TYPE_NAMES.INT8:\n          buffer.writeInt8(value, i);\n          break;\n\n        case LORA_DATA_TYPE_NAMES.UINT8:\n          buffer.writeUInt8(value, i);\n          break;\n\n        case LORA_DATA_TYPE_NAMES.INT16:\n          buffer.writeInt16LE(value, i);\n          break;\n\n        case LORA_DATA_TYPE_NAMES.UINT16:\n          buffer.writeUInt16LE(value, i);\n          break;\n\n        case LORA_DATA_TYPE_NAMES.INT32:\n          buffer.writeInt32LE(value, i);\n          break;\n\n        case LORA_DATA_TYPE_NAMES.UINT32:\n          buffer.writeUInt32LE(value, i);\n          break;\n\n        case LORA_DATA_TYPE_NAMES.FLOAT:\n          buffer.writeFloatLE(value, i);\n          break;\n      }\n\n      i += LORA_DATA_TYPE_LENGTHS[type];\n      point++;\n    }\n\n    this.setOutputData(1, null);\n    this.setOutputData(0, buffer);\n\n    this.inputsUpdated.fill(false);\n  }\n\n  onAfterSettingsChange() {\n    this.payloadDefinition = this.updateOutputs();\n    this.setOutputData(1, null);\n    this.onInputUpdated();\n  }\n\n  private updateOutputs() {\n    const data = this.stringToDataTypes(this.settings['definition'].value);\n    if (this.payloadDefinition.length !== data.length) {\n      const inputsCount = this.getInputsCount();\n      for (let i = 1; i < inputsCount; i++) {\n        this.removeInput(i);\n      }\n\n      this.inputsUpdated = new Array<boolean>(data.length);\n      for (let i = 0; i < data.length; i++) {\n        this.addInput(i.toString(), Type.NUMBER);\n        this.inputsUpdated[i] = false;\n      }\n    }\n    return data;\n  }\n\n  stringToDataTypes(str) {\n    const data = str\n      .toUpperCase()\n      .replace(/ /g, '')\n      .split(',')\n      .filter(x => x !== '');\n\n    if (data && data.length) {\n      for (let i = 0; i < data.length; i++) {\n        if (LORA_DATA_TYPE_NAMES[data[i]] === undefined) {\n          this.setOutputData(1, 'settings parse error');\n          return undefined;\n        }\n        data[i] = LORA_DATA_TYPE_NAMES[data[i]];\n      }\n    }\n    return data;\n  }\n}\nContainer.registerNodeType('protocols/lora-raw/lora-raw-two-way-out', LoRaRawTwoWayOutput);\n","import { Node } from '../../../node';\nimport { NodeSetting, SettingType, Type } from '../../../node-io';\nimport { Container } from '../../../container';\nimport Utils from '../../../utils'\nimport * as loraRawCrypt from './lora-raw-crypt';\n\nenum LORA_DATA_TYPE_NAMES {\n  INT8 = 0,\n  UINT8,\n  INT16,\n  UINT16,\n  INT32,\n  UINT32,\n  FLOAT,\n}\n\nconst LORA_DATA_TYPE_LENGTHS = [\n  1, // INT8\n  1, // UINT8\n  2, // INT16\n  2, // UINT16\n  4, // INT32\n  4, // UINT32\n  4, // FLOAT\n];\n\nexport class LoRaRawPointsInput extends Node {\n  payloadDefinition: Array<LORA_DATA_TYPE_NAMES> = [];\n  addressPrefix: string = 'FFFFFF';\n  address: string = '';\n  keyBuffer: Buffer = null;\n  nonce = 0;\n  outputOffset = 3; // 3 static outputs before dynamic outputs\n\n  constructor() {\n    super();\n    this.title = `Nube LoRaRAW Points In`;\n    this.description = 'This node parses Nubes LoRa Points protocol payload';\n    this.settings['enable'] = NodeSetting.create({\n      description: 'enable',\n      type: SettingType.BOOLEAN,\n      value: true,\n    });\n    this.settings['senderId'] = NodeSetting.create({\n      description: 'sender Id [0-254]',\n      type: SettingType.NUMBER,\n      value: 0,\n    });\n    this.settings['port'] = NodeSetting.create({\n      description: 'port number [0-254]',\n      type: SettingType.NUMBER,\n      value: 0,\n    });\n    this.settings['types'] = NodeSetting.create({\n      description: 'Types # = [8, 16, 23]',\n      type: SettingType.READONLY,\n      // value: 'INT8, UINT8, INT16, UINT16, INT32, UINT32, FLOAT',\n      value: 'INT#, UINT#, FLOAT',\n    });\n    this.settings['definition'] = NodeSetting.create({\n      description: 'payload definition (\\',\\' separated)',\n      type: SettingType.STRING,\n      value: '',\n    });\n    this.settings['key'] = NodeSetting.create({\n      description: 'encryption key (hex)',\n      type: SettingType.STRING,\n      value: '',\n    });\n    this.settings['other_group'] = NodeSetting.create({\n      description: 'Advanced',\n      value: '',\n      type: SettingType.GROUP,\n    });\n    this.settings['addrPrefix'] = NodeSetting.create({\n      description: 'Address Prefix [6]',\n      type: SettingType.STRING,\n      value: 'FFFFFF',\n    });\n    this.settings['nonceLen'] = NodeSetting.create({\n      description: 'Nonce Length',\n      type: SettingType.NUMBER,\n      value: 2,\n    });\n    this.settings['frameCounterEnabled'] = NodeSetting.create({\n      description: 'frame counters (**TBA**)',\n      type: SettingType.BOOLEAN,\n      value: false,\n    });\n\n    this.addInput('rawInput', Type.STRING);\n    this.addOutput('error', Type.STRING);\n    this.addOutput('rssi', Type.NUMBER);\n    this.addOutput('snr', Type.NUMBER);\n  }\n\n  init() {\n    this.updateSettings();\n    this.updateOutputs(this.payloadDefinition);\n  }\n\n  onAdded() {\n    this.updateSettings();\n  }\n\n  onInputUpdated() {\n    if (this.keyBuffer === null) {\n      return;\n    }\n    let data: string = this.getInputData(0) || '';\n    if (this.settings['enable'].value === false) return;\n    if (!data || data.length < (24 * 2) || data.substring(0, 8).toUpperCase() !== this.address) {\n      return;\n    }\n\n    // remove newline\n    if (data.substring(data.length - 2, data.length) === '\\r\\n') {\n      data = data.substring(0, data.length - 2);\n    } else if (data.length % 2 === 1 && (data[data.length - 1] === '\\n' || data[data.length - 1] === '\\r')) {\n      data = data.substring(0, data.length - 1);\n    }\n\n\n\n    let encryptedBuffer = Buffer.from(data, 'hex');\n    let [dataBuffer, err] = loraRawCrypt.loraRawDecryptBuffer(encryptedBuffer.slice(0, 4), encryptedBuffer.slice(4, encryptedBuffer.length - 2), this.keyBuffer);\n    if (err !== loraRawCrypt.LORA_RAW_ERROR.LRERR_NOERR) {\n      this.setOutputData(0, 'LoRaRaw Crypt ERR: ' + err);\n      return;\n    }\n    let rssi = encryptedBuffer.readInt8(encryptedBuffer.length - 2);\n    let snr = encryptedBuffer.readUInt8(encryptedBuffer.length - 1);\n\n\n    let startPos = this.settings['nonceLen'].value // skip nonce\n    const port = dataBuffer[startPos];\n    if (port !== this.settings['port'].value) {\n      return;\n    }\n\n    // PARSING\n\n    const parseError = msg => {\n      this.setOutputData(0, 'parse error: ' + msg);\n    };\n\n    // convert hex string to buffer\n    let buffer = dataBuffer.slice(startPos + 1); //skip port\n    let outputValues = new Array<number>(this.payloadDefinition.length);\n    let pointParsed = new Array<boolean>(this.payloadDefinition.length);\n    pointParsed.fill(false);\n\n    let i = 0;\n    for (let pointCount = 0; pointCount < this.payloadDefinition.length; pointCount++) {\n      let point = buffer.readUInt8(i++);\n      let type_length = 0;\n\n      if (point >= this.payloadDefinition.length) {\n        parseError('invalid point ' + point);\n        return;\n      }\n      if (pointParsed[point]) {\n        parseError('Bad payload. Point already parsed: ' + point);\n        return;\n      }\n\n      type_length = LORA_DATA_TYPE_LENGTHS[this.payloadDefinition[point]];\n\n      if (buffer.length - i < type_length) {\n        parseError('invalid length');\n        return;\n      }\n\n      switch (this.payloadDefinition[point]) {\n        case LORA_DATA_TYPE_NAMES.INT8:\n          outputValues[point] = buffer.readInt8(i);\n          break;\n\n        case LORA_DATA_TYPE_NAMES.UINT8:\n          outputValues[point] = buffer.readUInt8(i);\n          break;\n\n        case LORA_DATA_TYPE_NAMES.INT16:\n          outputValues[point] = buffer.readInt16LE(i);\n          break;\n\n        case LORA_DATA_TYPE_NAMES.UINT16:\n          outputValues[point] = buffer.readUInt16LE(i);\n          break;\n\n        case LORA_DATA_TYPE_NAMES.INT32:\n          outputValues[point] = buffer.readInt32LE(i);\n          break;\n\n        case LORA_DATA_TYPE_NAMES.UINT32:\n          outputValues[point] = buffer.readUInt32LE(i);\n          break;\n\n        case LORA_DATA_TYPE_NAMES.FLOAT:\n          outputValues[point] = buffer.readFloatLE(i);\n          break;\n      }\n      pointParsed[point] = true;\n      i += type_length;\n    }\n\n    for (let i = 0; i < outputValues.length; i++) {\n      this.setOutputData(i + this.outputOffset, outputValues[i]);\n    }\n    this.setOutputData(1, rssi);\n    this.setOutputData(2, snr);\n    this.setOutputData(0, null);\n  }\n\n  onAfterSettingsChange() {\n    if (!this.updateSettings()) {\n      return;\n    }\n    this.updateOutputs(this.payloadDefinition);\n    this.onInputUpdated();\n  }\n\n  private updateSettings() {\n    this.settings['senderId'].value = Utils.clamp(this.settings['senderId'].value, 0, 254);\n    this.settings['port'].value = Utils.clamp(this.settings['port'].value, 0, 254);\n    this.settings['nonceLen'].value = Utils.clamp(this.settings['nonceLen'].value, 1, 4);\n    this.payloadDefinition = this.stringToDataTypes(this.settings['definition'].value);\n    let addrPrefix = this.settings['addrPrefix'].value;\n    this.addressPrefix = addrPrefix && addrPrefix.length === 6 ? addrPrefix : 'FFFFFF';\n    this.address = this.addressPrefix + ('0' + this.settings['senderId'].value.toString(16)).substr(-2);\n    this.address = this.address.toUpperCase();\n    if (this.settings['key'].value.length !== 32) {\n      this.setOutputData(0, 'invalid key');\n      this.keyBuffer = null;\n      return false;\n    }\n    this.keyBuffer = Buffer.from(this.settings['key'].value, 'hex');\n    this.setOutputData(0, null);\n    return true;\n  }\n\n  private updateOutputs(data) {\n    if (this.getOutputsCount() - this.outputOffset !== data.length) {\n      const outputsCount = this.getOutputsCount();\n      for (let i = this.outputOffset; i < outputsCount; i++) {\n        this.removeOutput(i);\n      }\n      for (let i = 0; i < data.length; i++) {\n        this.addOutput(i.toString(), Type.NUMBER);\n      }\n      this.updateNodeOutput();\n    }\n  }\n\n  private stringToDataTypes(str) {\n    const data = str\n      .toUpperCase()\n      .replace(/ /g, '')\n      .split(',')\n      .filter(x => x !== '');\n\n    if (data && data.length) {\n      for (let i = 0; i < data.length; i++) {\n        if (LORA_DATA_TYPE_NAMES[data[i]] === undefined) {\n          this.setOutputData(0, 'settings parse error');\n          return undefined;\n        }\n        data[i] = LORA_DATA_TYPE_NAMES[data[i]];\n      }\n    }\n    return data;\n  }\n}\nContainer.registerNodeType('protocols/lora-raw-v2/lora-raw-points-in', LoRaRawPointsInput);\n\n\n//////////////////////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////////////////////////////////////\n\n\nexport class LoRaRawPointsOutput extends Node {\n  payloadDefinition: Array<LORA_DATA_TYPE_NAMES> = [];\n  addressPrefix: string = 'FFFFFF';\n  address: Buffer = null;\n  keyBuffer: Buffer = null;\n  nonce = 0;\n  // inputsUpdated: Array<boolean> = [];\n\n  errorOutputIndex: number = 1;\n\n  constructor() {\n    super();\n    this.title = `Nube LoRaRAW Points Out`;\n    this.description = 'This node compiles points to Nubes LoRa Points protocol';\n    this.settings['enable'] = NodeSetting.create({\n      description: 'enable',\n      type: SettingType.BOOLEAN,\n      value: true,\n    });\n    // this.settings['sendUpdatedOnly'] = NodeSetting.create({\n    //   description: 'send only updated inputs',\n    //   type: SettingType.BOOLEAN,\n    //   value: true,\n    // },\n    this.settings['enable'] = NodeSetting.create({\n      description: 'enable',\n      type: SettingType.BOOLEAN,\n      value: true,\n    });\n    this.settings['senderId'] = NodeSetting.create({\n      description: 'sender Id [0-254]',\n      type: SettingType.NUMBER,\n      value: 0,\n    });\n    this.settings['port'] = NodeSetting.create({\n      description: 'port number [0-254]',\n      type: SettingType.NUMBER,\n      value: 0,\n    });\n    this.settings['types'] = NodeSetting.create({\n      description: 'Types ( # = [8, 16, 23] )',\n      type: SettingType.READONLY,\n      // value: 'INT8, UINT8, INT16, UINT16, INT32, UINT32, FLOAT',\n      value: 'INT#, UINT#, FLOAT',\n    });\n    this.settings['definition'] = NodeSetting.create({\n      description: 'payload definition (\\',\\' separated)',\n      type: SettingType.STRING,\n      value: '',\n    });\n    this.settings['key'] = NodeSetting.create({\n      description: 'encryption key (hex)',\n      type: SettingType.STRING,\n      value: '',\n    });\n    this.settings['other_group'] = NodeSetting.create({\n      description: 'Advanced',\n      value: '',\n      type: SettingType.GROUP,\n    });\n    this.settings['addrPrefix'] = NodeSetting.create({\n      description: 'Address Prefix [6]',\n      type: SettingType.STRING,\n      value: 'FFFFFF',\n    });\n    this.settings['nonceLen'] = NodeSetting.create({\n      description: 'Nonce Length',\n      type: SettingType.NUMBER,\n      value: 2,\n    });\n    this.settings['frameCounterEnabled'] = NodeSetting.create({\n      description: 'frame counters (**TBA**)',\n      type: SettingType.BOOLEAN,\n      value: false,\n    });\n\n    this.addInput('trigger', Type.BOOLEAN);\n    this.addOutput('output', Type.ANY);\n    this.addOutput('error', Type.STRING);\n  }\n\n  init() {\n    this.updateSettings();\n    this.updateInputs(this.payloadDefinition);\n  }\n\n  onAdded() {\n    this.updateSettings();\n    // this.inputsUpdated = new Array<boolean>(this.payloadDefinition.length);\n    // this.inputsUpdated.fill(false);\n  }\n\n  onInputUpdated() {\n    // for (let i = 1; i < this.getInputsCount(); i++) {\n    //   if (this.inputs[i].updated) {\n    //     this.inputsUpdated[i - 1] = true;\n    //   }\n    // }\n    if (this.settings['enable'].value === false) return;\n    if (!this.inputs[0].updated || this.getInputData(0) !== true) {\n      return;\n    }\n\n    // PARSING\n    const parseError = msg => {\n      this.setOutputData(this.errorOutputIndex, 'parse error: ' + msg);\n    };\n\n    const checkInputAndType = (value, type) => {\n      let isOk = true;\n      switch (type) {\n        case LORA_DATA_TYPE_NAMES.INT8:\n          isOk = value >= -128 && value <= 127;\n          break;\n\n        case LORA_DATA_TYPE_NAMES.UINT8:\n          isOk = value >= 0 && value <= 0xff;\n          break;\n\n        case LORA_DATA_TYPE_NAMES.INT16:\n          isOk = value >= -32768 && value <= 32767;\n          break;\n\n        case LORA_DATA_TYPE_NAMES.UINT16:\n          isOk = value >= 0 && value <= 0xffff;\n          break;\n\n        case LORA_DATA_TYPE_NAMES.INT32:\n          isOk = value >= -2147483648 && value <= 2147483647;\n          break;\n\n        case LORA_DATA_TYPE_NAMES.UINT32:\n          isOk = value >= 0 && value <= 0xffffffff;\n          break;\n      }\n      return isOk;\n    };\n\n    // if (!this.settings['sendUpdatedOnly'].value) {\n    //   this.inputsUpdated.fill(true);\n    // }\n    // this.inputsUpdated.fill(true);\n    let data_lengths = 0;\n    for (let i = 0; i < this.payloadDefinition.length; i++) {\n      // if (this.inputsUpdated[i]) {\n      data_lengths += LORA_DATA_TYPE_LENGTHS[this.payloadDefinition[i]] + 1;\n      // }\n    }\n    if (data_lengths === 0) {\n      parseError('No input updates');\n      return;\n    }\n\n    let buffer = Buffer.alloc(data_lengths + this.settings['nonceLen'].value + 1);\n\n    const nonceLen = this.settings['nonceLen'].value;\n    if (nonceLen === 1) {\n      buffer.writeUInt8(this.nonce, 0);\n      this.nonce = (this.nonce + 1) & 0xFF;\n    }\n    else if (nonceLen === 2) {\n      buffer.writeUInt16LE(this.nonce, 0);\n      this.nonce = (this.nonce + 1) & 0xFFFF;\n    }\n    else if (nonceLen === 4) {\n      buffer.writeUInt32LE(this.nonce, 0);\n      this.nonce = (this.nonce + 1) & 0xFFFFFFFF;\n    }\n    buffer.writeUInt8(this.settings['port'].value, nonceLen);\n\n    let point = 0;\n    for (let i = nonceLen + 1; i < buffer.length;) {\n      // if (!this.inputsUpdated[point]) {\n      //   point++;\n      //   continue;\n      // }\n      let type = this.payloadDefinition[point];\n      let value = this.getInputData(point + 1);\n\n      if (!checkInputAndType(value, type)) {\n        parseError('invalid value input ' + point);\n        return;\n      }\n\n      buffer.writeUInt8(point, i++);\n\n      switch (type) {\n        case LORA_DATA_TYPE_NAMES.INT8:\n          buffer.writeInt8(value, i);\n          break;\n\n        case LORA_DATA_TYPE_NAMES.UINT8:\n          buffer.writeUInt8(value, i);\n          break;\n\n        case LORA_DATA_TYPE_NAMES.INT16:\n          buffer.writeInt16LE(value, i);\n          break;\n\n        case LORA_DATA_TYPE_NAMES.UINT16:\n          buffer.writeUInt16LE(value, i);\n          break;\n\n        case LORA_DATA_TYPE_NAMES.INT32:\n          buffer.writeInt32LE(value, i);\n          break;\n\n        case LORA_DATA_TYPE_NAMES.UINT32:\n          buffer.writeUInt32LE(value, i);\n          break;\n\n        case LORA_DATA_TYPE_NAMES.FLOAT:\n          buffer.writeFloatLE(value, i);\n          break;\n      }\n\n      i += LORA_DATA_TYPE_LENGTHS[type];\n      point++;\n    }\n\n    let [encBuffer, err] = loraRawCrypt.loraRawEncryptBuffer(this.address, buffer, this.keyBuffer);\n    if (err !== loraRawCrypt.LORA_RAW_ERROR.LRERR_NOERR) {\n      this.setOutputData(this.errorOutputIndex, 'LoRaRaw Crypt ERR: ' + err);\n      return;\n    }\n    buffer = Buffer.concat([this.address, encBuffer]);\n\n    this.setOutputData(this.errorOutputIndex, null);\n    this.setOutputData(0, buffer);\n\n    // this.inputsUpdated.fill(false);\n  }\n\n  onAfterSettingsChange() {\n    if (!this.updateSettings()) {\n      return;\n    }\n    this.updateInputs(this.payloadDefinition);\n    this.setOutputData(this.errorOutputIndex, null);\n    this.onInputUpdated();\n  }\n\n  private updateSettings() {\n    this.settings['senderId'].value = Utils.clamp(this.settings['senderId'].value, 0, 254);\n    this.settings['port'].value = Utils.clamp(this.settings['port'].value, 0, 254);\n    this.settings['nonceLen'].value = Utils.clamp(this.settings['nonceLen'].value, 1, 4);\n    this.payloadDefinition = this.stringToDataTypes(this.settings['definition'].value);\n    if (this.settings['key'].value.length !== 32) {\n      this.setOutputData(this.errorOutputIndex, 'invalid key');\n      this.keyBuffer = null;\n      return false;\n    }\n    this.keyBuffer = Buffer.from(this.settings['key'].value, 'hex');\n    let addrPrefix = this.settings['addrPrefix'].value;\n    this.addressPrefix = addrPrefix && addrPrefix.length === 6 ? addrPrefix.toUpperCase() : 'FFFFFF';\n    this.address = Buffer.from(this.addressPrefix + ('0' + this.settings['senderId'].value.toString(16)).substr(-2), 'hex');\n    this.setOutputData(this.errorOutputIndex, null);\n    return true;\n  }\n\n  private updateInputs(data) {\n    if (this.getInputsCount() - 1 !== data.length) {\n      const inputsCount = this.getInputsCount();\n      for (let i = 1; i < inputsCount; i++) {\n        this.removeInput(i);\n      }\n\n      // this.inputsUpdated = new Array<boolean>(data.length);\n      for (let i = 0; i < data.length; i++) {\n        this.addInput(i.toString(), Type.NUMBER);\n        // this.inputsUpdated[i] = false;\n      }\n      this.updateNodeOutput();\n    }\n  }\n\n  private stringToDataTypes(str) {\n    const data = str\n      .toUpperCase()\n      .replace(/ /g, '')\n      .split(',')\n      .filter(x => x !== '');\n\n    if (data && data.length) {\n      for (let i = 0; i < data.length; i++) {\n        if (LORA_DATA_TYPE_NAMES[data[i]] === undefined) {\n          this.setOutputData(this.errorOutputIndex, 'settings parse error');\n          return undefined;\n        }\n        data[i] = LORA_DATA_TYPE_NAMES[data[i]];\n      }\n    }\n    return data;\n  }\n}\nContainer.registerNodeType('protocols/lora-raw-v2/lora-raw-points-out', LoRaRawPointsOutput);\n","var crypto = require('crypto');\nconst aesCmac = require('node-aes-cmac').aesCmac;\n\nconst IV_DEFAULT = Buffer.alloc(16, 0);\n\nexport enum LORA_RAW_ERROR {\n  LRERR_NOERR,\n  LRERR_INVALID_KEY,\n  LRERR_INVALID_IV,\n  LRERR_INVALID_PAYLOAD,\n  LRERR_INVALID_CMAC,\n};\n\n/* Encrypts a payload for the Nube iO LoRaRaw protocol\n*   AES128 with AES-CMAC\n*   Nonce must be handled externally\n*   \n*   Address - Buffer (4 bytes)\n*   payload - Buffer (any size)\n*   key     - Buffer (16 bytes)\n*   iv     - Buffer (16 bytes). All 0 as DEFAULT\n*\n* Returns array[2]\n*   - Buffer (mod16 bytes) on success or null on error\n*   - LORA_RAW_ERROR code\n*/\nexport function loraRawEncryptBuffer(address, payload, key, iv = IV_DEFAULT) {\n  if (key.length !== 16) {\n    return [null, LORA_RAW_ERROR.LRERR_INVALID_KEY];\n  }\n  if (iv.length !== 16) {\n    return [null, LORA_RAW_ERROR.LRERR_INVALID_IV];\n  }\n\n  var cipher = crypto.createCipheriv('aes-128-cbc', key, iv)\n    .setAutoPadding(false);\n\n  if (payload.length % 16) {\n    payload = Buffer.concat([payload, Buffer.alloc(16 - (payload.length % 16), 0)]);\n  }\n  payload = cipher.update(payload);\n  payload = Buffer.concat([payload, cipher.final()]);\n\n  var cmacBlock = Buffer.concat([address, payload.slice(0, 12)], 16);\n  cmacBlock = Buffer.concat([cmacBlock, payload], 16 + payload.length);\n  var cmac = aesCmac(key, cmacBlock, { returnAsBuffer: true });\n\n  payload = Buffer.concat([payload, cmac.slice(0, 4)], payload.length + 4)\n  return [payload, LORA_RAW_ERROR.LRERR_NOERR];\n}\n\n/* Decrypts payload for Nube iO LoRaRaw protocol\n*   AES128 with AES-CMAC\n*   \n*   Address - Buffer (4 bytes)\n*   payload - Buffer (mod16 bytes + 4 bytes for CMAC)\n*   key     - Buffer (16 bytes)\n*   iv     - Buffer (16 bytes). All 0 as DEFAULT\n*\n* Returns array[2]\n*   - Buffer (mod16 bytes) on success or null on error\n*   - LORA_RAW_ERROR code\n*/\nexport function loraRawDecryptBuffer(address, payload, key, iv = IV_DEFAULT) {\n  if (key.length !== 16) {\n    return [null, LORA_RAW_ERROR.LRERR_INVALID_KEY];\n  }\n  if (iv.length !== 16) {\n    return [null, LORA_RAW_ERROR.LRERR_INVALID_IV];\n  }\n\n  if (payload.length % 16 !== 4) {\n    return [null, LORA_RAW_ERROR.LRERR_INVALID_PAYLOAD];\n  }\n\n  var cmacBlock = Buffer.concat([address, payload], 16);\n  cmacBlock = Buffer.concat([cmacBlock, payload], 16 + payload.length);\n  var cmac = aesCmac(key, cmacBlock, { returnAsBuffer: true }).slice(0, 4);\n  if (!cmac.compare(payload, payload.length - 4)) {\n    return [null, LORA_RAW_ERROR.LRERR_INVALID_CMAC];\n  }\n\n  var cipher = crypto.createDecipheriv('aes-128-cbc', key, iv)\n    .setAutoPadding(false);\n\n  payload = cipher.update(payload.slice(0, payload.length - 4));\n  payload = Buffer.concat([payload, cipher.final()]);\n\n  return [payload, LORA_RAW_ERROR.LRERR_NOERR];\n}\n","module.exports = require(\"node-aes-cmac\");","import { Container } from '../../../container';\nimport { Node } from '../../../node';\nimport { NodeSetting, SettingType, Type } from '../../../node-io';\nimport TimeUtils from '../../../utils/time-utils';\n\nconst crypto = require('crypto');\n\nconst IV_DEFAULT = Buffer.alloc(16, 0);\n\ninterface LoraSensor {\n  id: string;\n  voltage: number;\n  rssi: number;\n  snr: number;\n  nodeName: string;\n  topic: {}\n  lastMessage: any\n}\ninterface AASensor extends LoraSensor {\n  pulses: number;\n  a1: number;\n  a2: number;\n  a3: number;\n}\ninterface B0Sensor extends LoraSensor {\n  temp: number;\n  pressure: number;\n  humidity: number;\n}\ninterface B1Sensor extends B0Sensor {\n  lux: number;\n}\ninterface B2Sensor extends B1Sensor {\n  movement: boolean;\n}\n\nenum SensorType {\n  Droplet = 'Droplet',\n  MicroEdge = 'MicroEdge',\n}\n\nexport class LoraSensorLegacyDecoderNode extends Node {\n  watchdogDelay = 3600000;\n  nodeID = '';\n  timeoutFunc;\n  sensorType: string;\n  keyBuffer: Buffer = null;\n\n  constructor() {\n    super();\n    this.title = `Lora Sensor Legacy Decoder (Droplet | Micro)`;\n    this.description =\n      'LEGACY DECODER. PROVIDES DECRYPTION AS NEW FIRMWARE DOESNT\\n' +\n      'This node is used to decode raw serial input messages to LORA sensor values.\\n' +\n      'It should be used in conjunction with the protocols/serial-connector node.\\n' +\n      'If a ‘nodeID’ is set, only messages from matching LORA sensors will be output.\\n' +\n      'If no ‘nodeID’ is set, all valid LORA sensor messages will be output.\\n' +\n      'Outputs that are not present in the raw serial input message will be ‘null’.\\n' +\n      '‘lowBatteryAlm’ output will be ‘true’ if the LORA sensor has a battery ‘voltage’ value less than the ‘Low battery warning voltage’ setting\\n' +\n      'otherwise it will be ‘false’.\\n' +\n      '‘watchdog’ output will be ‘true’ if there has been no valid message from the ‘nodeID’ LORA sensor for the ‘Watchdog Delay’\\n' +\n      'otherwise ‘watchdog’ output will be false.  Maximum ‘Watchdog Delay’ setting is 587 hours.\\n' +\n      'This node can be used for decoding Nube Droplet sensors, and Nube MicroEdge sensors.\\n' +\n      'The sensor type can be selected from settings.';\n\n    this.settings['sensorType'] = NodeSetting.create({\n      description: 'LORA Sensor Type',\n      type: SettingType.DROPDOWN,\n      config: {\n        items: [\n          { value: SensorType.Droplet, text: SensorType.Droplet },\n          { value: SensorType.MicroEdge, text: SensorType.MicroEdge },\n        ],\n      },\n      value: 'Droplet',\n    });\n    this.settings['keyHex'] = NodeSetting.create({\n      description: 'Decryption Key (HEX)',\n      value: '',\n      type: SettingType.STRING,\n    });\n    this.addInput('rawInput', Type.STRING);\n    this.addInputWithSettings('nodeID', Type.STRING, '', 'NodeID');\n    this.addInputWithSettings('topic', Type.STRING, '', 'Set topic for use elsewhere in wires');\n    this.addOutput('json', Type.STRING);\n    this.addOutput('id', Type.STRING);\n    this.addOutput('voltage', Type.NUMBER);\n    this.addOutput('rssi', Type.NUMBER);\n    this.addOutput('lowBatteryAlm', Type.BOOLEAN);\n    this.addOutput('watchdog', Type.BOOLEAN);\n    this.addOutput('temperature', Type.NUMBER);\n    this.addOutput('humidity', Type.NUMBER);\n    this.addOutput('lux', Type.NUMBER);\n    this.addOutput('pressure', Type.NUMBER);\n    this.addOutput('movement', Type.BOOLEAN);\n    this.settings['microEdgeA1'] = NodeSetting.create({\n      description: 'MicroEdge a1 Input Type',\n      type: SettingType.DROPDOWN,\n      config: {\n        items: [\n          { value: '10k', text: '10k Thermistor' },\n          { value: '10vdc', text: '0-10vdc' },\n          { value: 'digital', text: 'Digital' },\n        ],\n      },\n      value: '10vdc',\n    });\n    this.settings['microEdgeA2'] = NodeSetting.create({\n      description: 'MicroEdge a2 Input Type',\n      type: SettingType.DROPDOWN,\n      config: {\n        items: [\n          { value: '10k', text: '10k Thermistor' },\n          { value: '10vdc', text: '0-10vdc' },\n          { value: 'digital', text: 'Digital' },\n        ],\n      },\n      value: '10vdc',\n    });\n    this.settings['microEdgeA3'] = NodeSetting.create({\n      description: 'MicroEdge a3 Input Type',\n      type: SettingType.DROPDOWN,\n      config: {\n        items: [\n          { value: '10k', text: '10k Thermistor' },\n          { value: '10vdc', text: '0-10vdc' },\n          { value: 'digital', text: 'Digital' },\n        ],\n      },\n      value: '10vdc',\n    });\n    this.settings['battery-warn'] = NodeSetting.create({\n      description: 'Low battery warning voltage',\n      value: 3.5,\n      type: SettingType.NUMBER,\n    });\n    this.settings['watchdog'] = NodeSetting.create({\n      description: 'Watchdog (No message warning) Delay',\n      value: 60,\n      type: SettingType.NUMBER,\n    });\n    this.settings['time'] = NodeSetting.create({\n      description: 'Time',\n      type: SettingType.DROPDOWN,\n      config: {\n        items: [\n          { value: 'milliseconds', text: 'Milliseconds' },\n          { value: 'seconds', text: 'Seconds' },\n          { value: 'minutes', text: 'Minutes' },\n          { value: 'hours', text: 'Hours' },\n        ],\n      },\n      value: 'minutes',\n    });\n    this.setSettingsConfig({\n      groups: [{ time: {}, watchdog: { weight: 2 } }],\n      conditions: {\n        microEdgeA1: setting => {\n          return setting['sensorType'].value === SensorType.MicroEdge;\n        },\n        microEdgeA2: setting => {\n          return setting['sensorType'].value === SensorType.MicroEdge;\n        },\n        microEdgeA3: setting => {\n          return setting['sensorType'].value === SensorType.MicroEdge;\n        },\n      },\n    });\n  }\n\n  onAdded() {\n    this.sensorType = this.settings['sensorType'].value;\n    let keyHex = this.settings['keyHex'].value;\n    this.keyBuffer = keyHex && keyHex.length === 32 ? Buffer.from(keyHex, 'hex') : null;\n    if (this.sensorType === SensorType.MicroEdge) {\n      /**\n       * Issue: #552\n       * On frontend side:\n       * Removing this one here, because constructor() and onAdded() function gets called while doing each refresh\n       * And always 'movement' slot (slot number: 10) gets displayed even when it shouldn't\n       * It's because when sensorType === 'MicroEdge', we are replacing slots 6-9 with new one and leaving 0-5 as is,\n       * But we are doing nothing for node 10, so on it displays on frontend side even it doesn't have real value on backend\n       */\n      this.removeOutput(10);\n    }\n    this.clearOutputs();\n    this.updateTitle();\n  }\n\n  onInputUpdated() {\n\n    const sensorType = this.settings['sensorType'].value;\n    let nodeID = this.getInputData(1).toUpperCase() || '';\n    if (nodeID != this.nodeID) {\n      this.nodeID = nodeID;\n      this.updateTitle(); // Update title is also related with nodeID update so\n      this.broadcastTitleToClients();\n      this.clearOutputs();\n      this.resetWatchdog();\n    }\n\n    if (this.keyBuffer === null) {\n      return;\n    }\n    let data: string = this.getInputData(0) || '';\n    if (!data) return;\n    else if (data.length % 2 === 1 && (data[data.length - 1] === '\\r' || data[data.length - 1] === '\\n')) {\n      data = data.substring(0, data.length - 1);\n    } else if (data.substring(data.length - 2, data.length) === '\\r\\n') {\n      data = data.substring(0, data.length - 2);\n    }\n    if (data.length !== 36 && data.length !== 44) {\n      return;\n    }\n    // Added decryption\n    let buffer = Buffer.from(data.substr(0, 32), 'hex');\n    var decipher = crypto.createDecipheriv('aes-128-cbc', this.keyBuffer, IV_DEFAULT)\n      .setAutoPadding(false);\n    buffer = decipher.update(buffer);\n    data = buffer.toString('hex').toUpperCase() + data.substring(32);\n\n    if (\n      data.length !== 36 &&\n      data.length !== 44 &&\n      data.substring(2, 4) !== 'AA' &&\n      data.substring(2, 4) !== 'B0' &&\n      data.substring(2, 4) !== 'B1' &&\n      data.substring(2, 4) !== 'B2'\n    ) {\n      return;\n    }\n\n    if (nodeID == data.substring(0, 8) || nodeID == '') {\n      if (\n        sensorType === SensorType.MicroEdge &&\n        data.substring(2, 4) === 'AA' &&\n        (data.length === 44 || data.length === 36)\n      ) {\n        if (this.inputs[0].updated) this.resetWatchdog();\n        this.writeOutputs(this.microEdgeDecode(data));\n      } else if (\n        sensorType === SensorType.Droplet &&\n        data.substring(2, 3) === 'B' &&\n        (data.length === 44 || data.length === 36)\n      ) {\n        if (this.inputs[0].updated) this.resetWatchdog();\n        this.writeOutputs(this.dropletDecode(data));\n      }\n    }\n  }\n\n  onAfterSettingsChange() {\n    let keyHex = this.settings['keyHex'].value;\n    this.keyBuffer = keyHex && keyHex.length === 32 ? Buffer.from(keyHex, 'hex') : null;\n    let watchdogTime = this.settings['watchdog'].value;\n    watchdogTime = TimeUtils.timeConvert(watchdogTime, this.settings['time'].value);\n    if (this.watchdogDelay != watchdogTime) {\n      this.resetWatchdog();\n    }\n    this.setOutputs();\n    this.updateNodeOutput();\n    this.onInputUpdated();\n  }\n\n  private writeOutputs(output: LoraSensor) {\n    switch (this.settings['sensorType'].value) {\n      case SensorType.Droplet:\n        this.setOutputData(0, JSON.stringify(output));\n        this.setOutputData(1, output['id'] == null ? null : output['id']);\n        this.setOutputData(2, output['voltage'] == null ? null : output['voltage']);\n        this.setOutputData(3, output['rssi'] == null ? null : output['rssi']);\n        this.setOutputData(4, output['voltage'] < this.settings['battery-warn'].value);\n        this.setOutputData(6, output['temp'] == null ? null : output['temp']);\n        this.setOutputData(7, output['humidity'] == null ? null : output['humidity']);\n        this.setOutputData(8, output['lux'] == null ? null : output['lux']);\n        this.setOutputData(9, output['pressure'] == null ? null : output['pressure']);\n        this.setOutputData(10, output['movement'] == null ? null : output['movement']);\n        break;\n\n      case SensorType.MicroEdge:\n        this.setOutputData(0, JSON.stringify(output));\n        this.setOutputData(1, output['id'] == null ? null : output['id']);\n        this.setOutputData(2, output['voltage'] == null ? null : output['voltage']);\n        this.setOutputData(3, output['rssi'] == null ? null : output['rssi']);\n        this.setOutputData(4, output['voltage'] < this.settings['battery-warn'].value);\n        this.setOutputData(6, output['pulses'] == null ? null : output['pulses']);\n        const microEdgeOutputs = this.MicroEdgeAnalogs([output['a1'], output['a2'], output['a3']]);\n        this.setOutputData(7, microEdgeOutputs[0] == null ? null : microEdgeOutputs[0]);\n        this.setOutputData(8, microEdgeOutputs[1] == null ? null : microEdgeOutputs[1]);\n        this.setOutputData(9, microEdgeOutputs[2] == null ? null : microEdgeOutputs[2]);\n        break;\n    }\n  }\n\n  private MicroEdgeAnalogs(analogInputs) {\n    let output = [];\n    for (var i = 0; i < 3; i++) {\n      if (typeof analogInputs[i] == 'number') {\n        switch (this.settings[`microEdgeA${i + 1}`].value) {\n          case '10k':\n            const Vref = 3.34;\n            const V = (analogInputs[i] / 1024) * Vref;\n            const R0 = 10000;\n            const R = (R0 * V) / (Vref - V);\n            const T0 = 273 + 25;\n            const B = 3850;\n            const T = 1 / (1 / T0 + (1 / B) * Math.log(R / R0));\n            const temp = T - 273.15;\n            output.push(Math.round(temp * 100) / 100);\n            break;\n\n          case '10vdc':\n            output.push((analogInputs[i] / 1024) * 10);\n            break;\n\n          case 'digital':\n            if (analogInputs[i] === undefined || analogInputs[i] >= 1000) {\n              output.push(false);\n            } else {\n              output.push(true);\n            }\n            break;\n        }\n      } else output.push(null);\n    }\n    return output;\n  }\n\n  lastMessageTimeStamp() {\n    return new Date()\n  }\n\n  microEdgeDecode(data: string): AASensor {\n    const topic = this.getInputData(2)\n    const topicsBuilder = {\n      id: topic + \"/id\",\n      pulses: topic + \"/pulses\",\n      voltage: topic + \"/voltage\",\n      a1: topic + \"/a1\",\n      a2: topic + \"/a2\",\n      a3: topic + \"/a3\",\n      rssi: topic + \"/rssi\",\n      snr: topic + \"/snr\"\n    }\n    let lastMessage = null;\n    lastMessage = this.lastMessageTimeStamp()\n    return {\n      id: data.substring(0, 8),\n      pulses: parseInt(data.substring(8, 16), 16),\n      voltage: parseInt(data.substring(16, 18), 16) / 50,\n      a1: parseInt(data.substring(18, 22), 16),\n      a2: parseInt(data.substring(22, 26), 16),\n      a3: parseInt(data.substring(26, 30), 16),\n      rssi: Buffer.from(data.substring(data.length - 4, data.length - 2), 'hex').readInt8(0),\n      // rssi: (parseInt(data.substring(data.length - 4, data.length - 2), 16) & 127) * -1,\n      snr: parseInt(data.substring(data.length - 2, data.length), 16) / 10,\n      nodeName: this.name,\n      topic: topicsBuilder,\n      lastMessage: lastMessage\n    };\n  }\n\n  dropletDecode(data: string): B0Sensor {\n    const topic = this.getInputData(2)\n    const topicsBuilder = {\n      id: topic + \"/id\",\n      temp: topic + \"/temp\",\n      pressure: topic + \"/pressure\",\n      humidity: topic + \"/humidity\",\n      lux: topic + \"/lux\",\n      movement: topic + \"/movement\",\n      voltage: topic + \"/voltage\",\n      rssi: topic + \"/rssi\",\n      snr: topic + \"/snr\"\n    }\n    let lastMessage = null;\n    lastMessage = this.lastMessageTimeStamp()\n\n    let output: B0Sensor = {\n      id: data.substring(0, 8),\n      temp: parseInt(data.substring(10, 12) + data.substring(8, 10), 16) / 100,\n      pressure: parseInt(data.substring(14, 16) + data.substring(12, 14), 16) / 10,\n      humidity: parseInt(data.substring(16, 18), 16) % 128,\n      voltage: parseInt(data.substring(22, 24), 16) / 50,\n      rssi: Buffer.from(data.substring(data.length - 4, data.length - 2), 'hex').readInt8(0),\n      // rssi: (parseInt(data.substring(data.length - 4, data.length - 2), 16) & 127) * -1,\n      snr: parseInt(data.substring(data.length - 2, data.length), 16) / 10,\n      nodeName: this.name,\n      topic: topicsBuilder,\n      lastMessage: lastMessage\n    };\n    if (data.substring(2, 4) === 'B1' || data.substring(2, 4) === 'B2') {\n      const b1Sensor: B1Sensor = output as B1Sensor;\n      b1Sensor.lux = parseInt(data.substring(20, 22) + data.substring(18, 20), 16);\n      output = b1Sensor;\n      if (data.substring(2, 4) == 'B2') {\n        const b2_sensor: B2Sensor = b1Sensor as B2Sensor;\n        b2_sensor.movement = parseInt(data.substring(16, 18), 16) > 127;\n        output = b2_sensor;\n      }\n    }\n    return output;\n  }\n\n  resetWatchdog() {\n    this.setOutputData(5, false, true);\n    clearInterval(this.timeoutFunc);\n    let watchdogTime = this.settings['watchdog'].value;\n    watchdogTime = TimeUtils.timeConvert(watchdogTime, this.settings['time'].value);\n    this.watchdogDelay = watchdogTime;\n    this.timeoutFunc = setTimeout(() => {\n      this.setOutputData(5, true, true);\n    }, watchdogTime);\n  }\n\n  setOutputs() {\n    const currentSensorType = this.settings['sensorType'].value;\n    if (this.sensorType != currentSensorType) {\n      switch (currentSensorType) {\n        case SensorType.Droplet:\n          this.removeOutput(6);\n          this.removeOutput(7);\n          this.removeOutput(8);\n          this.removeOutput(9);\n          if (this.outputs[10]) this.removeOutput(10);\n          this.addOutput('temperature', Type.NUMBER);\n          this.addOutput('humidity', Type.NUMBER);\n          this.addOutput('lux', Type.NUMBER);\n          this.addOutput('pressure', Type.NUMBER);\n          this.addOutput('movement', Type.BOOLEAN);\n          this.clearOutputs();\n          break;\n\n        case SensorType.MicroEdge:\n          this.removeOutput(6);\n          this.removeOutput(7);\n          this.removeOutput(8);\n          this.removeOutput(9);\n          this.removeOutput(10);\n          if (this.outputs[11]) this.removeOutput(11);\n          this.addOutput('pulses', Type.NUMBER);\n          this.addOutput('a1', Type.NUMBER);\n          this.addOutput('a2', Type.NUMBER);\n          this.addOutput('a3', Type.NUMBER);\n          this.clearOutputs();\n          break;\n      }\n    }\n    if (currentSensorType == SensorType.MicroEdge) {\n      this.outputs[7].name = `a1 (${this.settings['microEdgeA1'].value})`;\n      this.outputs[8].name = `a2 (${this.settings['microEdgeA2'].value})`;\n      this.outputs[9].name = `a3 (${this.settings['microEdgeA3'].value})`;\n    }\n    this.sensorType = currentSensorType;\n    this.updateTitle();\n  }\n\n  updateTitle() {\n    if (this.nodeID) this.title = `Lora Sensor Decoder (${this.sensorType} | ${this.nodeID})`;\n    else this.title = `Lora Sensor Decoder (${this.sensorType} | ALL)`;\n  }\n\n  clearOutputs() {\n    this.setOutputData(0, null);\n    this.setOutputData(1, null);\n    this.setOutputData(2, null);\n    this.setOutputData(3, null);\n    this.setOutputData(4, null);\n    this.setOutputData(5, null);\n    this.setOutputData(6, null);\n    this.setOutputData(7, null);\n    this.setOutputData(8, null);\n    this.setOutputData(9, null);\n    if (this.settings['sensorType'].value === SensorType.Droplet) this.setOutputData(10, null);\n  }\n}\nContainer.registerNodeType('protocols/lora-raw-v2/lora-raw-sensor-decoder-legacy', LoraSensorLegacyDecoderNode);\n","import { Container } from '../../../container';\nimport { Node } from '../../../node';\nimport { Side } from '../../../node-interface';\nimport { NodeSetting, SettingType, Type } from '../../../node-io';\nimport { NODE_INFO } from '../../../node-info';\n\nlet ModbusRTU = require('modbus-serial');\n\n// guide and code for converting modbus data types\n//https://github.com/ioBroker/ioBroker.modbus\n\nclass ModbusServerNode extends Node {\n  tcpServer = null;\n\n  constructor() {\n    super();\n    this.title = NODE_INFO[\"protocols/modbus\"][\"modbus-server\"].title;\n    this.description =\n      `## Description\\n ` +\n      NODE_INFO[\"protocols/modbus\"][\"modbus-server\"].description + `\\n ` +\n      `   \\n ` +\n      `## Point Address\\n ` +\n      `   \\n ` +\n      `### Coils\\n ` +\n      `   \\n ` +\n      ` Valid Coil range is between 0 and 10001. This will allow any modbus client to read and write to those coli ranges\\n ` +\n      `   \\n ` +\n      `### Holding Register\\n ` +\n      `   \\n ` +\n      ` Valid Holding Register range is between 10001 and 19999. This will allow any modbus client to read and write to those coli ranges\\n ` +\n      `   \\n ` +\n      `### Enable\\n ` +\n      `   \\n ` +\n      ` This will enable/disable the modbus server \\n ` +\n      `   \\n ` +\n      `### Port\\n ` +\n      `   \\n ` +\n      ` This is the setting that the modbus server will listen on \\n ` +\n      `   \\n ` +\n      `### Modbus address\\n ` +\n      `   \\n ` +\n      ` This will set the modbus server modbus address (valid range between 0 and 255) \\n ` +\n      `   \\n `;\n    this.addInput('connect', Type.BOOLEAN);\n    this.addOutput('status', Type.BOOLEAN);\n    this.addOutput('error', Type.STRING);\n    this.addOutput('message', Type.STRING);\n    this.settings['serverEnable'] = NodeSetting.create({\n      description: 'Server enable',\n      value: false,\n      type: SettingType.BOOLEAN,\n    });\n    this.settings['port'] = NodeSetting.create({ description: 'port', value: 8502, type: SettingType.NUMBER });\n    this.settings['address'] = NodeSetting.create({\n      description: 'Modbus address',\n      value: 1,\n      type: SettingType.NUMBER,\n    });\n  }\n\n  onAdded() {\n    this.createModbusServer();\n  }\n\n  onInputUpdated() {\n    this.createModbusServer();\n  }\n\n  onAfterSettingsChange() {\n    this.createModbusServer();\n  }\n\n  onRemoved() {\n    this.closeTcpServer();\n  }\n\n  private createModbusServer() {\n    if (this.side !== Side.server) return; // only execute on server\n    this.closeTcpServer();\n    this.emitResult(false, false, 'close connection');\n\n    if (this.settings['serverEnable'].value) {\n      // set the server to answer for modbus requests\n      const coils = Buffer.alloc(160008, 0); // coils and discrete inputs\n      const registers = Buffer.alloc(160008, 0); // input and holding registers\n\n      let unitId = this.settings['address'].value;\n      unitId = parseInt(unitId);\n      const minAddress = 0;\n      const maxInputAddress = 10001;\n      const maxAddress = 20001;\n      const bufferFactor = 8;\n\n      // 1...10000*      address - 1      Coils (outputs)    0   Read/Write\n      // 10001...20000*  address - 10001  Discrete Inputs    01  Read\n      // 30001...40000*  address - 30001  Input Registers    04  Read\n      // 40001...50000*  address - 40001  Holding Registers  03  Read/Write\n\n      const vector = {\n        getCoil: function(addr, unitID) {\n          if (unitID === unitId && addr >= minAddress && addr < maxAddress) {\n            // console.log('get coils', coils.readUInt8(addr * bufferFactor));\n            return coils.readUInt8(addr * bufferFactor);\n          }\n        },\n        getInputRegister: function(addr, unitID) {\n          if (unitID === unitId && addr >= minAddress && addr < maxInputAddress) {\n            // 0 to 10001\n            // console.log('get getInputRegister', registers.readUInt16BE(addr * bufferFactor));\n            return registers.readUInt16BE(addr * bufferFactor);\n          }\n        },\n        getHoldingRegister: function(addr, unitID) {\n          if (unitID === unitId && addr >= maxInputAddress && addr < maxAddress) {\n            // 10001 to 20001\n            // console.log('get getHoldingRegister', registers.readUInt16BE(addr * bufferFactor));\n            return registers.readUInt16BE(addr * bufferFactor);\n          }\n        },\n        setCoil: function(addr, value, unitID) {\n          if (unitID === unitId && addr >= minAddress && addr < maxAddress) {\n            // console.log('set coil', addr, value, unitID);\n            coils.writeUInt8(value, addr * bufferFactor);\n          }\n        },\n        setRegister: function(addr, value, unitID) {\n          if (unitID === unitId && addr >= minAddress && addr < maxAddress) {\n            // console.log(' setRegister', addr, value, unitID);\n            registers.writeUInt16BE(value, addr * bufferFactor);\n          }\n        },\n        readDeviceIdentification: function(unitID) {\n          return new Promise(function(resolve) {\n            setTimeout(function() {\n              resolve({\n                0x00: 'Nube-IO',\n                0x01: 'wires-server',\n                0x02: '1',\n                0x05: 'wires-server',\n              });\n            }, 10);\n          });\n        },\n      };\n\n      //make a server to test the port\n      var net = require('net');\n      var server = net.createServer();\n      let port = this.settings['port'].value;\n      let salveAddress = this.settings['address'].value;\n      //make sure port size is >= 4\n      if (port.toString().length >= 3) {\n        server.once('error', err => {\n          if (err.code === 'EADDRINUSE') {\n            this.emitResult(false, false, 'port in use');\n            server.close();\n          }\n        });\n        //check if port is in use\n        server.once('listening', () => {\n          //make a modbus server\n          this.tcpServer = new ModbusRTU.ServerTCP(vector, {\n            host: '0.0.0.0',\n            port: port,\n            debug: true,\n            unitID: parseInt(salveAddress),\n          });\n\n          this.tcpServer.on('socketError', err => {\n            this.emitResult(false, err, 'server error');\n          });\n\n          this.tcpServer.on('initialized', () => {\n            this.emitResult(true, false, 'initialized');\n          });\n          //close test port\n          server.close();\n        });\n        //check port\n        server.listen(port);\n      } else if (port.toString().length < 3) {\n        this.emitResult(null, false, 'use a port >= 3');\n      }\n    }\n  }\n\n  private closeTcpServer() {\n    this.tcpServer &&\n      this.tcpServer.close(() => {\n        this.emitResult(false, false, 'closed');\n      });\n  }\n\n  emitResult(out, err, msg) {\n    this.setOutputData(0, out);\n    this.setOutputData(1, err);\n    this.setOutputData(2, msg);\n  }\n}\nContainer.registerNodeType('protocols/modbus/modbus-server', ModbusServerNode);\n","import { isNull } from '../../../../utils/helper';\nimport { NODE_INFO } from '../../../node-info';\nimport { MODBUS_RTU_DEVICE, MODBUS_RTU_NETWORK } from '../../../constants';\nimport { Container } from '../../../container';\nimport { ContainerNode } from '../../../container-node';\nimport { NodeState } from '../../../node';\nimport { Side } from '../../../node-interface';\nimport { NodeSetting, SettingType, Type } from '../../../node-io';\n\nconst net = require('net');\nclass ModbusSerialDeviceNode extends ContainerNode {\n  tcpServer = null;\n  db = null;\n  uuid: string | number = null;\n\n  // node outputs\n  outStatus = 0;\n  outError = 1;\n  outMessageJson = 2;\n\n  constructor() {\n    super();\n    this.title = NODE_INFO[\"protocols/modbus\"][\"modbus-device\"].title;\n    this.description =\n      `## Description\\n ` +\n      `${NODE_INFO[\"protocols/modbus\"][\"modbus-device\"].description}\\n ` +\n      `### Enable\\n ` +\n      `   \\n ` +\n      ` This will enable/disable the device from polling \\n ` +\n      `   \\n ` +\n      `### Modbus Address\\n ` +\n      `   \\n ` +\n      ` If device is RTU type set the slave modbus address\\n ` +\n      `   \\n ` +\n      `### Device Timeout\\n ` +\n      `   \\n ` +\n      ` This setting is used for the polling. This is the amount of time the polling will wait before moving onto the next register or device to poll\\n ` +\n      `   \\n ` +\n      `### Network Type\\n ` +\n      `   \\n ` +\n      `If type is TCP set select type TCP and set the target device IP and port \\n ` +\n      `If type is RTU set the device address as per setting **Modbus Address** \\n ` +\n      `   \\n ` +\n      `### Point address starting offset\\n ` +\n      `   \\n ` +\n      `Modbus point address offset(Base 1 subtracts 1 to the address) \\n ` +\n      `If set to Base 1 this will make for example point address 1 (from the manufacture data sheet) equal to 0\\n ` +\n      `The default setting is Base 1\\n ` +\n      `   \\n ` +\n      `## Node outputs\\n ` +\n      `   \\n ` +\n      ` If device is TCP when the node is added or after the setting a change a device ping will be sent to see if the device is online\\n ` +\n      ` If device is online **status** will be sent to true and the **error** will be sent to false. If the device if offline the **status** will be sent to false and the **error** true \\n ` +\n      `   \\n `;\n    this.addOutput('status', Type.BOOLEAN);\n    this.addOutput('error', Type.STRING);\n    this.addOutput('message', Type.JSON);\n    this.properties['address'] = 0;\n    this.settings['deviceEnable'] = NodeSetting.create({\n      description: 'Device enable',\n      value: false,\n      type: SettingType.BOOLEAN,\n    });\n    this.addInputWithSettings('address', Type.NUMBER, 1, 'Modbus address', false);\n    this.settings['deviceTimeout'] = NodeSetting.create({\n      description: 'Device Timeout Delay Setting (MS)', //TODO ADD CAP/LIMIT\n      value: 2000,\n      type: SettingType.NUMBER,\n    });\n    this.settings['transport'] = NodeSetting.create({\n      description: 'TCP or RTU/RS485',\n      type: SettingType.DROPDOWN,\n      config: {\n        items: [\n          { value: 'rtu', text: 'Modbus RTU over Serial 485' },\n          { value: 'tcp', text: 'Modbus TCP/IP' },\n        ],\n      },\n      value: 'rtu',\n    });\n    this.settings['ipAddress'] = NodeSetting.create({\n      description: 'Network IP Address',\n      value: '0.0.0.0',\n      type: SettingType.STRING,\n    });\n    this.settings['ipPort'] = NodeSetting.create({\n      description: 'Network Port Number',\n      value: 502,\n      type: SettingType.NUMBER,\n    });\n    this.settings['deviceAddressOffset'] = NodeSetting.create({\n      description: 'Point address starting offset',\n      type: SettingType.DROPDOWN,\n      config: {\n        items: [\n          { value: 1, text: 'Base 1' },\n          { value: 0, text: 'Base 0' },\n        ],\n      },\n      value: 1,\n    });\n    this.setSettingsConfig({\n      conditions: {\n        ipAddress: setting => {\n          return setting['transport'].value === 'tcp';\n        },\n        ipPort: setting => {\n          return setting['transport'].value === 'tcp';\n        },\n      },\n    });\n  }\n\n  onAdded() {\n    super.onAdded();\n    this.onInputUpdated()\n    this.broadcastNameToClients();\n    this.updateTitle()\n    this.nodeColour()\n    if (this.side !== Side.server) return;\n    this.uuid = this.id;\n    if (this.settings['transport'].value === 'tcp') {\n      this.ping();\n    }\n  }\n\n\n  updateTitle() {\n    const address = this.getInputData(0);\n    const transport = this.settings['transport'].value;\n    const ipAddress = this.settings['ipAddress'].value;\n    const ipPort = this.settings['ipPort'].value;\n    if (transport === 'tcp') {\n      this.title = `Modbus Device (Type: ${this.settings['transport'].value}, AD: ${address} , IP: ${ipAddress}:${ipPort})`;\n      this.broadcastSettingsToClients();\n    } else {\n      this.title = `Modbus Device (Type: ${this.settings['transport'].value}, AD: ${address})`;\n      this.broadcastSettingsToClients();\n    }\n\n  }\n\n  ping() {\n    const host = [this.settings['ipAddress'].value, this.settings['ipPort'].value];\n    var sock = new net.Socket();\n    sock.setTimeout(5000);\n    sock\n      .on('connect', () => {\n        this.setOutputData(this.outStatus, true, true);\n        this.setOutputData(this.outError, false, true);\n        this.setOutputData(this.outMessageJson, host[0] + ':' + host[1] + ' is up.', true);\n        sock.destroy();\n      })\n      .on('error', e => {\n        this.setOutputData(this.outError, true, true);\n        this.setOutputData(this.outStatus, false, true);\n        this.setOutputData(this.outMessageJson, host[0] + ':' + host[1] + ' is down: ' + e.message, true);\n      })\n      .on('timeout', e => {\n        this.setOutputData(this.outError, true, true);\n        this.setOutputData(this.outStatus, false, true);\n        this.setOutputData(this.outMessageJson, host[0] + ':' + host[1] + ' is down: timeout', true);\n      })\n      .connect(host[1], host[0]);\n  }\n\n\n\n  onAfterSettingsChange(oldSettings: any) {\n    this.updateTitle()\n    this.onInputUpdated()\n    this.nodeColour()\n    super.onAfterSettingsChange(oldSettings);\n    if (this.side !== Side.server) return;\n    if (this.settings['transport'].value === 'tcp') {\n      this.ping();\n    }\n\n\n  }\n\n\n  onInputUpdated() {\n      const address = this.getInputData(0);\n      if (!isNull(address)) {\n        this.properties['address'] = address;\n        this.persistProperties(false, true);\n      } else {\n        this.properties['address'] = 0\n        this.persistProperties(false, true);\n      }\n  }\n\n\n  subscribeMessage(e) {\n    this.setOutputData(0, true, true);\n    this.setOutputData(1, false, true);\n    this.setOutputData(2, null, true);\n    this.nodeColour(false)\n  }\n\n  subscribeError(e) {\n    if (e === null) return;\n    this.setOutputData(0, false, true);\n    this.setOutputData(1, true, true);\n    this.setOutputData(2, e, true);\n    this.nodeColour(true)\n  }\n\n  nodeColour(err?: boolean) {\n    const deviceEnable = this.settings['deviceEnable'].value\n    if (deviceEnable === false) {\n      this.setNodeState(NodeState.DISABLED);\n    } else if (deviceEnable === true && !err){\n      this.setNodeState(NodeState.NORMAL)\n    } else if (err === true){\n      this.setNodeState(NodeState.ERROR)\n    }\n  }\n}\n\nContainer.registerNodeType(MODBUS_RTU_DEVICE, ModbusSerialDeviceNode, MODBUS_RTU_NETWORK);\n","import { isNull } from '../../../../utils/helper';\nimport { MODBUS_RTU_DEVICE, MODBUS_RTU_POINT } from '../../../constants';\nimport { Container } from '../../../container';\nimport { Node, NodeState } from '../../../node';\nimport { Side } from '../../../node-interface';\nimport { NodeSetting, SettingType, Type } from '../../../node-io';\nimport MathUtils, { MATH_FUNC_TYPE } from '../../../utils/MathUtils';\nimport BACnetEnumsUnits from '../../../utils/points/BACnet-enums-units';\nimport { NODE_INFO } from '../../../node-info';\n\nexport class ModbusPointNode extends Node {\n  dynamicInputsExist: boolean = false;\n  dynamicSettingsExist: boolean = false;\n  dynamicInputStartPosition: number = 0;\n  inputCount: number;\n  dynamicMinInputs: number = 0;\n  nullableInputs: boolean = true;\n  dynamicOutputsExist: boolean = false;\n  dynamicInputsStartName: string = 'in';\n  dynamicOutputsStartName: string = 'out';\n  dynamicInputsType: Type = Type.NUMBER;\n  previousPointType;\n\n  lastInputState: any;\n\n  // node inputs\n  inAlarmTrigger = 0;\n  inHistoryTrigger = 1;\n  inInput = 2;\n\n  // poll count\n  pollCount = 0;\n  pollCountFail = 0;\n\n  // node outputs\n  outVal = 0;\n  outError = 1;\n  outModbusMessage = 2;\n  outMessageJson = 3;\n  outArray = 4;\n  constructor() {\n    super();\n    this.title = NODE_INFO[\"protocols/modbus\"][\"modbus-point\"].title;\n    this.description =\n      `## Description\\n ` +\n      NODE_INFO[\"protocols/modbus\"][\"modbus-point\"].description +`\\n ` +\n      `   \\n ` +\n      `## Point Address\\n ` +\n      `   \\n ` +\n      `### Coils\\n ` +\n      `   \\n ` +\n      ` Valid Coil range is between 0 and 10001. This will allow any modbus client to read and write to those coli ranges\\n ` +\n      `   \\n ` +\n      `### Holding Register\\n ` +\n      `   \\n ` +\n      ` Valid Holding Register range is between 10001 and 19999. This will allow any modbus client to read and write to those coli ranges\\n ` +\n      `   \\n ` +\n      `## Enable\\n ` +\n      `   \\n ` +\n      ` This will enable/disable the point from polling \\n ` +\n      `   \\n `;\n\n    this.addInput('[name]', Type.STRING);\n    this.addOutput('output', Type.NUMBER);\n    this.addOutput('error', Type.STRING);\n    this.addOutput('output-msg', Type.STRING);\n    this.addOutput('output-json', Type.STRING);\n    this.addOutput('output-modbus-array', Type.STRING);\n    this.properties['pointVal'] = null;\n    this.properties['pointAddress'] = 0;\n    /**\n      Default point Settings (Will be in point class)\n   */\n    this.settings['pointEnable'] = NodeSetting.create({\n      description: 'Point enable',\n      value: false,\n      type: SettingType.BOOLEAN,\n    });\n    this.settings['value_group'] = NodeSetting.create({\n      description: 'Point settings',\n      value: '',\n      type: SettingType.GROUP,\n    });\n    this.addInputWithSettings('input', Type.NUMBER, 0, 'point write value', false);\n    this.settings['valOffset'] = NodeSetting.create({\n      description: 'Out value offset',\n      value: 1000,\n      type: SettingType.NUMBER,\n    });\n    this.settings['valPrecision'] = NodeSetting.create({\n      description: 'Out value precision',\n      value: 0,\n      type: SettingType.NUMBER,\n    });\n    this.settings['units_group'] = NodeSetting.create({\n      description: 'Units (Save to get units)',\n      type: SettingType.GROUP,\n    });\n    this.settings['unitsType'] = NodeSetting.create({\n      description: 'Units',\n      type: SettingType.DROPDOWN,\n      config: {\n        items: BACnetEnumsUnits.unitCategory,\n      },\n    });\n    this.settings['units'] = NodeSetting.create({\n      description: 'Units',\n      value: BACnetEnumsUnits.COMMON_METRIC.NO_UNITS,\n      type: SettingType.DROPDOWN,\n    });\n\n    /**\n      Point Math settings\n   */\n    this.settings['math_group'] = NodeSetting.create({\n      description: 'Math settings',\n      value: '',\n      type: SettingType.GROUP,\n    });\n    this.settings['mathFunc'] = NodeSetting.create({\n      description: 'Math on output value (optional)',\n      type: SettingType.DROPDOWN,\n      config: {\n        items: [\n          { value: MATH_FUNC_TYPE.NA, text: 'na' },\n          { value: MATH_FUNC_TYPE.ADD, text: 'add' },\n          { value: MATH_FUNC_TYPE.SUBTRACT, text: 'subtract' },\n          { value: MATH_FUNC_TYPE.MULTIPLY, text: 'multiply' },\n          { value: MATH_FUNC_TYPE.DIVIDE, text: 'divide' },\n          { value: MATH_FUNC_TYPE.BOOL_INVERT, text: 'bool invert' },\n          { value: MATH_FUNC_TYPE.ONE_TO_TRUE, text: 'convert 1/0 to true/false' },\n          { value: MATH_FUNC_TYPE.TRUE_TO_ONE, text: 'convert true/false to 1/0' },\n        ],\n      },\n      value: MATH_FUNC_TYPE.NA,\n    });\n    this.settings['mathValue'] = NodeSetting.create({\n      description: 'Enter a value',\n      value: 1,\n      type: SettingType.NUMBER,\n    });\n    /**\n     Modbus (Just for modbus)\n     */\n    this.settings['modbus_group'] = NodeSetting.create({\n      description: 'Modbus point settings',\n      value: '',\n      type: SettingType.GROUP,\n    });\n    this.settings['pointType'] = NodeSetting.create({\n      description: 'Select a point type',\n      value: 1,\n      type: SettingType.DROPDOWN,\n      config: {\n        items: [\n          { value: 1, text: `Read Coil's` },\n          // { value: 21, text: `Read DO` },\n          { value: 2, text: `readDiscreteInput's` },\n          // { value: 22, text: `Read DI` },\n          { value: 3, text: `readHoldingRegister's` },\n          // { value: 23, text: `Read AO` },\n          { value: 4, text: `readInputRegister's` },\n          // { value: 24, text: `Read AI` },\n          { value: 5, text: `writeCoil` },\n          // { value: 25, text: `Write DO` },\n          { value: 6, text: `writeRegister` },\n          // { value: 26, text: `Write AO` },\n          // { value: 15, text: `writeCoil's` },\n          { value: 16, text: `writeRegister's` },\n        ],\n      },\n    });\n    this.addInputWithSettings('pointAddress', Type.NUMBER, 1, 'Register address', false);\n    this.settings['pointTimeout'] = NodeSetting.create({\n      description: 'Point Timeout (MS)',\n      value: 1000,\n      type: SettingType.NUMBER,\n    });\n    this.settings['offset'] = NodeSetting.create({\n      description: 'Register offset',\n      value: 1,\n      type: SettingType.NUMBER,\n    });\n    this.settings['dataType'] = NodeSetting.create({\n      description: 'Set data type',\n      type: SettingType.DROPDOWN,\n      config: {\n        items: [\n          { value: 0, text: 'na' }, // use reg length from setting\n          { value: 1, text: 'INT-16' }, // 1 reg\n          { value: 2, text: `UINT-16` }, // 1 reg\n          { value: 3, text: 'INT-32' }, // 2 reg\n          { value: 4, text: 'UINT-32' }, // 2 reg\n          { value: 5, text: 'FLOAT-32' }, // 2 reg // for support of nube hardware BEB_LEW as a float\n          // { value: 6, text: 'INT64' },\n          // { value: 7, text: 'UINT64' },\n          { value: 8, text: 'DOUBLE-64' }, // 4 reg\n        ],\n      },\n      value: 0,\n    });\n    this.settings['dataEndian'] = NodeSetting.create({\n      description: 'Set byte order',\n      type: SettingType.DROPDOWN,\n      config: {\n        items: [\n          { value: 0, text: 'LE-Byte BE-Word' },\n          { value: 1, text: 'LE-Byte LE-Word' },\n          { value: 2, text: 'BE-Byte LE-Word' },\n          { value: 3, text: 'BE-Byte BE-Word' },\n        ],\n      },\n      value: 0,\n    });\n    this.setSettingsConfig({\n      groups: [\n        { pointAddress: {}, offset: {}, pointTimeout: {} },\n        { dataType: {}, dataEndian: {} },\n        { pointLimitEnable: {}, limitLow: {}, limitHigh: {} },\n        { mathFunc: {}, mathValue: {} },\n        { valOffset: {}, valPrecision: {} },\n      ],\n      conditions: {\n        offset: setting => {\n          const val = setting['pointType'].value;\n          return ![5, 6].includes(val);\n        },\n        dataType: setting => {\n          const val = setting['pointType'].value;\n          return ![1, 2, 5, 15].includes(val);\n        },\n        dataEndian: setting => {\n          const val = setting['pointType'].value;\n          return ![1, 2, 5, 15].includes(val);\n        },\n      },\n    });\n  }\n\n  onCreated() {\n    this.updateTitle();\n    this.nodeColour()\n  }\n\n  onAdded() {\n    this.nodeColour()\n    if (this.side !== Side.server) return;\n    this.onInputUpdated();\n    this.updateTitle();\n  }\n\n  onRemoved() { }\n\n  updateTitle() {\n    let pointAddress = this.getInputData(1);\n    this.title = `Modbus Point (FC: ${this.settings['pointType'].value}, AD: ${pointAddress})`;\n    this.broadcastSettingsToClients();\n  }\n\n  onInputUpdated() {\n    // priority array\n    let pointType = this.settings['pointType'].value;\n    if ([5, 6, 15, 16, 25, 26].includes(pointType)) {\n      const input = this.getInputData(1);\n      if (isNull(input)) return;\n      this.setOutputData(this.outModbusMessage, `write val ${input}`);\n      // lastInputState is to stop a new value that is input into the node but the value hasn't updated\n      if (input !== this.lastInputState) {\n        this.properties['pointVal'] = input;\n        // Persist the pointVal. (This is for outputs nodes only like AO, or BO)\n        this.persistProperties(false, true);\n        this.lastInputState = input;\n      } else if (typeof this.lastInputState === 'undefined') {\n        this.lastInputState = input;\n      }\n    }\n\n    //update point pointAddress\n    if (this.inputs[2].updated) {\n      const pointAddress = this.getInputData(2);\n      if (!isNull(pointAddress)) {\n        this.properties['pointAddress'] = pointAddress;\n        this.persistProperties(false, true);\n      } else {\n        this.properties['pointAddress'] = 0;\n        this.persistProperties(false, true);\n      }\n    }\n\n    //update node name\n    if (this.inputs[0].updated) {\n      let nodeName = this.getInputData(0);\n      if (!isNull(nodeName)) {\n        this.name = nodeName;\n        this.broadcastNameToClients();\n      }\n    }\n  }\n\n  onAfterSettingsChange() {\n    const pointAddress = this.getInputData(2);\n    if (!isNull(pointAddress)) {\n      this.properties['pointAddress'] = pointAddress;\n      this.persistProperties(false, true);\n    } else {\n      this.properties['pointAddress'] = 0;\n      this.persistProperties(false, true);\n    }\n    this.onInputUpdated();\n    this.updateTitle();\n    this.nodeColour()\n  }\n\n  sendJson(pointValue) {\n    return {\n      name: this.name,\n      pointValue: pointValue,\n      enable: this.settings['pointEnable'].value,\n      address: this.settings['pointAddress'].value,\n      offset: this.settings['offset'].value,\n      pointType: this.settings['pointType'].value,\n      pollCount: this.pollCount,\n      pollCountFail: this.pollCountFail,\n    };\n  }\n  /**\n   * Gets a the modbus values from the network to update the point node values\n   */\n  subscribe(payload) {\n    let pointType = this.settings['pointType'].value;\n    this.setOutputData(this.outArray, payload.res.data);\n    this.setOutputData(this.outError, false, true);\n    this.nodeColour(false)\n    if ([5, 6, 15, 16, 25, 26].includes(pointType)) {\n      if (payload.payload === 'writeOk') {\n        this.setOutputData(this.outVal, this.properties['pointVal']);\n        this.setOutputData(this.outMessageJson, this.sendJson(this.properties['pointVal']));\n        this.pollCount++;\n      } else {\n        this.setOutputData(this.outModbusMessage, `write fail`, true);\n        this.setOutputData(this.outMessageJson, this.sendJson(null));\n        this.pollCountFail++;\n      }\n    } else {\n      const mathFunc = this.settings['mathFunc'].value;\n      const mathValue = this.settings['mathValue'].value;\n      let out: any;\n      if (mathFunc !== 0) {\n        if (MathUtils.validateNumbers(payload.payload, mathValue)) {\n          out = MathUtils.mathSwitch(mathFunc, payload.payload, mathValue);\n          this.setOutputData(this.outVal, out);\n          this.setOutputData(this.outMessageJson, this.sendJson(out));\n          this.setOutputData(this.outModbusMessage, false, true);\n          this.pollCount++;\n        }\n      } else {\n        if (typeof payload.payload === 'number') {\n          this.setOutputData(this.outVal, payload.payload);\n          this.setOutputData(this.outMessageJson, this.sendJson(payload.payload));\n          this.setOutputData(this.outModbusMessage, false, true);\n          this.pollCount++;\n        } else if (typeof payload.payload === 'boolean') {\n          this.setOutputData(this.outVal, payload.payload ? 1 : 0); // convert bool to int\n          this.setOutputData(this.outMessageJson, this.sendJson(payload.payload ? 1 : 0)); // convert bool to int\n          this.setOutputData(this.outModbusMessage, false, true);\n          this.pollCount++;\n        }\n      }\n    }\n  }\n  // this is called from the modbus network node\n  subscribeError(e: any) {\n    this.setOutputData(this.outError, true, true);\n    this.setOutputData(this.outModbusMessage, e, true);\n    this.pollCountFail++;\n    this.nodeColour(true)\n  }\n\n  nodeColour(err?: boolean) {\n    const pointEnable = this.settings['pointEnable'].value\n    if (pointEnable === false) {\n      this.setNodeState(NodeState.DISABLED);\n    } else if (pointEnable === true && !err){\n      this.setNodeState(NodeState.NORMAL)\n    } else if (err === true){\n      this.setNodeState(NodeState.ERROR)\n    }\n  }\n\n}\n\nContainer.registerNodeType(MODBUS_RTU_POINT, ModbusPointNode, MODBUS_RTU_DEVICE);\n","import { ModbusRTU as RTUModbus } from 'modbus-serial/ModbusRTU';\nimport { IdGenerator } from '../../../../utils/id-generator';\nimport { MODBUS_RTU_DEVICE, MODBUS_RTU_NETWORK, MODBUS_RTU_POINT } from '../../../constants';\nimport { Container } from '../../../container';\nimport { ContainerNode } from '../../../container-node';\nimport { Side } from '../../../node-interface';\nimport { NodeSetting, SettingType, Type } from '../../../node-io';\nimport { GlobalNodeRegistry } from '../../../node-registry';\nimport Utils from '../../../utils';\nimport ModbusMethods from './modbus-fc/modbus-point-methods';\nimport ModbusUtils from './modbus-functions';\nimport { NODE_INFO } from '../../../node-info';\n\nconst ModbusRTU = require('modbus-serial');\n\nenum Poll {\n  DO_NOT_INIT = 0,\n  FIRST_START = 1,\n  STOP = 2,\n}\n\nenum Transport {\n  TCP = 'tcp',\n  RTU = 'rtu',\n}\n\nclass ModbusSerialNetworkNode extends ContainerNode {\n  rs485DeviceName: string = 'ttyUSB1';\n  isPortOk: boolean = false;\n  isPortInUse: boolean = false;\n  serialPortStatus: boolean = false;\n  checkPort: any;\n\n  // settings\n  networkEnable: boolean;\n  port: string;\n  baudRate: string;\n  parity: number;\n  dataBits: number;\n  stopBits: number;\n  devicePolling: number;\n  registerDelay: number;\n  transport: string;\n\n  // pooling running\n  pollEnableSetting: boolean = false;\n  poll: Poll;\n\n  // modbus client\n  client = null;\n  tcpClients: { [key: string]: RTUModbus } = {};\n\n  inNetworkEnable = 0;\n\n  // node outputs\n  outStatus = 0;\n  outError = 1;\n  outPortStatus = 2;\n  outPortMsg = 3;\n  outMessageJson = 4;\n\n  constructor() {\n    super();\n    this.title = NODE_INFO[\"protocols/modbus\"][\"modbus-485-network\"].title;\n    this.description =\n      `## Description\\n ` +\n      NODE_INFO[\"protocols/modbus\"][\"modbus-485-network\"].description + `\\n ` +\n      `   \\n ` +\n      `### Enable\\n ` +\n      `   \\n ` +\n      ` This will enable/disable the network from polling \\n ` +\n      `   \\n `;\n    this.addInputWithSettings('enable', Type.BOOLEAN, false, 'Network Enable', false);\n    this.addOutput('status', Type.BOOLEAN);\n    this.addOutput('error', Type.STRING);\n    this.addOutput('port status', Type.STRING);\n    this.addOutput('port messages', Type.STRING);\n    this.addOutput('message', Type.STRING);\n    this.settings['devicePolling'] = NodeSetting.create({\n      description: 'Polling time setting in ms',\n      value: 2000, // TODO Add min limit\n      type: SettingType.NUMBER,\n    });\n    this.settings['registerDelay'] = NodeSetting.create({\n      description: 'Polling delay between each register in ms',\n      value: 30, // TODO Add min limit\n      type: SettingType.NUMBER,\n    });\n    this.settings['transport'] = NodeSetting.create({\n      description: 'TCP or RTU/RS485',\n      type: SettingType.DROPDOWN,\n      config: {\n        items: [\n          { value: Transport.RTU, text: 'Modbus RTU over Serial 485' },\n          { value: Transport.TCP, text: 'Modbus TCP/IP' },\n        ],\n      },\n      value: Transport.RTU,\n    });\n\n    this.settings['manualPort'] = NodeSetting.create({\n      description: 'Enter port manually',\n      value: false,\n      type: SettingType.BOOLEAN,\n    });\n    this.settings['port'] = NodeSetting.create({\n      description: 'port',\n      type: SettingType.DROPDOWN,\n      config: {\n        items: [\n          { value: '/dev/ttyUSB0', text: 'ttyUSB0' },\n          { value: '/dev/ttyUSB1', text: 'ttyUSB1' },\n          { value: '/dev/ttyUSB2', text: 'RS485-1 (/dev/ttyUSB2)' },\n          { value: '/dev/ttyUSB3', text: 'RS485-2 (/dev/ttyUSB3)' },\n          { value: '/dev/ttyUSB4', text: 'USB Port (/dev/ttyUSB4)' },\n        ],\n      },\n      value: '/dev/ttyUSB0',\n    });\n    this.settings['manualPortNum'] = NodeSetting.create({\n      description: 'Enter port number',\n      value: '/dev/ttyAMA0',\n      type: SettingType.STRING,\n    });\n    this.settings['baudRate'] = NodeSetting.create({\n      description: 'Baud Rate',\n      type: SettingType.DROPDOWN,\n      config: {\n        items: [\n          { value: 115200, text: '115200' },\n          { value: 57600, text: '57600' },\n          { value: 38400, text: '38400' },\n          { value: 19200, text: '19200' },\n          { value: 9600, text: '9600' },\n        ],\n      },\n      value: 9600,\n    });\n    this.settings['parity'] = NodeSetting.create({\n      description: 'Parity',\n      type: SettingType.DROPDOWN,\n      config: {\n        items: [\n          { value: 'none', text: 'none' },\n          { value: 'even', text: 'even' },\n          { value: 'mark', text: 'mark' },\n          { value: 'odd', text: 'odd' },\n          { value: 'space', text: 'space' },\n        ],\n      },\n      value: 'none',\n    });\n    this.settings['dataBits'] = NodeSetting.create({\n      description: 'Data Bits',\n      type: SettingType.DROPDOWN,\n      config: {\n        items: [\n          { value: 8, text: '8' },\n          { value: 7, text: '7' },\n          { value: 6, text: '6' },\n          { value: 5, text: '5' },\n        ],\n      },\n      value: 8,\n    });\n    this.settings['stopBits'] = NodeSetting.create({\n      description: 'Stop Bits',\n      type: SettingType.DROPDOWN,\n      config: {\n        items: [\n          { value: 2, text: '2' },\n          { value: 1.5, text: '1.5' },\n          { value: 1, text: '1' },\n        ],\n      },\n      value: 1,\n    });\n    this.setSettingsConfig({\n      groups: [\n        { port: {}, manualPortNum: {} },\n        { parity: {}, dataBits: {}, stopBits: {} },\n        { devicePolling: {}, registerDelay: {} },\n      ],\n      conditions: {\n        port: setting => {\n          return setting['transport'].value === Transport.RTU;\n        },\n        baudRate: setting => {\n          return setting['transport'].value === Transport.RTU;\n        },\n        parity: setting => {\n          return setting['transport'].value === Transport.RTU;\n        },\n        dataBits: setting => {\n          return setting['transport'].value === Transport.RTU;\n        },\n        stopBits: setting => {\n          return setting['transport'].value === Transport.RTU;\n        },\n        manualPort: setting => {\n          return setting['transport'].value === Transport.RTU;\n        },\n        manualPortNum: setting => {\n          return setting['transport'].value === Transport.RTU;\n        },\n      },\n    });\n  }\n\n  static async getDevicesPoints(sub_container: any, container_db: any) {\n    let devicesPoints = [];\n    let devices: any = await ModbusUtils.getDevice(MODBUS_RTU_DEVICE, sub_container, container_db);\n    for (let device of devices) {\n      let points = await ModbusUtils.getPoints(MODBUS_RTU_POINT, device, container_db);\n      devicesPoints.push(points);\n    }\n    return devicesPoints;\n  }\n\n  async onAdded() {\n    super.onAdded();\n    let nodeDetailsMessage = {\n      nodeId: this.id,\n      cid: this.container.id,\n      sub_id: this.sub_container.id,\n    };\n    this.setOutputData(this.outMessageJson, nodeDetailsMessage);\n    await this.setupForPolling();\n  }\n\n  onCreated() {\n    super.onCreated();\n    if (this.side !== Side.server) return;\n  }\n\n  async onRemoved() {\n    super.onRemoved();\n    await this.polling(Poll.STOP);\n    if (this.client) {\n      this.client.close(() => {});\n    }\n    Object.keys(this.tcpClients).forEach(key => {\n      if (this.tcpClients[key]) this.tcpClients[key].close(() => {});\n    });\n  }\n\n  onInputUpdated() {\n    setTimeout(async () => {\n      await this.setupForPolling();\n    });\n  }\n\n  onAfterSettingsChange(oldSettings: any) {\n    super.onAfterSettingsChange(oldSettings);\n    setTimeout(async () => {\n      await this.setupForPolling();\n    });\n  }\n\n  async polling(poll: Poll) {\n    this.poll = poll;\n    if (this.side !== Side.server) return; // only execute on server\n    if (this.poll === Poll.STOP) {\n      // close MB client\n      this.setOutputData(this.outPortMsg, 'INFO: closed port connection');\n      this.setOutputData(this.outStatus, false, true);\n      if (this.client) this.client.close(() => {});\n      return;\n    }\n    if (this.transport === Transport.RTU) {\n      if (this.client) this.client.close(() => {});\n      this.client = new ModbusRTU();\n      this.client.setTimeout(500);\n      setTimeout(() => {\n        this.client\n          .connectRTUBuffered(this.port, {\n            baudRate: this.baudRate,\n            parity: this.parity,\n            dataBits: this.dataBits,\n            stopBits: this.stopBits,\n          })\n          .catch(() => {\n            this.setOutputData(this.outStatus, false, true);\n            this.setOutputData(this.outError, true, true);\n            this.setOutputData(this.outPortMsg, `ERROR! port: ${this.port.substring(5)}`);\n          });\n        this.setOutputData(this.outStatus, true, true);\n        this.setOutputData(this.outPortMsg, `INFO: polling RS485 `);\n      }, 500);\n    } else {\n      this.setOutputData(this.outPortMsg, `INFO: polling TCP `);\n    }\n    if (this.poll === Poll.FIRST_START) {\n      await this.pollDevicesPoints();\n    }\n  }\n\n  async pollDevicesPoints() {\n    if (this.poll === Poll.STOP) return;\n    const devices = await ModbusSerialNetworkNode.getDevicesPoints(this.sub_container.id, this.container.db);\n    let errorOnModbusDevicesExec = false;\n    for (let device of devices) {\n      let { deviceCID, deviceID, deviceAddress, ipAddress, ipPort, deviceAddressOffset } = device.deviceObj;\n      const deviceNode = GlobalNodeRegistry.instance().get(IdGenerator.createNodeId(deviceCID, deviceID));\n      if (!deviceNode) return;\n      let points = device.points;\n\n      let client = this.client;\n      let existingTcpClients: string[] = [];\n      if (this.transport === Transport.TCP) {\n        const key = this.getTcpKey(ipAddress, ipPort);\n        existingTcpClients.push(key);\n        if (!this.tcpClients[key]) {\n          this.debugInfo(`Creating tcpClient with IP: ${ipAddress} and Port: ${ipPort}`);\n          this.tcpClients[key] = new ModbusRTU();\n        }\n        if (!this.tcpClients[key].isOpen) {\n          this.debugInfo(`Connecting tcpClient with IP: ${ipAddress} and Port: ${ipPort}`);\n          try {\n            await this.tcpClients[key].connectTCP(ipAddress, { port: ipPort });\n            this.tcpClients[key].setTimeout(5000);\n          } catch (e) {\n            errorOnModbusDevicesExec = true;\n            ModbusUtils.sendDeviceError(deviceNode, e);\n            this.setOutputData(this.outError, e);\n            continue;\n          }\n        }\n        client = this.tcpClients[key];\n      }\n\n      // Close if tcpClient doesn't exist\n      Object.keys(this.tcpClients).forEach(key => {\n        if (!existingTcpClients.includes(key)) {\n          this.tcpClients[key].close(() => {});\n        }\n      });\n\n      let errorOnModbusPointsExec = false;\n      for (let point of points) {\n        const { pntAddr, pntType, pntOffset, pntVal, pntCid, pntId, pntDataType, pntDataEndian } = point;\n        await Utils.sleep(this.registerDelay || 50);\n        const pointNode = GlobalNodeRegistry.instance().get(IdGenerator.createNodeId(pntCid, pntId));\n        if (!pointNode) return;\n        // TODO for point write don't return if input properties.pointVal = null\n        // if ((pntType === 5 || pntType === 6) && typeof pntVal === 'number') {\n        try {\n          const response: any = await ModbusMethods.modbusMethods(\n            // TODO add return interface\n            client,\n            deviceAddress,\n            pntType,\n            pntAddr,\n            pntOffset,\n            pntVal,\n            pntDataType,\n            pntDataEndian,\n            deviceAddressOffset,\n          );\n          ModbusUtils.sendPointMessage(pointNode, response);\n          ModbusUtils.sendDeviceMessage(deviceNode, response);\n        } catch (e) {\n          errorOnModbusDevicesExec = true;\n          this.setOutputData(this.outError, e);\n          ModbusUtils.sendDeviceError(deviceNode, e);\n          ModbusUtils.sendPointError(pointNode, e);\n        }\n      }\n      if (!errorOnModbusDevicesExec) ModbusUtils.sendDeviceError(deviceNode, null);\n      errorOnModbusDevicesExec = errorOnModbusDevicesExec || errorOnModbusPointsExec;\n    }\n    if (errorOnModbusDevicesExec) {\n      this.setOutputData(this.outStatus, false, true);\n      this.setOutputData(this.outError, true, true);\n    } else {\n      this.setOutputData(this.outStatus, true, true);\n      this.setOutputData(this.outError, null, true);\n    }\n\n    await Utils.sleep(this.devicePolling || 2000);\n    await this.pollDevicesPoints(); // start loop again\n  }\n\n  private async setupForPolling() {\n    if (this.side !== Side.server) return;\n    this.networkEnable = this.getInputData(this.inNetworkEnable);\n    if (this.settings['manualPort'].value) {\n      this.port = this.settings['manualPortNum'].value;\n    } else {\n      this.port = this.settings['port'].value;\n    }\n    this.baudRate = this.settings['baudRate'].value;\n    this.parity = this.settings['parity'].value;\n    this.dataBits = this.settings['dataBits'].value;\n    this.stopBits = this.settings['stopBits'].value;\n    this.devicePolling = this.settings['devicePolling'].value;\n    this.registerDelay = this.settings['registerDelay'].value;\n    this.transport = this.settings['transport'].value;\n\n    if (this.networkEnable) {\n      if (!this.pollEnableSetting) {\n        // start devicePolling\n        this.pollEnableSetting = true;\n        await this.polling(Poll.FIRST_START);\n      } else {\n        // continue devicePolling\n        await this.polling(Poll.DO_NOT_INIT);\n      }\n    } else {\n      this.pollEnableSetting = false;\n      await this.polling(Poll.STOP);\n    }\n  }\n\n  private getTcpKey(address: string, port: number): string {\n    return `${address}:${port}`;\n  }\n}\nContainer.registerNodeType(MODBUS_RTU_NETWORK, ModbusSerialNetworkNode);\n","import { isNumeric } from '../../../../../utils/helper';\nimport Utils from '../../../../utils';\nimport ModbusByteOrder from './modbus-point-byte-order';\n\nexport default class ModbusMethods {\n  static modbusMethods = async (\n    thisInstance: any,\n    id: number,\n    type: number, // type is for example readInputRegisters\n    regAddr: number,\n    regLength: number,\n    nodeInputValue?: number,\n    pntDataType?: number, // INT16\n    pntDataEndian?: number, // BE-LW\n    deviceAddressOffset?: number, // this is the point base offset 1 is default\n  ) => {\n    // console.log(\n    //   `Modbus call @  ${id}, FC: ${type}, regAddr: ${regAddr}, length: ${regLength} , writeVal: ${nodeInputValue} , pntDataType: ${pntDataType}, pntDataEndian: ${pntDataEndian}`,\n    // );\n    let pointAddress = regAddr - deviceAddressOffset\n    if(pointAddress < 0) pointAddress = 0; //make sure address is not less then 0\n    let ft = await ModbusMethods.pntSwitch(\n      type,\n      pointAddress,\n      regLength,\n      nodeInputValue,\n      pntDataType,\n      pntDataEndian,\n    );\n    // console.log(\n    //   `Modbus pntSwitch FC-METHOD: ${ft.methodType}, @ ${id}, FC: ${ft.funcType}, regAddr: ${regAddr}, length: ${regLength} , writeVal: ${nodeInputValue} , pntDataType: ${pntDataType}, pntDataEndian: ${pntDataEndian}`,\n    // );\n    // console.log(JSON.stringify(ft))\n    await thisInstance.setID(id);\n    await Utils.sleep(5);\n    return await new Promise((resolve, reject) => {\n      // This blocks requests for Modbus functionality, if it's still unsuccessful of 1 sec, it will return as error\n      thisInstance[ft.funcType](...ft.methodType).then((res: any) => {\n        // read holing and or input reg\n        if (type === 3 || type === 4) {\n          if (![0].includes(pntDataType)) {\n            const payload = ModbusByteOrder.readByteOrder(res.buffer, 0, pntDataType, pntDataEndian);\n            resolve({ res: res, payload: payload });\n          } else {\n            resolve({ res: res, payload: res.data[0] });\n          }\n          // read nube BIs and BOs\n        } else if (type === 1 || type === 2 || type === 21 || type === 22) {\n          const payload = ModbusMethods.readBool(res);\n          resolve({ res: res, payload: payload });\n\n          // read nube AIs and AOs\n        } else if (type === 23 || type === 24) {\n          let nubeType = ModbusMethods.nubeAnalogueRead();\n          const payload = ModbusByteOrder.readByteOrder(res.buffer, 0, nubeType[0], nubeType[1]);\n          resolve({ res: res, payload: payload });\n          // write response for nube DOs and AOs and writeCoil, writeCoil's, writeRegister writeRegister's\n        } else if (type === 5 || type === 6 || type === 16 || type === 25 || type === 26) {\n          if (res) {\n            resolve({ res: res, payload: 'writeOk' });\n          }\n        }\n      });\n      setTimeout(() => {\n        reject(\n          `Fail to execute > id: ${id}, FC: ${ft.funcType}, regAddr: ${regAddr}, length: ${regLength} , writeVal: ${nodeInputValue}`,\n        );\n      }, 1000);\n    });\n  };\n\n  private static readBool(res: any) {\n    return res.data[0];\n  }\n\n  private static nubeAnalogueRead() {\n    // this is for support of nube hardware BEB_LEW as a float\n    let pntDataType = 2;\n    let pntDataEndian = 2;\n    return [pntDataType, pntDataEndian];\n  }\n  private static dataTypeCase(c: number) {\n    const type16 = 1;\n    const type32 = 2;\n    const type64 = 4;\n    switch (c) {\n      case 1:\n      case 2:\n        return type16;\n      case 3:\n      case 4:\n      case 5:\n        return type32;\n      case 8:\n        return type64;\n    }\n  }\n\n  private static async pntSwitch(\n    type: number,\n    regAddr: number,\n    regLength: any,\n    nodeInputValue: any,\n    pntDataType?: number,\n    pntDataEndian?: number,\n  ) {\n    let funcType = null;\n    let methodType = null;\n    try {\n      // readCoils\n      if (type === 1) {\n        funcType = 'readCoils'; // (1, 4)  // read the 4 registers starting at address 1\n        methodType = [regAddr, regLength];\n        // read DO\n      } else if (type === 21) {\n        // read DO\n        funcType = 'readCoils';\n        methodType = [regAddr, 1];\n        // readDiscreteInputs\n      } else if (type === 2) {\n        funcType = 'readDiscreteInputs'; // (1, 4)  // read the 4 registers starting at address 1\n        methodType = [regAddr, regLength];\n        // read DI\n      } else if (type === 22) {\n        // read D1\n        funcType = 'readDiscreteInputs';\n        methodType = [regAddr, 1];\n        // read readHoldingRegisters\n      } else if (type === 3) {\n        funcType = 'readHoldingRegisters';\n        if (pntDataType !== 0) {\n          methodType = [regAddr, ModbusMethods.dataTypeCase(pntDataType)];\n        } else methodType = [regAddr, regLength];\n        // read AO\n      } else if (type === 23) {\n        funcType = 'readHoldingRegisters';\n        methodType = [regAddr, 2];\n        // read readInputRegisters\n      } else if (type === 4) {\n        funcType = 'readInputRegisters';\n        if (pntDataType !== 0) {\n          methodType = [regAddr, ModbusMethods.dataTypeCase(pntDataType)];\n        } else methodType = [regAddr, regLength];\n        // read AI\n      } else if (type === 24) {\n        funcType = 'readInputRegisters';\n        methodType = [regAddr, 2];\n        // writeCoil or DO\n      } else if (type === 5 || type === 25) {\n        funcType = 'writeCoil';\n        if (nodeInputValue === 1 || nodeInputValue === 0) {\n          methodType = [regAddr, nodeInputValue];\n        }\n        // writeRegister\n      } else if (type === 6) {\n        funcType = 'writeRegister'; // (5, 12) \"Write 12 to reg 5\"\n        if (isNumeric(nodeInputValue)) {\n          methodType = [regAddr, nodeInputValue];\n        };\n        // writeCoils\n      } else if (type === 16) {\n        funcType = 'writeRegisters'; //// example 1, [1, 22, 33, 444])\n        if (isNumeric(nodeInputValue)) {\n          methodType = [regAddr, ModbusByteOrder.writeValue(nodeInputValue, pntDataType, pntDataEndian)];\n        }\n      }\n      return {\n        funcType: funcType,\n        methodType: methodType,\n      };\n    } catch (error) {\n      console.log(`buffer readValue issue in modus-point-methods. Buffer.alloc ${error}`);\n    }\n  }\n}\n","export default class ModbusUtils {\n  static sendPointMessage(pointNode, msg) {\n    if (pointNode['subscribe']) pointNode['subscribe'](msg);\n  }\n\n  static sendPointError(pointNode, e) {\n    if (pointNode['subscribeError']) pointNode['subscribeError'](e);\n  }\n\n  static sendDeviceError(deviceNode, e) {\n    if (deviceNode['subscribeError']) deviceNode['subscribeError'](e);\n  }\n\n  static sendDeviceMessage(deviceNode, msg) {\n    if (deviceNode['subscribeMessage']) deviceNode['subscribeMessage'](msg);\n  }\n\n  static getDevice(typeDevice: string, cidDevice: any, container_db: any) {\n    return new Promise((resolve, reject) => {\n      let query = { 'type': typeDevice, 'cid': cidDevice, 'settings.deviceEnable.value': true };\n      container_db.listNodes(query, (err: any, docs: Array<any>) => {\n        let output = [];\n        if (!err) {\n          try {\n            docs.forEach(doc => {\n              const { cid, id, sub_container, settings, properties } = doc;\n              output.push({\n                deviceCID: cid,\n                deviceID: id,\n                deviceSubCID: sub_container.id,\n                deviceAddress: properties.address,\n                // deviceAddress.settings.address.value,\n                ipAddress: settings.ipAddress.value,\n                ipPort: settings.ipPort.value,\n                deviceTimeout: settings.deviceTimeout.value,\n                deviceAddressOffset: settings.deviceAddressOffset.value,\n              });\n            });\n          } catch (err) {\n            reject(err);\n          }\n          resolve(output);\n        } else {\n          reject(err);\n        }\n      });\n    });\n  }\n\n  static getPoints(pointType: string, deviceObj: any, container_db: any) {\n    return new Promise((resolve, reject) => {\n      let query = {\n        'type': pointType,\n        'cid': deviceObj.deviceSubCID,\n        'settings.pointEnable.value': true,\n      };\n      container_db.listNodes(query, (err: any, docs: Array<any>) => {\n        let output = [];\n        if (!err) {\n          try {\n            docs.forEach(doc => {\n              const { cid, id, settings, properties } = doc;\n              output.push({\n                pntCid: cid,\n                pntId: id,\n                pntAddr: properties.pointAddress,\n                pntType: settings.pointType.value,\n                pntOffset: settings.offset.value,\n                pntMathFunc: settings.mathFunc.value,\n                pntMathValue: settings.mathValue.value,\n                pntDataType: settings.dataType.value,\n                pntDataEndian: settings.dataEndian.value,\n                pntTimeout: settings.pointTimeout.value,\n                pntVal: properties.pointVal,\n              });\n            });\n          } catch (err) {\n            reject(err);\n          }\n          resolve({\n            deviceObj,\n            points: output,\n          });\n        } else {\n        }\n      });\n    });\n  }\n}\n","import * as mqtt from 'mqtt';\nimport config from '../../../../config';\nimport { isNull } from '../../../../utils/helper';\nimport { Container } from '../../../container';\nimport { Node } from '../../../node';\nimport { NODE_INFO } from '../../../node-info';\nimport { Side } from '../../../node-interface';\nimport { NodeSetting, SettingType, Type } from '../../../node-io';\nimport Utils from '../../../utils';\nimport CryptoUtils from '../../../utils/crypto-utils';\nimport { MQTTMessage } from './core/mqtt-model';\n\nconst matchMQTT = require('mqtt-match');\n\n//import { themes } from 'src/client/editor/renderer-themes';\n\nclass MqttClientNode extends Node {\n  client: any;\n  topicsCount = 0;\n  messageQueue: Array<MQTTMessage> = [];\n\n  constructor() {\n    super();\n    this.title = NODE_INFO[\"protocols/mqtt\"].client.title;\n    this.description = NODE_INFO[\"protocols/mqtt\"].client.description;\n\n    this.addInput('[enable]', Type.BOOLEAN);\n    this.addOutput('connected', Type.BOOLEAN);\n    this.settings['enable'] = NodeSetting.create({ description: 'Enable', value: false, type: SettingType.BOOLEAN });\n    this.settings['broker_group'] = NodeSetting.create({\n      description: 'Broker settings',\n      value: '',\n      type: SettingType.GROUP,\n    });\n    this.settings['broker_group'] = NodeSetting.create({\n      description: 'Broker settings',\n      value: '',\n      type: SettingType.GROUP,\n    });\n    this.settings['useEnv'] = NodeSetting.create({ description: 'Dont use env settings', value: false, type: SettingType.BOOLEAN });\n    this.settings['server'] = NodeSetting.create({ description: 'Broker URL', value: '0.0.0.0', type: SettingType.STRING });\n    this.settings['port'] = NodeSetting.create({ description: 'Broker port', value: '1883', type: SettingType.STRING });\n    this.settings['authentication'] = NodeSetting.create({\n      description: 'Use Authentication',\n      value: false,\n      type: SettingType.BOOLEAN,\n    });\n    this.settings['username'] = NodeSetting.create({ description: 'User name', value: '', type: SettingType.STRING });\n    this.settings['password'] = NodeSetting.create({ description: 'Password', value: '', type: SettingType.PASSWORD });\n    this.settings['topics_group'] = NodeSetting.create({\n      description: 'Topic settings',\n      value: '',\n      type: SettingType.GROUP,\n    });\n    this.settings['topics_count'] = NodeSetting.create({\n      description: 'Number of Topics',\n      value: 1,\n      type: SettingType.NUMBER,\n    });\n    this.settings['decimals'] = NodeSetting.create({\n      description: 'Decimal Places (Numerics)',\n      type: SettingType.DROPDOWN,\n      config: {\n        items: [\n          { value: 0, text: '0' },\n          { value: 1, text: '1' },\n          { value: 2, text: '2' },\n          { value: 3, text: '3' },\n          { value: 4, text: '4' },\n          { value: 5, text: '5' },\n          { value: 6, text: '6' },\n          { value: 7, text: '7' },\n          { value: 8, text: '8' },\n          { value: 9, text: '9' },\n          { value: 10, text: '10' },\n        ],\n      },\n      value: 3,\n    });\n\n    this.setSettingsConfig({\n      groups: [\n        { server: { weight: 3 }, port: { weight: 1 } },\n        { useEnv: {}, authentication: {} },\n        { username: {}, password: {} },\n        { topics_count: {}, decimals: {} },\n      ],\n      conditions: {\n        server: setting => {\n          return !!setting['useEnv'].value;\n        },\n        port: setting => {\n          return !!setting['useEnv'].value;\n        },\n        authentication: setting => {\n          return !!setting['useEnv'].value;\n        },\n        username: setting => {\n          return !!setting['authentication'].value;\n        },\n        password: setting => {\n          return !!setting['authentication'].value;\n        },\n      },\n    });\n  }\n\n  init() {\n    this.changeTopicsCount(this.settings['topics_count'].value);\n  }\n\n  onCreated() {\n    this.renameInputsOutputs();\n  }\n\n  onAdded() {\n    this.EXECUTE_INTERVAL = 200;\n\n    this.topicsCount = this.settings['topics_count'].value;\n    if (this.side == Side.server) {\n      this.setOutputData(0, false);\n      // connect if \"connect\" input disconnected or input data==true\n      if (this.settings['enable'].value && (this.inputs[0].link == null || this.inputs[0].data == true)) {\n        this.connectToBroker();\n      }\n    }\n  }\n\n  connectToBroker() {\n    let { host, port, username, password } = config.mqtt;\n    let options: any = {};\n\n    if (this.settings['useEnv'].value) {\n      // dont use env\n      if (this.settings['server'].value != null && this.settings['server'].value != '')\n        options.host = this.settings['server'].value;\n\n      if (this.settings['port'].value != null && this.settings['port'].value != '')\n        options.port = this.settings['port'].value;\n\n      if (this.settings['username'].value != null && this.settings['username'].value != '')\n        options.username = this.settings['username'].value;\n\n      if (this.settings['password'].value != null && this.settings['password'].value != '')\n        options.password = CryptoUtils.decrypt(this.settings['password'].value);\n    } else {\n      // use use env\n      if (isNull(host)) return;\n      if (isNull(port)) return;\n      options.host = host;\n      options.port = port;\n      if (this.settings['authentication'].value === true) {\n        if (!isNull(options.username)) {\n          options.username = username;\n        }\n        if (!isNull(options.password)) {\n          options.password = CryptoUtils.decrypt(password);\n        }\n      }\n    }\n\n    this.disconnectFromBroker();\n    this.client = mqtt.connect(options);\n    this.client.on('connect', () => {\n      this.setOutputData(0, true);\n      // subscribe\n      for (let i = 1; i <= this.topicsCount; i++) {\n        let topic = this.settings['topic' + i].value;\n        if (topic && topic != '') {\n          this.client.subscribe(topic);\n        }\n      }\n    });\n\n    this.client.on('close', () => {\n      this.setOutputData(0, false, true);\n      this.setOutputData(1, null, true);\n    });\n\n    this.client.on('error', error => {\n      this.debugWarn(error);\n    });\n\n    this.client.on('message', (topic, message) => {\n      let obj: MQTTMessage = { topic: topic, message: message.toString() };\n      this.messageQueue.push(obj);\n    });\n  }\n\n  disconnectFromBroker() {\n    if (this.client) this.client.end();\n  }\n\n  onInputUpdated() {\n    // connect/disconnect\n    if (this.inputs[0].updated) {\n      if (this.inputs[0].data == false) this.disconnectFromBroker();\n      // auto connect when input disconnected\n      else if (this.settings['enable'].value && (this.inputs[0].link == null || this.inputs[0].data == true))\n        this.connectToBroker();\n    }\n\n    // publish message\n    if (this.settings['enable'].value && this.client && this.client.connected) {\n      for (let i = 1; i < this.getInputsCount(); i++) {\n        let data = this.inputs[i].data;\n        if (data && this.inputs[i].updated) {\n          let isJSON = true;\n          try {\n            data = JSON.parse(data);\n          } catch {\n            console.log('Not a valid JSON');\n            isJSON = false;\n          }\n          let topic: string;\n          let payload: string = '';\n\n          if (\n            isJSON &&\n            data.hasOwnProperty('topic') &&\n            typeof data.topic === Type.STRING &&\n            data.hasOwnProperty('payload')\n          ) {\n            payload = JSON.stringify(data.payload);\n            this.client.publish(data.topic, '' + payload);\n          } else {\n            topic = this.settings['topic' + i].value;\n            if (isJSON) payload = JSON.stringify(data);\n            else payload = String(data);\n            this.client.publish(topic, '' + payload);\n          }\n        }\n      }\n    }\n  }\n\n  onAfterSettingsChange() {\n    let topics = this.settings['topics_count'].value;\n    topics = Utils.clamp(topics, 1, 100);\n    this.settings['topics_count'].value = topics;\n\n    if (this.topicsCount != topics) this.changeTopicsCount(topics);\n\n    this.renameInputsOutputs();\n\n    if (this.container.db)\n      this.container.db.updateNode(this.id, this.container.id, {\n        $set: { inputs: this.inputs, outputs: this.outputs, settings: this.settings },\n      });\n\n    if (this.side == Side.server) {\n      this.disconnectFromBroker();\n\n      if (this.settings['enable'].value) this.connectToBroker();\n    }\n  }\n\n  onRemoved() {\n    this.disconnectFromBroker();\n  }\n\n  changeTopicsCount(target_count) {\n    let diff = target_count - this.topicsCount;\n    if (diff == 0) return;\n\n    // add inputs, outputs\n    this.changeInputsCount(target_count + 1, Type.STRING);\n    this.changeOutputsCount(target_count + 1, Type.STRING);\n\n    // change settings for topics\n    if (diff > 0) {\n      for (let i = this.topicsCount + 1; i <= target_count; i++) {\n        this.settings['outputType' + i] = NodeSetting.create({\n          description: 'Output Type',\n          type: SettingType.DROPDOWN,\n          config: {\n            items: [\n              { value: false, text: 'Payload' },\n              { value: true, text: 'JSON' },\n            ],\n          },\n          value: false,\n        });\n        this.settings['topic' + i] = NodeSetting.create({\n          description: 'Topic ' + i,\n          value: '',\n          type: SettingType.STRING,\n        });\n        for (let i = this.topicsCount + 1; i <= target_count; i++) {\n          this.settingConfigs.groups.push({\n            [`outputType${i}`]: { weight: 2 },\n            [`topic${i}`]: { weight: 5 },\n          });\n        }\n      }\n    } else if (diff < 0) {\n      for (let i = this.topicsCount; i > target_count; i--) {\n        delete this.settings['topic' + i];\n        this.settingConfigs.groups.pop();\n      }\n    }\n\n    this.topicsCount = target_count;\n  }\n\n  renameInputsOutputs() {\n    for (let i = 1; i <= this.topicsCount; i++) {\n      //this.inputs[i].name = '[' + i + ']';\n      let topic = this.settings['topic' + i].value;\n      if (topic.length > 20) topic = '...' + topic.substr(topic.length - 20, 20);\n      this.inputs[i].name = '' + i + ' | ' + topic;\n      this.outputs[i].name = topic + ' | ' + i;\n    }\n\n    if (this.side == Side.editor) {\n      for (let i = 1; i <= this.topicsCount; i++) {\n        this.inputs[i].label = this.inputs[i].name;\n        this.outputs[i].label = this.outputs[i].name;\n      }\n      this.setDirtyCanvas(true, true);\n    }\n  }\n\n  // TODO: queue for each output\n  onExecute() {\n    if (this.messageQueue && this.messageQueue.length > 0) {\n      this.processQueue(this.messageQueue.shift());\n    }\n  }\n\n  setMQTTOutput(mqttMessage: MQTTMessage, outputNum: number) {\n    if (this.settings['outputType' + outputNum].value) {\n      this.setOutputData(outputNum, { topic: mqttMessage.topic, payload: mqttMessage.message }, true);\n      return;\n    } else {\n      let msgAsNum = Number(mqttMessage.message);\n      if (isNaN(msgAsNum)) {\n        this.setOutputData(outputNum, mqttMessage.message);\n        return;\n      }\n      this.setOutputData(outputNum, Utils.toFixedNumber(msgAsNum, this.settings['decimals'].value).toString(), true);\n    }\n  }\n\n  processQueue(mqttMessage: MQTTMessage) {\n    // look into using mqtt-match library. (https://www.npmjs.com/package/mqtt-match)\n    for (let outInd = 1; outInd <= this.topicsCount; outInd++) {\n      if (matchMQTT(this.settings['topic' + outInd].value, mqttMessage.topic)) this.setMQTTOutput(mqttMessage, outInd);\n    }\n  }\n}\nContainer.registerNodeType('protocols/mqtt/client', MqttClientNode);\n","import * as mqtt from 'mqtt';\nimport config from '../../../../config';\nimport { isNull } from '../../../../utils/helper';\nimport { Container } from '../../../container';\nimport { Node } from '../../../node';\nimport { NODE_INFO } from '../../../node-info';\nimport { Side } from '../../../node-interface';\nimport { NodeSetting, SettingType, Type } from '../../../node-io';\nimport CryptoUtils from '../../../utils/crypto-utils';\nimport { MQTTMessage } from './core/mqtt-model';\n\nconst matchMQTT = require('mqtt-match');\n\nclass MqttClientSingleNode extends Node {\n  client: any;\n  enableDebug: boolean;\n  //node inputs\n  inName = 0;\n  inEnable = 1;\n  inData = 2;\n  inTopic = 3;\n\n  constructor() {\n    super();\n    this.title = NODE_INFO[\"protocols/mqtt\"][\"client-single\"].title;\n    this.description =\n      `## Description\\n ` +\n      NODE_INFO[\"protocols/mqtt\"][\"client-single\"].description + '\\n' +\n      `   \\n ` +\n      `### Enable\\n ` +\n      `   \\n ` +\n      ` This will enable/disable the device from broker \\n ` +\n      `   \\n ` +\n      `### Use env settings\\n ` +\n      `   \\n ` +\n      ` If set to true this will allow you to use the MQTT broker details set from the .env configuration file in the device\\n ` +\n      ` If set to false this will allow you to set the MQTT broker details manually\\n ` +\n      `   \\n ` +\n      `### Node input\\n ` +\n      `   \\n ` +\n      ` The input named \"input\" can accept a json input or an mqtt payload to send when the topic is set in the node setting called \"[topic]\".\\n ` +\n      ` The input named \"input\" can accept a json payload input with the name, topic, and mqtt payload. See example below.\\n ` +\n      ` { \"payload\": 22, \"topic\": \"my topic\", \"name\": \"my node node\"}\\n ` +\n      `   \\n `;\n    this.addInput('[name]', Type.STRING);\n    this.addInputWithSettings('enable', Type.BOOLEAN, false, 'enable broker');\n    this.addInputWithSettings('input', Type.STRING, '', 'JSON input or input value');\n    this.addInputWithSettings('topic', Type.STRING, '', 'enter topic if not used from input');\n    this.addOutput('connected', Type.BOOLEAN);\n    this.addOutput('output', Type.ANY);\n    this.addOutput('output-json', Type.JSON);\n    this.settings['retain'] = NodeSetting.create({ description: 'Retain message on publish', value: true, type: SettingType.BOOLEAN });\n    this.settings['payloadJson'] = NodeSetting.create({ description: 'Send payload ', value: false, type: SettingType.BOOLEAN });\n    this.settings['enableDebug'] = NodeSetting.create({ description: 'Log debug messages (view logs in platform)', value: false, type: SettingType.BOOLEAN });\n    this.settings['qos'] = NodeSetting.create({\n      description: 'MQTT Quality Of Service (QoS)',\n      type: SettingType.DROPDOWN,\n      config: {\n        items: [\n          { value: -1, text: 'na' },\n          { value: 0, text: 'QoS 0' },\n          { value: 1, text: 'QoS 1' },\n          { value: 2, text: 'QoS 2' },\n        ],\n      },\n      value: 0,\n    });\n    this.settings['broker_group'] = NodeSetting.create({\n      description: 'Broker settings',\n      value: '',\n      type: SettingType.GROUP,\n    });\n    this.settings['useEnv'] = NodeSetting.create({ description: 'Dont use env settings', value: false, type: SettingType.BOOLEAN });\n    this.settings['server'] = NodeSetting.create({ description: 'Broker URL', value: '0.0.0.0', type: SettingType.STRING });\n    this.settings['port'] = NodeSetting.create({ description: 'Broker port', value: '1883', type: SettingType.STRING });\n    this.settings['authentication'] = NodeSetting.create({\n      description: 'Use Authentication',\n      value: false,\n      type: SettingType.BOOLEAN,\n    });\n    this.settings['username'] = NodeSetting.create({ description: 'User name', value: '', type: SettingType.STRING });\n    this.settings['password'] = NodeSetting.create({ description: 'Password', value: '', type: SettingType.PASSWORD });\n    this.setSettingsConfig({\n      groups: [\n        { server: { weight: 3 }, port: { weight: 1 } },\n        { username: {}, password: {} },\n      ],\n      conditions: {\n        server: setting => {\n          return !!setting['useEnv'].value;\n        },\n        port: setting => {\n          return !!setting['useEnv'].value;\n        },\n        authentication: setting => {\n          return !!setting['useEnv'].value;\n        },\n        username: setting => {\n          return !!setting['authentication'].value;\n        },\n        password: setting => {\n          return !!setting['authentication'].value;\n        },\n      },\n    });\n  }\n\n  onAdded() {\n    this.EXECUTE_INTERVAL = 200;\n    if (this.side == Side.server) {\n      this.setOutputData(0, false);\n      if (this.getInputData(this.inEnable) === true) {\n        this.connectToBroker();\n        this.enableDebug = this.settings['enableDebug'].value;\n        if (this.enableDebug) this.debugInfo(`MQTT-CLIENT-SINGLE NODE: connect to Broker`);\n      }\n    }\n  }\n\n  connectToBroker() {\n    let { host, port, username, password } = config.mqtt;\n    let options: any = {};\n    const qos = this.settings['qos'].value;\n    if (qos !== -1) {\n      options.qos = qos;\n    }\n    if (this.settings['useEnv'].value) {\n      //dont use env\n      if (this.settings['server'].value != null && this.settings['server'].value != '')\n        options.host = this.settings['server'].value;\n      if (this.settings['port'].value != null && this.settings['port'].value != '')\n        options.port = this.settings['port'].value;\n      if (this.settings['username'].value != null && this.settings['username'].value != '')\n        options.username = this.settings['username'].value;\n      if (this.settings['password'].value != null && this.settings['password'].value != '')\n        options.password = CryptoUtils.decrypt(this.settings['password'].value);\n    } else {\n      //use use env\n      if (isNull(host)) return;\n      if (isNull(port)) return;\n      options.host = host;\n      options.port = port;\n      if (this.settings['authentication'].value === true) {\n        if (!isNull(options.username)) {\n          options.username = username;\n        }\n        if (!isNull(options.password)) {\n          options.password = CryptoUtils.decrypt(password);\n        }\n      }\n    }\n    this.disconnectFromBroker();\n    this.client = mqtt.connect(options);\n    this.client.on('connect', () => {\n      if (this.enableDebug) this.debugInfo(`MQTT-CLIENT-SINGLE NODE: this.client = mqtt.connect options: ${JSON.stringify(options)}`);\n      this.setOutputData(0, true);\n      let data = this.getInputData(this.inData);\n      let topic = this.getInputData(this.inTopic);\n      if (data || topic) {\n        let isJSON = true;\n        try {\n          data = JSON.parse(data);\n        } catch {\n          if (this.enableDebug) this.debugInfo(`MQTT-CLIENT-SINGLE NODE: input isn't JSON`);\n          isJSON = false;\n        }\n        if (isJSON && data.hasOwnProperty('topic') && typeof data.topic === Type.STRING) {\n          if (data.topic != '') {\n            this.client.subscribe(data.topic);\n            if (this.enableDebug) this.debugInfo(`MQTT-CLIENT-SINGLE NODE:  subscribe on json topic ${data.topic}`);\n          }\n        } else {\n          // if no json topic use input 2 topic\n          if (data.topic != '') {\n            if (this.enableDebug) this.debugInfo(`MQTT-CLIENT-SINGLE NODE:  subscribe on node input topic ${topic}`);\n            this.client.subscribe(topic);\n          }\n        }\n      }\n    });\n    this.client.on('close', () => {\n      this.setOutputData(0, false, true);\n    });\n\n    this.client.on('error', error => {\n      this.debugWarn(error);\n    });\n    this.client.on('message', (topic, message) => {\n      let obj: MQTTMessage = { topic: topic, message: message.toString() };\n      if (this.enableDebug) this.debugInfo(`MQTT-CLIENT-SINGLE NODE:  this.client.on('message' ${JSON.stringify(obj)}`);\n      this.processMessage(obj);\n    });\n  }\n\n  disconnectFromBroker() {\n    if (this.client) this.client.end();\n  }\n\n  onInputUpdated() {\n    //connect/disconnect\n    if (this.inputs[this.inEnable].updated) {\n      if (this.getInputData(this.inEnable) === true) {\n        this.connectToBroker();\n        if (this.enableDebug) this.debugInfo(`MQTT-CLIENT-SINGLE NODE: connect to Broker`);\n      } else if (this.getInputData(this.inEnable) === false) {\n        this.disconnectFromBroker();\n        if (this.enableDebug) this.debugInfo(`MQTT-CLIENT-SINGLE NODE: disconnect From Broker`);\n      } else if (isNull(this.getInputData(this.inEnable))) {\n        this.onAfterSettingsChange();\n        if (this.enableDebug) this.debugInfo(`MQTT-CLIENT-SINGLE NODE: disconnect enable input from node`);\n      }\n    }\n\n    //update node name\n    if (this.inputs[this.inName].updated) {\n      let nodeName = this.getInputData(this.inName);\n      if (!isNull(nodeName)) {\n        this.name = nodeName;\n        this.broadcastNameToClients();\n      }\n    }\n\n    //update topic\n    if (this.getInputData(this.inEnable) && this.inputs[this.inTopic].updated) {\n      this.connectToBroker();\n      if (this.enableDebug) this.debugInfo(`MQTT-CLIENT-SINGLE NODE: node input topic updated`);\n    }\n\n    //publish message\n    if (this.getInputData(this.inEnable) && this.client && this.client.connected) {\n      let data = this.getInputData(this.inData);\n      if (data && this.inputs[this.inData].updated) {\n        let isJSON = true;\n        try {\n          data = JSON.parse(data);\n        } catch {\n          if (this.enableDebug) this.debugInfo(`MQTT-CLIENT-SINGLE NODE: input isn't JSON`);\n          isJSON = false;\n        }\n        let topic: string;\n        let payload: string = '';\n        if (\n          isJSON &&\n          data.hasOwnProperty('topic') &&\n          typeof data.topic === Type.STRING &&\n          data.hasOwnProperty('payload') || data.hasOwnProperty('fields')\n        ) {\n          if (data.hasOwnProperty('payload')) {\n            payload = JSON.stringify(data.payload);\n          } else if (data.hasOwnProperty('fields')) {\n            payload = JSON.stringify(data.fields.value); //influx db uses fields\n          }\n          if (data.topic == '') {\n            return;\n          }\n          this.publish(data.topic, payload)\n        } else {\n          topic = this.getInputData(this.inTopic);\n          if (isJSON) payload = JSON.stringify(data);\n          else payload = String(data);\n          if (topic == '') {\n            return;\n          }\n          this.publish(topic, payload)\n        }\n      }\n    }\n  }\n\n  publish(topic, payload) {\n    const retain = this.settings['retain'].value\n    const payloadJson = this.settings['payloadJson'].value\n    if (payloadJson) {\n      let out = JSON.stringify({ value: payload })\n      this.client.publish(topic, '' + out, { retain: retain });\n      if (this.enableDebug) this.debugInfo(`MQTT-CLIENT-SINGLE NODE: publish on input topic from json ${topic}, '' + ${out}`);\n    } else {\n      this.client.publish(topic, '' + payload, { retain: retain });\n      if (this.enableDebug) this.debugInfo(`MQTT-CLIENT-SINGLE NODE: publish on input topic from node input ${topic}, '' + ${payload}`);\n    }\n  }\n\n  onAfterSettingsChange() {\n    //update db\n    if (this.container.db)\n      this.container.db.updateNode(this.id, this.container.id, {\n        $set: { inputs: this.inputs, outputs: this.outputs, settings: this.settings },\n      });\n\n    if (this.side == Side.server) {\n      this.disconnectFromBroker();\n      if (this.getInputData(this.inEnable)) {\n        this.connectToBroker();\n        if (this.enableDebug) this.debugInfo(`MQTT-CLIENT-SINGLE NODE: connect to Broker from settings`);\n      }\n    }\n  }\n\n  onRemoved() {\n    this.disconnectFromBroker();\n  }\n\n  processMessage(mqttMessage: MQTTMessage) {\n    // look into using mqtt-match library. (https://www.npmjs.com/package/mqtt-match)\n    let topic = this.getInputData(this.inTopic);\n    if (matchMQTT(topic, mqttMessage.topic)) {\n      this.setOutputData(1, mqttMessage.message);\n      this.setOutputData(2, mqttMessage);\n    }\n  }\n}\nContainer.registerNodeType('protocols/mqtt/client-single', MqttClientSingleNode);\n","import { Colors, create } from 'logplease';\nimport { connect, IClientPublishOptions, IClientSubscribeOptions, MqttClient } from 'mqtt';\nimport { MQTTMessage } from './mqtt-model';\n\nconst logger = create('mqtt', { color: Colors.Blue });\n\nexport interface MqttClientWrapper {\n\n  start(): MqttClientWrapper;\n\n  stop(): void;\n\n  isConnected(): boolean;\n\n  publish(topic: string, payload: string, options?: {}, cb?: any): void;\n\n  subscribe(topic: string, options?: {}, cb?: any): void;\n\n  unsubscribe(topic: string, cb?: any): void;\n}\n\nexport interface MqttLifecycle {\n\n  /**\n   * Emitted on successful (re)connection (i.e. connack rc=0).\n   * @param connack received connack packet.\n   */\n  onConnect(connack): void;\n\n  /**\n   * Emitted when a reconnect starts.\n   */\n  onReconnect(): void;\n\n  /**\n   * Emitted after a disconnection.\n   */\n  onClose(): void;\n\n  /**\n   * Emitted after receiving disconnect packet from broker. MQTT 5.0 feature.\n   */\n  onDisconnect(): void;\n\n  /**\n   * Emitted when the client goes offline.\n   */\n  onOffline(): void;\n\n  /**\n   * Emitted when the client cannot connect (i.e. connack rc != 0) or when a parsing error occurs.\n   */\n  onError(err): void;\n\n  /**\n   * Emitted when mqtt.Client#end() is called.\n   * If a callback was passed to mqtt.Client#end(), this event is emitted once the callback returns.\n   */\n  onEnd(): void;\n\n  /**\n   * Emitted when the client receives a publish packet\n   * @param topic topic of the received packet\n   * @param message payload of the received packet\n   * @param packet received packet, as defined in mqtt-packet\n   */\n  onMessage(topic, message, packet): void;\n\n  /**\n   * Emitted when the client sends any packet.\n   * This includes .published() packets as well as packets used by MQTT for managing subscriptions and connections\n   * @param packet received packet, as defined in mqtt-packet\n   */\n  onPacketSend(packet): void;\n\n  /**\n   * Emitted when the client receives any packet.\n   * This includes packets from subscribed topics as well as packets used by MQTT for managing subscriptions and connections\n   * @param packet received packet, as defined in mqtt-packet\n   */\n  onPacketReceive(packet): void;\n\n}\n\nexport class DefaultMqttClient implements MqttClientWrapper, MqttLifecycle {\n\n  private readonly options: {};\n  private readonly callbackWhenConnected: (client: MqttClientWrapper) => void;\n  private readonly callbackWhenOffline: (client: MqttClientWrapper, offlineMsg?: string) => void;\n  private readonly callbackIncomingMessage: (msg: MQTTMessage) => void;\n  private client: MqttClient;\n  private connected: boolean = false;\n  private clientId: string;\n\n  constructor(options: {}, callbackWhenConnected: (client: MqttClientWrapper) => void,\n              callbackWhenOffline: (client: MqttClientWrapper, offlineMsg?: string) => void,\n              callbackIncomingMessage: (msg: MQTTMessage) => void) {\n    this.options = options;\n    this.callbackWhenConnected = callbackWhenConnected;\n    this.callbackWhenOffline = callbackWhenOffline;\n    this.callbackIncomingMessage = callbackIncomingMessage;\n  }\n\n  static init(options: {}, callbackWhenConnected: (client: MqttClientWrapper) => void,\n              callbackWhenOffline: (client: MqttClientWrapper, offlineMsg?: string) => void,\n              callbackIncomingMessage: (msg: MQTTMessage) => void): MqttClientWrapper {\n    return new DefaultMqttClient(options, callbackWhenConnected, callbackWhenOffline, callbackIncomingMessage).start();\n  }\n\n  onClose(): void {\n    logger.debug(`MQTT Client ${this.clientId} closed`);\n    this.connected = false;\n  }\n\n  onConnect(connack): void {\n    logger.info(`MQTT Client ${this.clientId} connected ${JSON.stringify(connack)}`);\n    this.connected = true;\n    if (this.callbackWhenConnected) {\n      this.callbackWhenConnected(this);\n    }\n  }\n\n  onDisconnect(): void {\n    logger.warn(`MQTT Client ${this.clientId} disconnected`);\n    this.connected = false;\n    if (this.callbackWhenOffline) {\n      this.callbackWhenOffline(this, `Unable connect to server`);\n    }\n  }\n\n  onEnd(): void {\n    logger.info(`MQTT Client ${this.clientId} ended`);\n    this.connected = false;\n    if (this.callbackWhenOffline) {\n      this.callbackWhenOffline(this);\n    }\n  }\n\n  onError(err): void {\n    logger.error(`Error connection in MQTT Client ${this.clientId}: ${err}`);\n    this.stop();\n  }\n\n  onMessage(topic, message, packet): void {\n    logger.info(`MQTT Client '${this.clientId}' dispatch message on topic '${topic}'`);\n    this.callbackIncomingMessage({ topic, message: message.toString() } as MQTTMessage);\n  }\n\n  onOffline(): void {\n    logger.warn(`MQTT Client '${this.clientId}' is offline`);\n    this.connected = false;\n    if (this.callbackWhenOffline) {\n      this.callbackWhenOffline(this, `Unable connect to server`);\n    }\n  }\n\n  onPacketReceive(packet): void {\n    logger.debug(`MQTT Client '${this.clientId}' receives packet '${packet?.cmd}'`);\n  }\n\n  onPacketSend(packet): void {\n    logger.debug(`MQTT Client '${this.clientId}' sends packet '${packet?.cmd}'`);\n  }\n\n  onReconnect(): void {\n    logger.info(`MQTT Client '${this.clientId}' reconnected`);\n    if (this.callbackWhenConnected) {\n      this.callbackWhenConnected(this);\n    }\n  }\n\n  start(): MqttClientWrapper {\n    this.client = connect(this.options);\n    this.client.on('connect', connack => this.onConnect(connack));\n    this.client.on('close', () => this.onClose());\n    this.client.on('disconnect', () => this.onDisconnect());\n    this.client.on('end', () => this.onEnd());\n    this.client.on('error', err => this.onError(err));\n    this.client.on('offline', () => this.onOffline());\n    this.client.on('packetreceive', packet => this.onPacketReceive(packet));\n    this.client.on('packetsend', packet => this.onPacketSend(packet));\n    this.client.on('message', (topic, msg, packet) => this.onMessage(topic, msg, packet));\n    this.clientId = this.client?.options?.clientId;\n    return this;\n  }\n\n  stop(): void {\n    if (this.client) {\n      this.client.end(true);\n    }\n  }\n\n  isConnected(): boolean {\n    return this.client && this.connected;\n  }\n\n  publish(topic: string, payload: string, options?: {}, cb?: any): void {\n    if (!this.isConnected()) {\n      return;\n    }\n    this.client.publish(topic, payload, (options || { retain: true }) as IClientPublishOptions, cb);\n  }\n\n  subscribe(topic: string, options?: {}, cb?: any): void {\n    if (!this.isConnected()) {\n      return;\n    }\n    logger.info(`MQTT Client '${this.clientId}' subscribe topic '${topic}'...`);\n    this.client.subscribe(topic, (options || {}) as IClientSubscribeOptions, cb);\n  }\n\n  unsubscribe(topic: string, cb?: any): void {\n    if (!this.isConnected()) {\n      return;\n    }\n    logger.info(`MQTT Client '${this.clientId}' unsubscribe topic '${topic}'...`);\n    if (topic) {\n      this.client.unsubscribe(topic, cb);\n    }\n  }\n}\n","import { PointOutput, PointValueCreator } from '../../../../backend/models/point-model';\nimport { isEmpty, isNull } from '../../../../utils/helper';\nimport { IdGenerator } from '../../../../utils/id-generator';\nimport {\n  DefaultObservable,\n  HasCentralizedListener,\n  ICentralizedListener,\n  IMessageConverter,\n  MockCentralizedListener,\n  Observer,\n} from '../../../../utils/pattern';\nimport { Container } from '../../../container';\nimport { Node } from '../../../node';\nimport { NodeInput, NodeSetting, SettingType, Type } from '../../../node-io';\nimport { DependantConnectionNode, DependantConnectionNodeMixin } from '../connection-node-mixin';\nimport {\n  DataPointFlowHandler,\n  HasDataPointFlowHandler,\n  HasPointOutputObservers,\n  MockHasPointOutputObservers,\n  PointNodeMixin,\n} from '../model/point-node';\nimport { MqttPointCreator, MqttPointValue, SillyMqttPoint } from './core/mqtt-model';\nimport {\n  MQTT_CLIENT_NODE,\n  PUBLISH_MQTT_DATA,\n  REGISTER_MQTT_POINT,\n  UNREGISTER_MQTT_POINT,\n  UPDATE_MQTT_POINT,\n} from './mqtt-client-node';\nimport { MqttPointStoreItem } from './mqtt-client-node-store';\nimport { NODE_INFO } from '../../../node-info';\n\nclass MqttPointNode extends DependantConnectionNodeMixin(PointNodeMixin(Node))\n  implements HasPointOutputObservers<SillyMqttPoint>, HasDataPointFlowHandler<SillyMqttPoint>,\n    DependantConnectionNode, DataPointFlowHandler<SillyMqttPoint>, IMessageConverter, HasCentralizedListener {\n\n  private readonly _iTopic = 'topic';\n  private readonly _sReqRes = 'enabledReqRes';\n\n  constructor() {\n    super();\n    this.title = NODE_INFO[\"protocols/mqtt\"][\"mqtt-point\"].title;\n    //TODO Should re-update\n    this.description = NODE_INFO[\"protocols/mqtt\"][\"mqtt-point\"].description;\n    this.mixinEnableInputSetting();\n    this.mixinConnectionStatusOutput();\n    this.addInputWithSettings(this._iTopic, Type.STRING, '', 'MQTT Topic');\n    this.settings[this._sReqRes] = NodeSetting.create({\n      description: 'Request Response mode',\n      type       : SettingType.BOOLEAN,\n      value      : false,\n    });\n    this.setSettingsConfig(this.mixinPointValueInputOutput());\n  }\n\n  flowHandler(): DataPointFlowHandler<SillyMqttPoint> {\n    return this;\n  }\n\n  listener(): ICentralizedListener {\n    return MockCentralizedListener.cast(this.getParentNode());\n  }\n\n  pointObservers(): Observer<PointOutput<SillyMqttPoint>>[] {\n    return [...super.pointObservers(),\n            ...MockHasPointOutputObservers.cast(this.getParentNode()).pointObservers()];\n  }\n\n  notifyOutput(point: SillyMqttPoint, observers: Observer<PointOutput<SillyMqttPoint>>[]): void {\n    if (isNull(point)) {\n      return;\n    }\n    let cp = this.initializePointBySettingObject();\n    point.pointValue = isNull(point?.pointValue) ? PointValueCreator.by() : point.pointValue.merge(cp?.pointValue);\n    this.settings[this.modelSettingKey()].value = point;\n    new DefaultObservable(observers).notify({ point: point, connStatus: { status: this.getConnectionStatus() } });\n  }\n\n  onRemoved() {\n    if (this.listener() === MockCentralizedListener.LISTENER) {\n      return;\n    }\n    let mqttPoint = this.initializePointBySettingObject();\n    if (mqttPoint) {\n      this.listener().listen({ action: UNREGISTER_MQTT_POINT, payload: this.createMqttPointStoreItem(mqttPoint) });\n    }\n  }\n\n  reEvaluateSettingByInput(inputs: { [p: number]: NodeInput }, settings: { [p: string]: NodeSetting }) {\n    settings[this._iTopic].value = inputs[this.topicInputIdx()].updated ? inputs[this.topicInputIdx()].data\n                                                                        : settings[this._iTopic].value;\n    super.reEvaluateSettingByInput(inputs, settings);\n  }\n\n  handleOnUpdate(current: SillyMqttPoint, prev?: SillyMqttPoint): SillyMqttPoint {\n    if (!prev?.mqttTopic && !current?.mqttTopic) {\n      return null;\n    }\n    if (isEmpty(current.mqttTopic)) {\n      throw new Error('Must define MQTT topic');\n    }\n    let payload = this.createMqttPointStoreItem(current);\n    if (isNull(prev) || this.getConnectionStatus().isError()) {\n      this.listener().listen({ action: REGISTER_MQTT_POINT, payload });\n    } else if (!current.mightOnlyValueChanged(prev)) {\n      if (!current.equals(prev)) {\n        current.pointValue = PointValueCreator.by();\n      }\n      payload.publisher.prev = this.createMqttPointStoreItem(prev);\n      payload.subscriber.prev = this.createMqttPointStoreItem(prev);\n      this.listener().listen({ action: UPDATE_MQTT_POINT, payload });\n    }\n    if (!current.enabled || (isNull(current?.pointValue?.presentValue) &&\n                             (prev && !current.equals(prev) || isNull(prev?.pointValue?.presentValue)))) {\n      return current;\n    }\n    if (current.isReqRes) {\n      // Always publish highest data to mqtt broker\n      return this.listener().listen({ action: PUBLISH_MQTT_DATA, payload: payload.toPublisher() });\n    }\n    let cov = current.pointValue.changedOfValue(prev?.pointValue);\n    if (cov) {\n      payload.publisher.data.pointValue = cov;\n    }\n    return this.listener().listen({ action: PUBLISH_MQTT_DATA, payload: payload.toPublisher() });\n  }\n\n  initializePointBySettingInput(settings?: { [name: string]: NodeSetting }): SillyMqttPoint {\n    let st = (settings ?? this.settings) as { [name: string]: NodeSetting };\n    return SillyMqttPoint.by(MqttPointCreator.by(this.isEnabled(), st[this._iTopic].value, this.createPointValue(st)),\n                             this.settings[this._sReqRes].value);\n  }\n\n  initializePointBySettingObject(settings?: { [name: string]: NodeSetting }): SillyMqttPoint {\n    let st = (settings ?? this.settings) as { [name: string]: NodeSetting };\n    return SillyMqttPoint.by(MqttPointCreator.from(st[this.modelSettingKey()].value),\n                             this.settings[this._sReqRes].value);\n  }\n\n  onConvertMessage(data: any): string {\n    return MqttPointValue.by(data?.pointValue).toString();\n  }\n\n  onReceiveMessage(incomingMessage: any): void {\n    let pointValue = MqttPointValue.parse(incomingMessage).to();\n    let cp = this.initializePointBySettingObject();\n    cp.pointValue = pointValue.merge(cp.pointValue);\n    if (this.settings[this._sReqRes].value) {\n      this.listener().listen({ action: PUBLISH_MQTT_DATA, payload: this.createMqttPointStoreItem(cp).toPublisher() });\n    }\n    this.notifyOutput((this.settings[this.modelSettingKey()].value = cp), this.pointObservers());\n  }\n\n  protected statusOutputIdx(): number {\n    return 0;\n  }\n\n  protected modelSettingKey(): string {\n    return `mqttp`;\n  }\n\n  protected valueInputIdx(): number {\n    return 2;\n  }\n\n  protected valueOutputIdx(): number {\n    return 2;\n  }\n\n  protected presentValueType(): Type {\n    return Type.ANY;\n  }\n\n  protected computeTitle(): string {\n    return `MQTT Point (Topic: ${this.settings[this._iTopic].value})`;\n  }\n\n  protected enableDescription(): string {\n    return 'Enable MQTT Point';\n  }\n\n  protected topicInputIdx(): number {\n    return 1;\n  }\n\n  private createMqttPointStoreItem(mqttPoint: SillyMqttPoint): MqttPointStoreItem {\n    return new MqttPointStoreItem(mqttPoint.identifier(), IdGenerator.createNodeId(this.cid, this.id), mqttPoint?.enabled,\n                                  {\n                                    identifier: mqttPoint.publishedTopic(),\n                                    data      : mqttPoint,\n                                    callback  : (data: any) => this.onConvertMessage(data),\n                                  }, {\n                                    identifier: mqttPoint.subscribedTopic(),\n                                    callback  : (msg: any) => this.onReceiveMessage(msg),\n                                  });\n  }\n}\n\nContainer.registerNodeType('protocols/mqtt/mqtt-point', MqttPointNode, MQTT_CLIENT_NODE);\n","import { PointModel, PointValue, PointValueCreator } from '../../../../../backend/models/point-model';\nimport { isJSON, isNull } from '../../../../../utils/helper';\n\nexport interface MqttPoint extends PointModel {\n  mqttTopic: string;\n}\n\nexport class MqttPointCreator {\n  private constructor() {\n  }\n\n  static from = (json: object): MqttPoint => {\n    if (isNull(json)) {\n      return null;\n    }\n    // @ts-ignore\n    let pv = json?.pointValue;\n    // @ts-ignore\n    return MqttPointCreator.by(json?.enabled, json?.mqttTopic,\n                               PointValueCreator.create(pv?.presentValue, pv?.priority, pv?.priorityArray));\n  };\n\n  static by = (enabled: boolean, mqttTopic: string, pointValue: PointValue): MqttPoint => {\n    return new DefaultMqttPoint(enabled, mqttTopic, pointValue);\n  };\n}\n\nclass DefaultMqttPoint implements MqttPoint {\n  enabled: boolean;\n  mqttTopic: string;\n  pointValue: PointValue;\n\n  constructor(enabled: boolean, mqttTopic: string, pointValue: PointValue) {\n    this.enabled = enabled || false;\n    this.mqttTopic = mqttTopic;\n    this.pointValue = pointValue;\n  }\n\n  identifier(): string {\n    return this.mqttTopic;\n  }\n\n  mightOnlyValueChanged(point: MqttPoint): boolean {\n    return this.enabled === point?.enabled && this.mqttTopic === point?.mqttTopic;\n  }\n\n  equals(point: MqttPoint): boolean {\n    return this.identifier() === point?.identifier();\n  }\n}\n\nexport interface MQTTMessage {\n  topic: string;\n  message: any;\n}\n\nexport class MqttPointValue {\n  value: number;\n  priority: number;\n\n  constructor(value: number, priority: number) {\n    this.value = value;\n    this.priority = priority;\n  }\n\n  static by(pv: PointValue): MqttPointValue {\n    return new MqttPointValue(pv?.presentValue, pv?.priority ?? 16);\n  }\n\n  static parse(message: any): MqttPointValue {\n    try {\n      let payload = isJSON(message) ? message : JSON.parse(message);\n      return new MqttPointValue(payload?.value, payload?.priority);\n    } catch (e) {\n      throw new Error('Invalid JSON when parsing MQTTMessage');\n    }\n  }\n\n  to(): PointValue {\n    return PointValueCreator.init(this.value, this.priority);\n  }\n\n  toString() {\n    return JSON.stringify(this);\n  }\n}\n\n//To support NubeIO request/response pattern. It should be removed in future\nexport class SillyMqttPoint extends DefaultMqttPoint implements MqttPoint {\n  readonly isReqRes: boolean = false;\n\n  private constructor(mqttPoint: MqttPoint, isReqRes: boolean) {\n    super(mqttPoint.enabled, mqttPoint.mqttTopic, mqttPoint.pointValue);\n    this.isReqRes = isReqRes;\n  }\n\n  static by = (mqttPoint: MqttPoint, isReqRes: boolean): SillyMqttPoint => {\n    return isNull(mqttPoint) ? null : new SillyMqttPoint(mqttPoint, isReqRes);\n  };\n\n  mightOnlyValueChanged(point: MqttPoint): boolean {\n    return super.mightOnlyValueChanged(point) && this.isReqRes === (<SillyMqttPoint>point)?.isReqRes;\n  }\n\n  subscribedTopic(): string {\n    return this.isReqRes ? `${this.mqttTopic}/req` : this.mqttTopic;\n  }\n\n  publishedTopic(): string {\n    return this.isReqRes ? `${this.mqttTopic}/res` : this.mqttTopic;\n  }\n}\n","import { Constructor, isEmpty, isFunction, isJSON } from '../../../../utils/helper';\nimport { IdGenerator } from '../../../../utils/id-generator';\nimport {\n  HasCentralizedListener,\n  ICentralizedListener,\n  IMessageConverter,\n  IMessageSubscriber,\n  MockCentralizedListener,\n  NodeStoreItem,\n} from '../../../../utils/pattern';\nimport { Container } from '../../../container';\nimport { Node } from '../../../node';\nimport { Side } from '../../../node-interface';\nimport { NodeInput, NodeSetting, Type } from '../../../node-io';\nimport { AbleEnableNode, NodeInputEvaluation } from '../../node-mixin';\nimport { DependantConnectionNode, DependantConnectionNodeMixin } from '../connection-node-mixin';\nimport {\n  MQTT_CLIENT_NODE,\n  PUBLISH_MQTT_DATA,\n  REGISTER_MQTT_PUBLISHER,\n  REGISTER_MQTT_SUBSCRIBER,\n  UNREGISTER_MQTT_PUBLISHER,\n  UNREGISTER_MQTT_SUBSCRIBER,\n  UPDATE_MQTT_PUBLISHER,\n  UPDATE_MQTT_SUBSCRIBER,\n} from './mqtt-client-node';\n\nfunction MqttGenericNodeMixin<TBase extends Constructor<Node>>(Base: TBase) {\n  abstract class MqttGenericNodeMixinBase extends AbleEnableNode(Base)\n    implements NodeInputEvaluation, HasCentralizedListener {\n    protected readonly _iTopic = 'topic';\n\n    onAdded(): void {\n      if (this.side !== Side.server) {\n        return;\n      }\n      this.handleOnUpdate(this.createPayload());\n      this.updateTitle();\n    }\n\n    onAfterSettingsChange(oldSettings, oldName?): void {\n      if (this.side !== Side.server) {\n        return;\n      }\n      this.handleOnUpdate(this.createPayload(), this.createPayload(oldSettings));\n      this.updateTitle();\n    }\n\n    onInputUpdated(): void {\n      if (this.side !== Side.server) {\n        return;\n      }\n      let prev = this.createPayload();\n      this.reEvaluateSettingByInput(this.inputs, this.settings);\n      this.handleOnUpdate(this.createPayload(), prev);\n      this.updateTitle();\n    }\n\n    onRemoved() {\n      if (this.listener() === MockCentralizedListener.LISTENER) {\n        return;\n      }\n      this.listener().listen({ action: this.unregisterAction(), payload: this.createPayload() });\n    }\n\n    reEvaluateSettingByInput(inputs: { [p: number]: NodeInput }, settings: { [name: string]: NodeSetting }) {\n      settings[this._iTopic].value = inputs[this.topicInputIdx()].updated ? inputs[this.topicInputIdx()].data\n                                                                          : settings[this._iTopic].value;\n      if (isFunction(super['reEvaluateSettingByInput'])) {\n        super['reEvaluateSettingByInput'](inputs, settings);\n      }\n    }\n\n    listener(): ICentralizedListener {\n      return MockCentralizedListener.cast(this.getParentNode());\n    }\n\n    protected abstract topicInputIdx(): number;\n\n    protected abstract updateTitle(): void;\n\n    protected abstract registerAction(): string;\n\n    protected abstract updateAction(): string;\n\n    protected abstract unregisterAction(): string;\n\n    protected abstract doAfterUpdate(current: NodeStoreItem, prev?: NodeStoreItem): any;\n\n    protected mixinMqttTopicInputSetting() {\n      this.addInputWithSettings(this._iTopic, Type.STRING, '', 'MQTT Topic');\n    }\n\n    protected handleOnUpdate(current: NodeStoreItem, prev?: NodeStoreItem): any {\n      if (!prev?.identifier && !current?.identifier) {\n        return;\n      }\n      if (isEmpty(current.identifier)) {\n        throw new Error('Must define MQTT topic');\n      }\n      if (this.shouldRegister(prev)) {\n        this.listener().listen({ action: this.registerAction(), payload: current });\n      } else if (current.identifier !== prev.identifier || current.enabled !== prev.enabled) {\n        current.prev = prev;\n        this.listener().listen({ action: this.updateAction(), payload: current });\n      }\n      this.doAfterUpdate(current, prev);\n    }\n\n    protected createPayload(settings?: NodeSetting): NodeStoreItem {\n      let identifier = (settings ?? this.settings)['topic']?.value;\n      let enabled = settings ? settings[this.enableSettingKey()]?.value : this.isEnabled();\n      return {\n        identifier: identifier,\n        nodeId    : IdGenerator.createNodeId(this.cid, this.id),\n        enabled   : enabled,\n      } as NodeStoreItem;\n    }\n\n    protected shouldRegister(prev: NodeStoreItem) {\n      return !prev || !prev.identifier;\n    }\n\n  }\n\n  return MqttGenericNodeMixinBase;\n}\n\n// Need to mixin to keep call chain to update status\nabstract class MqttGenericNode extends DependantConnectionNodeMixin(MqttGenericNodeMixin(Node))\n  implements DependantConnectionNode, HasCentralizedListener {\n  protected _title: string;\n\n  protected constructor(title: string, description: string) {\n    super();\n    this._title = this.title = title;\n    this.description = description;\n    this.mixinEnableInputSetting();\n    this.mixinConnectionStatusOutput();\n    this.mixinMqttTopicInputSetting();\n  }\n\n  protected statusOutputIdx(): number {\n    return 0;\n  }\n\n  protected enableDescription(): string {\n    return `Enable ${this._title}`;\n  }\n\n  protected updateTitle() {\n    this.title = `${this._title} (${this.settings['topic'].value})`;\n  }\n\n  protected topicInputIdx() {\n    return 1;\n  }\n\n  protected shouldRegister(prev: NodeStoreItem) {\n    return super.shouldRegister(prev) || this.getConnectionStatus().isError();\n  }\n\n  protected handleError(err: Error, func: string) {\n    super.handleError(err, func);\n  }\n}\n\nclass MqttPublisherNode extends MqttGenericNode implements IMessageConverter {\n\n  constructor() {\n    super('MQTT Publisher', `MQTT Publisher Node is used to publish MQTT message for generic purpose`);\n    this.addInputWithSettings('is-json', Type.BOOLEAN, false, 'MQTT Message is JSON type');\n    this.addInputWithSettings('message', Type.ANY, '', 'MQTT Message');\n  }\n\n  onConvertMessage(data: any): string {\n    return isJSON(data) ? JSON.stringify(data) : data?.toString();\n  }\n\n  reEvaluateSettingByInput(inputs: { [p: number]: NodeInput }, settings: { [name: string]: NodeSetting }) {\n    super.reEvaluateSettingByInput(inputs, settings);\n    this.settings['is-json'].value = this.inputs[2].updated ? this.inputs[2].data : this.settings['is-json'].value;\n    this.settings['message'].value = this.inputs[3].updated ? this.inputs[3].data : this.settings['message'].value;\n  }\n\n  protected registerAction(): string {\n    return REGISTER_MQTT_PUBLISHER;\n  }\n\n  protected updateAction(): string {\n    return UPDATE_MQTT_PUBLISHER;\n  }\n\n  protected unregisterAction(): string {\n    return UNREGISTER_MQTT_PUBLISHER;\n  }\n\n  protected createPayload(settings?: NodeSetting): NodeStoreItem {\n    let payload = super.createPayload(settings);\n    payload.callback = data => this.onConvertMessage(data);\n    payload.data = this.settings['message'].value;\n    return payload;\n  }\n\n  protected doAfterUpdate(current: NodeStoreItem, prev?: NodeStoreItem): any {\n    if (isEmpty(current?.data) && (prev?.identifier && current.identifier !== prev.identifier || isEmpty(prev?.data))) {\n      return current;\n    }\n    if (current?.enabled) {\n      if (this.settings['is-json'].value && !isJSON(current.data)) {\n        try {\n          current.data = isEmpty(current.data) ? {} : JSON.parse(current.data);\n        } catch (err) {\n          this.debug(err);\n          throw new Error(`Payload is invalid JSON in MQTT publisher on topic ${current.identifier}`);\n        }\n      }\n      return this.listener().listen({ action: PUBLISH_MQTT_DATA, payload: current });\n    }\n  }\n\n}\n\nclass MqttSubscriberNode extends MqttGenericNode implements IMessageSubscriber {\n  constructor() {\n    super('MQTT Subscriber', `MQTT Subscriber Node is used for generic purpose`);\n    this.addOutput('out', Type.ANY);\n  }\n\n  onReceiveMessage(incomingMessage: any): void {\n    this.setOutputData(this.errorOutputIdx() + 1, incomingMessage);\n  }\n\n  protected registerAction(): string {\n    return REGISTER_MQTT_SUBSCRIBER;\n  }\n\n  protected updateAction(): string {\n    return UPDATE_MQTT_SUBSCRIBER;\n  }\n\n  protected unregisterAction(): string {\n    return UNREGISTER_MQTT_SUBSCRIBER;\n  }\n\n  protected createPayload(settings?: NodeSetting): NodeStoreItem {\n    let payload = super.createPayload(settings);\n    payload.callback = (out: any) => this.onReceiveMessage(out);\n    return payload;\n  }\n\n  protected doAfterUpdate(current: NodeStoreItem, prev?: NodeStoreItem): any {\n\n  }\n}\n\nContainer.registerNodeType('protocols/mqtt/mqtt-subscriber', MqttSubscriberNode, MQTT_CLIENT_NODE);\nContainer.registerNodeType('protocols/mqtt/mqtt-publisher', MqttPublisherNode, MQTT_CLIENT_NODE);\n","import { exec } from 'child_process';\nimport * as fs from 'fs';\nimport { Container } from '../../../container';\nimport { Node } from '../../../node';\nimport { Side } from '../../../node-interface';\nimport { NodeSetting, SettingType, Type } from '../../../node-io';\nimport CryptoUtils from '../../../utils/crypto-utils';\nimport { NODE_INFO } from '../../../node-info';\n\nclass MqttBroker extends Node {\n  constructor() {\n    super();\n    this.title = NODE_INFO[\"protocols/mqtt-broker\"][\"mqtt-broker\"].title;\n    this.description = NODE_INFO[\"protocols/mqtt-broker\"][\"mqtt-broker\"].description;\n\n    this.addInput('ping broker', Type.STRING);\n    this.addOutput('status', Type.STRING);\n    this.addOutput('error', Type.STRING);\n    this.addOutput('debug', Type.STRING);\n\n    this.settings['enable'] = NodeSetting.create({\n      description: 'Broker enable',\n      value: false,\n      type: SettingType.BOOLEAN,\n    });\n    this.settings['authentication'] = NodeSetting.create({\n      description: 'Use Authentication',\n      value: false,\n      type: SettingType.BOOLEAN,\n    });\n    this.settings['username'] = NodeSetting.create({ description: 'User name', value: '', type: SettingType.STRING });\n    this.settings['password'] = NodeSetting.create({ description: 'Password', value: '', type: SettingType.PASSWORD });\n    //this.settings['password'] = NodeSetting.create({ description: 'Password', value: '', type: SettingType.STRING });\n\n    this.setSettingsConfig({\n      groups: [\n        { enable: {}, authentication: {} },\n        { username: {}, password: {} },\n      ],\n      conditions: {\n        username: setting => {\n          return !!setting['authentication'].value;\n        },\n        password: setting => {\n          return !!setting['authentication'].value;\n        },\n      },\n    });\n\n    this.properties['useAuthentication'];\n  }\n\n  async onRemoved() {\n    // super.onRemoved();\n    await this.stopBroker()\n      .then(e => {\n        console.log(e);\n      })\n      .catch(err => {\n        console.log(err);\n      });\n  }\n\n  onInputUpdated() {\n    if (this.side !== Side.server) return; // only execute on server\n    const username = this.settings['username'].value;\n    const password = this.settings['password'].value;\n    const decryptPass = { username, password: CryptoUtils.decrypt(password) };\n    console.log('password', decryptPass);\n\n    this.statusBroker()\n      .then(e => {\n        this.setOutputData(0, e);\n        this.setOutputData(1, false);\n      })\n      .catch(err => {\n        this.setOutputData(0, false);\n        this.setOutputData(1, true);\n      });\n  }\n\n  onAfterSettingsChange() {\n    const enable = this.settings['enable'].value;\n    if (enable) {\n      this.startBroker()\n        .then(e => {\n          this.onInputUpdated(); //call to get broker status (TODO not the best but to busy to care)\n        })\n        .catch(err => {\n          this.setOutputData(0, false);\n          this.setOutputData(1, true);\n        });\n\n      this.checkAuthentication();\n    } else if (enable === false) {\n      this.stopBroker()\n        .then(e => {\n          this.onInputUpdated(); //call to get broker status\n        })\n        .catch(err => {\n          this.onInputUpdated(); //call to get broker status\n        });\n    }\n  }\n\n  stopBroker() {\n    return new Promise((resolve, reject) => {\n      let command = `sudo systemctl stop mosquitto`;\n      exec(command, (err, stdout, stderr) => {\n        if (err) {\n          reject({ err, stderr });\n        } else {\n          resolve(stdout);\n        }\n      });\n    });\n  }\n\n  statusBroker() {\n    return new Promise((resolve, reject) => {\n      let command = `ps -A | grep -i mosquitto | grep -v grep`;\n      exec(command, (err, stdout, stderr) => {\n        if (err) {\n          reject(false);\n        } else {\n          resolve(true);\n        }\n      });\n    });\n  }\n\n  startBroker() {\n    return new Promise((resolve, reject) => {\n      let command = `sudo systemctl start mosquitto`;\n      exec(command, (err, stdout, stderr) => {\n        if (err) {\n          console.log(err);\n          reject({ err, stderr });\n        } else {\n          resolve(stdout);\n        }\n      });\n    });\n  }\n\n  checkAuthentication() {\n    const path = '/etc/mosquitto/';\n    const configFile = 'mosquitto.conf';\n    const passwordFile = 'MQTTPasswords.txt';\n    if (this.settings['authentication'].value && !this.properties['useAuthentication']) {\n      this.properties['useAuthentication'] = this.settings['authentication'].value;\n      const username = this.settings['username'].value;\n      const password = this.settings['password'].value;\n      if (!username || !password) {\n        this.setOutputData(1, 'Invalid Credentials');\n        this.debugErr('Invalid Credentials');\n        return;\n      }\n      const command = 'sudo mosquitto_passwd -U ' + path + passwordFile;\n      fs.writeFile(path + passwordFile, username + ':' + password, err => {\n        if (err) {\n          this.setOutputData(1, err);\n          this.debugErr(err);\n          return;\n        }\n        try {\n          exec(command, (err, stdout, stderr) => {\n            if (stdout) {\n              this.setOutputData(1, stdout);\n              this.debugErr(stdout);\n              return;\n            }\n            if (err) {\n              this.setOutputData(1, err);\n              this.debugErr(err);\n              return;\n            }\n            if (stderr) {\n              this.setOutputData(1, stderr);\n              this.debugErr(stderr);\n              return;\n            }\n          });\n          fs.readFile(path + configFile, (err, buff) => {\n            if (err) {\n              this.setOutputData(1, err);\n              this.debugErr(err);\n              return;\n            }\n            let text = buff.toString('utf8');\n            this.setOutputData(2, text);\n            const allowAnonymousIndex = text.indexOf('allow_anonymous ');\n            if (allowAnonymousIndex >= 0) {\n              const allowAnonymous = text.slice(allowAnonymousIndex, allowAnonymousIndex + 22);\n              let allowAnonymousArray = allowAnonymous.split(' ');\n              if (allowAnonymousArray[1] == 'true') allowAnonymousArray[1] = 'false';\n              text.replace(\n                allowAnonymous,\n                allowAnonymousArray[0] + ' ' + allowAnonymousArray[1] + '       \\n',\n              );\n            } else {\n              text += '\\nallow_anonymous true     \\n';\n            }\n            const passwordRefIndex = text.indexOf('password_file ');\n            if (passwordRefIndex >= 0) {\n              const passwordRef = text.slice(passwordRefIndex, passwordRefIndex + 50);\n              let passwordRefArray = passwordRef.split(' ');\n              if (passwordRefArray[1] !== path + passwordFile) {\n                passwordRefArray[1] = path + passwordFile;\n                text = text.replace(\n                  passwordRef,\n                  passwordRefArray[0] + ' ' + passwordRefArray[1] + '       \\n',\n                );\n              }\n            } else {\n              text += '\\npassword_file /etc/mosquitto/MQTTPasswords.txt     \\n';\n            }\n            fs.writeFile(path + configFile, text, err => {\n              if (err) {\n                this.setOutputData(1, err);\n                this.debugErr(err);\n                return;\n              }\n            });\n            exec('sudo systemctl restart mosquitto', (err, stdout, stderr) => {\n              if (stdout) {\n                this.setOutputData(1, stdout);\n                this.debugErr(stdout);\n                return;\n              }\n              if (err) {\n                this.setOutputData(1, err);\n                this.debugErr(err);\n                return;\n              }\n              if (stderr) {\n                this.setOutputData(1, stderr);\n                this.debugErr(stderr);\n                return;\n              }\n            });\n          });\n        } catch (e) {\n          this.setOutputData(1, e);\n          this.debugErr(e);\n          return;\n        }\n      });\n    } else if (!this.settings['authentication'].value && this.properties['useAuthentication']) {\n      this.properties['useAuthentication'] = this.settings['authentication'].value;\n      fs.unlink(path + passwordFile, err => {\n        if (err) {\n          this.setOutputData(2, err);\n          this.debugErr(err);\n          return;\n        }\n      });\n      fs.readFile(path + configFile, (err, buff) => {\n        if (err) {\n          this.setOutputData(1, err);\n          this.debugErr(err);\n          return;\n        }\n        let text = buff.toString('utf8');\n        this.setOutputData(2, text);\n        const allowAnonymousIndex = text.indexOf('allow_anonymous ');\n        if (allowAnonymousIndex >= 0) {\n          const allowAnonymous = text.slice(allowAnonymousIndex, allowAnonymousIndex + 22);\n          let allowAnonymousArray = allowAnonymous.split(' ');\n          if (allowAnonymousArray[1] == 'false') allowAnonymousArray[1] = 'true';\n          text = text.replace(\n            allowAnonymous,\n            allowAnonymousArray[0] + ' ' + allowAnonymousArray[1] + '   ',\n          );\n        } else {\n          text += '\\nallow_anonymous false     \\n';\n        }\n        fs.writeFile(path + configFile, text, err => {\n          if (err) {\n            this.setOutputData(1, err);\n            this.debugErr(err);\n            return;\n          }\n        });\n        exec('sudo systemctl restart mosquitto', (err, stdout, stderr) => {\n          if (stdout) {\n            this.setOutputData(1, stdout);\n            this.debugErr(stdout);\n            return;\n          }\n          if (err) {\n            this.setOutputData(1, err);\n            this.debugErr(err);\n            return;\n          }\n          if (stderr) {\n            this.setOutputData(1, stderr);\n            this.debugErr(stderr);\n            return;\n          }\n        });\n      });\n    }\n  }\n}\n\nContainer.registerNodeType('protocols/mqtt-broker/mqtt-broker', MqttBroker);\n","import { Container } from '../../../container';\nimport { Node } from '../../../node';\nimport { Type } from '../../../node-io';\nimport { NODE_INFO } from '../../../node-info';\n\nclass MqttTopicPartsNode extends Node {\n  constructor() {\n    super();\n    this.title = NODE_INFO[\"protocols/mqtt\"][\"mqtt-topic-extractor\"].title;\n    this.description =\n      `## Description\\n ` +\n      NODE_INFO[\"protocols/mqtt\"][\"mqtt-topic-extractor\"]+ `\\n `+\n      `## Settings\\n ` +\n      ` Index will let you select the part of the topic that you want to extract ***topic/abc/123*** \\n `+\n      ` For example if the ***topic*** = ***topic/abc/123***  and ***index*** = 1 the the node ***output*** will = ***abc*** \\n `+\n      `## Inputs\\n ` +\n      ` The input data must be a sting and in a topic format like ***topic/abc/123*** \\n `+\n      `## Outputs\\n ` +\n      ` ***output*** will return the ***index*** selection \\n `+\n      ` ***output-all*** (Returns an array) will return all the topic parts\\n `+\n      ` For example if the ***topic*** = ***topic/abc/123***  the  ***output-all*** will return ***[topic, abc, 123]***\\n `\n    this.addInput('input', Type.STRING);\n    this.addInputWithSettings('index', Type.NUMBER, 0, 'Index', false);\n    this.addOutput('output', Type.STRING);\n    this.addOutput('output-all', Type.JSON);\n  }\n\n  onAdded() {\n    this.onInputUpdated();\n  }\n\n  onInputUpdated() {\n    const text = this.getInputData(0);\n    const index = this.getInputData(1);\n    if (text != null && index != null) {\n      const topic = text.split('/')\n      this.setOutputData(0, topic[index], true);\n      this.setOutputData(1, topic, true);\n    } else {\n      this.setOutputData(0, null, true);\n      this.setOutputData(1, null, true);\n    }\n  }\n\n  onAfterSettingsChange() {\n    this.onInputUpdated();\n  }\n}\n\nContainer.registerNodeType('protocols/mqtt/mqtt-topic-extractor', MqttTopicPartsNode);\n","import { Container } from '../../../container';\nimport { FlexibleNode } from '../../../flexible-node';\nimport { Type } from '../../../node-io';\nimport { NODE_INFO } from '../../../node-info';\n\nclass MQTTTopicBuilderNode extends FlexibleNode {\n  constructor() {\n    super();\n    this.dynamicInputsType = Type.STRING;\n    super.dynamicInputsStartName = 'string';\n    this.title = NODE_INFO[\"protocols/mqtt\"][\"topic-builder\"].title;\n    //TODO Should re-update\n    this.description = NODE_INFO[\"protocols/mqtt\"][\"topic-builder\"].description; \n   \n    this.addOutput('output', Type.STRING);\n    this.setOutputData(0, null);\n  }\n\n  onAdded() {\n    this.size = this.computeSize();\n    this.onInputUpdated();\n  }\n\n  onInputUpdated() {\n    const inputs = this.getInputsCount();\n    let output = '';\n    for (let i = this.dynamicInputStartPosition; i < inputs; i++) {\n      const value = (this.getInputData(i) || '').toString(); // making string null i.e `''` and other `null` same\n      if (value != ''){\n        if(output != '') output = output.concat('/');\n        output = output.concat(value);\n        //if(i !== (inputs - 1)) output = output.concat('/');\n      }\n    }\n    this.setOutputData(0, output, true);\n  }\n\n  onAfterSettingsChange() {\n    super.onAfterSettingsChange();\n    this.onInputUpdated();\n  }\n}\n\nContainer.registerNodeType('protocols/mqtt/topic-builder', MQTTTopicBuilderNode);\n","import { isNull } from '../../../../utils/helper';\nimport { Container } from '../../../container';\nimport { Node } from '../../../node';\nimport { NODE_INFO } from '../../../node-info';\nimport { Side } from '../../../node-interface';\nimport { NodeSetting, SettingType, Type } from '../../../node-io';\nimport SerialUtils from '../../../utils/serial-utils';\n\nconst SerialPort = require('serialport');\n\nclass SerialConnectorNode extends Node {\n  baudRates = [110, 300, 600, 1200, 2400, 4800, 9600, 14400, 19200, 38400, 57600, 115200, 128000, 256000];\n  isConnected = false;\n  port = null;\n\n  constructor() {\n    super();\n    this.title = NODE_INFO[\"protocols/misc\"][\"serial-connector\"].title;\n    this.description =\n      `## Description\\n ` +\n      NODE_INFO[\"protocols/misc\"][\"serial-connector\"].description + `\\n ` +\n      `   \\n ` +\n      `## Nube LoRa Raw Baud Rate\\n ` +\n      ` Default Baud Rate For Nube LoRa Raw is ***38400*** \\n `\n    this.addInput('writeValue', Type.STRING);\n    this.addInput('enable', Type.BOOLEAN);\n    this.addInput('list-ports', Type.BOOLEAN);\n    // this.addInputWithSettings('enable', Type.BOOLEAN, true, 'Enable');\n    this.addOutput('output', Type.STRING);\n    this.addOutput('error', Type.STRING);\n    this.addOutput('status', Type.BOOLEAN);\n    this.addOutput('last-message', Type.STRING);\n    this.addOutput('active-ports', Type.BOOLEAN);\n    this.settings['manualPort'] = NodeSetting.create({\n      description: 'Enter port manually',\n      value: false,\n      type: SettingType.BOOLEAN,\n    });\n    this.settings['port'] = NodeSetting.create({\n      description: 'Serial Port',\n      value: '/dev/ttyUSB2',\n      type: SettingType.DROPDOWN,\n      config: {\n        items: [\n          { value: '/dev/ttyUSB2', text: 'RS485-1 (/dev/ttyUSB2)' },\n          { value: '/dev/ttyUSB3', text: 'RS485-2 (/dev/ttyUSB3)' },\n          { value: '/dev/ttyUSB1', text: 'Xbee-1 (/dev/ttyUSB1)' },\n          { value: '/dev/ttyUSB0', text: 'Xbee-2 (/dev/ttyUSB0)' },\n          { value: '/dev/ttyAMA0', text: 'Xbee-3 (/dev/ttyAMA0)' },\n          { value: '/dev/ttyUSB4', text: 'USB Port (/dev/ttyUSB4)' },\n          { value: '/dev/ttyS1', text: 'Edge28 Expansion (/dev/ttyS1)' },\n        ],\n      },\n    });\n    this.settings['manualPortNum'] = NodeSetting.create({\n      description: 'Enter port number',\n      value: '/dev/ttyACM0',\n      type: SettingType.STRING,\n    });\n    this.settings['baudRate'] = NodeSetting.create({\n      description: 'Baud rate',\n      value: this.baudRates[6],\n      type: SettingType.DROPDOWN,\n      config: {\n        items: this.baudRates.map(baudRate => {\n          return { value: baudRate, text: baudRate };\n        }),\n      },\n    });\n    this.setOutputData(0, null);\n    this.setOutputData(1, false);\n    this.setOutputData(2, null);\n\n    this.setSettingsConfig({\n      conditions: {\n        manualPortNum: setting => {\n          return setting['manualPort'].value;\n        },\n        port: setting => {\n          return !setting['manualPort'].value;\n        },\n      },\n    });\n\n  }\n\n  onInputUpdated() {\n    if (!this.isConnected) {\n      this.connectToSerialPort();\n    } else if (this.isConnected && !this.getInputData(1)) {\n      this.isConnected = false;\n      this.clearOutputs();\n      this.closePort();\n      return;\n    }\n\n    this.writePortData(this.getInputData(0));\n\n    if (this.getInputData(2) === true) {\n      this.listPorts();\n    }\n  }\n\n  onAfterSettingsChange() {\n    this.connectToSerialPort();\n  }\n\n  onRemoved() {\n    this.closePort();\n  }\n\n  connectToSerialPort() {\n    if (this.side !== Side.server) return;\n\n    this.clearOutputs();\n    this.closePort();\n\n    if (!this.getInputData(1)) return;\n    let portName = this.settings['port'].value;\n    const manualPort = this.settings['manualPort'].value;\n    const manualPortNum = this.settings['manualPortNum'].value;\n\n    if (manualPort) {\n      if (manualPort === isNull) {\n        portName = portName\n      } else portName = manualPortNum\n    }\n\n    let baudRate = this.settings['baudRate'].value;\n\n    if (!portName) {\n      this.debugErr('Port name is not defined!');\n      this.setOutputData(1, 'Port name is not defined!');\n      return;\n    }\n\n    this.port = new SerialPort(portName, { baudRate: baudRate, autoOpen: false });\n\n    this.port.on('open', () => {\n      this.isConnected = true;\n      this.setOutputData(2, this.isConnected);\n      this.debugInfo('Port connected');\n    });\n\n    this.port.on('error', err => {\n      this.port = null; // this.port contains a serial object but it can't close since it never been opened\n      this.isConnected = false;\n      this.setOutputData(1, err.message);\n      this.setOutputData(2, this.isConnected);\n      this.debugErr(err.message);\n    });\n\n    this.port.on('close', () => {\n      this.debugInfo(this.isConnected ? 'Port closed. Gateway disconnected.' : 'Port closed');\n      this.isConnected = false;\n      this.setOutputData(2, this.isConnected);\n    });\n\n    this.port.on('disconnect', () => {\n      this.isConnected = false;\n      this.setOutputData(2, this.isConnected);\n      this.debugInfo('Disconnected');\n    });\n\n    const Readline = SerialPort.parsers.Readline;\n    const parser = this.port.pipe(new Readline({ delimiter: '\\n' }));\n    parser.on('data', data => this.readPortData(data));\n\n    this.debugInfo('Connecting to ' + portName + ' at ' + baudRate + '...');\n    this.port.open();\n  }\n\n  private clearOutputs() {\n    this.setOutputData(0, null);\n    this.setOutputData(1, null);\n    this.setOutputData(2, false);\n  }\n\n  private listPorts() {\n    SerialUtils.listPorts()\n      .then(e => {\n        this.setOutputData(4, e);\n      })\n      .catch(err => {\n        this.setOutputData(4, err);\n      });\n  }\n\n  private closePort() {\n    if (this.port) {\n      this.port.close();\n    }\n    this.port = null;\n  }\n\n  private readPortData(data) {\n    this.setOutputData(0, data);\n    this.setOutputData(3, this.formattedExecutionTime());\n  }\n\n  private writePortData(message) {\n    if (message) {\n      //TODO: temporary fix\n      //  any byte over 128 gets message up (nodejs serialPort must use signed bytes for strings for some dumb reason...)\n      //  best solution is to be able to send an array to this (typeof [1,2,3] === 'object')\n      //  couldn't get it working for now so sending to this node as a JSON string for now\n      try {\n        message = Buffer.from(JSON.parse(message));\n      } catch (e) { }\n\n      try {\n        this.port.write(message);\n      } catch (e) {\n        this.setOutputData(1, e.message);\n      }\n    }\n  }\n}\n\nContainer.registerNodeType('protocols/misc/serial-connector', SerialConnectorNode);\n","const SerialPort = require('serialport');\n\nexport default class SerialUtils {\n  /**\n   * Get a list of active serial ports on linux\n   * @returns {object}\n   */\n\n  static listPorts() {\n    return new Promise<Array<any>>((resolve, reject) => {\n      try {\n        let portList = [];\n        SerialPort.list().then(ports => {\n          ports.forEach(port => {\n            portList.push(port);\n          });\n          resolve(portList);\n        });\n      } catch (err) {\n        reject(err);\n      }\n    });\n  }\n}\n","import * as moment from 'moment-timezone';\nimport { Container } from '../../container';\nimport { Node } from '../../node';\nimport { NODE_INFO } from '../../node-info';\nimport { NodeSetting, SettingType, Type } from '../../node-io';\nimport UuidUtils from '../../utils/uuid-utils';\n\nclass WeeklyScheduleNode extends Node {\n  daysArray = ['sunday', 'monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday'];\n\n  constructor() {\n    super();\n    this.title = NODE_INFO.schedule[\"weekly-schedule\"].title;\n    this.description = NODE_INFO.schedule[\"weekly-schedule\"].description;\n\n    this.addOutput('output', Type.BOOLEAN);\n\n    this.settings['enable'] = NodeSetting.create({\n      description: 'Schedule Enable',\n      value: true,\n      type: SettingType.BOOLEAN,\n    });\n\n    this.settings['stringScheduleName'] = NodeSetting.create({\n      //description: 'Schedule Name String',\n      description: 'Schedule Name',\n      value: '',\n      type: SettingType.STRING,\n    });\n\n    this.settings['timezone'] = NodeSetting.create({\n      description: 'TIMEZONE: Enter the timezone',\n      value: moment.tz.guess(),\n      type: SettingType.STRING,\n    });\n\n    this.settings['startHour'] = NodeSetting.create({\n      description: 'Start Time',\n      value: 7,\n      type: SettingType.DROPDOWN,\n      config: {\n        items: this.makeHoursDropdown(),\n      },\n    });\n    this.settings['startMin'] = NodeSetting.create({\n      description: '',\n      value: 0,\n      type: SettingType.DROPDOWN,\n      config: {\n        items: this.makeMinsDropdown(),\n      },\n    });\n\n    this.settings['endHour'] = NodeSetting.create({\n      description: 'End Time',\n      value: 19,\n      type: SettingType.DROPDOWN,\n      config: {\n        items: this.makeHoursDropdown(),\n      },\n    });\n    this.settings['endMin'] = NodeSetting.create({\n      description: '',\n      value: 0,\n      type: SettingType.DROPDOWN,\n      config: {\n        items: this.makeMinsDropdown(),\n      },\n    });\n\n    this.settings['sunday'] = NodeSetting.create({\n      description: 'sunday',\n      value: false,\n      type: SettingType.BOOLEAN,\n    });\n    this.settings['monday'] = NodeSetting.create({\n      description: 'monday',\n      value: false,\n      type: SettingType.BOOLEAN,\n    });\n    this.settings['tuesday'] = NodeSetting.create({\n      description: 'tuesday',\n      value: false,\n      type: SettingType.BOOLEAN,\n    });\n    this.settings['wednesday'] = NodeSetting.create({\n      description: 'wednesday',\n      value: false,\n      type: SettingType.BOOLEAN,\n    });\n    this.settings['thursday'] = NodeSetting.create({\n      description: 'thursday',\n      value: false,\n      type: SettingType.BOOLEAN,\n    });\n    this.settings['friday'] = NodeSetting.create({\n      description: 'friday',\n      value: false,\n      type: SettingType.BOOLEAN,\n    });\n    this.settings['saturday'] = NodeSetting.create({\n      description: 'saturday',\n      value: false,\n      type: SettingType.BOOLEAN,\n    });\n\n    this.settings['payload'] = NodeSetting.create({\n      description: 'Schedule Payload',\n      value: 0,\n      type: SettingType.NUMBER,\n    });\n\n    this.setSettingsConfig({\n      groups: [\n        { startHour: {}, startMin: {} },\n        { endHour: {}, endMin: {} },\n      ],\n    });\n  }\n\n  onAdded() {\n    this.onAfterSettingsChange();\n  }\n\n  onAfterSettingsChange() {\n    var scheduleOutput = { weekly: {}, events: {} };\n    if (!this.settings['enable'].value) return scheduleOutput;\n    const schedID = UuidUtils.createUUID();\n    const tzOffset = moment.tz(this.settings['timezone'].value).utcOffset();\n    const offsetHours = Math.floor(tzOffset / 60);\n    const offsetMins = tzOffset % 60;\n    var rolloverFlag = 0;\n    var startHourUTC = this.settings['startHour'].value - offsetHours;\n    if (startHourUTC < 0) {\n      rolloverFlag = -1;\n      startHourUTC = startHourUTC + 24;\n    } else if (startHourUTC > 24) {\n      rolloverFlag = 1;\n      startHourUTC = startHourUTC - 24;\n    }\n    var startMinsUTC = this.settings['startMin'].value - offsetMins;\n    if (startMinsUTC < 0) startMinsUTC = startMinsUTC + 60;\n    else if (startMinsUTC >= 60) startMinsUTC = startMinsUTC - 60;\n    var endHourUTC = this.settings['endHour'].value - offsetHours;\n    if (endHourUTC < 0) {\n      endHourUTC = endHourUTC + 24;\n    } else if (endHourUTC > 24) {\n      endHourUTC = endHourUTC - 24;\n    }\n    var endMinsUTC = this.settings['endMin'].value - offsetMins;\n    if (endMinsUTC < 0) endMinsUTC = endMinsUTC + 60;\n    else if (endMinsUTC >= 60) endMinsUTC = endMinsUTC - 60;\n\n    const sundayIndex = this.settings['sunday'].value && rolloverFlag == -1 ? 7 : 0;\n    const saturdayIndex = this.settings['saturday'].value && rolloverFlag == 1 ? -1 : 6;\n    var daysOutput = [];\n    this.settings['sunday'].value ? daysOutput.push(this.daysArray[sundayIndex + rolloverFlag]) : null;\n    this.settings['monday'].value ? daysOutput.push(this.daysArray[1 + rolloverFlag]) : null;\n    this.settings['tuesday'].value ? daysOutput.push(this.daysArray[2 + rolloverFlag]) : null;\n    this.settings['wednesday'].value ? daysOutput.push(this.daysArray[3 + rolloverFlag]) : null;\n    this.settings['thursday'].value ? daysOutput.push(this.daysArray[4 + rolloverFlag]) : null;\n    this.settings['friday'].value ? daysOutput.push(this.daysArray[5 + rolloverFlag]) : null;\n    this.settings['saturday'].value ? daysOutput.push(this.daysArray[saturdayIndex + rolloverFlag]) : null;\n\n    scheduleOutput.weekly = {\n      [schedID]: {\n        colour: '#FFFFFF',\n        name: this.settings['stringScheduleName'].value || 'unknownSchedule',\n        start: `${String(startHourUTC).padStart(2, '0')}:${String(startMinsUTC).padStart(2, '0')}`,\n        end: `${String(endHourUTC).padStart(2, '0')}:${String(endMinsUTC).padStart(2, '0')}`,\n        days: daysOutput,\n        value: this.settings['payload'].value,\n        id: schedID,\n      },\n    };\n    this.setOutputData(0, scheduleOutput);\n  }\n\n  makeHoursDropdown() {\n    var hoursArray = [];\n    for (var h = 0; h < 24; h++) {\n      hoursArray.push({ value: h, text: String(h).padStart(2, '0') });\n    }\n    return hoursArray;\n  }\n\n  makeMinsDropdown() {\n    var minsArray = [];\n    for (var m = 0; m < 60; m++) {\n      minsArray.push({ value: m, text: String(m).padStart(2, '0') });\n    }\n    return minsArray;\n  }\n}\n\nContainer.registerNodeType('schedule/weekly-schedule', WeeklyScheduleNode);\n","import { Container } from '../../container';\nimport { FlexibleNode } from '../../flexible-node';\nimport { NODE_INFO } from '../../node-info';\nimport { Type } from '../../node-io';\n\nclass ScheduleMergeNode extends FlexibleNode {\n  constructor() {\n    super();\n    this.dynamicSettingsExist = false;\n    this.dynamicInputsType = Type.STRING;\n    this.title = NODE_INFO.schedule[\"schedule-merge\"].title;\n    this.description = NODE_INFO.schedule[\"schedule-merge\"].description;\n\n    this.addOutput('output', Type.BOOLEAN);\n    this.addOutput('error', Type.STRING);\n  }\n\n  onAdded() {\n    this.onAfterSettingsChange();\n  }\n\n  onInputUpdated() {\n    var weeklyOutput = {};\n    var eventOutput = {};\n    var inputString;\n    var inputObject;\n    for (var i = 0; i < this.getInputsCount(); i++) {\n      inputString = this.getInputData(i);\n      if (!inputString) continue;\n      try {\n        inputObject = JSON.parse(inputString);\n        for (var weeklySched in inputObject.weekly) {\n          weeklyOutput[weeklySched] = inputObject.weekly[weeklySched];\n        }\n        for (var eventSched in inputObject.events) {\n          weeklyOutput[eventSched] = inputObject.events[eventSched];\n        }\n        this.setOutputData(0, { weekly: weeklyOutput, events: eventOutput });\n      } catch (e) {\n        this.setOutputData(1, e);\n      }\n    }\n  }\n\n  onAfterSettingsChange() {\n    super.onAfterSettingsChange();\n    this.onInputUpdated();\n  }\n}\n\nContainer.registerNodeType('schedule/schedule-merge', ScheduleMergeNode);\n","//import * as moment from 'moment';\nimport * as moment from 'moment-timezone';\nimport { Container } from '../../container';\nimport { Node } from '../../node';\nimport { NODE_INFO } from '../../node-info';\nimport { Side } from '../../node-interface';\nimport { NodeSetting, SettingType, Type } from '../../node-io';\nimport TimeUtils from '../../utils/time-utils';\nimport { ScheduleUtils } from './schedule-utils';\n\n/**\n * ScheduleChecker checks the schedule is active or not on current time\n * This node is for checking a formatted schedule JSON: SCHEDULE_MODE.INPUT\n * https://en.wikipedia.org/wiki/List_of_tz_database_time_zones\n */\nexport class ScheduleChecker extends Node {\n  nextStart;\n  nextStop;\n  schedulePayload;\n  constructor() {\n    super();\n    this.title = NODE_INFO.schedule[\"schedule-checker\"].title;\n    this.description = NODE_INFO.schedule[\"schedule-checker\"].description;\n\n    this.addInputWithSettings('enable', Type.BOOLEAN, true, 'Enable', false);\n    this.addInput('schedules', Type.JSON);\n    this.addOutput('output', Type.BOOLEAN);\n    this.addOutput('payload', Type.BOOLEAN);\n    this.addOutput('nextStart', Type.STRING);\n    this.addOutput('nextStop', Type.STRING);\n    this.addOutput('lastCheck', Type.STRING);\n    this.addOutput('error', Type.STRING);\n    /*\n    this.settings['scheduleName'] = NodeSetting.create({\n      description: 'Select Schedule',\n      type: SettingType.DROPDOWN,\n      config: {\n        items: [],\n      },\n      value: '',\n    });\n    this.settings['includeStringName'] = NodeSetting.create({\n      description: \"Use 'Schedule Name String' from Below\",\n      value: false,\n      type: SettingType.BOOLEAN,\n    });\n    */\n\n    this.settings['stringScheduleName'] = NodeSetting.create({\n      //description: 'Schedule Name String',\n      description: 'Schedule Name',\n      value: '',\n      type: SettingType.STRING,\n    });\n\n    this.settings['timezone'] = NodeSetting.create({\n      description: 'TIMEZONE: Enter the timezone',\n      value: moment.tz.guess(),\n      type: SettingType.STRING,\n    });\n\n    this.settings['interval'] = NodeSetting.create({\n      description: 'Schedule Check Interval (minimum 10 seconds)',\n      value: 30,\n      type: SettingType.NUMBER,\n    });\n\n    this.settings['time'] = NodeSetting.create({\n      description: 'Units',\n      type: SettingType.DROPDOWN,\n      config: {\n        items: [\n          { value: 'milliseconds', text: 'Milliseconds' },\n          { value: 'seconds', text: 'Seconds' },\n          { value: 'minutes', text: 'Minutes' },\n          { value: 'hours', text: 'Hours' },\n        ],\n      },\n      value: 'seconds',\n    });\n    this.setSettingsConfig({\n      groups: [{ interval: { weight: 2 }, time: {} }],\n    });\n\n    this.settings['numericTimeFormat'] = NodeSetting.create({\n      description: 'Timestamp Output Format',\n      type: SettingType.DROPDOWN,\n      config: {\n        items: [\n          { value: false, text: 'Timestamps as Strings' },\n          { value: true, text: 'Timestamps as Epoch Numerics' },\n        ],\n      },\n      value: false,\n    });\n\n    this.nextStart = null;\n    this.nextStop = null;\n    this.schedulePayload = null;\n    this.EXECUTE_INTERVAL = 10000;\n  }\n\n  async onAdded() {\n    await this.updateTitle();\n    await this.onInputUpdated();\n  }\n\n  async onInputUpdated() {\n    if (this.side !== Side.server) return;\n    let input = this.getInputData(1) || { weekly: {}, events: {} };\n\n    /*  FOR USE WITH DROPDOWN SCHEDULE SELECTION\n    let weeklyInput = input['weekly'];\n    let eventsInput = input['events'];\n    console.log(weeklyInput, 'schedule weeklyInput');\n    console.log(eventsInput, 'schedule eventsInput');\n    const scheduleNameItems = [];\n    weeklyInput &&\n      Object.keys(weeklyInput).forEach(key => {\n        scheduleNameItems.push(weeklyInput[key].name);\n      });\n    eventsInput &&\n      Object.keys(eventsInput).forEach(key => {\n        if (!scheduleNameItems.includes(eventsInput[key]['name'])) {\n          scheduleNameItems.push(eventsInput[key]['name']);\n        }\n      });\n    // What if the intended schedule isn't in the current JSON when configuring? Can set a 'Schedule Name String' from settings.\n    if (\n      this.settings['includeStringName'].value &&\n      this.settings['stringScheduleName'].value != '' &&\n      !scheduleNameItems.includes(this.settings['stringScheduleName'].value)\n    ) {\n      scheduleNameItems.push(this.settings['stringScheduleName'].value);\n    }\n    console.log(scheduleNameItems, 'scheduleNameItems');\n    let settingsItems = [];\n    scheduleNameItems.forEach(scheduleName => {\n      settingsItems.push({\n        value: scheduleName,\n        text: scheduleName,\n      });\n    });\n    this.settings['scheduleName'].config.items = settingsItems;\n    this.broadcastSettingsToClients();\n    if (scheduleNameItems.length == 0) {\n      this.settings['scheduleName'].value = null;\n      this.setOutputData(0, false, true);\n      this.setOutputData(1, null, true);\n      this.setOutputData(2, null, true);\n      this.setOutputData(3, null, true);\n      this.setOutputData(4, moment(this.executeLastTime).format('YYYY-MM-DDTHH:MM:ss'), true);\n      this.setOutputData(5, true, true);\n      console.log('Schedule Checker Error: no schedule selected');\n      return;\n    } else if (!scheduleNameItems.includes(this.settings['scheduleName'].value)) {\n      this.settings['scheduleName'].value = null;\n      this.setOutputData(0, false, true);\n      this.setOutputData(1, null, true);\n      this.setOutputData(2, null, true);\n      this.setOutputData(3, null, true);\n      this.setOutputData(4, moment(this.executeLastTime).format('YYYY-MM-DDTHH:MM:ss'), true);\n      this.setOutputData(5, false, true);\n      return;\n    }\n    */\n\n    await this.setOutput(input);\n  }\n\n  async onExecute() {\n    await this.setOutput();\n  }\n\n  async updateTitle() {\n    if (\n      this.settings['stringScheduleName'].value != null &&\n      this.settings['stringScheduleName'].value != ''\n    ) {\n      this.title = `Schedule Checker (${this.settings['stringScheduleName'].value})`;\n    } else this.title = 'Schedule Checker (unconfigured)';\n    this.broadcastTitleToClients();\n  }\n\n  async onAfterSettingsChange() {\n    await this.updateTitle();\n    let interval = this.settings['interval'].value;\n    interval = TimeUtils.timeConvert(interval, this.settings['time'].value);\n    this.EXECUTE_INTERVAL = Math.max(interval, 10000);\n    await this.onInputUpdated();\n  }\n\n  private async setOutput(input = null) {\n    this.nextStart = null;\n    this.nextStop = null;\n    this.schedulePayload = null;\n    if (!input) input = this.getInputData(1) || { weekly: {}, events: {} };\n    //console.log('input1', input)\n\n\n    //const key = this.settings['scheduleName'].value;   FOR USE WITH DROPDOWN SCHEDULE SELECTION\n    const key = this.settings['stringScheduleName'].value;\n    //console.log('key', key)\n    if (key == null || key === '') {\n      this.setOutputData(0, false);\n      this.setOutputData(1, null);\n      this.setOutputData(2, null);\n      this.setOutputData(3, null);\n      this.setOutputData(4, moment(this.executeLastTime).format('YYYY-MM-DDTHH:MM:ss'));\n      this.setOutputData(5, 'Schedule Checker Error: invalid schedule selected');\n      return;\n    }\n\n    //const now = moment();\n    let timeZone = this.settings['timezone'].value;\n    if (!moment.tz.zone(timeZone)) {\n      timeZone = moment.tz.guess();\n    }\n    const now = moment.tz(timeZone);\n    //console.log('now', now.format())\n    //const now = moment('2020-01-21T07:00:00.000+05:00')\n    //const now = moment.tz(\"2020-03-27T01:30\", 'Canada/Pacific');    //for testing\n    //const now = moment.tz(\"2020-03-26T12:30\", 'Australia/Sydney');  //for testing\n    //const now = moment.tz(\"2020-09-25T04:30\", timeZone);            //for testing\n    //console.log(\"now\", now.format())\n\n    const isEnabled = this.getInputData(0);\n    if (input && key && isEnabled) {\n      let weeklyOutput = false;\n      let weeklyScheduleOutput = null;\n      for (var sched in input['weekly']) {\n        if (input['weekly'][sched]['name'] === key) {\n          weeklyScheduleOutput = ScheduleUtils.checkWeeklySchedule(input['weekly'][sched], now); // returns {scheduleStatus, nextStart, nextStop value}\n          weeklyOutput = weeklyScheduleOutput.scheduleStatus || weeklyOutput;\n          this.schedulePayload = weeklyScheduleOutput.value || this.schedulePayload;\n          if (weeklyScheduleOutput.nextStop != null) {\n            if (this.nextStop == null || weeklyScheduleOutput.nextStop.isBefore(this.nextStop)) {\n              this.nextStop = weeklyScheduleOutput.nextStop;\n            }\n          }\n          if(weeklyScheduleOutput.nextStart != null){\n            if (this.nextStart == null || weeklyScheduleOutput.nextStart.isBefore(this.nextStart)) {\n              this.nextStart = weeklyScheduleOutput.nextStart;\n            }\n          }\n        }\n      }\n\n      let eventsOutput = false;\n      let eventScheduleOutput = null;\n      for (var sched in input['events']) {\n        if (input['events'][sched]['name'] === key) {\n          eventScheduleOutput = ScheduleUtils.checkEventsSchedule(input['events'][sched], now); // returns {scheduleStatus, nextStart, nextStop, value}\n          eventsOutput = eventScheduleOutput.scheduleStatus || eventsOutput;\n          this.schedulePayload = eventScheduleOutput.value || this.schedulePayload;\n          if (eventScheduleOutput.nextStop != null) {\n            if (eventScheduleOutput.nextStop.isBefore(this.nextStop) || this.nextStop == null)\n              this.nextStop = eventScheduleOutput.nextStop;\n          }\n          if (eventScheduleOutput.nextStart != null) {\n            if (eventScheduleOutput.nextStart.isBefore(this.nextStart) || this.nextStart == null)\n              this.nextStart = eventScheduleOutput.nextStart;\n          }\n        }\n      }\n      const output = weeklyOutput || eventsOutput;\n\n      this.setOutputData(0, output);\n      this.setOutputData(1, this.schedulePayload);\n      if (this.nextStart != null) {\n        if (!this.settings['numericTimeFormat'].value)\n          this.setOutputData(2, this.nextStart.tz(timeZone).format());\n        else this.setOutputData(2, this.nextStart.valueOf());\n      } else this.setOutputData(2, null);\n\n      if (this.nextStop != null) {\n        if (!this.settings['numericTimeFormat'].value)\n          this.setOutputData(3, this.nextStop.tz(timeZone).format());\n        else this.setOutputData(3, this.nextStop.valueOf());\n      } else this.setOutputData(3, null);\n    } else {\n      this.setOutputData(0, false);\n      this.setOutputData(1, null);\n      this.setOutputData(2, null);\n      this.setOutputData(3, null);\n    }\n    if (!this.settings['numericTimeFormat'].value) {\n      this.setOutputData(\n        4,\n        moment(this.executeLastTime)\n          .tz(timeZone)\n          .format(),\n      );\n    } else this.setOutputData(4, moment(this.executeLastTime).valueOf());\n    this.setOutputData(5, false);\n  }\n}\nContainer.registerNodeType('schedule/schedule-checker', ScheduleChecker);\n","import * as moment from 'moment-timezone';\nimport Utils from '../../utils';\n\nexport class ScheduleUtils {\n  /**\n   * @param eventSchedule\n   * @param dt: {moment} datetime which is to be compared\n   */\n  static checkEventsSchedule(eventSchedule, dt: moment) {\n    if (eventSchedule && Object.prototype.hasOwnProperty.call(eventSchedule, 'dates')) {\n      let eventOutput = false;\n      let nextOn = null;\n      let nextOff = null;\n      let scheduleValue = null;\n      for (let i = 0; i < eventSchedule.dates.length; i++) {\n        const dtUTC = dt.clone().tz('Etc/UTC'); // remove this line and replace dtUTC with dt once testing is complete\n        const startMoment = moment.tz(eventSchedule.dates[i].start, 'Etc/UTC');\n        const endMoment = moment.tz(eventSchedule.dates[i].end, 'Etc/UTC');\n        //console.log('dtUTC', dtUTC.format('YYYY-MM-DDTHH:MM:ss'));\n        //console.log('startMoment', startMoment.format('YYYY-MM-DDTHH:MM:ss'));\n        //console.log('endMoment', endMoment.format('YYYY-MM-DDTHH:MM:ss'));\n        if (dtUTC.isAfter(startMoment) && dtUTC.isBefore(endMoment)) {\n          //return [true, null, endMoment];\n          eventOutput = true;\n          if (eventSchedule && Object.prototype.hasOwnProperty.call(eventSchedule, 'value'))\n            scheduleValue = eventSchedule.value;\n          if (nextOff == null || endMoment.isBefore(nextOff)) {\n            nextOff = endMoment;\n          }\n        } else if (dtUTC.isBefore(startMoment) && dtUTC.isBefore(endMoment)) {\n          //return [false, startMoment, endMoment];\n          if (nextOn == null || startMoment.isBefore(nextOn)) {\n            nextOn = startMoment;\n          }\n          if (nextOff == null || endMoment.isBefore(nextOff)) {\n            nextOff = endMoment;\n          }\n        }\n      }\n      //return [eventOutput, nextOn, nextOff];\n      return {\n        scheduleStatus: eventOutput,\n        nextStart: nextOn,\n        nextStop: nextOff,\n        value: scheduleValue,\n      };\n    }\n    //return [false, null, null];\n    return { scheduleStatus: false, nextStart: null, nextStop: null, value: null };\n  }\n\n  /**\n   * @param weeklySchedule\n   * @param dt: {moment} datetime which is to be compared\n   */\n  static checkWeeklySchedule(weeklySchedule, dt: moment) {\n    let weeklyOutput = false;\n    let nextOn = null;\n    let nextOff = null;\n    let scheduleValue = null;\n\n    if (weeklySchedule) {\n      //console.log(dt)\n      //console.log('dt', dt.format());\n      const dtUTC = dt.clone().tz('Etc/UTC'); // remove this line and replace dtUTC with dt once testing is complete\n      //console.log(\"dtUTC\", dtUTC.format());\n      //console.log(\"dtUTCday\", dtUTC.isoWeekday());\n      //console.log(\"weeklySchedule.days\", weeklySchedule.days);\n      let daysArray = weeklySchedule.days.map(day => {\n        return Utils.getISOday(day);\n      });\n      //console.log(\"daysArray\", daysArray);\n\n      let startArray = weeklySchedule.start.split(':').map(part => {\n        return Number(part);\n      }); // make the start string into an array of numbers [hour,min]\n      let endArray = weeklySchedule.end.split(':').map(part => {\n        return Number(part);\n      }); // make the end string into an array of numbers [hour,min]\n\n      let rolloverFlag = 0;\n      if (startArray[0] > endArray[0]) {\n        // schedule period runs into next day on UTC\n        rolloverFlag = 1;\n      }\n      //console.log('rolloverFlag', rolloverFlag)\n\n      const date = dtUTC.format('YYYY-MM-DD'); //current date in local (tz) time.\n      //console.log('date', date);\n\n      let startMomentArray = daysArray.map(day => {\n        return moment.tz(`${date}T${weeklySchedule.start}:00.000Z`, 'Etc/UTC').isoWeekday(day);\n      });\n      //console.log(\"startMomentArray\", startMomentArray.map((day)=>{return day.format()}));\n\n      let endMomentArray = daysArray.map(day => {\n        return moment\n          .tz(`${date}T${weeklySchedule.end}:00.000Z`, 'Etc/UTC')\n          .isoWeekday(day + rolloverFlag);\n      });\n      //console.log(\"endMomentArray\", endMomentArray.map((day)=>{return day.format()}));\n\n      // check if any of the end moments are more than a week past current moment.\n      // This is for the edge case where there is a sunday that rolls over into a monday.\n      //if (rolloverFlag && endMomentArray.some((end)=>{return dtUTC.add(1, 'week').isBefore(end)})){\n      if (rolloverFlag) {\n        for (let i = 0; i < endMomentArray.length; i++) {\n          if (\n            dtUTC\n              .clone()\n              .add(1, 'weeks')\n              .isBefore(endMomentArray[i])\n          ) {\n            //endMomentArray[i] = endMomentArray[i].subtract(1, 'weeks');\n            endMomentArray[i].subtract(1, 'weeks');\n            //startMomentArray[i] = startMomentArray[i].subtract(1, 'weeks');\n            startMomentArray[i].subtract(1, 'weeks');\n            //console.log(\"Sunday->Monday Rollover Edge Case\")\n            //console.log(\"startMomentArray\", startMomentArray.map((day)=>{return day.format()}));\n            //console.log(\"endMomentArray\", endMomentArray.map((day)=>{return day.format()}));\n            break;\n          }\n        }\n      }\n\n      // check if all of the start and end moments are before the current moment\n      if (\n        startMomentArray.every(start => {\n          return start.isBefore(dtUTC);\n        }) &&\n        endMomentArray.every(end => {\n          return end.isBefore(dtUTC);\n        })\n      ) {\n        // if so then add a week to all start and end moments\n        //startMomentArray = startMomentArray.map((start)=>{return start.add(1, 'weeks')});\n        startMomentArray.map(start => {\n          return start.add(1, 'weeks');\n        });\n        //endMomentArray = endMomentArray.map((end)=>{return end.add(1, 'weeks')});\n        endMomentArray.map(end => {\n          return end.add(1, 'weeks');\n        });\n        //console.log(\"Added a week to all START and END moments\")\n        //console.log(\"startMomentArray\", startMomentArray.map((day)=>{return day.format()}));\n        //console.log(\"endMomentArray\", endMomentArray.map((day)=>{return day.format()}));\n      }\n      // check if all of the start moments are before the current moment.\n      // This means that the last schedule period is active. There will only be one End time after the last start time.\n      else if (\n        startMomentArray.every(start => {\n          return start.isBefore(dtUTC);\n        })\n      ) {\n        for (let j = 0; j < endMomentArray.length; j++) {\n          if (endMomentArray[j].isBefore(dtUTC)) {\n            endMomentArray[j].add(1, 'weeks');\n            startMomentArray[j].add(1, 'weeks');\n          }\n        }\n      }\n\n      // search the Start and End moments for active schedules, and get nextOn and nextOff times.\n      for (let x = 0; x < startMomentArray.length; x++) {\n        //console.log(\"dtUTC\", dtUTC.format())\n        //console.log(\"startMomentArray[x]\", startMomentArray[x].format())\n        //console.log(\"endMomentArray[x]\", endMomentArray[x].format())\n        if (startMomentArray[x].isBefore(dtUTC) && endMomentArray[x].isAfter(dtUTC)) {\n          weeklyOutput = true;\n          if (weeklySchedule && Object.prototype.hasOwnProperty.call(weeklySchedule, 'value'))\n            scheduleValue = weeklySchedule.value;\n          nextOff = endMomentArray[x];\n          nextOn = startMomentArray[x].add(1, 'weeks');\n        } else if (\n          startMomentArray[x].isAfter(dtUTC) &&\n          (nextOn == null || startMomentArray[x].isBefore(nextOn))\n        ) {\n          nextOn = startMomentArray[x];\n        }\n        if (\n          endMomentArray[x].isAfter(dtUTC) &&\n          (nextOff == null || endMomentArray[x].isBefore(nextOff))\n        ) {\n          nextOff = endMomentArray[x];\n        }\n      }\n      //console.log(\"weeklyOutput\", weeklyOutput)\n      //console.log(\"nextOn\", nextOn.format())\n      //console.log(\"nextOff\", nextOff.format())\n    }\n    //return [weeklyOutput, nextOn, nextOff];\n    return {\n      scheduleStatus: weeklyOutput,\n      nextStart: nextOn,\n      nextStop: nextOff,\n      value: scheduleValue,\n    };\n  }\n}\n\n/*\n * @param weeklySchedule\n * @param dt: {moment} datetime which is to be compared\n */\n/*\n/*\n  static checkWeeklySchedule(weeklySchedule, dt:moment): boolean {\n    // Helper function that shifts the schedule days (weeklySchedule.days): shiftDaysArray(['monday', 'tuesday'], 1) => ['tuesday', 'wednesday']\n    function shiftDaysArray(daysArray:string[], shiftNumber:number) {\n       return daysArray.map((string) => {\n        return moment().day(string).add(shiftNumber,'days').format('dddd').toLowerCase();\n      });\n    }\n    if (weeklySchedule) {\n      //console.log(dt)\n      let tzOffset:number = null;\n      if(dt.hasOwnProperty('_offset')) tzOffset = dt._offset;\n      else tzOffset = 0;\n      const tzOffsetHours = Math.floor(tzOffset/60);\n      const tzOffsetMins = (tzOffset % 60) * Math.sign(tzOffsetHours);\n      let tzone = null;\n      if(dt.hasOwnProperty('_z')){\n        if(dt._z != null){\n          if(dt._z.hasOwnProperty('name')) tzone = dt._z.name;\n        }\n      }\n      if(tzone == null) tzone = 'Etc/UTC';\n      //console.log('tzone', tzone)\n      let daysArray = weeklySchedule.days.map(day => day.toLowerCase());\n      //console.log(\"daysArray1\", daysArray)\n      let startArray = weeklySchedule.start.split(':').map((part)=>{return Number(part)});  // make the start string into an array of numbers [hour,min]\n      let endArray = weeklySchedule.end.split(':').map((part)=>{return Number(part)});  // make the end string into an array of numbers [hour,min]\n      //console.log(\"startArray 1\", startArray)\n      //console.log(\"endArray 1\", endArray)\n      startArray[0] += tzOffsetHours;\n      startArray[1] += tzOffsetMins;\n      endArray[0] += tzOffsetHours;\n      endArray[1] += tzOffsetMins;\n      //console.log(\"startArray 2\", startArray)\n      //console.log(\"endArray 2\", endArray)\n      if (startArray[0] >= 24 && endArray[0] >= 24){\n        startArray[0] -= 24;\n        endArray[0] -= 24;\n        daysArray = shiftDaysArray(daysArray, 1);  //shift days array +1\n      }\n      else if (startArray[0] >= 24 && endArray[0] < 24 && endArray[0] >= 0){\n        startArray[0] -= 24;\n        daysArray = shiftDaysArray(daysArray, 1);  //shift days array +1\n      }\n      else if (startArray[0] < 0 && endArray[0] < 0){\n        startArray[0] += 24;\n        endArray[0] += 24;\n        daysArray = shiftDaysArray(daysArray, -1);  //shift days array -1\n      }\n      else if (endArray[0] < 0 && startArray[0] < 24 && startArray[0] >= 0){\n        endArray[0] += 24;\n      }\n      else if (startArray[0] < 0 && endArray[0] < 24 && endArray[0] >= 0){\n        startArray[0] += 24;\n        daysArray = shiftDaysArray(daysArray, -1);  //shift days array -1\n      }\n      else if (endArray[0] >= 24 && startArray[0] < 24 && startArray[0] >= 0){\n        endArray[0] -= 24;\n      }\n      //console.log(\"daysArray2\", daysArray)\n      //console.log('startArray 3', startArray)\n      //console.log('endArray 3', endArray)\n      \n      const date = dt.format('YYYY-MM-DD');  //current date in local (tz) time.\n      //console.log('date', date);\n      let day = dt.tz(tzone).format('dddd').toLowerCase(); // Sunday, or Monday, or ..\n      //console.log('day', day)\n      //console.log(\"dt\", dt.tz(tzone).format())\n      // make moment objects with the start and end times and the current date\n      const start = moment.tz(`${date}T${startArray[0].toString().padStart(2,'0')}:${startArray[1].toString().padStart(2,'0')}:00`, tzone); \n      //console.log('start', start.format())\n      const end = moment.tz(`${date}T${endArray[0].toString().padStart(2,'0')}:${endArray[1].toString().padStart(2,'0')}:00`, tzone);\n      //console.log('end1', end.format());\n      if (start.isAfter(end)) {   // if the scheduled period runs over into the next day\n        if (daysArray.includes(moment().day(day).subtract(1,'days').format('dddd').toLowerCase())) {    //If daysArray includes the previous day\n          if (dt.isBefore(end)) return true;  // check if we are in the overlap period from the previous day\n        }\n        if (daysArray.includes(day && dt.isAfter(start))) return true; //If we are between the start time and end of the day\n        return false;\n      }\n      else if (daysArray.includes(day)){  \n        if (dt.isAfter(start) && dt.isBefore(end)) return true;\n      }\n  \n    }\n    return false;\n  }\n  */\n","import { Container } from '../../container';\nimport { Type } from '../../node-io';\nimport Utils from '../../utils';\nimport Statistics from './statistics';\nimport { NODE_INFO } from '../../node-info';\n\nclass MinMaxAvgNode extends Statistics {\n  constructor() {\n    super();\n    this.title = NODE_INFO.statistics[\"min-max-avg\"].title;\n    this.description = NODE_INFO.statistics[\"min-max-avg\"].description;\n    this.addOutput('Min', Type.NUMBER);\n    this.addOutput('Max', Type.NUMBER);\n    this.addOutput('Avg', Type.NUMBER);\n  }\n\n  onInputUpdated() {\n    const data = this.getDefinedInputsOrSettingsValues();\n    const min = Math.min.apply(Math, data);\n    const max = Math.max.apply(Math, data);\n    const count = data.length;\n    const sum = Utils.sum(data);\n    const avg = sum / count;\n\n    this.setOutputData(0, min);\n    this.setOutputData(1, max);\n    this.setOutputData(2, avg);\n  }\n\n  onAfterSettingsChange() {\n    super.onAfterSettingsChange();\n    this.onInputUpdated();\n  }\n}\n\nContainer.registerNodeType('statistics/min-max-avg', MinMaxAvgNode);\n","import { Container } from '../../container';\nimport { Type } from '../../node-io';\nimport Utils from '../../utils';\nimport Statistics from './statistics';\nimport { NODE_INFO } from '../../node-info';\n\nclass AvgNode extends Statistics {\n  constructor() {\n    super();\n    this.title = NODE_INFO.statistics.avg.title;\n    this.description = NODE_INFO.statistics.avg.description;\n    this.addOutput('Avg', Type.NUMBER);\n    this.addOutput('Count', Type.STRING);\n    this.addOutput('Sum', Type.STRING);\n  }\n\n  onInputUpdated() {\n    const data = this.getDefinedInputsOrSettingsValues();\n    const count = data.length;\n    const sum = Utils.sum(data);\n    let avg = 0;\n    if (count !== 0) {\n      avg = sum / count;\n    }\n\n    this.setOutputData(0, avg);\n    this.setOutputData(1, count);\n    this.setOutputData(2, sum);\n  }\n\n  onAfterSettingsChange() {\n    super.onAfterSettingsChange();\n    this.onInputUpdated();\n  }\n}\nContainer.registerNodeType('statistics/avg', AvgNode);\n","import { Container } from '../../container';\nimport { Type } from '../../node-io';\nimport Utils from '../../utils';\nimport Statistics from './statistics';\nimport { NODE_INFO } from '../../node-info';\n\nclass MinNode extends Statistics {\n  constructor() {\n    super();\n    this.title = NODE_INFO.statistics.min.title;\n    this.description = NODE_INFO.statistics.min.description;\n    this.addOutput('min', Type.NUMBER);\n  }\n\n  onInputUpdated() {\n    const data = this.getDefinedInputsOrSettingsValues();\n    const min = Utils.stat.min(data);\n    this.setOutputData(0, min);\n  }\n\n  onAfterSettingsChange() {\n    super.onAfterSettingsChange();\n    this.onInputUpdated();\n  }\n}\nContainer.registerNodeType('statistics/min', MinNode);\n","import { Container } from '../../container';\nimport { Type } from '../../node-io';\nimport Utils from '../../utils';\nimport Statistics from './statistics';\nimport { NODE_INFO } from '../../node-info';\n\nclass MaxNode extends Statistics {\n  constructor() {\n    super();\n    this.title = NODE_INFO.statistics.max.title;\n    this.description = NODE_INFO.statistics.max.description;\n    this.addOutput('max', Type.NUMBER);\n  }\n\n  onInputUpdated() {\n    const data = this.getDefinedInputsOrSettingsValues();\n    const max = Utils.stat.max(data);\n    this.setOutputData(0, max);\n  }\n\n  onAfterSettingsChange() {\n    super.onAfterSettingsChange();\n    this.onInputUpdated();\n  }\n}\nContainer.registerNodeType('statistics/max', MaxNode);\n","import { Container } from '../../container';\nimport { Type } from '../../node-io';\nimport Utils from '../../utils';\nimport Statistics from './statistics';\nimport { NODE_INFO } from '../../node-info';\n\nclass SumNode extends Statistics {\n  constructor() {\n    super();\n    this.title = NODE_INFO.statistics.sum.title;\n    this.description = NODE_INFO.statistics.sum.description;\n    this.addOutput('sum', Type.NUMBER);\n  }\n\n  onInputUpdated() {\n    const data = this.getDefinedInputsOrSettingsValues();\n    const sum = Utils.stat.sum(data);\n    this.setOutputData(0, sum);\n  }\n\n  onAfterSettingsChange() {\n    super.onAfterSettingsChange();\n    this.onInputUpdated();\n  }\n}\nContainer.registerNodeType('statistics/sum', SumNode);\n","import { Container } from '../../container';\nimport { Type } from '../../node-io';\nimport Utils from '../../utils';\nimport Statistics from './statistics';\nimport { NODE_INFO } from '../../node-info';\n\nclass MedianNode extends Statistics {\n  constructor() {\n    super();\n    this.title = NODE_INFO.statistics.median.title;\n    this.description = NODE_INFO.statistics.median.description;\n    this.addOutput('median', Type.NUMBER);\n  }\n\n  onInputUpdated() {\n    const data = this.getDefinedInputsOrSettingsValues();\n    const median = Utils.stat.median(data);\n    this.setOutputData(0, median);\n  }\n\n  onAfterSettingsChange() {\n    super.onAfterSettingsChange();\n    this.onInputUpdated();\n  }\n}\nContainer.registerNodeType('statistics/median', MedianNode);\n","import { Container } from '../../container';\nimport { Type } from '../../node-io';\nimport Utils from '../../utils';\nimport Statistics from './statistics';\nimport { NODE_INFO } from '../../node-info';\n\nclass RangeNode extends Statistics {\n  constructor() {\n    super();\n    this.title = NODE_INFO.statistics.range.title;\n    this.description = NODE_INFO.statistics.range.description;\n    this.addOutput('range', Type.NUMBER);\n  }\n\n  onInputUpdated() {\n    const data = this.getDefinedInputsOrSettingsValues();\n    const range = Utils.stat.range(data);\n    this.setOutputData(0, range);\n  }\n\n  onAfterSettingsChange() {\n    super.onAfterSettingsChange();\n    this.onInputUpdated();\n  }\n}\nContainer.registerNodeType('statistics/range', RangeNode);\n","import { Container } from '../../container';\nimport { FlexibleNode } from '../../flexible-node';\nimport { NODE_INFO } from '../../node-info';\nimport { NodeSetting, SettingType, Type } from '../../node-io';\n\nclass RankNode extends FlexibleNode {\n  constructor() {\n    super();\n    this.dynamicOutputsExist = true;\n    this.dynamicSettingsExist = false;\n    this.dynamicInputsType = Type.NUMBER;\n    super.dynamicOutputsType = Type.NUMBER;\n    this.dynamicDefaultInputs = 5;\n    this.dynamicDefaultOutputs = 3;\n    this.title = NODE_INFO.statistics.rank.title;\n    this.description = NODE_INFO.statistics.rank.description;\n    this.settings['rank'] = NodeSetting.create({\n      description: 'Highest or Lowest',\n      type: SettingType.DROPDOWN,\n      config: {\n        items: [\n          { value: 'top', text: 'Rank Highest' },\n          { value: 'bottom', text: 'Rank Lowest' },\n        ],\n      },\n      value: 'top',\n    });\n  }\n\n  onAdded() {\n    this.updateTitle();\n    this.onInputUpdated();\n  }\n\n  onInputUpdated() {\n    let data = this.getDefinedInputValues();\n    data = data.sort((a, b) => a - b);\n    const outputCount = this.getOutputsCount();\n    if (this.settings['rank'].value === 'bottom') {\n      for (let i = 0; i < outputCount; i++) {\n        this.setOutputData(i, data[i]);\n      }\n    } else {\n      for (let i = 0; i < outputCount; i++) {\n        this.setOutputData(i, data[data.length - (i + 1)]);\n      }\n    }\n  }\n\n  onAfterSettingsChange() {\n    if (Number(this.settings['outputs'].value) > Number(this.settings['inputs'].value)) {\n      this.settings['outputs'].value = Number(this.settings['inputs'].value);\n    }\n    super.onAfterSettingsChange();\n    this.onInputUpdated();\n    this.updateTitle();\n  }\n\n  private updateTitle() {\n    if (this.settings['rank'].value === 'top') this.title = 'Rank (Highest)';\n    else if (this.settings['rank'].value === 'bottom') this.title = 'Rank (Lowest)';\n  }\n}\nContainer.registerNodeType('statistics/rank', RankNode);\n","import { Container } from '../../container';\nimport { Type } from '../../node-io';\nimport Utils from '../../utils';\nimport Statistics from './statistics';\nimport { NODE_INFO } from '../../node-info';\n\nclass AnyStatAllNode extends Statistics {\n  constructor() {\n    super();\n    this.title = NODE_INFO.statistics[\"stats-all\"].title;\n    this.description = NODE_INFO.statistics[\"stats-all\"].description;\n    this.addOutput('max', Type.NUMBER);\n    this.addOutput('min', Type.NUMBER);\n    this.addOutput('range', Type.NUMBER);\n    this.addOutput('sum', Type.NUMBER);\n    this.addOutput('mean', Type.NUMBER);\n    this.addOutput('median', Type.NUMBER);\n    this.addOutput('modes', Type.NUMBER);\n    this.addOutput('variance', Type.NUMBER);\n    this.addOutput('standardDeviation', Type.NUMBER);\n    this.addOutput('meanAbsoluteDeviation', Type.NUMBER);\n    this.addOutput('zScores', Type.NUMBER);\n  }\n\n  onInputUpdated() {\n    const a = this.getDefinedInputsOrSettingsValues();\n    this.setOutputData(0, Utils.stat.max(a));\n    this.setOutputData(1, Utils.stat.min(a));\n    this.setOutputData(2, Utils.stat.range(a));\n    this.setOutputData(3, Utils.stat.sum(a));\n    this.setOutputData(4, Utils.stat.mean(a));\n    this.setOutputData(5, Utils.stat.median(a));\n    this.setOutputData(6, Utils.stat.modes(a));\n    this.setOutputData(7, Utils.stat.variance(a));\n    this.setOutputData(8, Utils.stat.standardDeviation(a));\n    this.setOutputData(9, Utils.stat.meanAbsoluteDeviation(a));\n    this.setOutputData(10, Utils.stat.zScores(a));\n  }\n\n  onAfterSettingsChange() {\n    super.onAfterSettingsChange();\n    this.onInputUpdated();\n  }\n}\n\nContainer.registerNodeType('statistics/stats-all', AnyStatAllNode);\n","import { Container } from '../../container';\nimport { Node } from '../../node';\nimport { NODE_INFO } from '../../node-info';\nimport { NodeSetting, SettingType, Type } from '../../node-io';\n\nclass NumbersAverageNode extends Node {\n  values = [];\n  lastReset: boolean;\n  avg: number;\n  constructor() {\n    super();\n    this.title = NODE_INFO.streams[\"stream-average\"].title;\n    this.description =\n      `## Description\\n ` +\n      NODE_INFO.streams[\"stream-average\"].description + ` \\n ` +\n      ` ## Reset to null\\n ` +\n      `***Reset to null*** if set to option true and a true value on the node ***reset*** this will reset the node ***output*** to a value of null, If set to false it will keep the last node ***output*** value \\n `\n    this.addInput('value', Type.NUMBER);\n    this.addInput('reset', Type.BOOLEAN);\n    this.addOutput('output', Type.NUMBER);\n    this.settings['null'] = NodeSetting.create({\n      description: 'Reset to null',\n      value: false,\n      type: SettingType.BOOLEAN,\n    });\n    this.lastReset = false;\n  }\n\n  onInputUpdated() {\n    const reset = this.getInputData(1);\n    let val = this.getInputData(0);\n    const resetToNull = this.settings['null'].value;\n    if (reset && !this.lastReset) {\n      if (resetToNull) {\n        this.setOutputData(0, null);\n        this.values = [];\n        this.lastReset = reset;\n      } else {\n        this.values = [];\n        this.setOutputData(0, this.avg);\n        this.lastReset = reset;\n      }\n      return;\n    } else if (!reset && this.lastReset) {\n      this.lastReset = reset;\n      return;\n    }\n    if (val == null) return;\n    this.values.push(val);\n    let sum = this.values.reduce(function (a, b) {\n      return a + b;\n    });\n    let avg = sum / this.values.length;\n    this.avg = avg\n    this.setOutputData(0, this.avg);\n  }\n}\nContainer.registerNodeType('streams/stream-average', NumbersAverageNode);\n","import { Container } from '../../container';\nimport { Node } from '../../node';\nimport { NODE_INFO } from '../../node-info';\nimport { NodeSetting, SettingType, Type } from '../../node-io';\n\nclass NumbersHighestNode extends Node {\n  val: number;\n  lastReset: boolean;\n  constructor() {\n    super();\n    this.title = NODE_INFO.streams[\"stream-highest\"].title;\n    this.description = NODE_INFO.streams[\"stream-highest\"].description;\n    this.description =\n      `## Description\\n ` +\n      NODE_INFO.streams[\"stream-highest\"].description + ` \\n ` +\n      ` ## Reset to null\\n ` +\n      `***Reset to null*** if set to option true and a true value on the node ***reset*** this will reset the node ***output*** to a value of null, If set to false it will keep the last node ***output*** value \\n `\n\n    this.addInput('input', Type.NUMBER);\n    this.addInput('reset', Type.BOOLEAN);\n    this.addOutput('output', Type.NUMBER);\n    this.settings['null'] = NodeSetting.create({\n      description: 'Reset to null',\n      value: false,\n      type: SettingType.BOOLEAN,\n    });\n    this.lastReset = false;\n    this.val = null;\n  }\n\n  onInputUpdated() {\n    const reset = this.getInputData(1);\n    const resetToNull = this.settings['null'].value;\n    if (reset && !this.lastReset) {\n      if (resetToNull) {\n        this.setOutputData(0, null);\n        this.val = null\n        this.lastReset = reset;\n      } else {\n        this.setOutputData(0, this.val);\n        this.val = null\n        this.lastReset = reset;\n      }\n      return;\n    } else if (!reset && this.lastReset) {\n      this.lastReset = reset;\n      return;\n    }\n\n    let inputVal = this.getInputData(0);\n    if (inputVal == null) return;\n\n    if (this.val == null || this.val < inputVal) {\n      this.val = inputVal;\n      this.setOutputData(0, this.val);\n    }\n  }\n}\nContainer.registerNodeType('streams/stream-highest', NumbersHighestNode);\n","import { Container } from '../../container';\nimport { Node } from '../../node';\nimport { NODE_INFO } from '../../node-info';\nimport { NodeSetting, SettingType, Type } from '../../node-io';\n\nclass NumbersLowestNode extends Node {\n  val: number;\n  lastReset: boolean;\n\n  constructor() {\n    super();\n    this.title = NODE_INFO.streams.stack.title;\n    this.description =\n      `## Description\\n ` +\n      NODE_INFO.streams.stack.description + ` \\n ` +\n      ` ## Reset to null\\n ` +\n      `***Reset to null*** if set to option true and a true value on the node ***reset*** this will reset the node ***output*** to a value of null, If set to false it will keep the last node ***output*** value \\n `\n\n    this.addInput('input', Type.NUMBER);\n    this.addInput('reset', Type.BOOLEAN);\n    this.addOutput('output', Type.NUMBER);\n    this.settings['null'] = NodeSetting.create({\n      description: 'Reset to null',\n      value: false,\n      type: SettingType.BOOLEAN,\n    });\n    this.val = null;\n    this.lastReset = false;\n  }\n\n  onInputUpdated() {\n    const reset = this.getInputData(1);\n    const resetToNull = this.settings['null'].value;\n    if (reset && !this.lastReset) {\n      if (resetToNull) {\n        this.setOutputData(0, null);\n        this.val = null\n        this.lastReset = reset;\n      } else {\n        this.setOutputData(0, this.val);\n        this.val = null\n        this.lastReset = reset;\n      }\n      return;\n    } else if (!reset && this.lastReset) {\n      this.lastReset = reset;\n      return;\n    }\n\n    let inputVal = this.getInputData(0);\n    if (inputVal == null) return;\n\n    if (this.val == null || this.val > inputVal) {\n      this.val = inputVal;\n      this.setOutputData(0, this.val);\n    }\n  }\n}\nContainer.registerNodeType('streams/stream-lowest', NumbersLowestNode);\n","import { Container } from '../../container';\nimport { Node } from '../../node';\nimport { NODE_INFO } from '../../node-info';\nimport { NodeSetting, SettingType, Type } from '../../node-io';\n\nclass NumbersSumNode extends Node {\n  val = 0;\n  lastReset: boolean;\n  constructor() {\n    super();\n    this.title = NODE_INFO.streams[\"stream-sum\"].title;\n    this.description =\n      `## Description\\n ` +\n      NODE_INFO.streams[\"stream-sum\"].description + ` \\n ` +\n      ` ## Reset to null\\n ` +\n      `***Reset to null*** if set to option true and a true value on the node ***reset*** this will reset the node ***output*** to a value of null, If set to false it will keep the last node ***output*** value \\n `\n    this.addInput('input', Type.NUMBER);\n    this.addInput('reset', Type.BOOLEAN);\n    this.addOutput('output', Type.NUMBER);\n    this.settings['null'] = NodeSetting.create({\n      description: 'Reset to null',\n      value: false,\n      type: SettingType.BOOLEAN,\n    });\n    this.lastReset = false;\n  }\n\n  onInputUpdated() {\n    const reset = this.getInputData(1);\n    const resetToNull = this.settings['null'].value;\n    if (reset && !this.lastReset) {\n      if (resetToNull) {\n        this.setOutputData(0, null);\n        this.val = null\n        this.lastReset = reset;\n      } else {\n        this.setOutputData(0, this.val);\n        this.val = 0\n        this.lastReset = reset;\n      }\n      return;\n    } else if (!reset && this.lastReset) {\n      this.lastReset = reset;\n      return;\n    }\n    if (this.inputs[0].updated && this.inputs[0].data != null) this.val += this.inputs[0].data;\n    this.setOutputData(0, this.val, true);\n  }\n}\nContainer.registerNodeType('streams/stream-sum', NumbersSumNode);\n","import { Container } from '../../container';\nimport { FlexibleNode } from '../../flexible-node';\nimport { NODE_INFO } from '../../node-info';\nimport { Type } from '../../node-io';\nimport Utils from '../../utils';\n\nclass StreamMergeNode extends FlexibleNode {\n  val: number;\n  lastReset: boolean;\n\n  constructor() {\n    super();\n    this.dynamicSettingsExist = false;\n    this.dynamicInputsType = Type.ANY;\n    this.title = NODE_INFO.streams[\"stream-merge\"].title;\n    this.description = NODE_INFO.streams[\"stream-merge\"].description;\n    this.addOutput('output', Type.ANY);\n  }\n\n  onAdded() {\n    this.onInputUpdated();\n    this.size = this.computeSize();\n  }\n\n  onInputUpdated() {\n    const inputs = this.getInputsCount();\n    for (let i = this.dynamicInputStartPosition; i < inputs; i++) {\n      let inputValue = this.getInputData(i);\n      if (Utils.hasInput(inputValue)) {\n        if (this.inputs[i].updated) {\n          this.setOutputData(0, this.inputs[i].data);\n          return;\n        }\n      }\n    }\n  }\n\n  onAfterSettingsChange() {\n    super.onAfterSettingsChange();\n    this.onInputUpdated();\n  }\n}\nContainer.registerNodeType('streams/stream-merge', StreamMergeNode);\n","import { Container } from '../../container';\nimport { Node } from '../../node';\nimport { NODE_INFO } from '../../node-info';\nimport { NodeSetting, SettingType, Type } from '../../node-io';\n\nclass GateNode extends Node {\n  constructor() {\n    super();\n    this.title = NODE_INFO.streams.gate.title;\n    this.description = NODE_INFO.streams.gate.description;\n    this.addInput('input', Type.STRING);\n    this.addInput('open', Type.BOOLEAN);\n    this.addOutput('output', Type.STRING);\n    this.settings['send-null'] = NodeSetting.create({\n      description: 'Send null when closed',\n      value: false,\n      type: SettingType.BOOLEAN,\n    });\n  }\n\n  onInputUpdated() {\n    let key = this.getInputData(1);\n\n    if (key) this.setOutputData(0, this.getInputData(0));\n    else if (this.settings['send-null'].value && this.outputs[0].data != null)\n      this.setOutputData(0, null);\n  }\n\n  onAfterSettingsChange() {\n    this.onInputUpdated();\n  }\n}\nContainer.registerNodeType('streams/gate', GateNode);\n","import { Container } from '../../container';\nimport { Node } from '../../node';\nimport { Type } from '../../node-io';\nimport { NODE_INFO } from '../../node-info';\n\nclass StackNode extends Node {\n  data = [];\n  lastReset: boolean;\n\n  constructor() {\n    super();\n    this.title = NODE_INFO.streams.stack.title;\n    this.description = NODE_INFO.streams.stack.description;\n    this.addInput('input');\n    this.addInput('trigger', Type.BOOLEAN);\n    this.addInput('clear', Type.BOOLEAN);\n    this.addOutput('output');\n    this.addOutput('count', Type.NUMBER);\n    this.lastReset = false;\n  }\n\n  onInputUpdated() {\n    const reset = this.getInputData(2);\n    if (reset && !this.lastReset) {\n      this.data = [];\n      this.setOutputData(0, null);\n      this.setOutputData(1, 0);\n      this.lastReset = reset;\n      return;\n    } else if (!reset && this.lastReset) {\n      this.lastReset = reset;\n      return;\n    }\n\n    if (this.inputs[0].updated && this.inputs[0].data != null) {\n      this.data.push(this.inputs[0].data);\n      this.setOutputData(1, this.data.length);\n    }\n\n    if (this.inputs[1].updated && this.inputs[1].data == true) {\n      let val = this.data.length > 0 ? this.data.pop() : null;\n      this.setOutputData(0, val);\n      this.setOutputData(1, this.data.length);\n    }\n  }\n}\nContainer.registerNodeType('streams/stack', StackNode);\n","import { Container } from '../../container';\nimport { Node } from '../../node';\nimport { Type } from '../../node-io';\nimport { NODE_INFO } from '../../node-info';\n\nclass QueueNode extends Node {\n  data = [];\n  lastReset: boolean;\n\n  constructor() {\n    super();\n    this.title = NODE_INFO.streams.queue.title;\n    this.description = NODE_INFO.streams.queue.description;\n    this.addInput('input');\n    this.addInput('trigger', Type.BOOLEAN);\n    this.addInput('clear', Type.BOOLEAN);\n    this.addOutput('output');\n    this.addOutput('count', Type.NUMBER);\n    this.lastReset = false;\n  }\n\n  onInputUpdated() {\n    const reset = this.getInputData(2);\n    if (reset && !this.lastReset) {\n      this.data = [];\n      this.setOutputData(0, null);\n      this.setOutputData(1, 0);\n      this.lastReset = reset;\n      return;\n    } else if (!reset && this.lastReset) {\n      this.lastReset = reset;\n      return;\n    }\n\n    if (this.inputs[0].updated && this.inputs[0].data != null) {\n      this.data.unshift(this.inputs[0].data);\n      this.setOutputData(1, this.data.length);\n    }\n\n    if (this.inputs[1].updated && this.inputs[1].data == true) {\n      let val = this.data.length > 0 ? this.data.pop() : null;\n      this.setOutputData(0, val);\n      this.setOutputData(1, this.data.length);\n    }\n  }\n}\nContainer.registerNodeType('streams/queue', QueueNode);\n","import { Container } from '../../container';\nimport { Node } from '../../node';\nimport { NodeSetting, SettingType, Type } from '../../node-io';\nimport TimeUtils from '../../utils/time-utils';\nimport { NODE_INFO } from '../../node-info';\n\nclass DelayNode extends Node {\n  delayedValues = [];\n\n  constructor() {\n    super();\n    this.title = NODE_INFO.streams[\"stream-delay\"].title;\n    this.description = NODE_INFO.streams[\"stream-delay\"].description;\n    this.addInput('input');\n    this.addInputWithSettings('delay', Type.NUMBER, 1000, 'Delay (millis)', false);\n    this.addOutput('output');\n\n    this.settings['time'] = NodeSetting.create({\n      description: 'Units',\n      type: SettingType.DROPDOWN,\n      config: {\n        items: [\n          { value: 'milliseconds', text: 'Milliseconds' },\n          { value: 'seconds', text: 'Seconds' },\n          { value: 'minutes', text: 'Minutes' },\n          { value: 'hours', text: 'Hours' },\n        ],\n      },\n      value: 'seconds',\n    });\n    this.setSettingsConfig({\n      groups: [{ delay: { weight: 2 }, time: {} }],\n    });\n  }\n\n  onAdded() {\n    this.inputs[1]['name'] = `[delay] (${this.settings['time'].value})`;\n  }\n\n  onAfterSettingsChange() {\n    this.inputs[1]['name'] = `[delay] (${this.settings['time'].value})`;\n  }\n\n  onInputUpdated() {\n    if (this.inputs[0].updated)\n      this.delayedValues.push({\n        val: this.inputs[0].data,\n        time: Date.now(),\n      });\n  }\n\n  onExecute() {\n    if (this.delayedValues.length == 0) return;\n    let delay = this.getInputData(1);\n    delay = TimeUtils.timeConvert(delay, this.settings['time'].value);\n    const val = this.delayedValues[0];\n    if (Date.now() - val.time >= delay) {\n      this.delayedValues.shift();\n      this.setOutputData(0, val.val);\n      return;\n    }\n  }\n}\nContainer.registerNodeType('streams/stream-delay', DelayNode);\n","import { Container } from '../../container';\nimport { Node } from '../../node';\nimport { Type } from '../../node-io';\nimport { NODE_INFO } from '../../node-info';\n\nclass DelayMeterNode extends Node {\n  lastTime;\n  lastReset: boolean;\n\n  constructor() {\n    super();\n    this.title = NODE_INFO.streams[\"stream-delay-meter\"].title;\n    this.description = NODE_INFO.streams[\"stream-delay-meter\"].description;\n    this.addInput('input');\n    this.addInput('reset', Type.BOOLEAN);\n    this.addOutput('ms', Type.NUMBER);\n    this.lastReset = false;\n  }\n\n  onInputUpdated() {\n    const reset = this.getInputData(1);\n    if (reset && !this.lastReset) {\n      this.lastTime = null;\n      this.setOutputData(0, null);\n      this.lastReset = reset;\n      return;\n    } else if (!reset && this.lastReset) {\n      this.lastReset = reset;\n      return;\n    }\n\n    if (this.inputs[0].updated && this.inputs[0].data != null) {\n      if (this.lastTime != null) {\n        let delay = Date.now() - this.lastTime;\n        this.setOutputData(0, delay);\n      }\n\n      this.lastTime = Date.now();\n    }\n  }\n}\nContainer.registerNodeType('streams/stream-delay-meter', DelayMeterNode);\n","import { Container } from '../../container';\nimport { Node } from '../../node';\nimport { Type } from '../../node-io';\nimport { NODE_INFO } from '../../node-info';\n\nclass TimeFrequencyMeterNode extends Node {\n  count = 0;\n  countWas = 0;\n  lastReset: boolean;\n\n  constructor() {\n    super();\n    this.title = NODE_INFO.streams[\"frequency-meter\"].title;\n    this.description = NODE_INFO.streams[\"frequency-meter\"].description;\n    this.addInput('input');\n    this.addInput('reset', Type.BOOLEAN);\n    this.addOutput('events/sec', Type.NUMBER, undefined, { data: 0 });\n    this.lastReset = false;\n\n    setInterval(() => {\n      if (this.count != this.countWas) {\n        this.setOutputData(0, this.count);\n      }\n      this.countWas = this.count;\n      this.count = 0;\n    }, 1000);\n  }\n\n  onInputUpdated() {\n    const reset = this.getInputData(1);\n    if (reset && !this.lastReset) {\n      this.count = 0;\n      this.countWas = 0;\n      this.setOutputData(0, null);\n      this.lastReset = reset;\n      return;\n    } else if (!reset && this.lastReset) {\n      this.lastReset = reset;\n      return;\n    }\n\n    this.count++;\n  }\n}\nContainer.registerNodeType('streams/frequency-meter', TimeFrequencyMeterNode);\n","import { NodeTypeRegistry } from '../../node-type-registry';\nimport { Node } from '../../node';\nimport { NodeSetting, SettingType, Type } from '../../node-io';\nimport TimeUtils, { TIME_TYPE } from '../../utils/time-utils';\nimport { NODE_INFO } from '../../node-info';\n\nclass FlatlineNode extends Node {\n  lastValue;\n  timeoutFunc;\n\n  constructor() {\n    super();\n    this.title = NODE_INFO.streams[\"flatline\"].title;\n    this.description = NODE_INFO.streams[\"flatline\"].description;\n    this.addInput('input', Type.ANY);\n    this.addInputWithSettings('interval', Type.NUMBER, 30, 'Interval');\n    this.addOutput('output', Type.BOOLEAN);\n    this.settings['time'] = NodeSetting.create({\n      description: 'Units',\n      type: SettingType.DROPDOWN,\n      config: {\n        items: [\n          { value: TIME_TYPE.MILLISECONDS, text: 'Milliseconds' },\n          { value: TIME_TYPE.SECONDS, text: 'Seconds' },\n          { value: TIME_TYPE.MINUTES, text: 'Minutes' },\n          { value: TIME_TYPE.HOURS, text: 'Hours' },\n        ],\n      },\n      value: TIME_TYPE.MINUTES,\n    });\n    this.setSettingsConfig({\n      groups: [{ interval: { weight: 2 }, time: {} }],\n    });\n  }\n\n  onAdded() {\n    this.setOutputData(0, false);\n    this.inputs[1]['name'] = `[interval] (${this.settings['time'].value})`;\n    this.onInputUpdated();\n  }\n  \n  onExecute(){\n    //this.onInputUpdated();\n  }\n\n  onInputUpdated() {\n    const input = this.getInputData(0);\n    if (this.inputs[0].updated && input !== this.lastValue) {\n      this.lastValue = input;\n      this.setOutputData(0, false);\n      const interval = TimeUtils.timeConvert(this.getInputData(1), this.settings['time'].value);\n      if (this.timeoutFunc) clearTimeout(this.timeoutFunc);\n      this.timeoutFunc = setTimeout(() => {\n        this.setOutputData(0, true);\n      }, interval);\n    }\n  }\n\n  onAfterSettingsChange() {\n    this.inputs[1]['name'] = `[interval] (${this.settings['time'].value})`;\n    this.setOutputData(0, false);\n    const interval = TimeUtils.timeConvert(this.getInputData(1), this.settings['time'].value);\n    if (this.timeoutFunc) clearTimeout(this.timeoutFunc);\n    this.timeoutFunc = setTimeout(() => {\n      this.setOutputData(0, true);\n    }, interval);\n  }\n}\nNodeTypeRegistry.registerNodeType('streams/flatline', FlatlineNode);\n","import { isNull, isString } from '../../../utils/helper';\nimport { Container } from '../../container';\nimport { Node } from '../../node';\nimport { Type } from '../../node-io';\nimport Utils from '../../utils';\nimport tagRefs from '../../utils/points/point-ref-utils';\nimport { NODE_INFO } from '../../node-info';\n\nclass StringCaseAcronymsNode extends Node {\n  constructor() {\n    super();\n    this.title = NODE_INFO.string[\"string-acronyms\"].title;\n    this.description = NODE_INFO.string[\"string-acronyms\"].description;\n    this.addInput('input', Type.STRING);\n    this.addOutput('output', Type.STRING);\n    // this.setOutputData(0, null);\n  }\n\n  onAdded() {\n    this.onInputUpdated();\n  }\n\n  onInputUpdated() {\n    const input = this.getInputData(0);\n    if (!Utils.hasInput(input)) {\n      this.setOutputData(0, null, true);\n      return;\n    }\n    if (isNull(input)) return\n    let result:string;\n    let obj = tagRefs.acronyms\n    if (isString(input)) {\n      for (let key in obj) {\n        if (obj[key].toLowerCase() === input.toLowerCase()) {\n          result = obj[key].toUpperCase()\n        }\n      };\n      this.setOutputData(0, result, true);\n    }\n  }\n\n  onAfterSettingsChange() {\n    this.onInputUpdated();\n  }\n\n\n}\nContainer.registerNodeType('string/string-acronyms', StringCaseAcronymsNode);\n","import { Container } from '../../container';\nimport { Node } from '../../node';\nimport { NodeSetting, SettingType, Type } from '../../node-io';\nimport Utils from '../../utils';\nimport jsonStringCompare from '../../utils/string-json-compare-utils';\nimport { NODE_INFO } from '../../node-info';\n\nenum compareType {\n  Equals = 'Equals',\n  NotEquals = 'Not Equal',\n  GreaterThanEqual = 'Greater Than Equal',\n  GreaterThan = 'Greater Than',\n  LessThanEqual = 'Less Than Equal',\n  LessThan = 'Less Than',\n  Includes = 'Includes',\n  startsWith = 'Starts With',\n  endsWith = 'Ends With'\n}\nclass StringCompareNode extends Node {\n  constructor() {\n    super();\n    this.title = NODE_INFO.string[\"string-compare\"].title;\n    this.description = NODE_INFO.string[\"string-compare\"].description;\n    this.addInput('input', Type.STRING);\n    this.addInputWithSettings('comparison-to', Type.STRING, '', 'Comparison Value');\n    this.addOutput('match', Type.BOOLEAN);\n    this.addOutput('output', Type.BOOLEAN);\n    this.setOutputData(0, null);\n    this.setOutputData(1, null);\n    this.settings['function'] = NodeSetting.create({\n      description: 'Comparison Type',\n      type: SettingType.DROPDOWN,\n      config: {\n        items: [\n          { value: compareType.Equals, text: compareType.Equals },\n          { value: compareType.NotEquals, text: compareType.NotEquals },\n          { value: compareType.GreaterThanEqual, text: compareType.GreaterThanEqual },\n          { value: compareType.GreaterThan, text: compareType.GreaterThan },\n          { value: compareType.LessThanEqual, text: compareType.LessThanEqual },\n          { value: compareType.LessThan, text: compareType.LessThan },\n          { value: compareType.Includes, text: compareType.Includes },\n          { value: compareType.startsWith, text: compareType.startsWith },\n          { value: compareType.endsWith, text: compareType.endsWith },\n        ],\n      },\n      value: compareType.Equals,\n    });\n    this.settings['isNumber'] = NodeSetting.create({\n      description: 'Comparison value is a number',\n      value: false,\n      type: SettingType.BOOLEAN,\n    });\n    this.settings['passNull'] = NodeSetting.create({\n      description: 'Send null if not a match',\n      value: false,\n      type: SettingType.BOOLEAN,\n    });\n    this.settings['null'] = NodeSetting.create({\n      description: 'Block null messages on input',\n      value: false,\n      type: SettingType.BOOLEAN,\n    });\n  }\n\n  onAdded() {\n    this.onInputUpdated();\n  }\n\n  onInputUpdated() {\n    const string1 = this.getInputData(0);\n    const string2 = this.getInputData(1);\n    const resetToNull = this.settings['null'].value;\n    if (!Utils.hasInput(string1)) {\n      this.setOutputData(0, null);\n      return;\n    }\n    if (string1 === null && !resetToNull) {\n      return;\n    }\n    const out = jsonStringCompare.compare(this, string1, string2)\n    if (out) {\n      this.setOutputData(0, true);\n      this.setOutputData(1, string1);\n    } else if (this.settings['passNull'].value === true) {\n      this.setOutputData(0, null);\n      this.setOutputData(1, null);\n    } else {\n      this.setOutputData(0, false);\n      this.setOutputData(1, string1);\n    }\n\n  }\n\n  onAfterSettingsChange() {\n    const inputType = this.settings['function'].value\n    const title = \"String Comparison\"\n    this.title = `${title} Compare (${inputType})`;\n    this.broadcastTitleToClients();\n    this.onInputUpdated();\n  }\n\n\n}\nContainer.registerNodeType('string/string-compare', StringCompareNode);\n\n\n\n","import { Container } from '../../container';\nimport { Node } from '../../node';\nimport { Type } from '../../node-io';\nimport { NODE_INFO } from '../../node-info';\n\nclass TextCutSubstringNode extends Node {\n  constructor() {\n    super();\n    this.title = NODE_INFO.string[\"cut-substring\"].title;\n    this.description = NODE_INFO.string[\"cut-substring\"].description;\n    this.addInput('input', Type.STRING);\n    this.addInputWithSettings('start', Type.NUMBER, 0, 'Start', false);\n    this.addInputWithSettings('length', Type.NUMBER, 1, 'Length', false);\n    this.addOutput('output', Type.STRING);\n  }\n\n  onAdded() {\n    this.onInputUpdated();\n  }\n\n  onInputUpdated() {\n    const text = this.getInputData(0);\n    const start = this.getInputData(1);\n    const length = this.getInputData(2);\n    if (text != null && start != null && length != null) {\n      this.setOutputData(0, text.substr(start, length));\n    } else this.setOutputData(0, null);\n  }\n\n  onAfterSettingsChange() {\n    this.onInputUpdated();\n  }\n}\nContainer.registerNodeType('string/cut-substring', TextCutSubstringNode);\n","import { Container } from '../../container';\nimport { FlexibleNode } from '../../flexible-node';\nimport { Type } from '../../node-io';\nimport { NODE_INFO } from '../../node-info';\n\nclass StringJoinNode extends FlexibleNode {\n  constructor() {\n    super();\n    this.dynamicInputsType = Type.STRING;\n    super.dynamicInputsStartName = 'string';\n    this.title = NODE_INFO.string[\"string-join\"].title;\n    this.description = NODE_INFO.string[\"string-join\"].description;\n    this.addOutput('output', Type.STRING);\n    this.setOutputData(0, null);\n  }\n\n  onAdded() {\n    this.size = this.computeSize();\n    this.onInputUpdated();\n  }\n\n  onInputUpdated() {\n    const inputs = this.getInputsCount();\n    let output = '';\n    for (let i = this.dynamicInputStartPosition; i < inputs; i++) {\n      output = output.concat(this.getInputData(i));\n    }\n    this.setOutputData(0, output, true);\n  }\n\n  onAfterSettingsChange() {\n    super.onAfterSettingsChange();\n    this.onInputUpdated();\n  }\n}\n\nContainer.registerNodeType('string/string-join', StringJoinNode);\n","import { Container } from '../../container';\nimport { Node } from '../../node';\nimport { Type } from '../../node-io';\nimport { NODE_INFO } from '../../node-info';\n\nclass TextStringLengthNode extends Node {\n  constructor() {\n    super();\n    this.title = NODE_INFO.string[\"string-length\"].title;\n    this.description = NODE_INFO.string[\"string-length\"].description;\n    this.addInput('input', Type.STRING);\n    this.addOutput('output', Type.NUMBER);\n  }\n\n  onAdded() {\n    this.onInputUpdated();\n  }\n\n  onInputUpdated() {\n    let val = this.getInputData(0);\n    if (val != null) this.setOutputData(0, val.length);\n    else this.setOutputData(0, null);\n  }\n}\nContainer.registerNodeType('string/string-length', TextStringLengthNode);\n","import { Container } from '../../container';\nimport { Node } from '../../node';\nimport { NODE_INFO } from '../../node-info';\nimport { Side } from '../../node-interface';\nimport { NodeSetting, SettingType, Type } from '../../node-io';\n\nclass StringIndexOfNode extends Node {\n  constructor() {\n    super();\n    this.title = NODE_INFO.string[\"string-index-of\"].title;\n    this.description = NODE_INFO.string[\"string-index-of\"].description;\n    this.addInputWithSettings('input', Type.STRING, '', 'Input Value', false);\n    this.addInputWithSettings('searchFor', Type.STRING, '', 'Search For Value', false);\n    this.addOutput('startIndex', Type.NUMBER);\n    this.addOutput('endIndex', Type.NUMBER);\n    this.setOutputData(0, null);\n    this.setOutputData(1, null);\n    this.settings['input'] = NodeSetting.create({\n      description: 'string1 Value',\n      value: '',\n      type: SettingType.STRING,\n    });\n    this.settings['searchFor'] = NodeSetting.create({\n      description: 'Search For Value',\n      value: '',\n      type: SettingType.STRING,\n    });\n  }\n\n  onAdded() {\n    this.onInputUpdated();\n  }\n\n  onInputUpdated() {\n    const input = this.getInputData(0);\n    const searchFor = this.getInputData(1);\n    const index = input.indexOf(searchFor);\n    const length = searchFor.length;\n    if (index < 0) {\n      this.setOutputData(0, null, true);\n      this.setOutputData(1, null, true);\n    } else {\n      this.setOutputData(0, index, true);\n      this.setOutputData(1, index + length, true);\n    }\n  }\n\n  onAfterSettingsChange() {\n    if (this.side !== Side.server) return;\n    this.onInputUpdated();\n  }\n}\nContainer.registerNodeType('string/string-index-of', StringIndexOfNode);\n","import { Container } from '../../container';\nimport { Node } from '../../node';\nimport { Type } from '../../node-io';\nimport { NODE_INFO } from '../../node-info';\n\nclass TextCharAtIndexNode extends Node {\n  constructor() {\n    super();\n    this.title = NODE_INFO.string[\"char-at-index\"].title;\n    this.description = NODE_INFO.string[\"char-at-index\"].description;\n    this.addInput('input', Type.STRING);\n    this.addInputWithSettings('index', Type.NUMBER, 0, 'Index', false);\n    this.addOutput('output', Type.STRING);\n  }\n\n  onAdded() {\n    this.onInputUpdated();\n  }\n\n  onInputUpdated() {\n    const text = this.getInputData(0);\n    const index = this.getInputData(1);\n    if (text != null && index != null) {\n      if (index === -1) this.setOutputData(0, text.slice(-1));\n      else this.setOutputData(0, text.slice(index, index + 1));\n    } else this.setOutputData(0, null);\n  }\n\n  onAfterSettingsChange() {\n    this.onInputUpdated();\n  }\n}\nContainer.registerNodeType('string/char-at-index', TextCharAtIndexNode);\n","import { Container } from '../../container';\nimport { Node } from '../../node';\nimport { Type } from '../../node-io';\nimport { NODE_INFO } from '../../node-info';\n\nclass TextSplitStringsNode extends Node {\n  currentIndex = 0;\n  lastStart:boolean;\n  lastNext:boolean;\n\n  constructor() {\n    super();\n    this.title = NODE_INFO.string[\"string-split\"].title;\n    this.description = NODE_INFO.string[\"string-split\"].description;\n    this.addInput('input', Type.STRING);\n    this.addInputWithSettings('separator', Type.STRING, '', 'Separator Value', false);\n    this.addInput('start', Type.BOOLEAN);\n    this.addInput('next', Type.BOOLEAN);\n    this.addOutput('output', Type.STRING);\n    this.addOutput('left', Type.NUMBER);\n    this.setOutputData(0, null);\n    this.setOutputData(1, 0);\n  }\n\n  onCreated() {\n    this.lastStart = false;\n    this.lastNext = false;\n  }\n\n  onAdded() {\n    this.onInputUpdated();\n  }\n\n  onInputUpdated() {\n    const start = this.getInputData(2) || false;\n    const next = this.getInputData(3) || false;\n\n    if (this.inputs[2].updated && start && !this.lastStart) {\n      this.currentIndex = 0;\n      this.splitNext();\n    }\n    this.lastStart = start;\n\n    if (this.inputs[3].updated && next && !this.lastNext) this.splitNext();\n    this.lastNext = next;\n  }\n\n  onAfterSettingsChange() {\n    this.onInputUpdated();\n  }\n\n  splitNext() {\n    const text = this.getInputData(0);\n    const separator = this.getInputData(1);\n    if (text == null || separator == null) return;\n\n    const splittedText = text.split(separator);\n    if (this.currentIndex >= splittedText.length) return;\n\n    this.setOutputData(0, splittedText[this.currentIndex]);\n    this.setOutputData(1, splittedText.length - this.currentIndex - 1);\n\n    this.currentIndex++;\n  }\n}\nContainer.registerNodeType('string/string-split', TextSplitStringsNode);\n","import { isNull, isString } from '../../../utils/helper';\nimport { Container } from '../../container';\nimport { Node } from '../../node';\nimport { NODE_INFO } from '../../node-info';\nimport { NodeSetting, SettingType, Type } from '../../node-io';\nimport Utils from '../../utils';\n\nclass StringCaseChangeNode extends Node {\n  conversionFunction;\n  constructor() {\n    super();\n    this.title = NODE_INFO.string[\"string-case\"].title;\n    this.description = NODE_INFO.string[\"string-case\"].description;\n    this.addInput('input', Type.STRING);\n    this.addOutput('output', Type.STRING);\n    this.setOutputData(0, null);\n    this.settings['function'] = NodeSetting.create({\n      description: 'Select Case',\n      type: SettingType.DROPDOWN,\n      config: {\n        items: [\n          { value: 'lower', text: 'Lower Case' },\n          { value: 'upper', text: 'Upper Case' },\n          { value: 'first_upper', text: 'First Characters to Upper Case' },\n        ],\n      },\n      value: 'lower',\n    });\n  }\n\n  onAdded() {\n    this.setTitleAndConversionFunction();\n    this.onInputUpdated();\n  }\n\n  toTitleCase = (phrase: string): string => {\n    if (isString(phrase) && !isNull(phrase)) {\n      return phrase\n        .toLowerCase()\n        .split(' ')\n        .map(word => word.charAt(0).toUpperCase() + word.slice(1))\n        .join(' ');\n    } else return null\n  };\n\n  onInputUpdated() {\n    const input = this.getInputData(0);\n    if (!Utils.hasInput(input)) {\n      this.setOutputData(0, null, true);\n      return;\n    }\n    this.setOutputData(0, this.conversionFunction(input), true);\n  }\n\n  onAfterSettingsChange() {\n    this.setTitleAndConversionFunction();\n    this.onInputUpdated();\n  }\n\n  setTitleAndConversionFunction() {\n    const inputType = this.settings['function'].value;\n    switch (inputType) {\n      case 'first_upper':\n        this.title = 'String Case (First Character to Upper)';\n        this.conversionFunction = s1 => {\n          return this.toTitleCase(s1);\n        };\n        break;\n      case 'lower':\n        this.title = 'String Case (Lower)';\n        this.conversionFunction = s1 => {\n          return s1.toLowerCase();\n        };\n        break;\n      case 'upper':\n        this.title = 'String Case (Upper)';\n        this.conversionFunction = s1 => {\n          return s1.toUpperCase();\n        };\n        break;\n      default:\n        this.title = 'String Case (Lower)';\n        this.conversionFunction = s1 => {\n          return s1.toLowerCase();\n        };\n    }\n  }\n}\nContainer.registerNodeType('string/string-case', StringCaseChangeNode);\n","import { Container } from '../../container';\nimport { Node } from '../../node';\nimport { Type } from '../../node-io';\nimport { NODE_INFO } from '../../node-info';\n\nclass TextASCIICodeNode extends Node {\n  constructor() {\n    super();\n    this.title = NODE_INFO.string[\"char-to-ascii\"].title;\n    this.description = NODE_INFO.string[\"char-to-ascii\"].description;\n    this.addInput('input', Type.STRING);\n    this.addOutput('output', Type.NUMBER);\n  }\n\n  onAdded() {\n    this.onInputUpdated();\n  }\n\n  onInputUpdated() {\n    let val = this.getInputData(0);\n\n    if (val != null) this.setOutputData(0, val.charCodeAt(0));\n    else this.setOutputData(0, null);\n  }\n}\nContainer.registerNodeType('string/char-to-ascii', TextASCIICodeNode);\n","import { Container } from '../../container';\nimport { Node } from '../../node';\nimport { Type } from '../../node-io';\nimport { NODE_INFO } from '../../node-info';\n\nclass TextASCIICharNode extends Node {\n  constructor() {\n    super();\n    this.title = NODE_INFO.string[\"ascii-to-char\"].title;\n    this.description = NODE_INFO.string[\"ascii-to-char\"].description;\n    this.addInput('input', Type.NUMBER);\n    this.addOutput('output', Type.STRING);\n  }\n\n  onAdded() {\n    this.onInputUpdated();\n  }\n\n  onInputUpdated() {\n    let val = this.getInputData(0);\n\n    if (val != null) this.setOutputData(0, String.fromCharCode(val));\n    else this.setOutputData(0, null);\n  }\n}\nContainer.registerNodeType('string/ascii-to-char', TextASCIICharNode);\n","import { Container } from '../../container';\nimport { Node } from '../../node';\nimport { NODE_INFO } from '../../node-info';\nimport { NodeSetting, SettingType, Type } from '../../node-io';\n\nclass StringBufferNode extends Node {\n  useTrigger: boolean;\n  bufferData: string;\n  lastSend:boolean;\n  lastClear:boolean;\n  lastAdd:boolean;\n\n\n  constructor() {\n    super();\n\n    this.title = NODE_INFO.string[\"string-buffer\"].title;\n    this.description = NODE_INFO.string[\"string-buffer\"].description;\n\n    this.addInput('input', Type.STRING);\n    this.addInput('sendBuffer', Type.BOOLEAN);\n    this.addInput('clearBuffer', Type.BOOLEAN);\n    this.addInput('addToBuffer', Type.BOOLEAN);\n    this.addOutput('output', Type.STRING);\n    this.addOutput('currentBuffer', Type.STRING);\n\n    this.settings['useTrigger'] = NodeSetting.create({\n      description: 'Select a Buffer Input Method',\n      type: SettingType.DROPDOWN,\n      config: {\n        items: [\n          { value: true, text: 'Add Input to Buffer When Triggered' },\n          { value: false, text: 'Collect all Input Messages (no Trigger)' },\n        ],\n      },\n      value: true,\n    });\n    this.useTrigger = true;\n    this.bufferData = '';\n  }\n\n  onCreated() {\n    this.lastSend = false;\n    this.lastClear = false;\n    this.lastAdd = false;\n  }\n\n  onAdded() {\n    this.onInputUpdated();\n  }\n\n  onInputUpdated() {\n    const send = this.getInputData(1) || false;\n    const clear = this.getInputData(2) || false;\n    let addTrigger = false;\n    if (this.useTrigger) addTrigger = this.getInputData(3) || false;\n\n    if (this.inputs[1].updated && send && !this.lastSend) {\n      this.setOutputData(0, this.bufferData);\n      this.bufferData = '';\n    }\n    this.lastSend = send;\n\n    if (this.inputs[2].updated && clear && !this.lastClear) this.bufferData = '';\n    this.lastClear = clear;\n\n    if (\n      (!this.useTrigger && this.inputs[0].updated) ||\n      (this.useTrigger && this.inputs[3].updated && addTrigger && !this.lastAdd)\n    ) {\n      const input = this.getInputData(0);\n      if (input == null) return;\n      this.bufferData += String(input);\n    }\n    this.lastAdd = addTrigger;\n\n    this.setOutputData(1, this.bufferData);\n  }\n\n  onAfterSettingsChange() {\n    const triggerInput = this.settings['useTrigger'].value;\n    if (triggerInput !== this.useTrigger) {\n      if (triggerInput) this.addInput('addToBuffer', Type.BOOLEAN);\n      else this.removeInput(3);\n    }\n    this.useTrigger = triggerInput;\n    this.onInputUpdated();\n  }\n}\nContainer.registerNodeType('string/string-buffer', StringBufferNode);\n","import { Container } from '../../container';\nimport { Node } from '../../node';\nimport { NodeSetting, SettingType, Type } from '../../node-io';\nimport Utils from '../../utils';\nimport { NODE_INFO } from '../../node-info';\n\nclass BoolSwitchNode extends Node {\n\n  constructor() {\n    super();\n    this.title = NODE_INFO.switch[\"bool-switch\"].title;\n    this.description = NODE_INFO.switch[\"bool-switch\"].description;\n    this.addInput('switch', Type.BOOLEAN);\n    this.addInput('[inTrue]', Type.BOOLEAN);\n    this.addInput('[inFalse]', Type.BOOLEAN);\n    this.addOutput('output', Type.BOOLEAN);\n    this.settings['inTrue'] = NodeSetting.create({\n      description: 'True Value',\n      type: SettingType.DROPDOWN,\n      config: {\n        items: [\n          { value: false, text: 'false' },\n          { value: true, text: 'true' },\n          { value: null, text: 'null' },\n        ],\n      },\n      value: null,\n    });\n    this.settings['inFalse'] = NodeSetting.create({\n      description: 'False Value',\n      type: SettingType.DROPDOWN,\n      config: {\n        items: [\n          { value: false, text: 'false' },\n          { value: true, text: 'true' },\n          { value: null, text: 'null' },\n        ],\n      },\n      value: null,\n    });\n  }\n\n  onAdded() {\n \n    this.onInputUpdated();\n  }\n\n  onExecute(){\n    //this.onInputUpdated();\n  }\n\n  onInputUpdated() {\n    let select = this.getInputData(0);\n    if (!Utils.hasInput(select)) {\n      this.setOutputData(0, null);\n      return;\n    }\n    let inA = this.getInputData(1);\n    if (!Utils.hasInput(inA)) inA = this.settings['inTrue'].value;\n    let inB = this.getInputData(2);\n    if (!Utils.hasInput(inB)) inB = this.settings['inFalse'].value;\n\n    if (select) this.setOutputData(0, inA);\n    else this.setOutputData(0, inB);\n  }\n  onAfterSettingsChange() {\n    this.onInputUpdated();\n  }\n}\nContainer.registerNodeType('switch/bool-switch', BoolSwitchNode);\n","import { Container } from '../../container';\nimport { Node } from '../../node';\nimport { Type } from '../../node-io';\nimport Utils from '../../utils';\nimport { NODE_INFO } from '../../node-info';\n\nclass NumSwitchNode extends Node {\n\n  constructor() {\n    super();\n    this.title = NODE_INFO.switch[\"num-switch\"].title;\n    this.description = NODE_INFO.switch[\"num-switch\"].description;\n    this.addInput('switch', Type.BOOLEAN);\n    this.addInputWithSettings('inTrue', Type.NUMBER, null, 'True Value');\n    this.addInputWithSettings('inFalse', Type.NUMBER, null, 'False Value');\n    this.addOutput('output', Type.NUMBER);\n  }\n\n  onAdded() {\n \n    this.onInputUpdated();\n  }\n\n  onExecute(){\n    //this.onInputUpdated();\n  }\n\n  onInputUpdated() {\n    let select = this.getInputData(0);\n    if (!Utils.hasInput(select)) {\n      this.setOutputData(0, null);\n      return;\n    }\n    const inA = this.getInputData(1);\n    const inB = this.getInputData(2);\n    if (select) this.setOutputData(0, inA);\n    else this.setOutputData(0, inB);\n  }\n\n  onAfterSettingsChange() {\n    this.onInputUpdated();\n  }\n}\nContainer.registerNodeType('switch/num-switch', NumSwitchNode);\n","import { Container } from '../../container';\nimport { Node } from '../../node';\nimport { Type } from '../../node-io';\nimport Utils from '../../utils';\nimport { NODE_INFO } from '../../node-info';\n\nclass StringSwitchNode extends Node {\n\n  constructor() {\n    super();\n    this.title = NODE_INFO.switch[\"string-switch\"].title;\n    this.description = NODE_INFO.switch[\"string-switch\"].description;\n    this.addInput('switch', Type.BOOLEAN);\n    this.addInputWithSettings('inTrue', Type.STRING, '', 'True Value');\n    this.addInputWithSettings('inFalse', Type.STRING, '', 'False Value');\n    this.addOutput('output', Type.NUMBER);\n  }\n\n  onAdded() {\n \n    this.onInputUpdated();\n  }\n\n  onExecute(){\n    //this.onInputUpdated();\n  }\n\n  onInputUpdated() {\n    let select = this.getInputData(0);\n    if (!Utils.hasInput(select)) {\n      this.setOutputData(0, null);\n      return;\n    }\n    const inA = this.getInputData(1);\n    const inB = this.getInputData(2);\n    if (select) this.setOutputData(0, inA);\n    else this.setOutputData(0, inB);\n  }\n\n  onAfterSettingsChange() {\n    this.onInputUpdated();\n  }\n}\nContainer.registerNodeType('switch/string-switch', StringSwitchNode);\n","import { Container } from '../../container';\nimport { FlexibleNode } from '../../flexible-node';\nimport { NODE_INFO } from '../../node-info';\nimport { Type } from '../../node-io';\nimport Utils from '../../utils';\n\nclass BoolSelectNode extends FlexibleNode {\n\n  constructor() {\n    super();\n    this.dynamicInputsType = Type.BOOLEAN;\n    super.dynamicInputStartPosition = 1;\n    this.title = NODE_INFO.switch[\"bool-select\"].title;\n    this.description = NODE_INFO.switch[\"bool-select\"].description;\n    this.addInput('select', Type.NUMBER);\n    this.addOutput('output', Type.BOOLEAN);\n  }\n\n  onAdded() {\n \n    this.size = this.computeSize();\n    this.onInputUpdated();\n  }\n\n  onExecute(){\n    //this.onInputUpdated();\n  }\n\n  onInputUpdated() {\n    const select = this.getInputData(0);\n    if (\n      !Utils.hasInput(select) ||\n      select < this.dynamicInputStartPosition ||\n      select > this.getInputsCount() - this.dynamicInputStartPosition\n    ) {\n      this.setOutputData(0, null);\n      return;\n    }\n    this.setOutputData(0, this.getInputData(select));\n  }\n\n  onAfterSettingsChange() {\n    super.onAfterSettingsChange();\n    this.onInputUpdated();\n  }\n}\nContainer.registerNodeType('switch/bool-select', BoolSelectNode);\n","import { Container } from '../../container';\nimport { FlexibleNode } from '../../flexible-node';\nimport { NODE_INFO } from '../../node-info';\nimport { Type } from '../../node-io';\nimport Utils from '../../utils';\n\nclass NumSelectNode extends FlexibleNode {\n\n  constructor() {\n    super();\n    this.dynamicInputsType = Type.NUMBER;\n    super.dynamicInputStartPosition = 1;\n    this.title = NODE_INFO.switch[\"num-select\"].title;\n    this.description = NODE_INFO.switch[\"num-select\"].description;\n    this.addInput('select', Type.NUMBER);\n    this.addOutput('output', Type.NUMBER);\n  }\n\n  onAdded() {\n \n    this.size = this.computeSize();\n    this.onInputUpdated();\n  }\n\n  onExecute(){\n    //this.onInputUpdated();\n  }\n\n  onInputUpdated() {\n    const select = this.getInputData(0);\n    if (\n      !Utils.hasInput(select) ||\n      select < this.dynamicInputStartPosition ||\n      select > this.getInputsCount() - this.dynamicInputStartPosition\n    ) {\n      this.setOutputData(0, null);\n      return;\n    }\n    this.setOutputData(0, this.getInputData(select));\n  }\n\n  onAfterSettingsChange() {\n    super.onAfterSettingsChange();\n    this.onInputUpdated();\n  }\n}\nContainer.registerNodeType('switch/num-select', NumSelectNode);\n","import { Container } from '../../container';\nimport { FlexibleNode } from '../../flexible-node';\nimport { NODE_INFO } from '../../node-info';\nimport { Type } from '../../node-io';\nimport Utils from '../../utils';\n\nclass StringSelectNode extends FlexibleNode {\n\n  constructor() {\n    super();\n    this.dynamicInputsType = Type.STRING;\n    super.dynamicInputStartPosition = 1;\n    this.title = NODE_INFO.switch[\"string-select\"].title;\n    this.description = NODE_INFO.switch[\"string-select\"].description; \n    this.addInput('select', Type.NUMBER);\n    this.addOutput('output', Type.STRING);\n  }\n\n  onAdded() {\n \n    this.size = this.computeSize();\n    this.onInputUpdated();\n  }\n\n  onExecute(){\n    //this.onInputUpdated();\n  }\n\n  onInputUpdated() {\n    const select = this.getInputData(0);\n    if (\n      !Utils.hasInput(select) ||\n      select < this.dynamicInputStartPosition ||\n      select > this.getInputsCount() - this.dynamicInputStartPosition\n    ) {\n      this.setOutputData(0, null);\n      return;\n    }\n    this.setOutputData(0, this.getInputData(select));\n  }\n\n  onAfterSettingsChange() {\n    super.onAfterSettingsChange();\n    this.onInputUpdated();\n  }\n}\nContainer.registerNodeType('switch/string-select', StringSelectNode);\n","import { Container } from '../../container';\nimport { FlexibleNode } from '../../flexible-node';\nimport { Type } from '../../node-io';\nimport { NODE_INFO } from '../../node-info';\n\nexport class BoolOutputSelectNode extends FlexibleNode {\n  constructor() {\n    super();\n    this.dynamicOutputsExist = true;\n    this.dynamicInputsExist = false;\n    this.dynamicSettingsExist = false;\n    super.dynamicOutputsType = Type.BOOLEAN;\n    this.title = NODE_INFO.switch[\"bool-output-select\"].title;\n    this.description = NODE_INFO.switch[\"bool-output-select\"].description;\n    this.addInput('select', Type.NUMBER);\n    this.addInput('input', Type.BOOLEAN);\n  }\n\n  onInputUpdated() {\n    let active = this.getInputData(0);\n    let val = this.getInputData(1);\n\n    if (active < 0 || active >= this.getOutputsCount()) {\n      this.debugWarn('Defined active output does not exist');\n      return;\n    }\n\n    this.setOutputData(active, val);\n  }\n}\nContainer.registerNodeType('switch/bool-output-select', BoolOutputSelectNode);\n","import { Container } from '../../container';\nimport { FlexibleNode } from '../../flexible-node';\nimport { Type } from '../../node-io';\nimport { NODE_INFO } from '../../node-info';\n\nexport class NumOutputSelectNode extends FlexibleNode {\n  constructor() {\n    super();\n    this.dynamicOutputsExist = true;\n    this.dynamicInputsExist = false;\n    this.dynamicSettingsExist = false;\n    super.dynamicOutputsType = Type.NUMBER;\n    this.title = NODE_INFO.switch[\"num-output-select\"].title;\n    this.description = NODE_INFO.switch[\"num-output-select\"].description;\n     this.addInput('select', Type.NUMBER);\n    this.addInput('input', Type.NUMBER);\n  }\n\n  onInputUpdated() {\n    let active = this.getInputData(0);\n    let val = this.getInputData(1);\n\n    if (active < 0 || active >= this.getOutputsCount()) {\n      this.debugWarn('Defined active output does not exist');\n      return;\n    }\n\n    this.setOutputData(active, val);\n  }\n}\nContainer.registerNodeType('switch/num-output-select', NumOutputSelectNode);\n","import { Container } from '../../container';\nimport { FlexibleNode } from '../../flexible-node';\nimport { Type } from '../../node-io';\nimport { NODE_INFO } from '../../node-info';\n\nexport class StringOutputSelectNode extends FlexibleNode {\n  constructor() {\n    super();\n    this.dynamicOutputsExist = true;\n    this.dynamicInputsExist = false;\n    this.dynamicSettingsExist = false;\n    super.dynamicOutputsType = Type.STRING;\n    this.title = NODE_INFO.switch[\"string-output-select\"].title;\n    this.description = NODE_INFO.switch[\"string-output-select\"].description;\n    this.addInput('select', Type.NUMBER);\n    this.addInput('input', Type.STRING);\n  }\n\n  onInputUpdated() {\n    let active = this.getInputData(0);\n    let val = this.getInputData(1);\n\n    if (active < 0 || active >= this.getOutputsCount()) {\n      this.debugWarn('Defined active output does not exist');\n      return;\n    }\n    this.setOutputData(active, val);\n  }\n}\nContainer.registerNodeType('switch/string-output-select', StringOutputSelectNode);\n","import { Container } from '../../container';\nimport { Node } from '../../node';\nimport { NODE_INFO } from '../../node-info';\nimport { Side } from '../../node-interface';\nimport { Type } from '../../node-io';\nimport OsUtils from '../../utils/os-utils';\n\nclass HostInfo extends Node {\n  constructor() {\n    super();\n    this.title = NODE_INFO.system[\"host-info\"].title;\n    this.description =\n      `## Description\\n ` +\n      NODE_INFO.system[\"host-info\"].description + `   \\n ` +\n      `## On change of settings\\n ` +\n      `   \\n ` +\n      ` On change of settings output ***system-info*** will return data in json format\\n ` +\n      `## On active Input\\n ` +\n      `   \\n ` +\n      ` On an active input ***trigger*** the outputs ***cpu-temp***, ***disc-usage***, ***system-time***, ***system-memory*** will return data in json format\\n ` +\n      `## The data returned\\n ` +\n      `   \\n ` +\n      ` On change of settings output ***system-info*** will return data in json format\\n ` +\n      `   \\n `;\n    this.addInput('trigger', Type.BOOLEAN);\n    this.addOutput('system-info', Type.JSON);\n    this.addOutput('cpu-temp', Type.JSON);\n    this.addOutput('disc-usage', Type.JSON);\n    this.addOutput('system-time', Type.JSON);\n    this.addOutput('system-memory', Type.JSON);\n    this.addOutput('error', Type.STRING);\n  }\n\n  onCreated() {\n    this.onAfterSettingsChange();\n  }\n\n  callSystemInfo() {\n    OsUtils.systemInfo()\n      .then(e => this.setOutputData(0, e))\n      .catch(err => this.setOutputData(5, err));\n  }\n\n  callInfo() {\n    OsUtils.cpuTemperature()\n      .then(e => this.setOutputData(1, e))\n      .catch(err => this.setOutputData(5, err));\n    OsUtils.fsSize()\n      .then(e => this.setOutputData(2, e))\n      .catch(err => this.setOutputData(5, err));\n    OsUtils.systemTime()\n      .then(e => this.setOutputData(3, e))\n      .catch(err => this.setOutputData(5, err));\n    OsUtils.systemMem()\n      .then(e => this.setOutputData(4, e))\n      .catch(err => this.setOutputData(5, err));\n  }\n\n  onAfterSettingsChange() {\n    if (this.side !== Side.server) return;\n    this.callSystemInfo();\n  }\n\n  onInputUpdated() {\n    if (this.side !== Side.server) return;\n    this.callInfo();\n  }\n}\nContainer.registerNodeType('system/host-info', HostInfo);\n","import PlatformDataSource from '../../../database/datasource/PlatformDataSource';\nimport { Container } from '../../container';\nimport { Node } from '../../node';\nimport { NODE_INFO } from '../../node-info';\nimport { Side } from '../../node-interface';\nimport { NodeSetting, SettingType, Type } from '../../node-io';\nimport OsUtils from '../../utils/os-utils';\n\nclass PlatNode extends Node {\n  haystackAbout = {\n    serverName: OsUtils.hostName(),\n    productVersion: OsUtils.getCurrentWiresVersion(),\n  };\n  constructor() {\n    super();\n    this.title = NODE_INFO.system.platform.title;\n    this.description = NODE_INFO.system.platform.description;\n    this.addInput('trigger', Type.BOOLEAN);\n    this.addOutput('wires-version', Type.STRING);\n    this.addOutput('output-json', Type.JSON);\n    this.settings['serverName'] = NodeSetting.create({\n      description: 'serverName',\n      value: '',\n      type: SettingType.READONLY,\n    });\n    this.settings['productVersion'] = NodeSetting.create({\n      description: 'productVersion',\n      value: '',\n      type: SettingType.READONLY,\n    });\n\n\n  }\n\n  async onAdded() {\n    await this.haystackAbout.serverName.then(e => {\n      this.settings['serverName'].value = e;\n      this.broadcastSettingsToClients();\n    }).catch(err => {\n      this.debugInfo(`PLATFORM NODE: try/catch  serverName info, ${err}`);\n    })\n    await this.haystackAbout.productVersion.then(e => {\n      this.settings['productVersion'].value = e;\n      this.broadcastSettingsToClients();\n      this.setOutputData(0, e); // wires version\n    }).catch(err => {\n      this.debugInfo(`PLATFORM NODE: try/catch  productVersion info, ${err}`);\n    })\n\n    this.onAfterSettingsChange();\n  }\n\n  onInputUpdated() {\n    this.onAfterSettingsChange();\n  }\n\n  onAfterSettingsChange() {\n    if (this.side !== Side.server) return; // only execute on server\n    PlatformDataSource.getPlatform().then(e => {\n      this.setOutputData(1, e)\n    }).catch(err => {\n      this.debugInfo(`PLATFORM NODE: try/catch  getPlatform info, ${err}`);\n    })\n\n  }\n\n}\nContainer.registerNodeType('system/platform', PlatNode);\n","import { Container } from '../../container';\nimport { Node } from '../../node';\nimport { NodeSetting, SettingType, Type } from '../../node-io';\n\nconst os = require('os');\n\nfunction getSysInfo(val) {\n  switch (val) {\n    case 0:\n      return os.totalmem() / 1048576;\n    case 1:\n      return os.freemem() / 1048576;\n    case 2:\n      return os.networkInterfaces();\n    case 3:\n      return os.hostname();\n    case 4:\n      return os.platform();\n    case 5:\n      return os.uptime();\n    case 6:\n      return os.homedir();\n    case 7:\n      return os.arch();\n    case 8:\n      return os.loadavg();\n    default:\n      return;\n  }\n}\n\nclass SystemInfo extends Node {\n  constructor() {\n    super();\n    this.title = 'System Info';\n    this.description =\n      'This node outputs various linux system information.  Once a system property has been selected from settings, a ‘false’ to ‘true’ transition on the ‘trigger’ input will update the ‘output’.  ‘error’ will display error information if the request is not successful.';\n    // this.headerColor = '#4A37EE37';\n    // this.iconImageUrl = 'images/node-editor/icons/function/function.svg';\n\n    this.addInput('trigger', Type.BOOLEAN);\n    this.addOutput('output', Type.STRING);\n    this.addOutput('error', Type.STRING);\n    this.settings['output-type'] = NodeSetting.create({\n      description: 'Output type',\n      type: SettingType.DROPDOWN,\n      config: {\n        items: [\n          { value: 0, text: 'total memory' },\n          { value: 1, text: 'free memory' },\n          { value: 2, text: 'Network Interfaces' },\n          { value: 3, text: 'hostname' },\n          { value: 4, text: 'platform' },\n          { value: 5, text: 'uptime in sec' },\n          { value: 6, text: 'home dir' },\n          { value: 7, text: 'arch' },\n          { value: 8, text: 'System load average' },\n        ],\n      },\n    });\n  }\n\n  onCreated() {\n    this.onAfterSettingsChange();\n  }\n\n  onAdded() {\n    this.updateTitle();\n  }\n\n  onAfterSettingsChange() {\n    this.onInputUpdated();\n    if (!this.settings['output-type'].value) return;\n    this.updateTitle();\n  }\n\n  private updateTitle() {\n    const settingsConfig = this.settings['output-type'].config.items;\n    const settingsText = [JSON.stringify(this.settings['output-type'].value)];\n    const filteredNodeSettings = Object.keys(settingsConfig)\n      .filter(key => settingsText.includes(key))\n      .reduce((obj, key) => {\n        obj[key] = settingsConfig[key].text;\n        return obj;\n      }, {});\n\n    const settingValue = this.settings['output-type'].value;\n    this.title = 'System Info' + ' ' + '(' + filteredNodeSettings[settingValue] + ')';\n  }\n\n  onInputUpdated() {\n    const outType = this.settings['output-type'].value;\n    try {\n      let call = getSysInfo(outType);\n      this.setOutputData(0, call);\n      this.setOutputData(1, false);\n    } catch (e) {\n      this.setOutputData(1, true);\n    }\n  }\n}\nContainer.registerNodeType('system/system-info', SystemInfo);\n","import { Container } from '../../container';\nimport { Node } from '../../node';\nimport { Type } from '../../node-io';\nimport { NODE_INFO } from '../../node-info';\n\nclass SystemBeepNode extends Node {\n  constructor() {\n    super();\n    this.title = NODE_INFO.system.beep.title;\n    this.description = NODE_INFO.system.beep.description;\n    this.addInput('trigger', Type.BOOLEAN);\n    this.addOutput('error', Type.STRING);\n  }\n\n  onInputUpdated() {\n    try {\n      if (this.getInputData(0) == true) process.stderr.write('\\x07');\n      this.setOutputData(0, false);\n    } catch (e) {\n      this.setOutputData(0, true);\n    }\n  }\n}\nContainer.registerNodeType('system/beep', SystemBeepNode);\n","import { exec } from 'child_process';\nimport { isNull } from '../../../utils/helper';\nimport { Container } from '../../container';\nimport { Node } from '../../node';\nimport { NODE_INFO } from '../../node-info';\nimport { Type } from '../../node-io';\n\nclass SystemExecuteNode extends Node {\n  lastTrigger:boolean;\n\n  constructor() {\n    super();\n    this.title = NODE_INFO.system[\"execute-cmd\"].title;\n    this.description = NODE_INFO.system[\"execute-cmd\"].description;\n    this.addInputWithSettings('command', Type.STRING, 'pwd', 'Linux Command', false);\n    this.addInput('trigger', Type.BOOLEAN);\n    this.addOutput('out stdout', Type.STRING);\n    this.addOutput('out err', Type.STRING);\n    this.addOutput('out stderr', Type.STRING);\n    this.addOutput('error', Type.STRING);\n  }\n\n  onCreated(){\n    this.lastTrigger = false;\n  }\n\n  // example cmd to run a nodejs script cd /home/aidan/ && node lora-reset.js\n  onInputUpdated() {\n    const trigger = this.getInputData(1) || false;\n    if (this.inputs[1].updated && trigger && !this.lastTrigger) {\n      const command = this.getInputData(0);\n      if(isNull(command))return;\n\n      try {\n        exec(command, (err, stdout, stderr) => {\n          if (stdout) {\n            // this.debugErr(stdout);\n            this.setOutputData(0, stdout);\n            this.setOutputData(3, false);\n          }\n          if (err) {\n            // this.debugInfo(err);\n\n            this.setOutputData(1, err);\n            this.setOutputData(3, true);\n          }\n          if (stderr) {\n            this.setOutputData(2, stderr);\n            this.setOutputData(3, true);\n          }\n        });\n      } catch (e) {\n        this.setOutputData(3, true);\n      }\n    }\n    this.lastTrigger = trigger;\n  }\n}\nContainer.registerNodeType('system/execute-cmd', SystemExecuteNode);\n","import { Container, ContainerRegistry } from '../../container';\nimport { Node } from '../../node';\nimport { Side } from '../../node-interface';\nimport { Type } from '../../node-io';\nimport { NODE_INFO } from '../../node-info';\n\nclass FlowExport extends Node {\n  constructor() {\n    super();\n    this.title = NODE_INFO.system[\"flow-export\"].title;\n    this.description = NODE_INFO.system[\"flow-export\"].description;\n    this.addOutput('output', Type.STRING);\n    this.addInput('trigger', Type.BOOLEAN);\n  }\n\n  init() {\n    if (!this.properties) {\n      this.properties['lastTrigger'] = false;\n    }\n  }\n\n  onInputUpdated() {\n    if (this.side != Side.server) return;\n    const input: boolean = this.getInputData(0);\n    if (this.properties['lastTrigger'] !== input && input) {\n      const container = ContainerRegistry.instance().rootContainer();\n      container.db.getNodes((err, docs) => {\n        if (!err) {\n          this.setOutputData(0, JSON.stringify(docs));\n        } else {\n          this.debugErr(` Node id [ ${this.cid}/${this.id} ] has error: ${err.message}.`);\n        }\n      });\n    }\n    this.properties['lastTrigger'] = input;\n    this.persistProperties(false, true);\n  }\n}\nContainer.registerNodeType('system/flow-export', FlowExport);\n","import { exec } from 'child_process';\nimport { Container } from '../../../container';\nimport { Node, NodeState } from '../../../node';\nimport { Side } from '../../../node-interface';\nimport { NodeSetting, SettingType, Type } from '../../../node-io';\nimport Utils from '../../../utils';\nimport IpAddressUtils from '../../../utils/ip-address-utils';\nimport NodeColours from '../../../utils/nodes/node-colour-change';\nimport OsUtils from '../../../utils/os-utils';\n\nclass UpdateIPEdge28 extends Node {\n  timeStamp = Utils.getTimeStamp();\n  interfaceEth0 = 'eth0'; //eth0 //wlp3s0\n\n  //outputs\n  eth0Ip = 0;\n  messageOutput = 2;\n  errorOutput = 3;\n\n  constructor() {\n    super();\n    this.title = 'Network Interface EdgeIO-28';\n    this.description =\n      'This node is used to configure the network (IP) interface for edge28 controllers.  Changes made to settings will only be saved if ‘Save changes on save’ is toggled ON.  In some cases a reboot will be required to save the changes, if ‘Reboot’ is toggled ON, then clicking ‘save’ will reboot the controller.        NOTE: Making changes on a remote device could cause the device to become inaccessible.';\n    this.addInput('get interface address', Type.BOOLEAN);\n    this.addInput('enable eth0 ', Type.BOOLEAN);\n    this.addOutput('ip eth0', Type.STRING);\n    this.addOutput('message', Type.STRING);\n    this.addOutput('error', Type.STRING);\n\n    this.settings['writeChanges'] = NodeSetting.create({\n      description: 'Save changes on save',\n      type: SettingType.BOOLEAN,\n      value: false,\n    });\n\n    this.settings['reboot'] = NodeSetting.create({\n      description: 'Optional Reboot. Warning this will reboot the device',\n      type: SettingType.BOOLEAN,\n      value: false,\n    });\n\n    this.settings['eth0_group'] = NodeSetting.create({\n      description: 'Eth Port 0',\n      value: '',\n      type: SettingType.GROUP,\n    });\n\n    this.settings['interfaceTypeEth0'] = NodeSetting.create({\n      description: 'Interface Type eth0',\n      type: SettingType.DROPDOWN,\n      config: {\n        items: [\n          { value: 0, text: 'DHCP' },\n          { value: 1, text: 'Static' },\n        ],\n      },\n      value: 0,\n    });\n    this.settings['newIpEth0'] = NodeSetting.create({\n      description: 'IP',\n      value: '192.168.0.40',\n      type: SettingType.STRING,\n    });\n\n    this.settings['netNetmaskEth0'] = NodeSetting.create({\n      description: 'Netmask eth0',\n      value: '255.255.255.0',\n      type: SettingType.STRING,\n    });\n    this.settings['newGatewayEth0'] = NodeSetting.create({\n      description: 'Gateway',\n      value: '192.168.0.1',\n      type: SettingType.STRING,\n    });\n\n    this.settings['newNameServerEth0'] = NodeSetting.create({\n      description: 'Name Servers eth0',\n      value: '8.8.8.8',\n      type: SettingType.STRING,\n    });\n\n    this.setSettingsConfig({\n      groups: [\n        { newIpEth0: {}, netNetmaskEth0: {} },\n        { newGatewayEth0: {}, newNameServerEth0: {} },\n      ],\n      conditions: {\n        newIpEth0: setting => {\n          const val = setting['interfaceTypeEth0'].value;\n          return ![0].includes(val);\n        },\n        netNetmaskEth0: setting => {\n          const val = setting['interfaceTypeEth0'].value;\n          return ![0].includes(val);\n        },\n        newGatewayEth0: setting => {\n          const val = setting['interfaceTypeEth0'].value;\n          return ![0].includes(val);\n        },\n        newNameServerEth0: setting => {\n          const val = setting['interfaceTypeEth0'].value;\n          return ![0].includes(val);\n        },\n      },\n    });\n  }\n\n  onAdded() {\n    setTimeout(() => {\n      this.getInterfaces();\n    }, 2000);\n  }\n\n  onInputUpdated() {\n    let enableInterfaceEth0 = this.getInputData(1);\n\n    //refresh the interfaces\n    if (this.inputs[0].updated) {\n      this.msgOut(this.messageOutput, 'called getInterfaces' + ' ' + this.timeStamp);\n      setTimeout(() => {\n        this.getInterfaces();\n      }, 2000);\n    }\n    // enable/disable eth0\n    if (this.inputs[1].updated) {\n      if (enableInterfaceEth0 === true) {\n        this.msgOut(this.messageOutput, 'called enable Eth0 true' + ' ' + this.timeStamp);\n        this.enableNetwork(this.interfaceEth0);\n      } else if (enableInterfaceEth0 === false) {\n        this.msgOut(this.messageOutput, 'called disable Eth0 false' + ' ' + this.timeStamp);\n        this.disableNetwork(this.interfaceEth0);\n      }\n    }\n  }\n\n  onAfterSettingsChange() {\n    if (this.side !== Side.server) return; // only execute on server\n    const newIpEth0 = this.settings['newIpEth0'].value;\n    const netNetmaskEth0 = this.settings['netNetmaskEth0'].value;\n    const newGatewayEth0 = this.settings['newGatewayEth0'].value;\n    const newNameServerEth0 = this.settings['newNameServerEth0'].value;\n    const interfaceTypeEth0 = this.settings['interfaceTypeEth0'].value;\n    const writeChanges = this.settings['writeChanges'].value;\n    const reboot = this.settings['reboot'].value;\n\n    const checkIpSettingsEth0 = IpAddressUtils.checkIpValid(\n      newIpEth0,\n      netNetmaskEth0,\n      newGatewayEth0,\n      newNameServerEth0,\n    );\n\n    //device reboot\n    if (reboot) {\n      this.msgOut(this.messageOutput, 'called sudo reboot will reboot in 10 sec' + ' ' + this.timeStamp);\n      //set setting back to false so its not ticked after reboot\n      this.settings['reboot'].value = false;\n      this.broadcastSettingsToClients();\n      //reboot after 10 sec\n      setTimeout(() => {\n        this.execCommand(`sudo reboot`);\n      }, 10000);\n    }\n    // check if OS is the BBB\n    OsUtils.systemInfo()\n      .then(e => {\n        if (e.system.model === \"GENERIC AM33XX (FLATTENED DEVICE TREE)\") {\n          if (checkIpSettingsEth0 && writeChanges) {\n            //network update\n            if (interfaceTypeEth0 == 0) {\n              //DHCP\n              this.title = 'Adapter' + +' ' + '(DHCP)';\n              IpAddressUtils.bbbGetInterfaceDetails()\n                .then(e => {\n                  this.msgOut(this.messageOutput, `'MSG: get interface ID' ${e}`);\n                  IpAddressUtils.bbbSetIPDHCP(e)\n                    .then(e => {\n                      this.msgOut(this.messageOutput, `'MSG: set ip to DHCP' ${e}`);\n                    })\n                    .catch(err => {\n                      this.msgOut(this.messageOutput, `'ERROR: setting to DHCP' ${err}`);\n                    });\n                })\n                .catch(err => {\n                  this.msgOut(this.messageOutput, `'ERROR: setting to DHCP' ${err}`);\n                });\n            } else if (interfaceTypeEth0 == 1) {\n              //Static\n              this.title = 'Adapter' + ' ' + '(Static)';\n              IpAddressUtils.bbbGetInterfaceDetails()\n                .then(iface => {\n                  //iface, ipAddress, subnetMask, gateway\n                  IpAddressUtils.bbbSetIPFixed(iface, newIpEth0, netNetmaskEth0, newGatewayEth0)\n                    .then(e => {\n                      this.msgOut(this.messageOutput, `'MSG: set ip to fixed IP' ${e}`);\n                    })\n                    .catch(err => {\n                      this.msgOut(this.messageOutput, `'ERROR: setting to fixed IP' ${err}`);\n                    });\n                })\n                .catch(err => {\n                  this.msgOut(this.messageOutput, `'ERROR: setting to fixed IP' ${err}`);\n                });\n            }\n          } else {\n            this.msgOut(this.messageOutput, 'invalid ip settings');\n          }\n        } else {\n          // set node to red to show its the incorrect device type\n          NodeColours.nodeColourChange(this, NodeState.ERROR);\n          this.msgOut(this.messageOutput, `'ERROR: incorrect device type ${e.system.model}`)\n        }\n      }).catch(err => this.msgOut(this.messageOutput, `'ERROR: incorrect device type' ${err}`));\n\n    if (!writeChanges) {\n      // user didnt toggle the save button\n      this.msgOut(this.messageOutput, 'nothing saved' + ' ' + this.timeStamp);\n      this.msgOut(this.errorOutput, true);\n    }\n\n\n  }\n\n  //msg output\n  msgOut = (num: number, msg: any) => {\n    this.setOutputData(num, msg);\n  };\n\n  execCommand(command: string) {\n    if (this.side !== Side.server) return;\n    try {\n      exec(command, (err, stdout, stderr) => {\n        this.msgOut(this.messageOutput, 'called command' + ' ' + command + ' ' + this.timeStamp);\n        if (stdout) {\n          this.msgOut(this.messageOutput, stdout + ' ' + this.timeStamp);\n          this.msgOut(this.errorOutput, false);\n        }\n        if (err) {\n          this.msgOut(this.messageOutput, err + ' ' + this.timeStamp);\n          this.msgOut(this.errorOutput, true);\n        }\n        if (stderr) {\n          this.msgOut(this.messageOutput, stderr + ' ' + this.timeStamp);\n          this.msgOut(this.errorOutput, true);\n        }\n      });\n    } catch (e) {\n      this.msgOut(this.messageOutput, e + ' ' + this.timeStamp);\n      this.msgOut(this.errorOutput, true);\n      // this.debugInfo(e);\n    }\n  }\n\n  getInterfaces() {\n    IpAddressUtils.getActiveNetworks()\n      .then(list => {\n        //eth0\n        const getInterfaceEth0 = list.filter(e => {\n          return e.name == this.interfaceEth0;\n        });\n        this.msgOut(this.eth0Ip, getInterfaceEth0[0].ip_address); //ip\n        this.msgOut(this.errorOutput, false); //error\n      })\n      .catch(err => {\n        this.msgOut(this.messageOutput, err);\n        this.msgOut(this.errorOutput, true);\n      });\n  }\n\n  enableNetwork(iface: string) {\n    try {\n      IpAddressUtils.networkUpDown(iface, 'up')\n        .then(r => {\n          console.log(r);\n          setTimeout(() => {\n            this.getInterfaces();\n          }, 5000);\n        })\n        .catch(e => console.log(e));\n    } catch (err) {\n      console.log(err);\n    }\n  }\n\n  disableNetwork(iface: string) {\n    try {\n      IpAddressUtils.networkUpDown(iface, 'down')\n        .then(r => {\n          console.log(r);\n        })\n        .catch(err => console.log(err));\n    } catch (err) {\n      console.log(err);\n    }\n  }\n}\nContainer.registerNodeType('system/network-interface-edge-28', UpdateIPEdge28);\n","import { exec } from 'child_process';\nimport { Container } from '../../../container';\nimport { Node, NodeState } from '../../../node';\nimport { Side } from '../../../node-interface';\nimport { NodeSetting, SettingType, Type } from '../../../node-io';\nimport Utils from '../../../utils';\nimport IpAddressUtils from '../../../utils/ip-address-utils';\nimport NodeColours from '../../../utils/nodes/node-colour-change';\nimport OsUtils from '../../../utils/os-utils';\n\nconst set_ip_address = require('set-ip-address'); //for setting IPs\nconst ip = require('ip'); //for checking if IPs are valid\n\nclass UpdateIP extends Node {\n  timeStamp = Utils.getTimeStamp();\n\n  interfaceEth0 = 'eth0'; //eth0 //wlp3s0\n  interfaceEth1 = 'eth1'; //eth0 //enp0s31f6\n\n  //outputs\n  eth0Ip = 0;\n  eth1Ip = 1;\n  messageOutput = 2;\n  errorOutput = 3;\n\n  constructor() {\n    super();\n    this.title = 'Network Interfaces';\n    this.description =\n      'This node is used to configure the network (IP) interfaces for the device.  Changes made to settings will only be saved if ‘Save changes on save’ is toggled ON.  In some cases a reboot will be required to save the changes, if ‘Reboot’ is toggled ON, then clicking ‘save’ will reboot the controller.      NOTE: Making changes on a remote device could cause the device to become inaccessible.';\n    this.addInput('get interface address', Type.BOOLEAN);\n    this.addInput('enable eth0 ', Type.BOOLEAN);\n    this.addInput('enable eth1 ', Type.BOOLEAN);\n    this.addOutput('ip eth0', Type.STRING);\n    this.addOutput('ip eth1', Type.STRING);\n    this.addOutput('message', Type.STRING);\n    this.addOutput('error', Type.STRING);\n\n    this.settings['writeChanges'] = NodeSetting.create({\n      description: 'Save changes on save',\n      type: SettingType.BOOLEAN,\n      value: false,\n    });\n\n    this.settings['reboot'] = NodeSetting.create({\n      description: 'Reboot. Warning this will reboot the device',\n      type: SettingType.BOOLEAN,\n      value: false,\n    });\n\n    this.settings['eth0_group'] = NodeSetting.create({\n      description: 'ETH-1', //rubix port 1\n      value: '',\n      type: SettingType.GROUP,\n    });\n\n    this.settings['interfaceTypeEth0'] = NodeSetting.create({\n      description: 'Interface Type eth0',\n      type: SettingType.DROPDOWN,\n      config: {\n        items: [\n          { value: 0, text: 'DHCP' },\n          { value: 1, text: 'Static' },\n        ],\n      },\n      value: 0,\n    });\n    this.settings['newIpEth0'] = NodeSetting.create({\n      description: 'IP',\n      value: '192.168.0.40',\n      type: SettingType.STRING,\n    });\n\n    this.settings['netNetmaskEth0'] = NodeSetting.create({\n      description: 'Netmask eth0',\n      value: '255.255.255.0',\n      type: SettingType.STRING,\n    });\n    this.settings['newGatewayEth0'] = NodeSetting.create({\n      description: 'Gateway',\n      value: '192.168.0.1',\n      type: SettingType.STRING,\n    });\n\n    this.settings['newNameServerEth0'] = NodeSetting.create({\n      description: 'Name Servers eth0',\n      value: '8.8.8.8',\n      type: SettingType.STRING,\n    });\n\n    this.settings['eth1_group'] = NodeSetting.create({\n      description: 'ETH-2', //rubix port 2\n      value: '',\n      type: SettingType.GROUP,\n    });\n\n    this.settings['interfaceTypeEth1'] = NodeSetting.create({\n      description: 'Interface Type eth1',\n      type: SettingType.DROPDOWN,\n      config: {\n        items: [\n          { value: 0, text: 'DHCP' },\n          { value: 1, text: 'Static' },\n        ],\n      },\n      value: 0,\n    });\n    this.settings['newIpEth1'] = NodeSetting.create({\n      description: 'IP',\n      value: '192.168.1.40',\n      type: SettingType.STRING,\n    });\n\n    this.settings['netNetmaskEth1'] = NodeSetting.create({\n      description: 'Netmask eth1',\n      value: '255.255.255.0',\n      type: SettingType.STRING,\n    });\n    this.settings['newGatewayEth1'] = NodeSetting.create({\n      description: 'Gateway',\n      value: '192.168.1.1',\n      type: SettingType.STRING,\n    });\n\n    this.settings['newNameServerEth1'] = NodeSetting.create({\n      description: 'Name Servers eth1',\n      value: '8.8.8.8',\n      type: SettingType.STRING,\n    });\n\n    this.setSettingsConfig({\n      groups: [\n        { newIpEth0: {}, netNetmaskEth0: {} },\n        { newGatewayEth0: {}, newNameServerEth0: {} },\n        { newIpEth1: {}, netNetmaskEth1: {} },\n        { newGatewayEth1: {}, newNameServerEth1: {} },\n      ],\n      conditions: {\n        newIpEth0: setting => {\n          const val = setting['interfaceTypeEth0'].value;\n          return ![0].includes(val);\n        },\n        netNetmaskEth0: setting => {\n          const val = setting['interfaceTypeEth0'].value;\n          return ![0].includes(val);\n        },\n        newGatewayEth0: setting => {\n          const val = setting['interfaceTypeEth0'].value;\n          return ![0].includes(val);\n        },\n        newNameServerEth0: setting => {\n          const val = setting['interfaceTypeEth0'].value;\n          return ![0].includes(val);\n        },\n        newIpEth1: setting => {\n          const val = setting['interfaceTypeEth1'].value;\n          return ![0].includes(val);\n        },\n        netNetmaskEth1: setting => {\n          const val = setting['interfaceTypeEth1'].value;\n          return ![0].includes(val);\n        },\n        newGatewayEth1: setting => {\n          const val = setting['interfaceTypeEth1'].value;\n          return ![0].includes(val);\n        },\n        newNameServerEth1: setting => {\n          const val = setting['interfaceTypeEth1'].value;\n          return ![0].includes(val);\n        },\n      },\n    });\n  }\n\n  onAdded() {\n    setTimeout(() => {\n      this.getInterfaces();\n    }, 2000);\n  }\n\n  onInputUpdated() {\n    let enableInterfaceEth0 = this.getInputData(1);\n    let enableInterfaceEth1 = this.getInputData(2);\n\n    //refresh the interfaces\n    if (this.inputs[0].updated) {\n      this.msgOut(this.messageOutput, 'called getInterfaces' + ' ' + this.timeStamp);\n      setTimeout(() => {\n        this.getInterfaces();\n      }, 2000);\n    }\n    // enable/disable eth0\n    if (this.inputs[1].updated) {\n      if (enableInterfaceEth0 === true) {\n        this.msgOut(this.messageOutput, 'called enable ETH-1 true' + ' ' + this.timeStamp);\n        this.enableNetwork(this.interfaceEth0);\n      } else if (enableInterfaceEth0 === false) {\n        this.msgOut(this.messageOutput, 'called disable ETH-1 false' + ' ' + this.timeStamp);\n        this.disableNetwork(this.interfaceEth0);\n      }\n    }\n    // enable/disable eth1\n    if (this.inputs[2].updated) {\n      if (enableInterfaceEth1 === true) {\n        this.msgOut(this.messageOutput, 'called enable ETH-2 true' + ' ' + this.timeStamp);\n        this.enableNetwork(this.interfaceEth1);\n      } else if (enableInterfaceEth1 === false) {\n        this.msgOut(this.messageOutput, 'called disable ETH-2 false' + ' ' + this.timeStamp);\n        this.disableNetwork(this.interfaceEth1);\n      }\n    }\n  }\n\n  onAfterSettingsChange() {\n    if (this.side !== Side.server) return; // only execute on server\n    const newIpEth0 = this.settings['newIpEth0'].value;\n    const netNetmaskEth0 = this.settings['netNetmaskEth0'].value;\n    const newGatewayEth0 = this.settings['newGatewayEth0'].value;\n    const newNameServerEth0 = this.settings['newNameServerEth0'].value;\n    const interfaceTypeEth0 = this.settings['interfaceTypeEth0'].value;\n\n    const newIpEth1 = this.settings['newIpEth1'].value;\n    const netNetmaskEth1 = this.settings['netNetmaskEth1'].value;\n    const newGatewayEth1 = this.settings['newGatewayEth1'].value;\n    const newNameServerEth1 = this.settings['newNameServerEth1'].value;\n    const interfaceTypeEth1 = this.settings['interfaceTypeEth1'].value;\n\n    const writeChanges = this.settings['writeChanges'].value;\n    const reboot = this.settings['reboot'].value;\n\n    const checkIpSettingsEth0 = IpAddressUtils.checkIpValid(\n      newIpEth0,\n      netNetmaskEth0,\n      newGatewayEth0,\n      newNameServerEth0,\n    );\n    const checkIpSettingsEth1 = IpAddressUtils.checkIpValid(\n      newIpEth1,\n      netNetmaskEth1,\n      newGatewayEth1,\n      newNameServerEth1,\n    );\n    //device reboot\n    if (reboot) {\n      this.msgOut(\n        this.messageOutput,\n        'called sudo reboot will reboot in 10 sec' + ' ' + this.timeStamp,\n      );\n      //set setting back to false so its not ticked after reboot\n      this.settings['reboot'].value = false;\n      this.broadcastSettingsToClients();\n      //reboot after 10 sec\n      setTimeout(() => {\n        this.execCommand(`sudo reboot`);\n      }, 10000);\n    }\n\n    // check if OS is the PI\n    OsUtils.systemInfo()\n      .then(e => {\n        if (e.system.model === \"BCM2835\") {\n          if (checkIpSettingsEth0 && checkIpSettingsEth1 && writeChanges) {\n            //network update\n            let interfacesArray = [];\n            if (interfaceTypeEth0 == 0) {\n              //DHCP\n              this.title = 'Adapter' + +' ' + '(DHCP)';\n              let eth0 = {\n                interface: this.interfaceEth0,\n                dhcp: true,\n              };\n              interfacesArray.push(eth0);\n            }\n            if (interfaceTypeEth0 == 1) {\n              //Static\n              this.title = 'Adapter' + ' ' + '(Static)';\n              let subnetMaskLength = ip.subnet(newIpEth0, netNetmaskEth0);\n              let eth0 = {\n                interface: this.interfaceEth0,\n                ip_address: newIpEth0,\n                prefix: subnetMaskLength.subnetMaskLength,\n                gateway: newGatewayEth0,\n                nameservers: [newNameServerEth0],\n              };\n              interfacesArray.push(eth0);\n            }\n\n            if (interfaceTypeEth1 == 0) {\n              //DHCP\n              this.title = 'Adapter' + +' ' + '(DHCP)';\n              let eth1 = {\n                interface: this.interfaceEth1,\n                dhcp: true,\n              };\n              interfacesArray.push(eth1);\n            }\n\n            if (interfaceTypeEth1 == 1) {\n              //Static\n              this.title = 'Adapter' + ' ' + '(Static)';\n              let subnetMaskLength = ip.subnet(newIpEth1, netNetmaskEth1);\n              let eth1 = {\n                interface: this.interfaceEth1,\n                ip_address: newIpEth1,\n                prefix: subnetMaskLength.subnetMaskLength,\n                gateway: newGatewayEth1,\n                nameservers: [newNameServerEth1],\n              };\n              interfacesArray.push(eth1);\n            }\n            set_ip_address.configure(interfacesArray).then(() => {\n              this.msgOut(this.messageOutput, 'updated' + ' ' + this.timeStamp);\n              this.msgOut(this.errorOutput, false);\n            });\n          } else this.msgOut(this.messageOutput, 'invalid ip settings');\n        } else {\n          // set node to red to show its the incorrect device type\n          NodeColours.nodeColourChange(this, NodeState.ERROR);\n          this.msgOut(this.messageOutput, `'ERROR: incorrect device type ${e.system.model}`)\n        }\n      }).catch(err => this.msgOut(this.messageOutput, `'ERROR: incorrect device type' ${err}`));\n\n    if (!writeChanges) {\n      // user didnt toggle the save button\n      this.msgOut(this.messageOutput, 'nothing saved' + ' ' + this.timeStamp);\n      this.msgOut(this.errorOutput, true);\n    }\n  }\n  //msg output\n  msgOut = (num: number, msg: any) => {\n    this.setOutputData(num, msg);\n  };\n\n  execCommand(command: string) {\n    if (this.side !== Side.server) return;\n    try {\n      exec(command, (err, stdout, stderr) => {\n        this.msgOut(this.messageOutput, 'called command' + ' ' + command + ' ' + this.timeStamp);\n        if (stdout) {\n          this.msgOut(this.messageOutput, stdout + ' ' + this.timeStamp);\n          this.msgOut(this.errorOutput, false);\n        }\n        if (err) {\n          this.msgOut(this.messageOutput, err + ' ' + this.timeStamp);\n          this.msgOut(this.errorOutput, true);\n        }\n        if (stderr) {\n          this.msgOut(this.messageOutput, stderr + ' ' + this.timeStamp);\n          this.msgOut(this.errorOutput, true);\n        }\n      });\n    } catch (e) {\n      this.msgOut(this.messageOutput, e + ' ' + this.timeStamp);\n      this.msgOut(this.errorOutput, true);\n      // this.debugInfo(e);\n    }\n  }\n\n  getInterfaces() {\n    IpAddressUtils.getActiveNetworks()\n      .then(list => {\n        //eth0\n        const getInterfaceEth0 = list.filter(e => {\n          return e.name == this.interfaceEth0;\n        });\n        this.msgOut(this.eth0Ip, getInterfaceEth0[0].ip_address); //ip\n        this.msgOut(this.errorOutput, false); //error\n\n        //eth1\n        const getInterfaceEth1 = list.filter(e => {\n          return e.name == this.interfaceEth1;\n        });\n        this.msgOut(this.eth1Ip, getInterfaceEth1[0].ip_address); //ip\n        this.msgOut(this.errorOutput, false); //error\n      })\n      .catch(err => {\n        this.msgOut(this.messageOutput, err);\n        this.msgOut(this.errorOutput, true);\n      });\n  }\n\n  enableNetwork(iface: string) {\n    try {\n      IpAddressUtils.networkUpDown(iface, 'up')\n        .then(r => {\n          console.log(r);\n          setTimeout(() => {\n            this.getInterfaces();\n          }, 5000);\n        })\n        .catch(e => console.log(e));\n    } catch (err) {\n      console.log(err);\n    }\n  }\n\n  disableNetwork(iface: string) {\n    try {\n      IpAddressUtils.networkUpDown(iface, 'down')\n        .then(r => {\n          console.log(r);\n        })\n        .catch(err => console.log(err));\n    } catch (err) {\n      console.log(err);\n    }\n  }\n}\nContainer.registerNodeType('system/network-interfaces', UpdateIP);\n","import { exec } from 'child_process';\nimport { Container } from '../../container';\nimport { Node } from '../../node';\nimport { Type } from '../../node-io';\nimport { NODE_INFO } from '../../node-info';\n\nconst pkg = require('../../../../package.json');\n\nclass WiresVersion extends Node {\n  constructor() {\n    super();\n    this.title = NODE_INFO.system[\"system-build-version\"].title;\n    this.description = NODE_INFO.system[\"system-build-version\"].description;\n    this.addInput('in1', Type.STRING);\n    this.addOutput('wires-version', Type.STRING);\n    this.addOutput('nodejs-version', Type.STRING);\n    this.addOutput('npm-version', Type.STRING);\n    this.addOutput('json out', Type.STRING);\n    this.addOutput('error', Type.STRING);\n  }\n\n  getCurrentWiresVersion() {\n    return new Promise(function(resolve) {\n      return resolve({\n        version: pkg.version,\n      });\n    });\n  }\n\n  getNodeJsVersion() {\n    return new Promise((resolve, reject) => {\n      exec('node -v', (err, stdout, stderr) => {\n        if (err) {\n          reject(err);\n          return;\n        } else {\n          resolve({\n            stdout,\n          });\n        }\n      });\n    });\n  }\n\n  getNPMVersion() {\n    return new Promise((resolve, reject) => {\n      exec('npm -v', (err, stdout, stderr) => {\n        if (err) {\n          reject(err);\n          return;\n        } else {\n          resolve({\n            stdout,\n          });\n        }\n      });\n    });\n  }\n\n  onInputUpdated() {\n    let arr = [];\n\n    // wires build\n    this.getCurrentWiresVersion()\n      .then(r => {\n        r = JSON.stringify(r)\n          .replace(/\\\\n/g, '')\n          .split('version')\n          .join('wires version');\n        arr.push(r);\n        this.setOutputData(0, r);\n      })\n      .catch(e => {\n        this.setOutputData(4, e);\n      });\n    // nodejs version\n    this.getNodeJsVersion()\n      .then(r => {\n        r = JSON.stringify(r)\n          .replace(/\\\\n/g, '')\n          .split('stdout')\n          .join('nodejs version');\n        arr.push(r);\n        this.setOutputData(1, r);\n      })\n      .catch(e => {\n        this.setOutputData(4, e);\n      });\n    // npm version\n    this.getNPMVersion()\n      .then(r => {\n        r = JSON.stringify(r)\n          .replace(/\\\\n/g, '')\n          .split('stdout')\n          .join('npm version');\n        arr.push(r);\n        this.setOutputData(3, arr); //json out\n        this.setOutputData(2, r);\n      })\n      .catch(e => {\n        this.setOutputData(4, e);\n      });\n  }\n\n  onAfterSettingsChange() {\n    this.onInputUpdated();\n  }\n}\nContainer.registerNodeType('system/system-build-version', WiresVersion);\n","import { Container } from '../../container';\nimport { Node } from '../../node';\nimport { NodeSetting, SettingType, Type } from '../../node-io';\nimport Utils from '../../utils';\nimport { NODE_INFO } from '../../node-info';\n\nexport class TimeConvertNode extends Node {\n  conversionFunction;\n  constructor() {\n    super();\n    this.title = NODE_INFO.time.conversion.title;\n    this.description = NODE_INFO.time.conversion.description;\n    this.addInput('min', Type.NUMBER);\n    this.addOutput('day', Type.NUMBER);\n    this.addOutput('hour', Type.NUMBER);\n    this.addOutput('sec', Type.NUMBER);\n    this.addOutput('milli', Type.NUMBER);\n    this.settings['inputType'] = NodeSetting.create({\n      description: 'Input Type',\n      type: SettingType.DROPDOWN,\n      config: {\n        items: [\n          { value: 'day', text: 'Days (day)' },\n          { value: 'hour', text: 'Hours (hour)' },\n          { value: 'min', text: 'Minutes (min)' },\n          { value: 'sec', text: 'Seconds (sec)' },\n          { value: 'milli', text: 'Milliseconds(milli)' },\n        ],\n      },\n      value: 'min',\n    });\n    this.settings['precision'] = NodeSetting.create({ description: 'Precision', type: SettingType.NUMBER, value: '2' });\n    this.conversionFunction = input => {\n      let outputArray: number[] = [null, null, null, null];\n      outputArray[0] = input * 0.000694444;\n      outputArray[1] = input * 0.016666667;\n      outputArray[2] = input * 60;\n      outputArray[3] = input * 60000;\n      return outputArray;\n    };\n  }\n\n  onAdded() {\n    this.setConversionFunction();\n    this.onAfterSettingsChange()\n  }\n\n  onInputUpdated() {\n    this.onInputOrSettingsChange();\n  }\n\n  onAfterSettingsChange() {\n    this.setConversionFunction();\n    this.onInputOrSettingsChange();\n  }\n\n  private onInputOrSettingsChange() {\n    const input = this.getInputData(0);\n    if (!Utils.hasInput(input)) {\n      this.setOutputData(0, null);\n      this.setOutputData(1, null);\n      this.setOutputData(2, null);\n      this.setOutputData(3, null);\n      this.setOutputData(4, null);\n      return;\n    }\n    const output = this.conversionFunction(input);\n    const precision = Math.abs(this.settings['precision'].value);\n    this.setOutputData(0, Number(output[0]).toFixed(precision));\n    this.setOutputData(1, Number(output[1]).toFixed(precision));\n    this.setOutputData(2, Number(output[2]).toFixed(precision));\n    this.setOutputData(3, Number(output[3]).toFixed(precision));\n    this.setOutputData(4, Number(output[4]).toFixed(precision));\n  }\n\n  setConversionFunction() {\n    const inputType = this.settings['inputType'].value;\n    switch (inputType) {\n      case 'min':\n        this.title = 'Time Conversion (min)';\n        this.inputs[0].name = 'min';\n        this.outputs[0].name = 'day';\n        this.outputs[1].name = 'hour';\n        this.outputs[2].name = 'sec';\n        this.outputs[3].name = 'milli';\n        this.conversionFunction = input => {\n          let outputArray: number[] = [null, null, null, null];\n          outputArray[0] = input * 0.000694444;\n          outputArray[1] = input * 0.016666667;\n          outputArray[2] = input * 60;\n          outputArray[3] = input * 60000;\n          return outputArray;\n        };\n        break;\n      case 'sec':\n        this.title = 'Time Conversion (sec)';\n        this.inputs[0].name = 'sec';\n        this.outputs[0].name = 'day';\n        this.outputs[1].name = 'hour';\n        this.outputs[2].name = 'min';\n        this.outputs[3].name = 'milli';\n        this.conversionFunction = input => {\n          let outputArray: number[] = [null, null, null, null];\n          outputArray[0] = input * 1.1574e-5;\n          outputArray[1] = input * 0.000277778;\n          outputArray[2] = input * 0.016666667;\n          outputArray[3] = input * 1000;\n          return outputArray;\n        };\n        break;\n      case 'milli':\n        this.title = 'Time Conversion (milli)';\n        this.inputs[0].name = 'milli';\n        this.outputs[0].name = 'day';\n        this.outputs[1].name = 'hour';\n        this.outputs[2].name = 'min';\n        this.outputs[3].name = 'sec';\n        this.conversionFunction = input => {\n          let outputArray: number[] = [null, null, null, null];\n          outputArray[0] = input * 1.1574e-8;\n          outputArray[1] = input * 2.7778e-7;\n          outputArray[2] = input * 1.6667e-5;\n          outputArray[3] = input * 0.00100002;\n          return outputArray;\n        };\n        break;\n      case 'day':\n        this.title = 'Time Conversion (day)';\n        this.inputs[0].name = 'day';\n        this.outputs[0].name = 'hour';\n        this.outputs[1].name = 'min';\n        this.outputs[2].name = 'sec';\n        this.outputs[3].name = 'milli';\n        this.conversionFunction = input => {\n          let outputArray: number[] = [null, null, null, null];\n          outputArray[0] = input * 24;\n          outputArray[1] = input * 1440;\n          outputArray[2] = input * 86400;\n          outputArray[3] = input * 8.64e7;\n          return outputArray;\n        };\n        break;\n      case 'hour':\n        this.title = 'Time Conversion (hour)';\n        this.inputs[0].name = 'hour';\n        this.outputs[0].name = 'day';\n        this.outputs[1].name = 'min';\n        this.outputs[2].name = 'sec';\n        this.outputs[3].name = 'milli';\n        this.conversionFunction = input => {\n          let outputArray: number[] = [null, null, null, null];\n          outputArray[0] = input * 0.0416667;\n          outputArray[1] = input * 60;\n          outputArray[2] = input * 3600;\n          outputArray[3] = input * 3.6e6;\n          return outputArray;\n        };\n        break;\n      default:\n        this.title = 'Time Conversion (min)';\n        this.inputs[0].name = 'min';\n        this.outputs[0].name = 'day';\n        this.outputs[1].name = 'hour';\n        this.outputs[2].name = 'sec';\n        this.outputs[3].name = 'milli';\n        this.conversionFunction = input => {\n          let outputArray: number[] = [null, null, null, null];\n          outputArray[0] = input * 0.000694444;\n          outputArray[1] = input * 0.016666667;\n          outputArray[2] = input * 60;\n          outputArray[3] = input * 60000;\n          return outputArray;\n        };\n    }\n  }\n}\nContainer.registerNodeType('time/conversion', TimeConvertNode);\n","import { Container } from '../../container';\nimport { Node } from '../../node';\nimport { NodeSetting, SettingType, Type } from '../../node-io';\nimport TimeUtils from '../../utils/time-utils';\nimport { NODE_INFO } from '../../node-info';\n\nenum TIME_TYPE {\n  TIME = 'time string as input',\n  EPOCH = 'time epoch as input',\n  NEW_TS = 'time now',\n}\n\nexport class TimeConvertPlusNode extends Node {\n  conversionFunction;\n  constructor() {\n    super();\n    this.title = NODE_INFO.time[\"conversion-plus\"].title;\n    this.description =\n      `## Description\\n ` +\n      NODE_INFO.time[\"conversion-plus\"].description +` \\n ` +\n      ` ## Example output\\n ` +\n      ` ***{\"date\":\"Mon Aug 17 2020\",\"yearMonthDay\":\"2020-08-17\",\"year\":\"2020\",\"month\":\"Aug\",\"monthAsNumber\":\"08\",\"dayAsNumber\":\"17\",\"dayOfYearNumber\":\"230\",\"day\":\"Mon\",\"pmOrAm\":\"PM\",\"hourAsAmPm\":\"8\",\"hour\":\"20\",\"timeHourMin\":\"20:26\",\"time\":\"20:26:49\",\"minute\":\"26\",\"minutesSeconds\":\"26:49\",\"seconds\":\"49\",\"milliseconds\":\"000\",\"epoch\":\"1597660009000\",\"rawDate\":\"2020-08-17T10:26:49.000Z\"}***\\n `\n\n    this.addInput('input', Type.ANY);\n    this.addOutput('out-json', Type.JSON);\n    this.settings['time'] = NodeSetting.create({\n      description: 'Time',\n      type: SettingType.DROPDOWN,\n      config: {\n        items: [\n          { value: TIME_TYPE.TIME, text: TIME_TYPE.TIME },\n          { value: TIME_TYPE.EPOCH, text: TIME_TYPE.EPOCH },\n          { value: TIME_TYPE.NEW_TS, text: TIME_TYPE.NEW_TS },\n        ],\n      },\n      value: TIME_TYPE.TIME,\n    });\n  }\n\n\n  onInputUpdated() {\n    const input = this.getInputData(0);\n    const result = this.timeSelection(input)\n    const out = TimeUtils.timeConvertPlus(result)\n    this.setOutputData(0, out);\n  }\n\n  onAfterSettingsChange() {\n    this.onInputUpdated()\n\n  }\n\n  timeSelection(input: any){\n    const timeType = this.settings['time'].value\n    let timeSelection = null;\n    if (timeType === TIME_TYPE.TIME) {\n      timeSelection = new Date(input);\n    } else if (timeType === TIME_TYPE.EPOCH) {\n      timeSelection = new Date(parseInt(input));\n    } else if (timeType === TIME_TYPE.NEW_TS) {\n      timeSelection = new Date();\n    }\n    return timeSelection;\n  }\n\n}\nContainer.registerNodeType('time/conversion-plus', TimeConvertPlusNode);\n","import * as moment from 'moment-timezone';\nimport { Container } from '../../container';\nimport { Node } from '../../node';\nimport { NODE_INFO } from '../../node-info';\nimport { NodeSetting, SettingType, Type } from '../../node-io';\nimport TimezoneUtils from '../../utils/timezone-utils';\n\nexport class TimezoneConvertNode extends Node {\n  conversionFunction;\n  constructor() {\n    super();\n    this.title = NODE_INFO.time[\"timezone-conversion\"].title;\n    this.description = NODE_INFO.time[\"timezone-conversion\"].description;\n\n    this.addInput('input', Type.ANY);\n    this.addOutput('out-time-converted', Type.ANY);\n    this.addOutput('out-local-converted', Type.ANY);\n\n    this.settings['region'] = NodeSetting.create({\n      description: 'Select Region',\n      type: SettingType.AUTOCOMPLETE,\n      config: {\n        items: TimezoneUtils.tsCategory,\n      },\n    });\n    this.settings['timezone'] = NodeSetting.create({\n      description: 'Select TimeZone (Hit save to refresh)',\n      value: \"Sydney/Australia\",\n      type: SettingType.DROPDOWN,\n    });\n\n  }\n  onAdded() {\n    this.onAfterSettingsChange();\n  }\n\n  onInputUpdated() {\n    const input = this.getInputData(0);\n    try {\n      const m = moment.tz(input, this.settings['timezone'].value);\n      const local = moment(input);\n      this.setOutputData(0, m.format());\n      this.setOutputData(1, local.format());\n    } catch (e) {\n      this.debugWarn(`ERROR: trying to convert a timezone${e}`);\n    }\n\n  }\n\n  onAfterSettingsChange() {\n    const region = this.settings['region'].value;\n    this.settings['timezone'].config = {\n      items: TimezoneUtils.tsType(region),\n    };\n    this.broadcastSettingsToClients();\n    this.onInputUpdated()\n\n  }\n\n\n\n}\nContainer.registerNodeType('time/timezone-conversion', TimezoneConvertNode);\n","enum TIME_TYPE {\n    africaZones = 'Africa',\n    americaZones = 'America',\n    antarcticaZones = 'Antarctica',\n    asiaZones = 'Asia',\n    atlanticZones = 'Atlantic',\n    australiaZones = 'Australia',\n    europeZones = 'Europe',\n    indianZones = 'Indian',\n    pacificZones = 'Pacific',\n}\n\nexport default class TimezoneUtils {\n    static tsCategory = [TIME_TYPE.africaZones, TIME_TYPE.americaZones, TIME_TYPE.antarcticaZones, TIME_TYPE.asiaZones, TIME_TYPE.atlanticZones, TIME_TYPE.australiaZones, TIME_TYPE.europeZones, TIME_TYPE.indianZones, TIME_TYPE.pacificZones].map(\n        point => {\n            return { value: point, text: point };\n        },\n    );\n\n    static tsType(type: string) {\n        switch (type) {\n            case TIME_TYPE.africaZones:\n                return Object.values(this.africaZones);\n            case TIME_TYPE.americaZones:\n                return Object.values(this.americaZones);\n            case TIME_TYPE.antarcticaZones:\n                return Object.values(this.antarcticaZones);\n            case TIME_TYPE.asiaZones:\n                return Object.values(this.asiaZones);\n            case TIME_TYPE.atlanticZones:\n                return Object.values(this.atlanticZones);\n            case TIME_TYPE.australiaZones:\n                return Object.values(this.australiaZones);\n            case TIME_TYPE.europeZones:\n                return Object.values(this.europeZones);\n            case TIME_TYPE.indianZones:\n                return Object.values(this.indianZones);\n            case TIME_TYPE.pacificZones:\n                return Object.values(this.pacificZones);\n        }\n    }\n\n    static europeZones = [\n        'Europe/Amsterdam',\n        'Europe/Andorra',\n        'Europe/Astrakhan',\n        'Europe/Athens',\n        'Europe/Belgrade',\n        'Europe/Berlin',\n        'Europe/Brussels',\n        'Europe/Bucharest',\n        'Europe/Budapest',\n        'Europe/Chisinau',\n        'Europe/Copenhagen',\n        'Europe/Dublin',\n        'Europe/Gibraltar',\n        'Europe/Helsinki',\n        'Europe/Istanbul',\n        'Europe/Kaliningrad',\n        'Europe/Kiev',\n        'Europe/Kirov',\n        'Europe/Lisbon',\n        'Europe/London',\n        'Europe/Luxembourg',\n        'Europe/Madrid',\n        'Europe/Malta',\n        'Europe/Minsk',\n        'Europe/Monaco',\n        'Europe/Moscow',\n        'Europe/Oslo',\n        'Europe/Paris',\n        'Europe/Prague',\n        'Europe/Riga',\n        'Europe/Rome',\n        'Europe/Samara',\n        'Europe/Saratov',\n        'Europe/Simferopol',\n        'Europe/Sofia',\n        'Europe/Stockholm',\n        'Europe/Tallinn',\n        'Europe/Tirane',\n        'Europe/Ulyanovsk',\n        'Europe/Uzhgorod',\n        'Europe/Vienna',\n        'Europe/Vilnius',\n        'Europe/Volgograd',\n        'Europe/Warsaw',\n        'Europe/Zaporozhye',\n        'Europe/Zurich',\n    ];\n\n    static africaZones = [\n        'Africa/Abidjan',\n        'Africa/Accra',\n        'Africa/Algiers',\n        'Africa/Bissau',\n        'Africa/Cairo',\n        'Africa/Casablanca',\n        'Africa/Ceuta',\n        'Africa/El_Aaiun',\n        'Africa/Johannesburg',\n        'Africa/Juba',\n        'Africa/Khartoum',\n        'Africa/Lagos',\n        'Africa/Maputo',\n        'Africa/Monrovia',\n        'Africa/Nairobi',\n        'Africa/Ndjamena',\n        'Africa/Sao_Tome',\n        'Africa/Tripoli',\n        'Africa/Tunis',\n        'Africa/Windhoek',\n    ];\n\n    static asiaZones = [\n        'Asia/Almaty',\n        'Asia/Amman',\n        'Asia/Anadyr',\n        'Asia/Aqtau',\n        'Asia/Aqtobe',\n        'Asia/Ashgabat',\n        'Asia/Atyrau',\n        'Asia/Baghdad',\n        'Asia/Baku',\n        'Asia/Bangkok',\n        'Asia/Barnaul',\n        'Asia/Beirut',\n        'Asia/Bishkek',\n        'Asia/Brunei',\n        'Asia/Chita',\n        'Asia/Choibalsan',\n        'Asia/Colombo',\n        'Asia/Damascus',\n        'Asia/Dhaka',\n        'Asia/Dili',\n        'Asia/Dubai',\n        'Asia/Dushanbe',\n        'Asia/Famagusta',\n        'Asia/Gaza',\n        'Asia/Hebron',\n        'Asia/Ho_Chi_Minh',\n        'Asia/Hong_Kong',\n        'Asia/Hovd',\n        'Asia/Irkutsk',\n        'Asia/Jakarta',\n        'Asia/Jayapura',\n        'Asia/Jerusalem',\n        'Asia/Kabul',\n        'Asia/Kamchatka',\n        'Asia/Karachi',\n        'Asia/Kathmandu',\n        'Asia/Khandyga',\n        'Asia/Kolkata',\n        'Asia/Krasnoyarsk',\n        'Asia/Kuala_Lumpur',\n        'Asia/Kuching',\n        'Asia/Macau',\n        'Asia/Magadan',\n        'Asia/Makassar',\n        'Asia/Manila',\n        'Asia/Nicosia',\n        'Asia/Novokuznetsk',\n        'Asia/Novosibirsk',\n        'Asia/Omsk',\n        'Asia/Oral',\n        'Asia/Pontianak',\n        'Asia/Pyongyang',\n        'Asia/Qatar',\n        'Asia/Qostanay',\n        'Asia/Qyzylorda',\n        'Asia/Riyadh',\n        'Asia/Sakhalin',\n        'Asia/Samarkand',\n        'Asia/Seoul',\n        'Asia/Shanghai',\n        'Asia/Singapore',\n        'Asia/Srednekolymsk',\n        'Asia/Taipei',\n        'Asia/Tashkent',\n        'Asia/Tbilisi',\n        'Asia/Tehran',\n        'Asia/Thimphu',\n        'Asia/Tokyo',\n        'Asia/Tomsk',\n        'Asia/Ulaanbaatar',\n        'Asia/Urumqi',\n        'Asia/Ust-Nera',\n        'Asia/Vladivostok',\n        'Asia/Yakutsk',\n        'Asia/Yangon',\n        'Asia/Yekaterinburg',\n        'Asia/Yerevan',\n    ];\n\n    static antarcticaZones = [\n        'Antarctica/Casey',\n        'Antarctica/Davis',\n        'Antarctica/DumontDUrville',\n        'Antarctica/Macquarie',\n        'Antarctica/Mawson',\n        'Antarctica/Palmer',\n        'Antarctica/Rothera',\n        'Antarctica/Syowa',\n        'Antarctica/Troll',\n        'Antarctica/Vostok',\n    ];\n\n    static americaZones = [\n        'America/Adak',\n        'America/Anchorage',\n        'America/Araguaina',\n        'America/Argentina/Buenos_Aires',\n        'America/Argentina/Catamarca',\n        'America/Argentina/Cordoba',\n        'America/Argentina/Jujuy',\n        'America/Argentina/La_Rioja',\n        'America/Argentina/Mendoza',\n        'America/Argentina/Rio_Gallegos',\n        'America/Argentina/Salta',\n        'America/Argentina/San_Juan',\n        'America/Argentina/San_Luis',\n        'America/Argentina/Tucuman',\n        'America/Argentina/Ushuaia',\n        'America/Asuncion',\n        'America/Atikokan',\n        'America/Bahia',\n        'America/Bahia_Banderas',\n        'America/Barbados',\n        'America/Belem',\n        'America/Belize',\n        'America/Blanc-Sablon',\n        'America/Boa_Vista',\n        'America/Bogota',\n        'America/Boise',\n        'America/Cambridge_Bay',\n        'America/Campo_Grande',\n        'America/Cancun',\n        'America/Caracas',\n        'America/Cayenne',\n        'America/Chicago',\n        'America/Chihuahua',\n        'America/Costa_Rica',\n        'America/Creston',\n        'America/Cuiaba',\n        'America/Curacao',\n        'America/Danmarkshavn',\n        'America/Dawson',\n        'America/Dawson_Creek',\n        'America/Denver',\n        'America/Detroit',\n        'America/Edmonton',\n        'America/Eirunepe',\n        'America/El_Salvador',\n        'America/Fort_Nelson',\n        'America/Fortaleza',\n        'America/Glace_Bay',\n        'America/Godthab',\n        'America/Goose_Bay',\n        'America/Grand_Turk',\n        'America/Guatemala',\n        'America/Guayaquil',\n        'America/Guyana',\n        'America/Halifax',\n        'America/Havana',\n        'America/Hermosillo',\n        'America/Indiana/Indianapolis',\n        'America/Indiana/Knox',\n        'America/Indiana/Marengo',\n        'America/Indiana/Petersburg',\n        'America/Indiana/Tell_City',\n        'America/Indiana/Vevay',\n        'America/Indiana/Vincennes',\n        'America/Indiana/Winamac',\n        'America/Inuvik',\n        'America/Iqaluit',\n        'America/Jamaica',\n        'America/Juneau',\n        'America/Kentucky/Louisville',\n        'America/Kentucky/Monticello',\n        'America/La_Paz',\n        'America/Lima',\n        'America/Los_Angeles',\n        'America/Maceio',\n        'America/Managua',\n        'America/Manaus',\n        'America/Martinique',\n        'America/Matamoros',\n        'America/Mazatlan',\n        'America/Menominee',\n        'America/Merida',\n        'America/Metlakatla',\n        'America/Mexico_City',\n        'America/Miquelon',\n        'America/Moncton',\n        'America/Monterrey',\n        'America/Montevideo',\n        'America/Nassau',\n        'America/New_York',\n        'America/Nipigon',\n        'America/Nome',\n        'America/Noronha',\n        'America/North_Dakota/Beulah',\n        'America/North_Dakota/Center',\n        'America/North_Dakota/New_Salem',\n        'America/Ojinaga',\n        'America/Panama',\n        'America/Pangnirtung',\n        'America/Paramaribo',\n        'America/Phoenix',\n        'America/Port-au-Prince',\n        'America/Port_of_Spain',\n        'America/Porto_Velho',\n        'America/Puerto_Rico',\n        'America/Punta_Arenas',\n        'America/Rainy_River',\n        'America/Rankin_Inlet',\n        'America/Recife',\n        'America/Regina',\n        'America/Resolute',\n        'America/Rio_Branco',\n        'America/Santarem',\n        'America/Santiago',\n        'America/Santo_Domingo',\n        'America/Sao_Paulo',\n        'America/Scoresbysund',\n        'America/Sitka',\n        'America/St_Johns',\n        'America/Swift_Current',\n        'America/Tegucigalpa',\n        'America/Thule',\n        'America/Thunder_Bay',\n        'America/Tijuana',\n        'America/Toronto',\n        'America/Vancouver',\n        'America/Whitehorse',\n        'America/Winnipeg',\n        'America/Yakutat',\n        'America/Yellowknife',\n    ];\n\n    static pacificZones = [\n        'Pacific/Apia',\n        'Pacific/Auckland',\n        'Pacific/Bougainville',\n        'Pacific/Chatham',\n        'Pacific/Chuuk',\n        'Pacific/Easter',\n        'Pacific/Efate',\n        'Pacific/Enderbury',\n        'Pacific/Fakaofo',\n        'Pacific/Fiji',\n        'Pacific/Funafuti',\n        'Pacific/Galapagos',\n        'Pacific/Gambier',\n        'Pacific/Guadalcanal',\n        'Pacific/Guam',\n        'Pacific/Honolulu',\n        'Pacific/Kiritimati',\n        'Pacific/Kosrae',\n        'Pacific/Kwajalein',\n        'Pacific/Majuro',\n        'Pacific/Marquesas',\n        'Pacific/Nauru',\n        'Pacific/Niue',\n        'Pacific/Norfolk',\n        'Pacific/Noumea',\n        'Pacific/Pago_Pago',\n        'Pacific/Palau',\n        'Pacific/Pitcairn',\n        'Pacific/Pohnpei',\n        'Pacific/Port_Moresby',\n        'Pacific/Rarotonga',\n        'Pacific/Tahiti',\n        'Pacific/Tarawa',\n        'Pacific/Tongatapu',\n        'Pacific/Wake',\n        'Pacific/Wallis',\n    ];\n\n    static australiaZones = [\n        'Australia/Adelaide',\n        'Australia/Brisbane',\n        'Australia/Broken_Hill',\n        'Australia/Currie',\n        'Australia/Darwin',\n        'Australia/Eucla',\n        'Australia/Hobart',\n        'Australia/Lindeman',\n        'Australia/Lord_Howe',\n        'Australia/Melbourne',\n        'Australia/Perth',\n        'Australia/Sydney',\n    ];\n\n    static atlanticZones = [\n        'Atlantic/Azores',\n        'Atlantic/Bermuda',\n        'Atlantic/Canary',\n        'Atlantic/Cape_Verde',\n        'Atlantic/Faroe',\n        'Atlantic/Madeira',\n        'Atlantic/Reykjavik',\n        'Atlantic/South_Georgia',\n        'Atlantic/Stanley',\n    ];\n\n    static indianZones = [\n        'Indian/Chagos',\n        'Indian/Christmas',\n        'Indian/Cocos',\n        'Indian/Kerguelen',\n        'Indian/Mahe',\n        'Indian/Maldives',\n        'Indian/Mauritius',\n        'Indian/Reunion',\n    ];\n\n\n}\n","import { Container } from '../../container';\nimport { Node } from '../../node';\nimport { Side } from '../../node-interface';\nimport { NodeSetting, SettingType, Type } from '../../node-io';\nimport TimeUtils from '../../utils/time-utils';\nimport { NODE_INFO } from '../../node-info';\n\nconst moment = require('moment');\n\nexport class ClockNode extends Node {\n  lastInterval = 1000;\n  timeoutFunc;\n\n  constructor() {\n    super();\n    this.title = NODE_INFO.time.clock.title;\n    this.description = NODE_INFO.time.clock.description;\n    this.addOutput('timeString', Type.STRING);\n    this.addOutput('hour', Type.NUMBER);\n    this.addOutput('min', Type.NUMBER);\n    this.addOutput('sec', Type.NUMBER);\n    this.addInputWithSettings('interval', Type.NUMBER, 1, 'Interval');\n\n    this.settings['time'] = NodeSetting.create({\n      description: 'Time',\n      type: SettingType.DROPDOWN,\n      config: {\n        items: [\n          { value: 'milliseconds', text: 'Milliseconds' },\n          { value: 'seconds', text: 'Seconds' },\n          { value: 'minutes', text: 'Minutes' },\n          { value: 'hours', text: 'Hours' },\n        ],\n      },\n      value: 'seconds',\n    });\n    this.setSettingsConfig({\n      groups: [{ time: {}, interval: { weight: 2 } }],\n    });\n\n    this.settings['advanced'] = NodeSetting.create({\n      description: 'Show Advanced Options',\n      value: false,\n      type: SettingType.BOOLEAN,\n    });\n\n    this.properties['advancedOutputs'] = false;\n  }\n\n  init() {\n    if (this.settings['advanced'].value) {\n      this.addOutputs();\n    }\n  }\n\n  onAdded() {\n    this.inputs[0]['name'] = `[interval] (${this.settings['time'].value})`;\n    clearInterval(this.timeoutFunc);\n    let interval = this.getInputData(0);\n    interval = TimeUtils.timeConvert(interval, this.settings['time'].value);\n    this.timeoutFunc = setInterval(() => {\n      this.recalculate();\n    }, interval);\n    this.lastInterval = interval;\n    this.recalculate();\n  }\n\n  onInputUpdated() {\n    let interval = this.getInputData(0);\n    interval = TimeUtils.timeConvert(interval, this.settings['time'].value);\n    if (interval != this.lastInterval) {\n      this.lastInterval = interval;\n      clearInterval(this.timeoutFunc);\n      this.timeoutFunc = setInterval(() => {\n        this.recalculate();\n      }, interval);\n    }\n  }\n\n  recalculate() {\n    if (this.side !== Side.server) return;\n    const advanced = this.settings['advanced'].value;\n    const now = moment();\n    this.setOutputData(0, now.format('HH:mm:ss'), true);\n    this.setOutputData(1, now.hours(), true);\n    this.setOutputData(2, now.minutes(), true);\n    this.setOutputData(3, now.seconds(), true);\n    if (advanced) {\n      this.setOutputData(4, now.milliseconds(), true);\n      this.setOutputData(5, now.toString(), true);\n      this.setOutputData(6, now.utcOffset() / 60, true);\n      this.setOutputData(7, now.valueOf(), true);\n    }\n  }\n\n  onAfterSettingsChange() {\n    const advanced = this.settings['advanced'].value;\n    this.inputs[0]['name'] = `[interval] (${this.settings['time'].value})`;\n    if (advanced && !this.properties['advancedOutputs']) {\n      this.addOutputs();\n      this.properties['advancedOutputs'] = true;\n      this.persistProperties(false, true);\n    } else if (!advanced && this.properties['advancedOutputs']) {\n      this.removeOutput(4);\n      this.removeOutput(5);\n      this.removeOutput(6);\n      this.removeOutput(7);\n      this.properties['advancedOutputs'] = false;\n      this.persistProperties(false, true);\n    }\n    this.updateNodeOutput();\n    this.onInputUpdated();\n  }\n\n  private addOutputs() {\n    this.addOutput('millis', Type.NUMBER);\n    this.addOutput('longString', Type.STRING);\n    this.addOutput('TZOffset', Type.NUMBER);\n    this.addOutput('epoch', Type.NUMBER);\n  }\n}\nContainer.registerNodeType('time/clock', ClockNode);\n","import { Container } from '../../container';\nimport { Node } from '../../node';\nimport { Type } from '../../node-io';\nimport { NODE_INFO } from '../../node-info';\n\nexport class DateNode extends Node {\n  interval = 5000;\n  timeoutFunc;\n  constructor() {\n    super();\n    this.title = NODE_INFO.time.date.title;\n    this.description = NODE_INFO.time.date.description;\n    this.addOutput('dateString', Type.STRING);\n    this.addOutput('dayString', Type.STRING);\n    this.addOutput('dayOfWeek', Type.NUMBER);\n    this.addOutput('date', Type.NUMBER);\n    this.addOutput('month', Type.NUMBER);\n    this.addOutput('year', Type.NUMBER);\n  }\n\n  onAdded() {\n    clearInterval(this.timeoutFunc);\n    this.timeoutFunc = setInterval(() => {\n      this.recalculate();\n    }, this.interval);\n    this.recalculate();\n  }\n\n  recalculate() {\n    let now = new Date();\n    const day = now.getDay();\n    let dayString: string = null;\n    switch (day) {\n      case 0:\n        dayString = 'Sunday';\n        break;\n      case 1:\n        dayString = 'Monday';\n        break;\n      case 2:\n        dayString = 'Tuesday';\n        break;\n      case 3:\n        dayString = 'Wednesday';\n        break;\n      case 4:\n        dayString = 'Thursday';\n        break;\n      case 5:\n        dayString = 'Friday';\n        break;\n      case 6:\n        dayString = 'Saturday';\n        break;\n    }\n    this.setOutputData(0, now.toLocaleDateString(), true);\n    this.setOutputData(1, dayString, true);\n    this.setOutputData(2, day, true);\n    this.setOutputData(3, now.getDate(), true);\n    this.setOutputData(4, now.getMonth() + 1, true);\n    this.setOutputData(5, now.getFullYear(), true);\n  }\n}\nContainer.registerNodeType('time/date', DateNode);\n","import * as moment from 'moment';\nimport { Container } from '../../container';\nimport { Node } from '../../node';\nimport { NODE_INFO } from '../../node-info';\nimport { NodeSetting, SettingType, Type } from '../../node-io';\n\nenum TIME_TYPE {\n  TIME = 'time string as input (YY:MM:DD)',\n  EPOCH = 'time epoch as input (1597662977823)'\n}\n\nexport class TimeDiffNode extends Node {\n  conversionFunction;\n  constructor() {\n    super();\n    this.title = NODE_INFO.time[\"date-difference\"].title;\n    this.description =\n      `## Description\\n ` +\n      NODE_INFO.time[\"date-difference\"].description + ` \\n ` +\n      `## Inputs\\n ` +\n      ` The inputs can be sent as a unix timestamp ***epoch***. Change the settings ***Time input type*** for different input type \\n ` +\n      `## Outputs (return data type is ***JSON***)\\n ` +\n      ` ***out-difference-time*** will return the time difference in for example: ***hours: 1, minutes: 30 ***\\n ` +\n      ` ***out-difference-totals*** will return the time difference in for example: ***hours: 1, minutes: 90 ***\\n `\n\n    this.addInput('time-compare-1', Type.ANY);\n    this.addInput('time-compare-2', Type.ANY);\n    this.addOutput('out-difference-time', Type.ANY);\n    this.addOutput('out-difference-totals', Type.ANY);\n    this.settings['time'] = NodeSetting.create({\n      description: 'Time input type',\n      type: SettingType.DROPDOWN,\n      config: {\n        items: [\n          // { value: TIME_TYPE.TIME, text: TIME_TYPE.TIME },\n          { value: TIME_TYPE.EPOCH, text: TIME_TYPE.EPOCH },\n        ],\n      },\n      value: TIME_TYPE.TIME,\n    });\n\n\n  }\n  onAdded() {\n    this.onAfterSettingsChange();\n  }\n\n  onInputUpdated() {\n    const date1 = this.getInputData(0);\n    const date2 = this.getInputData(1);\n    const timeType = this.settings['time'].value\n    try {\n      if (timeType === TIME_TYPE.TIME) {\n        this.setOutputData(0, this.diffTime(moment(date1), date2));\n        this.setOutputData(1, this.diffTotals(moment(date1), date2));\n      } else if (timeType === TIME_TYPE.EPOCH) {\n        this.setOutputData(0, this.diffTime(moment(parseInt(date1)), moment(parseInt(date2))));\n        this.setOutputData(1, this.diffTotals(moment(parseInt(date1)), moment(parseInt(date2))));\n      }\n    } catch (e) {\n      this.debugWarn(`ERROR: trying to convert a timezone ${e}`);\n    }\n  }\n\n  onAfterSettingsChange() {\n    this.onInputUpdated()\n  }\n\n\n  diffTime(date1: any, date2: any) {\n    let years = date1.diff(date2, 'year');\n    date2.add(years, 'years');\n    let months = date1.diff(date2, 'months');\n    date2.add(months, 'months');\n    let days = date1.diff(date2, 'days');\n    date2.add(days, 'days');\n    let hours = date1.diff(date2, 'hours');\n    date2.add(hours, 'hours');\n    let minutes = date1.diff(date2, 'minutes');\n    date2.add(minutes, 'minutes');\n    let seconds = date1.diff(date2, 'seconds');\n    let ms = date1.diff(date2);\n    return { years, months, days, hours, minutes, seconds, ms };\n  }\n\n  diffTotals(date1: any, date2: any) {\n    let years = date1.diff(date2, 'year');\n    let months = date1.diff(date2, 'months');\n    let days = date1.diff(date2, 'days');\n    let hours = date1.diff(date2, 'hours');\n    let minutes = date1.diff(date2, 'minutes');\n    let seconds = date1.diff(date2, 'seconds');\n    let ms = date1.diff(date2);\n    return { years, months, days, hours, minutes, seconds, ms };\n  }\n\n}\n\nContainer.registerNodeType('time/date-difference', TimeDiffNode);\n","import { Container } from '../../container';\nimport { Node } from '../../node';\nimport { NodeSetting, SettingType, Type } from '../../node-io';\nimport Utils from '../../utils';\nimport TimeUtils from '../../utils/time-utils';\nimport { NODE_INFO } from '../../node-info';\n\nclass StopwatchNode extends Node {\n  lastRunVal = false;\n  lastResetVal = false;\n  lastInterval = 100;\n  runState = false;\n  startTime = null;\n  elapsed = 0;\n  units = 1;\n  digits = 3;\n  timeoutFunc;\n\n  constructor() {\n    super();\n    this.title = NODE_INFO.time.stopwatch.title;\n    this.description = NODE_INFO.time.stopwatch.description;\n    this.addInputWithSettings('enable', Type.BOOLEAN, 0, 'Enable', false);\n    this.addInput('reset', Type.BOOLEAN);\n\n    this.settings['units'] = NodeSetting.create({\n      description: 'Output Units',\n      type: SettingType.DROPDOWN,\n      config: {\n        items: [\n          { value: 1, text: 'Milliseconds' },\n          { value: 1000, text: 'Seconds' },\n          { value: 60000, text: 'Minutes' },\n          { value: 3.6e6, text: 'Hours' },\n          { value: 8.64e7, text: 'Days' },\n        ],\n      },\n      value: 1,\n    });\n    this.addInputWithSettings('interval', Type.NUMBER, 200, 'Count Interval', false);\n    this.settings['time'] = NodeSetting.create({\n      description: 'Units',\n      type: SettingType.DROPDOWN,\n      config: {\n        items: [\n          { value: 'milliseconds', text: 'Milliseconds' },\n          { value: 'seconds', text: 'Seconds' },\n          { value: 'minutes', text: 'Minutes' },\n          { value: 'hours', text: 'Hours' },\n        ],\n      },\n      value: 'milliseconds',\n    });\n    this.setSettingsConfig({\n      groups: [{ interval: { weight: 2 }, time: {} }],\n    });\n    this.addOutput('elapsed', Type.NUMBER);\n\n    this.setOutputData(0, null);\n    this.elapsed = 0;\n  }\n\n  onAdded() {\n    this.runState = false;\n    this.setOutputData(0, this.elapsed);\n    this.inputs[2]['name'] = `[interval] (${this.settings['time'].value})`;\n    this.outputs[0]['name'] = '[elapsed] (milliseconds)';\n    this.onAfterSettingsChange();\n  }\n\n  onInputUpdated() {\n    let run = this.getInputData(0);\n    let reset = this.getInputData(1);\n\n    if (reset && !this.lastResetVal) {\n      this.elapsed = 0;\n      this.startTime = Date.now();\n      this.setOutputData(0, 0, true);\n    }\n    this.lastResetVal = reset;\n\n    let interval = this.getInputData(2);\n    interval = TimeUtils.timeConvert(interval, this.settings['time'].value);\n    if (interval != this.lastInterval && this.runState) {\n      clearInterval(this.timeoutFunc);\n      this.setOutputData(0, Date.now() - this.startTime + this.elapsed, true);\n      this.timeoutFunc = setInterval(() => {\n        const output = (Date.now() - this.startTime + this.elapsed) / this.units;\n        this.setOutputData(0, Utils.toFixedNumber(output, this.digits), true);\n      }, interval);\n      this.lastInterval = interval;\n    }\n\n    if (run && !this.lastRunVal) {\n      this.setOutputData(0, this.elapsed, true);\n      this.runState = true;\n      this.startTime = Date.now();\n      this.timeoutFunc = setInterval(() => {\n        const output = (Date.now() - this.startTime + this.elapsed) / this.units;\n        this.setOutputData(0, Utils.toFixedNumber(output, this.digits), true);\n      }, interval);\n      this.lastRunVal = run;\n    } else if (!run && this.lastRunVal) {\n      clearInterval(this.timeoutFunc);\n      this.elapsed = Date.now() - this.startTime + this.elapsed;\n      this.runState = false;\n      this.setOutputData(0, this.elapsed, true);\n      this.lastRunVal = run;\n    }\n\n    /*\n    if (run && run != this.lastRunVal) {\n      this.runState = true;\n      this.startTime = Date.now();\n      this.timeoutFunc = setInterval(() => {\n        const output = (Date.now() - this.startTime + this.elapsed) / this.units;\n        this.setOutputData(0, Utils.toFixedNumber(output, this.digits), true);\n      }, interval);\n      this.lastRunVal = run;\n    } else if (!run && run != this.lastRunVal) {\n      this.elapsed = Date.now() - this.startTime + this.elapsed;\n      this.runState = false;\n      clearInterval(this.timeoutFunc);\n      this.lastRunVal = run;\n    }\n\n*/\n  }\n\n  onAfterSettingsChange() {\n    this.inputs[2]['name'] = `[interval] (${this.settings['time'].value})`;\n    this.units = Number(this.settings['units'].value);\n    switch (this.units) {\n      case 1:\n        this.outputs[0]['name'] = '[elapsed] (milliseconds)';\n        break;\n      case 1000:\n        this.outputs[0]['name'] = '[elapsed] (seconds)';\n        break;\n      case 60000:\n        this.outputs[0]['name'] = '[elapsed] (minutes)';\n        break;\n      case 3.6e6:\n        this.outputs[0]['name'] = '[elapsed] (hours)';\n        break;\n      case 8.64e7:\n        this.outputs[0]['name'] = '[elapsed] (days)';\n        break;\n      default:\n        this.outputs[0]['name'] = '[elapsed] (milliseconds)';\n    }\n\n    const output = Number(this.outputs[0].data) / this.units;\n    this.setOutputData(0, Utils.toFixedNumber(output, this.digits), true);\n    this.onInputUpdated();\n  }\n}\nContainer.registerNodeType('time/stopwatch', StopwatchNode);\n","import { Container } from '../../container';\nimport { Node } from '../../node';\nimport { NODE_INFO } from '../../node-info';\nimport { NodeSetting, SettingType, Type } from '../../node-io';\n\nconst CronJob = require('cron').CronJob;\n// const parser = require('cron-parser');\n//const cronTime = require('cron-time-generator');\nconst jsonata = require('jsonata');\nconst construe = require('cronstrue');\n\nexport class CronIntervalNode extends Node {\n  job = null;\n  jobCronExp = '';\n  timeoutFunc;\n  constructor() {\n    super();\n    this.title = NODE_INFO.time[\"cron-interval\"].title;\n    this.description = NODE_INFO.time[\"cron-interval\"].description;\n    this.addInputWithSettings('enable', Type.BOOLEAN, false, 'Enable', false);\n    this.addOutput('output', Type.BOOLEAN);\n    this.addOutput('info', Type.STRING);\n    this.addOutput('cronExpression', Type.STRING);\n    this.addOutput('cronDescription', Type.STRING);\n    this.addOutput('nextExecution', Type.STRING);\n\n    this.settings['timezone'] = NodeSetting.create({\n      description: 'Enter the cron time zone',\n      value: 'Australia/Sydney',\n      type: SettingType.STRING,\n    });\n    this.settings['cron-type'] = NodeSetting.create({\n      description: 'Cron Type',\n      type: SettingType.DROPDOWN,\n      config: {\n        items: [\n          { value: 0, text: 'Every Minutes (At every xth minute)' },\n          { value: 1, text: 'Every Hours (At minute x past every xth hour.)' },\n          { value: 2, text: 'Every Days (At x:xx every x days)' },\n          { value: 8, text: 'Every Day At Time (x:xx)' },\n          { value: 3, text: 'Every Month (Start of every month)' },\n          { value: 4, text: 'Every Month On (On x Day at x:xx)' },\n          { value: 5, text: 'Every Year (Start of every year)' },\n          { value: 6, text: 'Every Year On (On x month x day at x:xx)' },\n          { value: 7, text: 'Between Days (At x:xx between x and x day of the month)' },\n        ],\n      },\n      value: 0,\n    });\n    this.settings['min'] = NodeSetting.create({\n      description: 'Set minute',\n      value: 1,\n      type: SettingType.NUMBER,\n    });\n    this.settings['hour'] = NodeSetting.create({\n      description: 'Set hour',\n      value: 13,\n      type: SettingType.NUMBER,\n    });\n    this.settings['day'] = NodeSetting.create({\n      description: 'Set day',\n      value: 1,\n      type: SettingType.NUMBER,\n    });\n    this.settings['dayBetweenStart'] = NodeSetting.create({\n      description: 'Day Range Start',\n      value: 1,\n      type: SettingType.NUMBER,\n    });\n    this.settings['dayBetweenEnd'] = NodeSetting.create({\n      description: 'Day Range End',\n      value: 15,\n      type: SettingType.NUMBER,\n    });\n    this.settings['month'] = NodeSetting.create({\n      description: 'Set month',\n      value: 1,\n      type: SettingType.NUMBER,\n    });\n\n    this.setSettingsConfig({\n      groups: [{ dayBetweenStart: {}, dayBetweenEnd: {} }],\n      conditions: {\n        min: setting => {\n          const cronSetting = setting['cron-type'].value;\n          return (\n            cronSetting == 0 ||\n            cronSetting == 1 ||\n            cronSetting == 2 ||\n            cronSetting == 4 ||\n            cronSetting == 6 ||\n            cronSetting == 7 ||\n            cronSetting == 8\n          );\n        },\n        hour: setting => {\n          const cronSetting = setting['cron-type'].value;\n          return (\n            cronSetting == 1 ||\n            cronSetting == 2 ||\n            cronSetting == 4 ||\n            cronSetting == 6 ||\n            cronSetting == 7 ||\n            cronSetting == 8\n          );\n        },\n        day: setting => {\n          const cronSetting = setting['cron-type'].value;\n          return cronSetting == 2 || cronSetting == 4 || cronSetting == 6 || cronSetting == 7;\n        },\n        dayBetweenStart: setting => {\n          const cronSetting = setting['cron-type'].value;\n          return cronSetting == 7;\n        },\n        dayBetweenEnd: setting => {\n          const cronSetting = setting['cron-type'].value;\n          return cronSetting == 7;\n        },\n        month: setting => {\n          const cronSetting = setting['cron-type'].value;\n          return cronSetting == 6;\n        },\n      },\n    });\n  }\n\n  onAdded() {\n    clearInterval(this.timeoutFunc);\n    this.setOutputData(0, false);\n    this.onAfterSettingsChange();\n  }\n\n  onAfterSettingsChange() {\n    this.onInputUpdated();\n  }\n\n  onRemoved() {\n    //remove the job on delete of the node\n    if (this.job) this.job.stop();\n  }\n\n  jsonataQuery(nextJobs) {\n    //use jsonata to filter the next scheduled time\n    let expression = jsonata('_d');\n    return expression.evaluate(nextJobs);\n  }\n\n  onInputUpdated() {\n    const enable = this.getInputData(0);\n    const minute = parseInt(this.settings['min'].value);\n    const hour = parseInt(this.settings['hour'].value);\n    const day = parseInt(this.settings['day'].value);\n    const dayBetweenStart = parseInt(this.settings['dayBetweenStart'].value);\n    const dayBetweenEnd = parseInt(this.settings['dayBetweenEnd'].value);\n    const month = parseInt(this.settings['month'].value);\n    const timezone = this.settings['timezone'].value;\n    const cronType = this.settings['cron-type'].value;\n    let cronExp = null;\n\n    if (enable) {\n      cronExp = 'invalid';\n      //build the cronjob string\n      if (cronType == 0 && minute >= 0 && minute < 60) {\n        // 'Every Minutes (At every xth minute)'\n        // cronExp = cronTime.every(minute).minutes();\n        cronExp = '*/' + minute + ' * * * *';\n      } else if (cronType == 1 && minute >= 0 && minute < 60 && hour >= 0 && hour < 24) {\n        // 'Every Hours (At minute x past every xth hour.)'\n        //cronExp = cronTime.every(hour).hours();\n        cronExp = minute + ' */' + hour + ' * * *';\n      } else if (cronType == 2 && minute >= 0 && minute < 60 && hour >= 0 && hour < 24 && day > 0 && day <= 31) {\n        // 'Every Days (At x:xx every x days)'\n        //cronExp = cronTime.every(day).days(hour, minute);\n        cronExp = minute + ' ' + hour + ' */' + day + ' * *';\n      } else if (cronType == 3) {\n        // 'Every Month (Start of every month)'\n        //cronExp = cronTime.everyMonth();\n        cronExp = '0 0 1 * *';\n      } else if (cronType == 4 && minute >= 0 && minute < 60 && hour >= 0 && hour < 24 && day > 0 && day <= 31) {\n        // 'Every Month On (On x Day at x:xx)'\n        //cronExp = cronTime.everyMonthOn(day, hour, minute);\n        cronExp = minute + ' ' + hour + ' ' + day + ' * *';\n      } else if (cronType == 5) {\n        // 'Every Year (Start of every year)'\n        //cronExp = cronTime.everyYear();\n        cronExp = '0 0 1 1 *';\n      } else if (\n        cronType == 6 &&\n        minute >= 0 &&\n        minute < 60 &&\n        hour >= 0 &&\n        hour < 24 &&\n        day > 0 &&\n        day <= 31 &&\n        month >= 0 &&\n        month <= 12\n      ) {\n        // 'Every Year On (On x month x day at x:xx)'\n        //cronExp = cronTime.everyYearIn(month, day, hour, minute);\n        cronExp = minute + ' ' + hour + ' ' + day + ' ' + month + ' *';\n      } else if (\n        cronType == 7 &&\n        minute >= 0 &&\n        minute < 60 &&\n        hour >= 0 &&\n        hour < 24 &&\n        dayBetweenStart < dayBetweenEnd &&\n        dayBetweenStart >= 1 &&\n        dayBetweenStart <= 30 &&\n        dayBetweenEnd >= 2 &&\n        dayBetweenEnd <= 31\n      ) {\n        //'Between Days (Between  x - x th day of the month)'\n        //cronExp = cronTime.between(day, dayBetween).days();\n        cronExp = minute + ' ' + hour + ' ' + dayBetweenStart + '-' + dayBetweenEnd + ' * *';\n      } else if (cronType == 8 && minute >= 0 && minute < 60 && hour >= 0 && hour < 24) {\n        // 'Every Day At Time (x:xx)'\n        cronExp = minute + ' ' + hour + ' * * *';\n      }\n    }\n    if (!enable || cronExp == null || cronExp === 'invalid') {\n      if (cronExp === 'invalid') this.setOutputData(1, 'invalid configuration');\n      else this.setOutputData(1, 'CRON job stopped');\n      try {\n        if (this.job) this.job.stop();\n      } catch (err) {\n        this.setOutputData(1, err);\n      }\n      this.job = null;\n      this.jobCronExp = '';\n      this.setOutputData(0, false, true);\n      this.setOutputData(2, null, true);\n      this.setOutputData(3, null, true);\n      this.setOutputData(4, null, true);\n      return;\n    }\n\n    if (this.job && cronExp !== this.jobCronExp) {\n      this.setOutputData(1, 'CRON job stopped');\n      this.job.stop();\n      this.job = null;\n      this.jobCronExp = '';\n    }\n    try {\n      this.jobCronExp = cronExp;\n      this.setOutputData(2, cronExp);\n      this.setOutputData(3, construe.toString(cronExp));\n      this.job = new CronJob(\n        cronExp,\n        () => {\n          this.setOutputData(0, true);\n          this.timeoutFunc = setTimeout(() => {\n            this.setOutputData(0, false);\n          }, 500);\n          //get next job\n          let nextJobs = this.job.nextDates(1);\n          this.setOutputData(4, this.jsonataQuery(nextJobs));\n        },\n        null,\n        null,\n        timezone,\n      );\n      setTimeout(function() {}, 500);\n      this.setOutputData(1, 'CRON job started');\n      this.job.start();\n      let nextJobs = this.job.nextDates(1);\n      this.setOutputData(4, this.jsonataQuery(nextJobs));\n    } catch (err) {\n      this.setOutputData(1, err);\n    }\n  }\n}\nContainer.registerNodeType('time/cron-interval', CronIntervalNode);\n","import { Container } from '../../container';\nimport { Node } from '../../node';\nimport { NODE_INFO } from '../../node-info';\nimport { NodeSetting, SettingType, Type } from '../../node-io';\n\nconst CronJob = require('cron').CronJob;\n//const parser = require('cron-parser');\n//const cb = require('dx-cron-builder');\nconst jsonata = require('jsonata');\nconst construe = require('cronstrue');\n\nexport class CronWeeklyNode extends Node {\n  job = null;\n  jobCronExp = '';\n  timeoutFunc;\n  constructor() {\n    super();\n    this.title = NODE_INFO.time[\"cron-weekly\"].title;\n    this.description = NODE_INFO.time[\"cron-weekly\"].description;\n    this.addInputWithSettings('enable', Type.BOOLEAN, false, 'Enable', false);\n    this.addOutput('output', Type.BOOLEAN);\n    this.addOutput('info', Type.STRING);\n    this.addOutput('cronExpression', Type.STRING);\n    this.addOutput('cronDescription', Type.STRING);\n    this.addOutput('nextExecution', Type.STRING);\n    this.settings['timezone'] = NodeSetting.create({\n      description: 'Enter the cron time zone',\n      value: 'Australia/Sydney',\n      type: SettingType.STRING,\n    });\n\n    this.settings['min'] = NodeSetting.create({\n      description: 'Set minute',\n      value: 0,\n      type: SettingType.NUMBER,\n    });\n    this.settings['hour'] = NodeSetting.create({\n      description: 'Set hour',\n      value: 6,\n      type: SettingType.NUMBER,\n    });\n\n    this.settings['sunday'] = NodeSetting.create({\n      description: 'sunday',\n      value: false,\n      type: SettingType.BOOLEAN,\n    });\n    this.settings['monday'] = NodeSetting.create({\n      description: 'monday',\n      value: false,\n      type: SettingType.BOOLEAN,\n    });\n    this.settings['tuesday'] = NodeSetting.create({\n      description: 'tuesday',\n      value: false,\n      type: SettingType.BOOLEAN,\n    });\n    this.settings['wednesday'] = NodeSetting.create({\n      description: 'wednesday',\n      value: false,\n      type: SettingType.BOOLEAN,\n    });\n    this.settings['thursday'] = NodeSetting.create({\n      description: 'thursday',\n      value: false,\n      type: SettingType.BOOLEAN,\n    });\n    this.settings['friday'] = NodeSetting.create({\n      description: 'friday',\n      value: false,\n      type: SettingType.BOOLEAN,\n    });\n    this.settings['saturday'] = NodeSetting.create({\n      description: 'saturday',\n      value: false,\n      type: SettingType.BOOLEAN,\n    });\n  }\n\n  onAdded() {\n    clearInterval(this.timeoutFunc);\n    this.setOutputData(0, false);\n    this.onAfterSettingsChange();\n  }\n\n  onAfterSettingsChange() {\n    this.onInputUpdated();\n  }\n\n  onRemoved() {\n    //remove the job on delete of the node\n    if (this.job) this.job.stop();\n  }\n\n  jsonataQuery(nextJobs) {\n    //use jsonata to filter the next scheduled time\n    let expression = jsonata('_d');\n    return expression.evaluate(nextJobs);\n  }\n\n  onInputUpdated() {\n    const enable = this.getInputData(0);\n    let cronExp = null;\n    //make sure the times are correct\n    if (enable) {\n      cronExp = 'invalid';\n      const minute = this.settings['min'].value;\n      const hour = this.settings['hour'].value;\n      if (minute >= 0 && minute <= 59 && hour >= 0 && hour < 24) {\n        cronExp = minute + ' ' + hour + ' * * ';\n        let daysArray = [];\n        if (this.settings['sunday'].value) daysArray.push('0');\n        if (this.settings['monday'].value) daysArray.push('1');\n        if (this.settings['tuesday'].value) daysArray.push('2');\n        if (this.settings['wednesday'].value) daysArray.push('3');\n        if (this.settings['thursday'].value) daysArray.push('4');\n        if (this.settings['friday'].value) daysArray.push('5');\n        if (this.settings['saturday'].value) daysArray.push('6');\n        cronExp += daysArray.join(',');\n      }\n    }\n    if (!enable || cronExp == null || cronExp === 'invalid') {\n      if (cronExp === 'invalid') this.setOutputData(1, 'invalid configuration');\n      else this.setOutputData(1, 'CRON job stopped');\n      try {\n        if (this.job) this.job.stop();\n      } catch (err) {\n        this.setOutputData(1, err);\n      }\n      this.job = null;\n      this.jobCronExp = '';\n      this.setOutputData(0, false, true);\n      this.setOutputData(2, null, true);\n      this.setOutputData(3, null, true);\n      this.setOutputData(4, null, true);\n      return;\n    }\n    const timezone = this.settings['timezone'].value;\n    if (this.job && cronExp !== this.jobCronExp) {\n      this.setOutputData(1, 'CRON job stopped');\n      this.job.stop();\n      this.job = null;\n      this.jobCronExp = '';\n    }\n    try {\n      this.jobCronExp = cronExp;\n      this.setOutputData(2, cronExp);\n      this.setOutputData(3, construe.toString(cronExp));\n      this.job = new CronJob(\n        cronExp,\n        () => {\n          this.setOutputData(0, true);\n          this.timeoutFunc = setTimeout(() => {\n            this.setOutputData(0, false);\n          }, 500);\n          //get next job\n          let nextJobs = this.job.nextDates(1);\n          this.setOutputData(4, this.jsonataQuery(nextJobs));\n        },\n        null,\n        null,\n        timezone,\n      );\n      setTimeout(function() {}, 500);\n      this.setOutputData(1, 'CRON job started');\n      this.job.start();\n      let nextJobs = this.job.nextDates(1);\n      this.setOutputData(4, this.jsonataQuery(nextJobs));\n    } catch (err) {\n      this.setOutputData(1, err);\n    }\n  }\n}\nContainer.registerNodeType('time/cron-weekly', CronWeeklyNode);\n","import { isNull } from '../../../utils/helper';\nimport { Container } from '../../container';\nimport { Node } from '../../node';\nimport { NodeSetting, SettingType, Type } from '../../node-io';\n\nconst CronJob = require('cron').CronJob;\nconst jsonata = require('jsonata');\nconst construe = require('cronstrue');\nconst cronValidator = require('cron-validator');\nimport { NODE_INFO } from '../../node-info';\n\nexport class CronExpressionNode extends Node {\n  job = null;\n  jobCronExp = '';\n  timeoutFunc;\n  constructor() {\n    super();\n    this.title = NODE_INFO.time[\"cron-expression\"].title;\n    this.description = NODE_INFO.time[\"cron-expression\"].description;\n    this.addInputWithSettings('enable', Type.BOOLEAN, true, 'Enable', false);\n    this.addInputWithSettings('cronExpression', Type.STRING, '', 'Cron Expression');\n    this.addOutput('output', Type.BOOLEAN);\n    this.addOutput('info', Type.STRING);\n    this.addOutput('cronDescription', Type.STRING);\n    this.addOutput('nextExecution', Type.STRING);\n    this.settings['timezone'] = NodeSetting.create({\n      description: 'Enter the cron time zone',\n      value: 'Australia/Sydney',\n      type: SettingType.STRING,\n    });\n  }\n\n  onAdded() {\n    clearInterval(this.timeoutFunc);\n    this.setOutputData(0, false);\n    this.onAfterSettingsChange();\n  }\n\n  onAfterSettingsChange() {\n    this.onInputUpdated();\n  }\n\n  onRemoved() {\n    //remove the job on delete of the node\n    if (this.job) this.job.stop();\n  }\n\n  jsonataQuery(nextJobs) {\n    //use jsonata to filter the next scheduled time\n    let expression = jsonata('_d');\n    return expression.evaluate(nextJobs);\n  }\n\n  onInputUpdated() {\n    const enable = this.getInputData(0);\n    const cronExp = this.getInputData(1);\n    const valid = cronValidator.isValidCron(cronExp);\n    // console.log('valid?', valid)\n    if (!enable || !valid) {\n      if (!valid) {\n        this.setOutputData(1, 'invalid CRON Expression');\n        // console.log('I set the info')\n      }\n      else this.setOutputData(1, 'CRON job stopped');\n      try {\n        if (this.job) this.job.stop();\n      } catch (err) {\n        // console.log('err', err)\n        this.setOutputData(1, err);\n      }\n      this.job = null;\n      this.jobCronExp = '';\n      this.setOutputData(0, false, true);\n      this.setOutputData(2, null, true);\n      this.setOutputData(3, null, true);\n      return;\n    }\n\n    const timezone = this.settings['timezone'].value;\n    if (this.job && cronExp !== this.jobCronExp) {\n      this.setOutputData(1, 'CRON job stopped');\n      this.job.stop();\n      this.job = null;\n      this.jobCronExp = '';\n    }\n    try {\n      this.jobCronExp = cronExp;\n      this.setOutputData(2, construe.toString(cronExp));\n      this.job = new CronJob(\n        cronExp,\n        () => {\n          this.setOutputData(0, true);\n          this.timeoutFunc = setTimeout(() => {\n            this.setOutputData(0, false);\n          }, 500);\n          //get next job\n          if (isNull(this.job)) return\n          let nextJobs = this.job.nextDates(1);\n          this.setOutputData(3, this.jsonataQuery(nextJobs));\n        },\n        null,\n        null,\n        timezone,\n      );\n      setTimeout(function () { }, 500);\n      this.setOutputData(1, 'CRON job started');\n      this.job.start();\n      let nextJobs = this.job.nextDates(1);\n      this.setOutputData(3, this.jsonataQuery(nextJobs));\n    } catch (err) {\n      this.setOutputData(1, err);\n    }\n  }\n}\nContainer.registerNodeType('time/cron-expression', CronExpressionNode);\n","module.exports = require(\"cron-validator\");","import * as moment from 'moment';\nimport { Container } from '../../container';\nimport { Node } from '../../node';\nimport { NODE_INFO } from '../../node-info';\nimport { NodeSetting, SettingType, Type } from '../../node-io';\n\nexport class TimestampGeneratorNode extends Node {\n\n  constructor() {\n    super();\n\n    this.title = NODE_INFO.time[\"timestamp-generator\"].title;\n    this.description =\n    `## Description\\n ` +\n    NODE_INFO.time[\"timestamp-generator\"].description +` \\n `+\n    `## Inputs\\n ` +\n    ` The an active input a timestamp will be generated based of the device time \\n `+\n    `## Outputs (return data type is ***JSON***)\\n ` +\n    ` ***date-string*** will return the timestamp: **\"2019-08-31T11:54:27+10:00\" ***\\n `+\n    ` ***date-unix*** will return the timestamp: **1598838867***\\n `+\n    ` ***date-format*** will return the time that is formatted as per moment js format options https://momentjs.com/docs/#/displaying/format/*\\n `+\n    `### Formatting options examples\\n ` +\n    `-ENTER in settings\t***LT*** with return 8:30 PM\\n ` +\n    `-ENTER in settings\t***LTS*** with return 8:30:25 PM\\n ` +\n    `-ENTER in settings\t***LLLL*** with return \tThursday, September 4, 1986 8:30 PM\\n `\n    this.addInput('input', Type.ANY);\n    this.addOutput('date-string', Type.STRING);\n    this.addOutput('date-unix', Type.STRING);\n    this.addOutput('date-format', Type.STRING);\n    this.settings['format'] = NodeSetting.create({\n      description: 'Formatting options',\n      value: \"x\",\n      type: SettingType.STRING,\n    });\n  }\n\n  onAfterSettingsChange() {\n    // this.onInputUpdated()\n  }\n\n  onInputUpdated() {\n    const format = this.settings['format'].value\n    let date = moment()\n    this.setOutputData(0, date.format());\n    this.setOutputData(1, date.unix());\n    this.setOutputData(2, date.format(format));\n  }\n\n\n\n}\nContainer.registerNodeType('time/timestamp-generator', TimestampGeneratorNode);\n","import { Container } from '../../container';\nimport { Node } from '../../node';\nimport { NodeSetting, SettingType, Type } from '../../node-io';\nimport TimeUtils from '../../utils/time-utils';\nimport { NODE_INFO } from '../../node-info';\n\nclass COVNode extends Node {\n  lastValue;\n  timeoutFunc;\n\n  constructor() {\n    super();\n    this.title = NODE_INFO.trigger[\"change-of-value\"].title;\n    this.description = NODE_INFO.trigger[\"change-of-value\"].description;\n    this.addInput('input', Type.ANY);\n    this.addInputWithSettings('interval', Type.NUMBER, 1, 'Interval');\n    this.addInputWithSettings('threshold', Type.NUMBER, 0, 'COV Threshold');\n    this.addOutput('output', Type.BOOLEAN);\n    this.settings['time'] = NodeSetting.create({\n      description: 'Units',\n      type: SettingType.DROPDOWN,\n      config: {\n        items: [\n          { value: 'milliseconds', text: 'Milliseconds' },\n          { value: 'seconds', text: 'Seconds' },\n          { value: 'minutes', text: 'Minutes' },\n          { value: 'hours', text: 'Hours' },\n        ],\n      },\n      value: 'seconds',\n    });\n    this.setSettingsConfig({\n      groups: [{ interval: { weight: 2 }, time: {} }],\n    });\n  }\n\n  onAdded() {\n \n    this.setOutputData(0, false);\n    this.inputs[1]['name'] = `[interval] (${this.settings['time'].value})`;\n  }\n  \n  onExecute(){\n    //this.onInputUpdated();\n  }\n\n  onInputUpdated() {\n    const input = this.getInputData(0);\n    const isNumber = typeof input === 'number';\n    if (this.inputs[0].updated && input !== this.lastValue) {\n      if (\n        typeof this.lastValue !== 'number' ||\n        !isNumber ||\n        (isNumber && Math.abs(input - this.lastValue) >= this.getInputData(2))\n      ) {\n        this.lastValue = input;\n        this.setOutputData(0, true);\n        const interval = TimeUtils.timeConvert(this.getInputData(1), this.settings['time'].value);\n        if (this.timeoutFunc) clearTimeout(this.timeoutFunc);\n        this.timeoutFunc = setTimeout(() => {\n          this.setOutputData(0, false);\n        }, interval);\n      }\n    }\n  }\n\n  onAfterSettingsChange() {\n    this.inputs[1]['name'] = `[interval] (${this.settings['time'].value})`;\n  }\n}\nContainer.registerNodeType('trigger/change-of-value', COVNode);\n","import { Container } from '../../container';\nimport { Node } from '../../node';\nimport { NODE_INFO } from '../../node-info';\nimport { NodeSetting, SettingType, Type } from '../../node-io';\nimport Utils from '../../utils';\n\nclass RandomNode extends Node {\n  state = false;\n  lastVal;\n\n  constructor() {\n    super();\n    this.title = NODE_INFO.trigger.random.title;\n    this.description = NODE_INFO.trigger.random.description;\n    this.settings['digits'] = NodeSetting.create({\n      description: 'Number of decimal places',\n      value: 3,\n      type: SettingType.NUMBER,\n    });\n    this.addInput('trigger', Type.BOOLEAN);\n    this.addInputWithSettings('max', Type.NUMBER, 1, 'Maximum Value');\n    this.addInputWithSettings('min', Type.NUMBER, 0, 'Minimum Value');\n    this.addOutput('output', Type.NUMBER);\n    this.setOutputData(0, null);\n  }\n\n  onAdded() {\n    this.onInputUpdated();\n  }\n\n  onInputUpdated() {\n    let trigger = this.getInputData(0);\n    if (trigger == null) {\n      this.lastVal = false;\n      this.setOutputData(0, null);\n      this.state = false;\n    } else if (trigger == this.lastVal) return;\n    if (trigger == true) {\n      const max = this.getInputData(1);\n      const min = this.getInputData(2);\n      this.settings['digits'].value;\n      let digits = this.settings['digits'].value;\n      let result = Math.random() * (max - min) + min;\n      result = Utils.toFixedNumber(result, digits);\n      this.setOutputData(0, result);\n    }\n    this.lastVal = trigger;\n  }\n}\nContainer.registerNodeType('trigger/random', RandomNode);\n","import { Container } from '../../container';\nimport { Node } from '../../node';\nimport { NODE_INFO } from '../../node-info';\nimport { Type } from '../../node-io';\n\nexport class TriggeredInjectNode extends Node {\n  lastTrigger;\n\n  constructor() {\n    super();\n    this.title = NODE_INFO.trigger.inject.title;\n    this.description = NODE_INFO.trigger.inject.description;\n    this.addInputWithSettings('enable', Type.BOOLEAN, true, 'Enable');\n    this.addInputWithSettings('message', Type.STRING, 'true', 'Message');\n    this.addInput('trigger', Type.BOOLEAN);\n    this.addOutput('output', Type.BOOLEAN);\n  }\n\n  onCreated() {\n    this.lastTrigger = false;\n  }\n\n  onAdded() {\n    const enable = this.getInputData(0);\n    if (!enable) {\n      this.setOutputData(0, null);\n      return;\n    }\n  }\n\n  onInputUpdated() {\n    const enable = this.getInputData(0);\n    if (!enable) {\n      this.setOutputData(0, null, true);\n      return;\n    }\n    let trigger = this.getInputData(2);\n    if (trigger && !this.lastTrigger) {\n      const message = this.getInputData(1);\n      this.setOutputData(0, message, false);\n    }\n    this.lastTrigger = trigger;\n  }\n\n  onAfterSettingsChange() {}\n}\nContainer.registerNodeType('trigger/inject', TriggeredInjectNode);\n","import { Container } from '../../container';\nimport { Node } from '../../node';\nimport { NodeSetting, SettingType, Type } from '../../node-io';\nimport TimeUtils from '../../utils/time-utils';\nimport { NODE_INFO } from '../../node-info';\n\nexport class InjectNode extends Node {\n  lastInterval = 1000;\n  runState: boolean = true;\n  timeoutFunc;\n\n  constructor() {\n    super();\n    this.title = NODE_INFO.trigger[\"interval-inject\"].title;\n    this.description = NODE_INFO.trigger[\"interval-inject\"].description;\n    this.addInputWithSettings('enable', Type.BOOLEAN, true, 'Enable');\n    this.addInputWithSettings('message', Type.ANY, 'true', 'Message');\n    this.addInputWithSettings('interval', Type.NUMBER, 1, 'Interval');\n    this.addOutput('output', Type.BOOLEAN);\n    this.settings['time'] = NodeSetting.create({\n      description: 'Units',\n      type: SettingType.DROPDOWN,\n      config: {\n        items: [\n          { value: 'milliseconds', text: 'Milliseconds' },\n          { value: 'seconds', text: 'Seconds' },\n          { value: 'minutes', text: 'Minutes' },\n          { value: 'hours', text: 'Hours' },\n        ],\n      },\n      value: 'seconds',\n    });\n    this.setSettingsConfig({\n      groups: [{ interval: { weight: 2 }, time: {} }],\n    });\n  }\n\n  onAdded() {\n    clearInterval(this.timeoutFunc);\n    this.inputs[2]['name'] = `[interval] (${this.settings['time'].value})`;\n    const enable = this.getInputData(0);\n    if (!enable) {\n      this.setOutputData(0, null);\n      this.runState = false;\n      return;\n    }\n    let interval = this.getInputData(2);\n    interval = TimeUtils.timeConvert(interval, this.settings['time'].value);\n    this.timeoutFunc = setInterval(() => {\n      const message = this.getInputData(1);\n      this.setOutputData(0, message);\n    }, interval);\n    this.onInputUpdated();\n  }\n\n  onInputUpdated() {\n    const enable = this.getInputData(0);\n    if (!enable && this.runState) {\n      clearInterval(this.timeoutFunc);\n      this.setOutputData(0, null, true);\n      this.runState = false;\n      return;\n    } else if (!enable && !this.runState) {\n      this.setOutputData(0, null, true);\n      this.runState = false;\n      return;\n    } else if (enable) {\n      let interval = this.getInputData(2);\n      interval = TimeUtils.timeConvert(interval, this.settings['time'].value);\n      if (this.runState) {\n        if (interval != this.lastInterval) {\n          this.lastInterval = interval;\n          clearInterval(this.timeoutFunc);\n          this.timeoutFunc = setInterval(() => {\n            const message = this.getInputData(1);\n            this.setOutputData(0, message);\n          }, interval);\n        }\n        return;\n      } else if (!this.runState) {\n        this.runState = true;\n        this.timeoutFunc = setInterval(() => {\n          const message = this.getInputData(1);\n          this.setOutputData(0, message);\n        }, interval);\n      }\n    }\n  }\n\n  onAfterSettingsChange() {\n    this.inputs[2]['name'] = `[interval] (${this.settings['time'].value})`;\n    this.onInputUpdated();\n  }\n}\nContainer.registerNodeType('trigger/interval-inject', InjectNode);\n","import { Container } from '../../container';\nimport { Node } from '../../node';\nimport { NODE_INFO } from '../../node-info';\nimport { NodeSetting, SettingType, Type } from '../../node-io';\nimport TimeUtils from '../../utils/time-utils';\n\nexport class TimeIteratorNode extends Node {\n  state: boolean = false;\n  runState: boolean = true;\n  complete: boolean = false;\n  lastStart: boolean = false;\n  lastStop: boolean = false;\n  timeoutFunc;\n  count = 0;\n  reqInterval = null;\n  reqIterations = null;\n\n  constructor() {\n    super();\n    this.title = NODE_INFO.trigger.iterator.title;\n    this.description = NODE_INFO.trigger.iterator.description;\n    this.addInputWithSettings('interval', Type.NUMBER, 10, 'Interval', false);\n    this.addInputWithSettings('iterations', Type.NUMBER, 5, 'Iterations', false);\n    this.addInput('start', Type.BOOLEAN);\n    this.addInput('stop', Type.BOOLEAN);\n    this.addOutput('output', Type.BOOLEAN);\n    this.addOutput('complete', Type.BOOLEAN);\n    this.addOutput('count', Type.NUMBER);\n    this.settings['time'] = NodeSetting.create({\n      description: 'Units',\n      type: SettingType.DROPDOWN,\n      config: {\n        items: [\n          { value: 'milliseconds', text: 'Milliseconds' },\n          { value: 'seconds', text: 'Seconds' },\n          { value: 'minutes', text: 'Minutes' },\n          { value: 'hours', text: 'Hours' },\n        ],\n      },\n      value: 'seconds',\n    });\n    this.setSettingsConfig({\n      groups: [{ interval: { weight: 2 }, time: {} }],\n    });\n    this.settings['false'] = NodeSetting.create({\n      description: 'Generate False',\n      value: true,\n      type: SettingType.BOOLEAN,\n    });\n  }\n\n  onAdded() {\n    clearInterval(this.timeoutFunc);\n    this.setOutputData(0, false);\n    this.setOutputData(1, false);\n    this.inputs[0]['name'] = `[interval] (${this.settings['time'].value})`;\n    this.lastStart = false;\n    this.lastStop = false;\n    this.complete = true;\n    this.count = 0;\n    this.onInputUpdated();\n  }\n\n  start() {\n    this.runState = true;\n    if (this.settings['false'].value) {\n      this.timeoutFunc = setInterval(() => {\n        if (this.state == true) {\n          this.state = false;\n          this.setOutputData(0, false);\n          if (this.count >= this.reqIterations) {\n            clearInterval(this.timeoutFunc);\n            this.setOutputData(1, false);\n            this.complete = true;\n            this.runState = false;\n          }\n        } else {\n          this.state = true;\n          this.setOutputData(0, true);\n          this.count++;\n          this.setOutputData(2, this.count);\n        }\n      }, this.reqInterval / (this.reqIterations * 2 - 1));\n    } else {\n      this.timeoutFunc = setInterval(() => {\n        this.state = true;\n        this.setOutputData(0, true);\n        this.count++;\n        this.setOutputData(2, this.count);\n        if (this.count >= this.reqIterations) {\n          clearInterval(this.timeoutFunc);\n          this.complete = true;\n          this.runState = false;\n        }\n      }, this.reqInterval / (this.reqIterations - 1));\n    }\n  }\n\n  onInputUpdated() {\n    let stop = this.getInputData(3);\n    if (stop && !this.lastStop && !this.complete) {\n      this.lastStop = stop;\n      if (this.settings['false'].value) {\n        this.state = false;\n        this.setOutputData(0, false);\n      }\n      clearInterval(this.timeoutFunc);\n      this.runState = false;\n      return;\n    }\n\n    if (!stop && this.lastStop && !this.complete) {\n      this.lastStop = stop;\n      this.start();\n      return;\n    }\n    this.lastStop = stop;\n\n    let start = this.getInputData(2);\n    if (start && !this.lastStart) {\n      this.lastStart = start;\n      clearInterval(this.timeoutFunc);\n      this.count = 0;\n      if (this.settings['false'].value) {\n        this.state = false;\n        this.setOutputData(0, false);\n      }\n      let interval = this.getInputData(0);\n      interval = TimeUtils.timeConvert(interval, this.settings['time'].value);\n      const iterations = this.getInputData(1);\n      if (iterations <= 0 || interval <= 0) {\n        this.runState = false;\n        return;\n      }\n      this.reqInterval = interval;\n      this.reqIterations = iterations;\n      this.setOutputData(0, true);\n      this.state = true;\n      this.complete = false;\n      this.count++;\n      this.setOutputData(2, this.count);\n      if (stop) {\n        if (this.settings['false'].value) {\n          setTimeout(() => {\n            this.runState = false;\n            this.state = false;\n            this.setOutputData(0, false);\n          }, interval / (iterations * 2 - 1));\n          return;\n        }\n        this.runState = false;\n        return;\n      } else this.start();\n    }\n    this.lastStart = start;\n  }\n\n  onAfterSettingsChange() {\n    this.inputs[0]['name'] = `[interval] (${this.settings['time'].value})`;\n    this.onInputUpdated();\n  }\n}\nContainer.registerNodeType('trigger/iterator', TimeIteratorNode);\n","import { Container } from '../../container';\nimport { Node } from '../../node';\nimport { Type } from '../../node-io';\nimport TimeUtils from '../../utils/time-utils';\nimport { NODE_INFO } from '../../node-info';\n\nclass ScheduleAfterhoursOffWidgetNode extends Node {\n  currentMode: string = 'SCHEDULE';\n  remainingRuntime: number = 0;\n  AHRuntime: number;\n  timeoutFunc;\n  updateInterval: number = 5000;\n\n  constructor() {\n    super();\n    this.title = NODE_INFO.widget[\"schedule-afterhours-off\"].title;\n    this.description = NODE_INFO.widget[\"schedule-afterhours-off\"].description;\n    this.addInput('modeInput', Type.STRING);\n    this.addInput('scheduleInput', Type.BOOLEAN);\n    this.addInput('scheduleNextStop', Type.NUMBER);\n    this.addInputWithSettings('AH duration (mins)', Type.NUMBER, 120, 'Afterhours Duration (minutes)');\n    this.addOutput('modeOutput', Type.STRING);\n    this.addOutput('enableOutput', Type.BOOLEAN);\n    this.addOutput('remainingRuntime (ms)', Type.NUMBER);\n    this.AHRuntime = TimeUtils.timeConvert(120, 'minutes');\n  }\n\n  onCreated() {\n    this.currentMode = 'OFF';\n    this.onInputUpdated();\n  }\n\n  onAdded() {\n    this.currentMode = 'OFF';\n    this.onInputUpdated();\n  }\n\n  onInputUpdated() {\n    const modeInput = this.getInputData(0);\n    if (modeInput == null) {\n      this.currentMode = null;\n      this.setOutputData(0, '');\n      this.setOutputData(1, null);\n      if (this.timeoutFunc) clearInterval(this.timeoutFunc);\n      this.remainingRuntime = 0;\n      this.setOutputData(2, null);\n      return;\n    } else if (modeInput == 'OFF') {\n      this.currentMode = 'OFF';\n      this.setOutputData(0, 'OFF');\n      this.setOutputData(1, false);\n      if (this.timeoutFunc) clearInterval(this.timeoutFunc);\n      this.remainingRuntime = 0;\n      this.setOutputData(2, 0);\n      return;\n    } else if (modeInput == 'SCHEDULE' && this.currentMode !== modeInput) {\n      this.currentMode = 'SCHEDULE';\n      this.setOutputData(0, 'SCHEDULE');\n      if (this.getInputData(1)) this.startSchedule();\n      else {\n        if (this.timeoutFunc) clearInterval(this.timeoutFunc);\n        this.setOutputData(1, false);\n        this.setOutputData(2, 0);\n      }\n    } else if (modeInput == 'AFTERHOURS' && this.currentMode !== modeInput) {\n      this.startAfterhours();\n    }\n    if (this.currentMode === 'SCHEDULE') {\n      const schedInput = this.getInputData(1);\n      if(!schedInput) this.setOutputData(2, 0);\n      if (this.inputs[1].updated) {\n        if (schedInput) {\n          this.setOutputData(1, true);\n          this.startSchedule();\n        } else {\n          this.setOutputData(1, false);\n          if (this.timeoutFunc) clearInterval(this.timeoutFunc);\n          this.setOutputData(2, 0);\n        }\n      }\n      if (this.getInputData(2) == null) this.setOutputData(2, null);\n      else if (this.inputs[2].updated) {\n        const nextStop = this.getInputData(2);\n        if (nextStop) this.setOutputData(2, nextStop - Date.now());\n      }\n    } else if (\n      TimeUtils.timeConvert(this.getInputData(3), 'minutes') !== this.AHRuntime &&\n      this.currentMode === 'AFTERHOURS'\n    ) {\n      this.startAfterhours();\n    }\n  }\n\n  startSchedule() {\n    if (this.timeoutFunc) clearInterval(this.timeoutFunc);\n    const nextStop = this.getInputData(2);\n    if (nextStop) {\n      this.remainingRuntime = nextStop - Date.now();\n      this.setOutputData(2, this.remainingRuntime);\n      this.timeoutFunc = setInterval(() => {\n        this.remainingRuntime -= this.updateInterval;\n        this.setOutputData(2, this.remainingRuntime);\n      }, this.updateInterval);\n    } else this.setOutputData(2, null);\n    this.setOutputData(1, true);\n  }\n\n  startAfterhours() {\n    this.currentMode = 'AFTERHOURS';\n    this.setOutputData(0, 'AFTERHOURS');\n    this.setOutputData(1, true);\n    clearInterval(this.timeoutFunc);\n    const AHDuration = TimeUtils.timeConvert(this.getInputData(3) || 120, 'minutes');\n    this.AHRuntime = AHDuration;\n    this.remainingRuntime = AHDuration;\n    this.setOutputData(2, AHDuration);\n    this.timeoutFunc = setInterval(() => {\n      this.remainingRuntime -= this.updateInterval;\n      if (this.remainingRuntime <= 0) {\n        this.setOutputData(1, false);\n        this.setOutputData(2, 0);\n        this.currentMode = 'SCHEDULE';\n        this.setOutputData(0, 'SCHEDULE');\n        clearInterval(this.timeoutFunc);\n        if (this.getInputData(1)) this.startSchedule();\n        return;\n      }\n      this.setOutputData(2, this.remainingRuntime);\n    }, this.updateInterval);\n  }\n\n  onAfterSettingsChange() {\n    this.onInputUpdated();\n  }\n}\nContainer.registerNodeType('widget/schedule-afterhours-off', ScheduleAfterhoursOffWidgetNode);\n","import { Container } from '../../container';\nimport { Node } from '../../node';\nimport { NodeSetting, SettingType, Type } from '../../node-io';\nimport TimeUtils from '../../utils/time-utils';\nimport { NODE_INFO } from '../../node-info';\n\nclass SchedulePrestartFixedNode extends Node {\n  enabled;\n  nextStart;\n\n  constructor() {\n    super();\n    this.title = NODE_INFO.widget[\"schedule-prestart-fixed\"].title;\n    this.description = NODE_INFO.widget[\"schedule-prestart-fixed\"].description;\n    this.addInputWithSettings('enable', Type.BOOLEAN, true, 'Enable');\n    this.addInput('temp', Type.NUMBER);\n    this.addInput('SP', Type.NUMBER);\n    this.addInput('scheduleNextStart', Type.NUMBER);\n    this.addInput('reset', Type.NUMBER);\n    this.addOutput('output', Type.STRING);\n\n    this.settings['condition1_range1'] = NodeSetting.create({\n      description: 'temp > (SP + ?):',\n      value: 1,\n      type: SettingType.NUMBER,\n    });\n    this.settings['condition1_range2'] = NodeSetting.create({\n      description: 'temp <= (SP + ?)',\n      value: 2.5,\n      type: SettingType.NUMBER,\n    });\n    this.settings['condition1_time'] = NodeSetting.create({\n      description: 'Prestart Time (Mins)',\n      value: 20,\n      type: SettingType.NUMBER,\n    });\n\n    this.settings['condition2_range1'] = NodeSetting.create({\n      description: 'temp > (SP + ?):',\n      value: 2.5,\n      type: SettingType.NUMBER,\n    });\n    this.settings['condition2_range2'] = NodeSetting.create({\n      description: 'temp <= (SP + ?)',\n      value: 5,\n      type: SettingType.NUMBER,\n    });\n    this.settings['condition2_time'] = NodeSetting.create({\n      description: 'Prestart Time (Mins)',\n      value: 40,\n      type: SettingType.NUMBER,\n    });\n\n    this.settings['condition3_range1'] = NodeSetting.create({\n      description: 'temp > (SP + ?):',\n      value: 5,\n      type: SettingType.NUMBER,\n    });\n    this.settings['condition3_range2'] = NodeSetting.create({\n      description: 'temp <= (SP + ?)',\n      value: 100,\n      type: SettingType.NUMBER,\n    });\n    this.settings['condition3_time'] = NodeSetting.create({\n      description: 'Prestart Time (Mins)',\n      value: 60,\n      type: SettingType.NUMBER,\n    });\n\n    this.settings['condition4_range1'] = NodeSetting.create({\n      description: 'temp > (SP + ?):',\n      value: null,\n      type: SettingType.NUMBER,\n    });\n    this.settings['condition4_range2'] = NodeSetting.create({\n      description: 'temp <= (SP + ?)',\n      value: null,\n      type: SettingType.NUMBER,\n    });\n    this.settings['condition4_time'] = NodeSetting.create({\n      description: 'Prestart Time (Mins)',\n      value: null,\n      type: SettingType.NUMBER,\n    });\n\n    this.settings['condition5_range1'] = NodeSetting.create({\n      description: 'temp > (SP + ?):',\n      value: null,\n      type: SettingType.NUMBER,\n    });\n    this.settings['condition5_range2'] = NodeSetting.create({\n      description: 'temp <= (SP + ?)',\n      value: null,\n      type: SettingType.NUMBER,\n    });\n    this.settings['condition5_time'] = NodeSetting.create({\n      description: 'Prestart Time (Mins)',\n      value: null,\n      type: SettingType.NUMBER,\n    });\n\n    this.settings['condition6_range1'] = NodeSetting.create({\n      description: 'temp < (SP + ?):',\n      value: -1,\n      type: SettingType.NUMBER,\n    });\n    this.settings['condition6_range2'] = NodeSetting.create({\n      description: 'temp >= (SP + ?)',\n      value: -2.5,\n      type: SettingType.NUMBER,\n    });\n    this.settings['condition6_time'] = NodeSetting.create({\n      description: 'Prestart Time (Mins)',\n      value: 30,\n      type: SettingType.NUMBER,\n    });\n\n    this.settings['condition7_range1'] = NodeSetting.create({\n      description: 'temp < (SP + ?):',\n      value: -2.5,\n      type: SettingType.NUMBER,\n    });\n    this.settings['condition7_range2'] = NodeSetting.create({\n      description: 'temp >= (SP + ?)',\n      value: -5,\n      type: SettingType.NUMBER,\n    });\n    this.settings['condition7_time'] = NodeSetting.create({\n      description: 'Prestart Time (Mins)',\n      value: 40,\n      type: SettingType.NUMBER,\n    });\n\n    this.settings['condition8_range1'] = NodeSetting.create({\n      description: 'temp < (SP + ?):',\n      value: -5,\n      type: SettingType.NUMBER,\n    });\n    this.settings['condition8_range2'] = NodeSetting.create({\n      description: 'temp >= (SP + ?)',\n      value: -100,\n      type: SettingType.NUMBER,\n    });\n    this.settings['condition8_time'] = NodeSetting.create({\n      description: 'Prestart Time (Mins)',\n      value: 60,\n      type: SettingType.NUMBER,\n    });\n\n    this.settings['condition9_range1'] = NodeSetting.create({\n      description: 'temp < (SP + ?):',\n      value: null,\n      type: SettingType.NUMBER,\n    });\n    this.settings['condition9_range2'] = NodeSetting.create({\n      description: 'temp >= (SP + ?)',\n      value: null,\n      type: SettingType.NUMBER,\n    });\n    this.settings['condition9_time'] = NodeSetting.create({\n      description: 'Prestart Time (Mins)',\n      value: null,\n      type: SettingType.NUMBER,\n    });\n\n    this.settings['condition10_range1'] = NodeSetting.create({\n      description: 'temp < (SP + ?):',\n      value: null,\n      type: SettingType.NUMBER,\n    });\n    this.settings['condition10_range2'] = NodeSetting.create({\n      description: 'temp >= (SP + ?)',\n      value: null,\n      type: SettingType.NUMBER,\n    });\n    this.settings['condition10_time'] = NodeSetting.create({\n      description: 'Prestart Time (Mins)',\n      value: null,\n      type: SettingType.NUMBER,\n    });\n\n    this.setSettingsConfig({\n      groups: [\n        { condition1_range1: {}, condition1_range2: {}, condition1_time: {} },\n        { condition2_range1: {}, condition2_range2: {}, condition2_time: {} },\n        { condition3_range1: {}, condition3_range2: {}, condition3_time: {} },\n        { condition4_range1: {}, condition4_range2: {}, condition4_time: {} },\n        { condition5_range1: {}, condition5_range2: {}, condition5_time: {} },\n        { condition6_range1: {}, condition6_range2: {}, condition6_time: {} },\n        { condition7_range1: {}, condition7_range2: {}, condition7_time: {} },\n        { condition8_range1: {}, condition8_range2: {}, condition8_time: {} },\n        { condition9_range1: {}, condition9_range2: {}, condition9_time: {} },\n        { condition10_range1: {}, condition10_range2: {}, condition10_time: {} },\n      ],\n    });\n  }\n\n  onCreated() {\n    this.enabled = false;\n    this.EXECUTE_INTERVAL = 30000;\n  }\n\n  onAdded() {\n    this.EXECUTE_INTERVAL = 30000;\n    this.onInputUpdated();\n  }\n\n  onAfterSettingsChange() {\n    this.onInputUpdated();\n    this.onExecute();\n  }\n\n  onExecute() {\n    const now = new Date().valueOf();\n    const enable = this.getInputData(0);\n    if (!enable || this.nextStart == null || this.nextStart - now < 0) {\n      this.setOutputData(0, false);\n      this.enabled = false;\n      return;\n    }\n    if (this.enabled) return;\n    const temp = this.getInputData(1);\n    const setpoint = this.getInputData(2);\n    if (temp == null || setpoint == null) return;\n    for (var i = 1; i <= 10; i++) {\n      var fromRange = this.settings[`condition${i}_range1`].value;\n      var toRange = this.settings[`condition${i}_range2`].value;\n      var time = this.settings[`condition${i}_time`].value;\n      if (fromRange == null || toRange == null || time == null) continue;\n      time = TimeUtils.timeConvert(time, 'minutes');\n      if (this.nextStart - now <= time) {\n        if (i <= 5 && temp > setpoint + fromRange && temp <= setpoint + toRange) {\n          this.enabled = true;\n          this.setOutputData(0, true);\n          return;\n        }\n        if (i > 5 && temp < setpoint + fromRange && temp >= setpoint + toRange) {\n          this.enabled = true;\n          this.setOutputData(0, true);\n          return;\n        }\n      }\n    }\n  }\n\n  onInputUpdated() {\n    const enable = this.getInputData(0);\n    if (!enable) {\n      this.setOutputData(0, false);\n      this.enabled = false;\n      return;\n    }\n    const reset = this.getInputData(4);\n    if (reset && this.inputs[4].updated) {\n      this.enabled = false;\n      this.setOutputData(0, false);\n    }\n    const nextStart = this.getInputData(3);\n    if (nextStart == null || nextStart !== this.nextStart) {\n      this.nextStart = nextStart;\n      this.setOutputData(0, false);\n      this.enabled = false;\n    }\n  }\n}\nContainer.registerNodeType('widget/schedule-prestart-fixed', SchedulePrestartFixedNode);\n","import { UNKNOWN_NODE } from '../../constants';\nimport { Container } from '../../container';\nimport { UnknownNode } from './unknown';\n\nContainer.registerNodeType(UNKNOWN_NODE, UnknownNode, null, false);\n","import { Node } from '../../node';\nimport { NODE_INFO } from '../../node-info';\n\nexport class UnknownNode extends Node {\n  constructor() {\n    super();\n    this.title = NODE_INFO.unknown.unknown.title;\n    this.description = NODE_INFO.unknown.unknown.description;\n  }\n}\n","/**\n * Created by Derwish (derwish.pro@gmail.com) on 16.02.2017.\n * License: http://www.gnu.org/licenses/gpl-3.0.txt\n */\nimport { Node } from '../nodes/node';\nimport { SerializedNode } from '../nodes/node-interface';\nimport { UiPanel } from '../server/dashboard';\nimport { db_logger as logger } from '../utils/loggers';\nimport { Database } from './database';\nimport AuthUserDatabase from './database/AuthUserDatabase';\nimport DashboardDatabase from './database/DashboardDatabase';\nimport HistorianDatabase from './database/HistorianDatabase';\nimport NodeDatabase from './database/NodeDatabase';\nimport ScheduleDatabase from './database/ScheduleDatabase';\nimport UserDatabase from './database/UserDatabase';\nimport AuthUserDataSource from './datasource/AuthUserDataSource';\nimport DashboardDataSource from './datasource/DashboardDataSource';\nimport HistorianDataSource from './datasource/HistorianDataSource';\nimport NodeDataSource from './datasource/NodeDataSource';\nimport ScheduleDataSource from './datasource/ScheduleDataSource';\nimport UserDataSource from './datasource/UserDataSource';\nimport { AuthUser } from './models/AuthUser';\nimport { History } from './models/historian';\nimport { Schedule } from './models/schedule';\nimport { User } from './models/user';\n\nclass NeDbDatabase implements Database {\n  private static CLEANUP_INTERVAL = 5 * 60 * 1000;\n  private authUserDatabase: AuthUserDatabase;\n  private userDatabase: UserDatabase;\n  private nodeDatabase: NodeDatabase;\n  private dashboardDatabase: DashboardDatabase;\n  private scheduleDatabase: ScheduleDatabase;\n  private historianDatabase: HistorianDatabase;\n\n  constructor() {\n    this.authUserDatabase = new AuthUserDataSource();\n    this.userDatabase = new UserDataSource();\n    this.nodeDatabase = new NodeDataSource();\n    this.dashboardDatabase = new DashboardDataSource();\n    this.scheduleDatabase = new ScheduleDataSource();\n    this.historianDatabase = new HistorianDataSource();\n  }\n\n  async asyncLoadDatabase(dataPath: string, cleanUpInterval: any = NeDbDatabase.CLEANUP_INTERVAL): Promise<any> {\n    return Promise.all([this.authUserDatabase.asyncLoadDatabase(dataPath, cleanUpInterval),\n                        this.userDatabase.asyncLoadDatabase(dataPath, cleanUpInterval),\n                        this.nodeDatabase.asyncLoadDatabase(dataPath, cleanUpInterval),\n                        this.dashboardDatabase.asyncLoadDatabase(dataPath, cleanUpInterval),\n                        this.scheduleDatabase.asyncLoadDatabase(dataPath, cleanUpInterval),\n                        this.historianDatabase.asyncLoadDatabase(dataPath, cleanUpInterval)])\n                  .then(res => {\n                    logger.info(`Finish loading ${res.length} datasource`);\n                    return res;\n                  });\n  }\n\n  addUser(user: User, callback?: (err?: Error, doc?: User) => void) {\n    this.userDatabase.addUser(user, callback);\n  }\n\n  addOrUpdateUser(query: object, user: User): Promise<any> {\n    return this.userDatabase.addOrUpdateUser(query, user);\n  }\n\n  getUsers(callback?: (err?: Error, docs?: Array<User>) => void) {\n    this.userDatabase.getUsers(callback);\n  }\n\n  getUser(query: object, callback?: (err?: Error, doc?: User) => void) {\n    this.userDatabase.getUser(query, callback);\n  }\n\n  getAsyncUsers(): Promise<any> {\n    return this.userDatabase.getAsyncUsers();\n  }\n\n  updateUser(query: object, user: User, callback?: (err?: Error) => void) {\n    this.userDatabase.updateUser(query, user);\n  }\n\n  getUsersCount(callback?: (err?: Error, num?: number) => void) {\n    this.userDatabase.getUsersCount(callback);\n  }\n\n  removeUser(query: object, callback?: (err?: Error) => void) {\n    this.userDatabase.removeUser(query, callback);\n  }\n\n  dropUsers(callback?: (err?: Error) => void) {\n    this.userDatabase.dropUsers();\n  }\n\n  addNode(node: Node, callback?: (err?: Error, doc?: SerializedNode) => void) {\n    this.nodeDatabase.addNode(node, callback);\n  }\n\n  batchInsertNodes(nodes: SerializedNode[], callback?: (err?: Error, docs?: Array<SerializedNode>) => void) {\n    this.nodeDatabase.batchInsertNodes(nodes, callback);\n  }\n\n  batchDeleteNodes(query, callback?: (err?: Error, docs?: number) => void) {\n    this.nodeDatabase.batchDeleteNodes(query, callback);\n  }\n\n  getNodes(callback?: (err?: Error, docs?: Array<SerializedNode>) => void) {\n    this.nodeDatabase.getNodes(callback);\n  }\n\n  getNodeType(type: string, callback?: (err?: Error, docs?: Array<SerializedNode>) => void) {\n    this.nodeDatabase.getNodeType(type, callback);\n  }\n\n  listNodes(query, callback?: (err?: Error, docs?: Array<SerializedNode>) => void) {\n    this.nodeDatabase.listNodes(query, callback);\n  }\n\n  getNode(id: string | number, cid: string | number, callback?: (err?: Error, doc?: SerializedNode) => void) {\n    this.nodeDatabase.getNode(id, cid, callback);\n  }\n\n  updateNode(id: string | number, cid: string | number, update: any, callback?: (err?: Error) => void) {\n    this.nodeDatabase.updateNode(id, cid, update, callback);\n  }\n\n  removeNode(id: string | number, cid: string | number, callback?: (err?: Error) => void) {\n    this.nodeDatabase.removeNode(id, cid, callback);\n  }\n\n  dropNodes(callback?: (err?: Error) => void) {\n    this.nodeDatabase.dropNodes(callback);\n  }\n\n  addUiPanel(panel: UiPanel, callback?: (err?: Error, doc?: UiPanel) => void) {\n    this.dashboardDatabase.addUiPanel(panel, callback);\n  }\n\n  getUiPanels(callback?: (err?: Error, docs?: UiPanel[]) => void) {\n    this.dashboardDatabase.getUiPanels(callback);\n  }\n\n  getUiPanel(name: string, callback?: (err?: Error, doc?: UiPanel) => void) {\n    this.dashboardDatabase.getUiPanel(name, callback);\n  }\n\n  updateUiPanel(name: string, update: any, callback?: (err?: Error) => void) {\n    this.dashboardDatabase.updateUiPanel(name, update, callback);\n  }\n\n  dropUiPanels(callback?: (err?: Error) => void) {\n    this.dashboardDatabase.dropUiPanels(callback);\n  }\n\n  removeUiPanel(name: string, callback?: (err?: Error) => void) {\n    this.dashboardDatabase.removeUiPanel(name, callback);\n  }\n\n  addSchedule(schedule: Schedule, callback?: (err?: Error, doc?: Schedule) => void) {\n    this.scheduleDatabase.addSchedule(schedule, callback);\n  }\n\n  updateSchedule(query: object, schedule: Schedule, callback?: (err?: Error) => void) {\n    this.scheduleDatabase.updateSchedule(query, schedule, callback);\n  }\n\n  removeSchedule(query: object, callback?: (err?: Error) => void) {\n    this.scheduleDatabase.removeSchedule(query, callback);\n  }\n\n  //// HistorianDatabase historian history\n\n  addHistory(history: History, callback?: (err?: Error, doc?: History) => void) {\n    this.historianDatabase.addHistory(history, callback);\n  }\n\n  updateHistory(query: object, history: History, callback?: (err?: Error) => void) {\n    this.historianDatabase.updateHistory(query, history, callback);\n  }\n\n  removeHistory(query: object, callback?: (err?: Error) => void) {\n    this.historianDatabase.removeHistory(query, callback);\n  }\n\n  addAuthUser(authUser: AuthUser): Promise<AuthUser> {\n    return this.authUserDatabase.addAuthUser(authUser);\n  }\n\n  getAuthUser(): Promise<AuthUser> {\n    return this.authUserDatabase.getAuthUser();\n  }\n\n  deleteAuthUsers(): Promise<string> {\n    return this.authUserDatabase.deleteAuthUsers();\n  }\n\n  getAuthToken(authUser: AuthUser): Promise<string> {\n    return this.authUserDatabase.getAuthToken(authUser);\n  }\n\n  isAuthenticated(token: string): Promise<any> {\n    return this.authUserDatabase.isAuthenticated(token);\n  }\n\n}\n\nconst db = new NeDbDatabase();\nexport { db };\n","import config from '../../config';\nimport CryptoUtils from '../../nodes/utils/crypto-utils';\nimport { db_logger as logger } from '../../utils/loggers';\nimport AuthUserDatabase from '../database/AuthUserDatabase';\nimport { AbstractDatabase } from '../database/BaseDatabase';\nimport { AuthUser } from '../models/AuthUser';\n\nconst jwt = require('jsonwebtoken');\n\nexport default class AuthUserDataSource extends AbstractDatabase implements AuthUserDatabase {\n\n  addAuthUser(authUser: AuthUser): Promise<AuthUser> {\n    return new Promise((resolve, reject) => {\n      this.db.find({}, (err, doc: Array<AuthUser>) => {\n        if (doc.length) {\n          logger.warn('User is already inserted');\n          reject('User is already inserted');\n          return;\n        }\n        if (!config.secretKey) {\n          const error = 'Please provide secret key on environment';\n          logger.error(error);\n          reject(error);\n          return;\n        }\n        authUser.password = CryptoUtils.encrypt(authUser.password);\n        this.db.insert(authUser, (err, doc) => {\n          if (err) {\n            logger.error(err.message);\n            reject(err);\n          } else {\n            resolve(doc);\n          }\n        });\n      });\n    });\n  }\n\n  getAuthUser(): Promise<AuthUser> {\n    return new Promise((resolve, reject) => {\n      this.db.findOne({}, (err, doc) => {\n        if (err) {\n          logger.error(err.message);\n          reject(err);\n        } else {\n          resolve(doc);\n        }\n      });\n    });\n  }\n\n  deleteAuthUsers(): Promise<string> {\n    return new Promise((resolve, reject) => {\n      this.db.remove({}, { multi: true }, err => {\n        if (err) {\n          logger.error(err.message);\n          reject(err);\n        } else {\n          resolve('Successfully removed');\n        }\n      });\n    });\n  }\n\n  getAuthToken(authUser: AuthUser): Promise<string> {\n    return new Promise((resolve, reject) => {\n      this.db.findOne({ username: authUser.username }, (err, doc) => {\n        if (err) {\n          logger.error(err.message);\n          reject(err);\n        } else if (doc && CryptoUtils.decrypt(doc.password) === authUser.password) {\n          try {\n            const token = jwt.sign({ username: doc.username }, config.secretKey, { expiresIn: 18000 });\n            resolve(`${token}`);\n          } catch (e) {\n            logger.error(`Error: ${e.message}`);\n            reject(e.message);\n          }\n        } else {\n          logger.warn('Invalid Credentials');\n          reject('Invalid Credentials');\n        }\n      });\n    });\n  }\n\n  isAuthenticated(token: string): Promise<any> {\n    return new Promise((resolve, reject) => {\n      jwt.verify(token, config.secretKey, (err, decoded) => {\n        if (err) {\n          logger.error(err);\n          reject(err);\n        } else {\n          resolve(decoded);\n        }\n      });\n    });\n  }\n\n  protected dbName(): string {\n    return `auth`;\n  }\n\n}\n","module.exports = require(\"nedb\");","module.exports = require(\"jsonwebtoken\");","import { UiPanel } from '../../server/dashboard';\nimport { db_logger as logger } from '../../utils/loggers';\nimport { AbstractDatabase } from '../database/BaseDatabase';\nimport DashboardDatabase from '../database/DashboardDatabase';\n\nexport default class DashboardDataSource extends AbstractDatabase implements DashboardDatabase {\n\n  addUiPanel(panel: UiPanel, callback?: (err?: Error, doc?: UiPanel) => void) {\n    this.db.insert(panel, function (err, doc) {\n      if (err) logger.error(err.message);\n      if (callback) callback(err, doc);\n    });\n  }\n\n  getUiPanels(callback?: (err?: Error, docs?: UiPanel[]) => void) {\n    this.db.find({}, function (err, docs) {\n      if (err) logger.error(err);\n      if (callback) callback(err, docs);\n    });\n  }\n\n  getUiPanel(name: string, callback?: (err?: Error, doc?: UiPanel) => void) {\n    this.db.findOne({ name: name }, function (err, doc: any) {\n      if (err) logger.warn(err.message);\n      if (callback) callback(err, doc);\n    });\n  }\n\n  updateUiPanel(name: string, update: any, callback?: (err?: Error) => void) {\n    this.db.update({ name: name }, update, {}, function (err, updated) {\n      if (err) logger.error(err.message);\n      if (updated == 0) logger.error(`Cat't update dashboard panel [${name}]. Document not found.`);\n      if (callback) callback(err);\n    });\n  }\n\n  removeUiPanel(name: string, callback?: (err?: Error) => void) {\n    this.db.remove({ name: name }, {}, function (err, removed) {\n      if (err) logger.error(err.message);\n      if (removed == 0) logger.error('Cat\\'t remove. Document not found.');\n      if (callback) callback(err);\n    });\n  }\n\n  dropUiPanels(callback?: (err?: Error) => void) {\n    this.db.remove({}, { multi: true }, function (err) {\n      if (err) logger.error(err.message);\n      if (callback) callback(err);\n    });\n  }\n\n  protected dbName(): string {\n    return `dashboard`;\n  }\n}\n","import { db_logger as logger } from '../../utils/loggers';\nimport { AbstractDatabase } from '../database/BaseDatabase';\nimport HistorianDatabase from '../database/HistorianDatabase';\nimport { History } from '../models/historian';\n\nexport default class HistorianDataSource extends AbstractDatabase implements HistorianDatabase {\n  addHistory(history: History, callback?: (err?: Error, doc?: History) => void) {\n    this.db.insert(history, function (err, doc) {\n      if (err) logger.error(err.message);\n      if (callback) callback(err, doc);\n    });\n  }\n\n  updateHistory(\n    query: object,\n    history: History,\n    callback?: (err?: Error) => void,\n    updatedCallback?: (updated?: number) => void,\n  ) {\n    this.db.update(query, history, {}, function (err, updated) {\n      if (err) {\n        logger.error(err.message);\n      } else {\n        updatedCallback(updated);\n      }\n      if (updated == 0) logger.error(`Can't update history [${name}]. Document not found.`);\n      if (callback) callback(err);\n    });\n  }\n\n  //remove\n  removeHistory(\n    query: object,\n    callback?: (err?: Error) => void,\n    removedCallback?: (removed?: number) => void,\n  ) {\n    this.db.remove(query, {}, function (err, removed) {\n      if (err) {\n        logger.error(err.message);\n      } else {\n        removedCallback(removed);\n      }\n      if (removed == 0) logger.debug('Cat\\'t remove. History Document not found.');\n      if (callback) callback(err);\n    });\n  }\n\n  protected dbName(): string {\n    return `history`;\n  }\n}\n\n// async function find(id) {\n//     return new Promise((resolve, reject) => {\n//         try {\n//             let ab = { pntId: id };\n//             db.find({ ...ab }, (err, docs) => {\n//                 let output = [];\n//                 if (!err) {\n//                     console.logger(docs);\n//                     resolve(docs);\n//                 } else {\n//                     reject(err);\n//                 }\n//             });\n//         } catch (error) {\n//             console.logger(error);\n//         }\n//     });\n// }\n\n// async function count(id) {\n//     return new Promise((resolve, reject) => {\n//         try {\n//             let ab = { pntId: id };\n//             db.count({ ...ab }, (err, docs) => {\n//                 let output = [];\n//                 if (!err) {\n//                     console.logger(docs);\n//                     resolve(docs);\n//                 } else {\n//                     reject(err);\n//                 }\n//             });\n//         } catch (error) {\n//             console.logger(error);\n//         }\n//     });\n// }\n\n// async function add(id, obj) {\n//     return new Promise((resolve, reject) => {\n//         try {\n//             let ab = { pntId: id, ts: obj}\n//             db.insert({ ...ab }, (err, docs) => {\n//                 let output = [];\n//                 if (!err) {\n//                     console.logger(docs);\n//                     resolve(docs);\n//                 } else {\n//                     reject(err);\n//                 }\n//             });\n//         } catch (error) {\n//             console.logger(error);\n//         }\n//     });\n// }\n// //   add(123, arr)\n\n// async function deleteHis(id, hisLimit) {\n//     return new Promise((resolve, reject) => {\n//         try {\n//             let ab = { pntId: id, hisCount: { $gte: hisLimit } }\n//             db.find({ ...ab }, (err, docs) => {\n//                 let output = [];\n//                 if (!err) {\n//                     docs.forEach(element => {\n//                         db.remove({ _id: element._id }, {}, function (err, numRemoved) {\n//                             // numRemoved = 1\n//                             console.logger(numRemoved + 'num rem')\n//                         });\n//                     });\n//                     resolve(docs);\n//                 } else {\n//                     reject(err);\n//                 }\n//             });\n//         } catch (error) {\n//             console.logger(error);\n//         }\n//     });\n// }\n// //   deleteHis(123, 0)\n","import { Node } from '../../nodes/node';\nimport { SerializedNode } from '../../nodes/node-interface';\nimport { SerializableHelper } from '../../nodes/serializable';\nimport { IdGenerator } from '../../utils/id-generator';\nimport { db_logger as logger } from '../../utils/loggers';\nimport { AbstractDatabase } from '../database/BaseDatabase';\nimport NodeDatabase from '../database/NodeDatabase';\n\nexport default class NodeDataSource extends AbstractDatabase implements NodeDatabase {\n\n  addNode(node: Node, callback?: (err?: Error, doc?: SerializedNode) => void) {\n    let ser_node = SerializableHelper.serialize<SerializedNode>(node);\n    ser_node['_id'] = IdGenerator.createNodeId(ser_node.cid, ser_node.id);\n\n    this.db.insert(ser_node, function (err, doc) {\n      if (err) logger.error(err.message);\n      if (callback) callback(err, doc);\n    });\n  }\n\n  batchInsertNodes(nodes: SerializedNode[], callback?: (err?: Error, docs?: SerializedNode[]) => void) {\n    this.db.insert(nodes.map(n => {\n      n['_id'] = IdGenerator.createNodeId(n.cid, n.id);\n      return SerializableHelper.serialize<SerializedNode>(n);\n    }), function (err, doc) {\n      if (err) logger.error(err.message);\n      if (callback) callback(err, doc);\n    });\n  }\n\n  batchDeleteNodes(query, callback?: (err?: Error, docs?: number) => void) {\n    this.db.remove(query, { multi: true }, function (err, docs) {\n      if (err) logger.warn(err.message);\n      if (callback) callback(err, docs);\n    });\n  }\n\n  getNodes(callback?: (err?: Error, docs?: Array<SerializedNode>) => void) {\n    this.db.find({}, function (err, docs) {\n      if (err) logger.warn(err);\n      if (callback) callback(err, docs);\n    });\n  }\n\n  getNode(id: string | number, cid: string | number, callback?: (err?: Error, doc?: SerializedNode) => void) {\n    let _id = IdGenerator.createNodeId(cid, id);\n    this.db.findOne({ _id: _id }, function (err, doc: any) {\n      if (err) logger.warn(err.message);\n      if (callback) callback(err, doc);\n    });\n  }\n\n  getNodeType(type: string, callback?: (err?: Error, docs?: Array<SerializedNode>) => void) {\n    this.db.find({ type: type }, function (err, docs) {\n      if (err) logger.warn(err.message);\n      if (callback) callback(err, docs);\n    });\n  }\n\n  listNodes(query, callback?: (err?: Error, docs?: Array<any>) => void) {\n    this.db.find(query, function (err, docs) {\n      if (err) logger.warn(err.message);\n      if (callback) callback(err, docs);\n    });\n  }\n\n  updateNode(id: string | number, cid: string | number, update: any, callback?: (err?: Error) => void) {\n    let _id = IdGenerator.createNodeId(cid, id);\n    this.db.update({ _id: _id }, update, {}, function (err, updated) {\n      if (err) logger.error(err.message);\n      if (updated == 0) logger.warn(`Can't update node [${cid}/${id}]. Document not found.`);\n      if (callback) callback(err);\n    });\n  }\n\n  removeNode(id: string | number, cid: string | number, callback?: (err?: Error) => void) {\n    let _id = IdGenerator.createNodeId(cid, id);\n    this.db.remove({ _id: _id }, {}, function (err, removed) {\n      if (err) logger.error(err.message);\n      if (removed == 0) logger.warn(`Can't remove. Document not found.`);\n      if (callback) callback(err);\n    });\n  }\n\n  dropNodes(callback?: (err?: Error) => void) {\n    this.db.remove({}, { multi: true }, function (err) {\n      if (err) logger.error(err.message);\n      if (callback) callback(err);\n    });\n  }\n\n  protected dbName(): string {\n    return `nodes`;\n  }\n}\n","import * as NeDBDataStore from 'nedb';\nimport { db_logger as logger } from '../../utils/loggers';\nimport { AbstractDatabase } from '../database/BaseDatabase';\nimport ScheduleDatabase from '../database/ScheduleDatabase';\nimport { Schedule } from '../models/schedule';\n\nexport default class ScheduleDataSource extends AbstractDatabase implements ScheduleDatabase {\n  db: NeDBDataStore;\n\n  addSchedule(schedule: Schedule, callback?: (err?: Error, doc?: Schedule) => void) {\n    this.db.insert(schedule, function (err, doc) {\n      if (err) logger.error(err.message);\n      if (callback) callback(err, doc);\n    });\n  }\n\n  updateSchedule(\n    query: object,\n    schedule: Schedule,\n    callback?: (err?: Error) => void,\n    updatedCallback?: (updated?: number) => void,\n  ) {\n    this.db.update(query, schedule, {}, function (err, updated) {\n      if (err) {\n        logger.error(err.message);\n      } else {\n        updatedCallback(updated);\n      }\n      if (updated == 0) logger.error(`Can't update schedule [${name}]. Document not found.`);\n      if (callback) callback(err);\n    });\n  }\n\n  //remove\n  removeSchedule(\n    query: object,\n    callback?: (err?: Error) => void,\n    removedCallback?: (removed?: number) => void,\n  ) {\n    this.db.remove(query, {}, function (err, removed) {\n      if (err) {\n        logger.error(err.message);\n      } else {\n        removedCallback(removed);\n      }\n      if (removed == 0) logger.debug('Cat\\'t remove. Schedule Document not found.');\n      if (callback) callback(err);\n    });\n  }\n\n  protected dbName(): string {\n    return `schedule`;\n  }\n}\n","import { db_logger as logger } from '../../utils/loggers';\nimport { AbstractDatabase } from '../database/BaseDatabase';\nimport UserDatabase from '../database/UserDatabase';\nimport { User } from '../models/user';\n\nexport default class UserDataSource extends AbstractDatabase implements UserDatabase {\n\n  addUser(user: User, callback?: (err?: Error, doc?: User) => void) {\n    this.db.insert(user, function (err, doc) {\n      if (err) logger.error(err.message);\n      if (callback) callback(err, doc);\n    });\n  }\n\n  getUser(query: object, callback?: (err?: Error, doc?: User) => void) {\n    this.db.findOne(query, function (err, doc: any) {\n      if (err) logger.warn(err.message);\n      if (callback) callback(err, doc);\n    });\n  }\n\n  getUsers(callback?: (err?: Error, docs?: Array<User>) => void) {\n    this.db.find({}, function (err, docs) {\n      if (err) logger.error(err);\n      if (callback) callback(err, docs);\n    });\n  }\n\n  getAsyncUsers(): Promise<any> {\n    return new Promise((resolve, reject) => {\n      this.db.find({}, function (err, doc: any) {\n        if (err) {\n          logger.warn(err.message);\n          reject(err);\n        } else {\n          resolve(doc);\n        }\n      });\n    });\n  }\n\n  updateUser(query: object, user: User, callback?: (err?: Error) => void) {\n    this.db.update(query, user, {}, function (err, updated) {\n      if (err) logger.error(err.message);\n      if (updated == 0) logger.error(`Cat't update user [${name}]. Document not found.`);\n      if (callback) callback(err);\n    });\n  }\n\n  getUsersCount(callback?: (err?: Error, num?: number) => void) {\n    this.db.count({}, function (err, num) {\n      if (err) logger.warn(err.message);\n      if (callback) callback(err, num);\n    });\n  }\n\n  addOrUpdateUser(query: object, user: User): Promise<any> {\n    return new Promise((resolve, reject) => {\n      this.getUser(query, (err, usr) => {\n        if (usr) {\n          this.updateUser(query, user, err => {\n            if (err) {\n              reject(err);\n            } else {\n              resolve();\n            }\n          });\n        } else {\n          this.addUser(user, err => {\n            if (err) {\n              reject(err);\n            } else {\n              resolve();\n            }\n          });\n        }\n      });\n    });\n  }\n\n  removeUser(query: object, callback?: (err?: Error) => void) {\n    this.db.remove(query, {}, function (err, removed) {\n      if (err) logger.error(err.message);\n      if (callback) callback(err);\n    });\n  }\n\n  dropUsers(callback?: (err?: Error) => void) {\n    this.db.remove({}, { multi: true }, function (err) {\n      if (err) logger.error(err.message);\n      if (callback) callback(err);\n    });\n  }\n\n  protected dbName(): string {\n    return `users`;\n  }\n}\n"],"sourceRoot":""}